ltac:(M.monadic (
  [M.call (|
    mstore,
    [
    ]
  |), M.if (|
    M.call (|
      callvalue,
      [
      ]
    |),
    ltac:(M.monadic (
      [M.call (|
        revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,
        [
        ]
      |), ]
))
  |), M.call (|
    constructor_ERC20_403,
    [
    ]
  |), let _ :=
    M.assign (|
      [_1],
      M.call (|
        allocate_unbounded,
        [
        ]
      |)
    |) in, M.call (|
    codecopy,
    [
    ]
  |), M.call (|
    return,
    [
    ]
  |), M.function (|
    allocate_unbounded,
    [
    ],
    [
      memPtr,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [memPtr],
          M.call (|
            mload,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.call (|
        revert,
        [
        ]
      |), ]
))
  |), M.function (|
    cleanup_t_rational_20_by_1,
    [
      value,
    ],
    [
      cleaned,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [cleaned],
          value
        |) in, ]
))
  |), M.function (|
    cleanup_t_uint256,
    [
      value,
    ],
    [
      cleaned,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [cleaned],
          value
        |) in, ]
))
  |), M.function (|
    identity,
    [
      value,
    ],
    [
      ret,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [ret],
          value
        |) in, ]
))
  |), M.function (|
    convert_t_rational_20_by_1_to_t_uint256,
    [
      value,
    ],
    [
      converted,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [converted],
          M.call (|
            cleanup_t_uint256,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    constructor_ERC20_403,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [expr_34],
          M.call (|
            caller,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_35],
          Literal.number 0x14
        |) in, let _ :=
        M.assign (|
          [_2],
          M.call (|
            convert_t_rational_20_by_1_to_t_uint256,
            [
            ]
          |)
        |) in, M.call (|
        fun__mint_288,
        [
        ]
      |), ]
))
  |), M.function (|
    cleanup_t_rational_0_by_1,
    [
      value,
    ],
    [
      cleaned,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [cleaned],
          value
        |) in, ]
))
  |), M.function (|
    cleanup_t_uint160,
    [
      value,
    ],
    [
      cleaned,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [cleaned],
          M.call (|
            and,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    convert_t_rational_0_by_1_to_t_uint160,
    [
      value,
    ],
    [
      converted,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [converted],
          M.call (|
            cleanup_t_uint160,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    convert_t_rational_0_by_1_to_t_address,
    [
      value,
    ],
    [
      converted,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [converted],
          M.call (|
            convert_t_rational_0_by_1_to_t_uint160,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    cleanup_t_address,
    [
      value,
    ],
    [
      cleaned,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [cleaned],
          M.call (|
            cleanup_t_uint160,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    array_storeLengthForEncoding_t_string_memory_ptr_fromStack,
    [
      pos,
      length,
    ],
    [
      updated_pos,
    ],
    ltac:(M.monadic (
      [M.call (|
        mstore,
        [
        ]
      |), let _ :=
        M.declare (|
          [updated_pos],
          M.call (|
            add,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e,
    [
      memPtr,
    ],
    [
    ],
    ltac:(M.monadic (
      [M.call (|
        mstore,
        [
        ]
      |), ]
))
  |), M.function (|
    abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack,
    [
      pos,
    ],
    [
      end,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [pos],
          M.call (|
            array_storeLengthForEncoding_t_string_memory_ptr_fromStack,
            [
            ]
          |)
        |) in, M.call (|
        store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e,
        [
        ]
      |), let _ :=
        M.declare (|
          [end],
          M.call (|
            add,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack,
    [
      headStart,
    ],
    [
      tail,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [tail],
          M.call (|
            add,
            [
            ]
          |)
        |) in, M.call (|
        mstore,
        [
        ]
      |), let _ :=
        M.declare (|
          [tail],
          M.call (|
            abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    require_helper_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e,
    [
      condition,
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          iszero,
          [
          ]
        |),
        ltac:(M.monadic (
          [let _ :=
            M.assign (|
              [memPtr],
              M.call (|
                allocate_unbounded,
                [
                ]
              |)
            |) in, M.call (|
            mstore,
            [
            ]
          |), let _ :=
            M.assign (|
              [end],
              M.call (|
                abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack,
                [
                ]
              |)
            |) in, M.call (|
            revert,
            [
            ]
          |), ]
))
      |), ]
))
  |), M.function (|
    shift_right_0_unsigned,
    [
      value,
    ],
    [
      newValue,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [newValue],
          M.call (|
            shr,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    cleanup_from_storage_t_uint256,
    [
      value,
    ],
    [
      cleaned,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [cleaned],
          value
        |) in, ]
))
  |), M.function (|
    extract_from_storage_value_offset_0t_uint256,
    [
      slot_value,
    ],
    [
      value,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [value],
          M.call (|
            cleanup_from_storage_t_uint256,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    read_from_storage_split_offset_0_t_uint256,
    [
      slot,
    ],
    [
      value,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [value],
          M.call (|
            extract_from_storage_value_offset_0t_uint256,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    panic_error_0x11,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.call (|
        mstore,
        [
        ]
      |), M.call (|
        mstore,
        [
        ]
      |), M.call (|
        revert,
        [
        ]
      |), ]
))
  |), M.function (|
    checked_add_t_uint256,
    [
      x,
      y,
    ],
    [
      sum,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [x],
          M.call (|
            cleanup_t_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [y],
          M.call (|
            cleanup_t_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [sum],
          M.call (|
            add,
            [
            ]
          |)
        |) in, M.if (|
        M.call (|
          gt,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            panic_error_0x11,
            [
            ]
          |), ]
))
      |), ]
))
  |), M.function (|
    shift_left_0,
    [
      value,
    ],
    [
      newValue,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [newValue],
          M.call (|
            shl,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    update_byte_slice_32_shift_0,
    [
      value,
      toInsert,
    ],
    [
      result,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [mask],
          Literal.number 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
        |) in, let _ :=
        M.declare (|
          [toInsert],
          M.call (|
            shift_left_0,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [value],
          M.call (|
            and,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [result],
          M.call (|
            or,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    convert_t_uint256_to_t_uint256,
    [
      value,
    ],
    [
      converted,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [converted],
          M.call (|
            cleanup_t_uint256,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    prepare_store_t_uint256,
    [
      value,
    ],
    [
      ret,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [ret],
          value
        |) in, ]
))
  |), M.function (|
    update_storage_value_offset_0t_uint256_to_t_uint256,
    [
      slot,
      value_0,
    ],
    [
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [convertedValue_0],
          M.call (|
            convert_t_uint256_to_t_uint256,
            [
            ]
          |)
        |) in, M.call (|
        sstore,
        [
        ]
      |), ]
))
  |), M.function (|
    convert_t_uint160_to_t_uint160,
    [
      value,
    ],
    [
      converted,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [converted],
          M.call (|
            cleanup_t_uint160,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    convert_t_uint160_to_t_address,
    [
      value,
    ],
    [
      converted,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [converted],
          M.call (|
            convert_t_uint160_to_t_uint160,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    convert_t_address_to_t_address,
    [
      value,
    ],
    [
      converted,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [converted],
          M.call (|
            convert_t_uint160_to_t_address,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address,
    [
      slot,
      key,
    ],
    [
      dataSlot,
    ],
    ltac:(M.monadic (
      [M.call (|
        mstore,
        [
        ]
      |), M.call (|
        mstore,
        [
        ]
      |), let _ :=
        M.declare (|
          [dataSlot],
          M.call (|
            keccak256,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    abi_encode_t_uint256_to_t_uint256_fromStack,
    [
      value,
      pos,
    ],
    [
    ],
    ltac:(M.monadic (
      [M.call (|
        mstore,
        [
        ]
      |), ]
))
  |), M.function (|
    abi_encode_tuple_t_uint256__to_t_uint256__fromStack,
    [
      headStart,
      value0,
    ],
    [
      tail,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [tail],
          M.call (|
            add,
            [
            ]
          |)
        |) in, M.call (|
        abi_encode_t_uint256_to_t_uint256_fromStack,
        [
        ]
      |), ]
))
  |), M.function (|
    fun__mint_288,
    [
      var_account_247,
      var_value_249,
    ],
    [
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [_3],
          var_account_247
        |) in, let _ :=
        M.assign (|
          [expr_253],
          _3
        |) in, let _ :=
        M.assign (|
          [expr_256],
          Literal.number 0x00
        |) in, let _ :=
        M.assign (|
          [expr_257],
          M.call (|
            convert_t_rational_0_by_1_to_t_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_258],
          M.call (|
            iszero,
            [
            ]
          |)
        |) in, M.call (|
        require_helper_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e,
        [
        ]
      |), let _ :=
        M.assign (|
          [_4],
          M.call (|
            read_from_storage_split_offset_0_t_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_263],
          _4
        |) in, let _ :=
        M.assign (|
          [_5],
          var_value_249
        |) in, let _ :=
        M.assign (|
          [expr_264],
          _5
        |) in, let _ :=
        M.assign (|
          [expr_265],
          M.call (|
            checked_add_t_uint256,
            [
            ]
          |)
        |) in, M.call (|
        update_storage_value_offset_0t_uint256_to_t_uint256,
        [
        ]
      |), let _ :=
        M.assign (|
          [expr_266],
          expr_265
        |) in, let _ :=
        M.assign (|
          [_6_slot],
          Literal.number 0x00
        |) in, let _ :=
        M.assign (|
          [expr_271_slot],
          _6_slot
        |) in, let _ :=
        M.assign (|
          [_7],
          var_account_247
        |) in, let _ :=
        M.assign (|
          [expr_272],
          _7
        |) in, let _ :=
        M.assign (|
          [_8],
          M.call (|
            mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_9],
          M.call (|
            read_from_storage_split_offset_0_t_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_273],
          _9
        |) in, let _ :=
        M.assign (|
          [_10],
          var_value_249
        |) in, let _ :=
        M.assign (|
          [expr_274],
          _10
        |) in, let _ :=
        M.assign (|
          [expr_275],
          M.call (|
            checked_add_t_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_11_slot],
          Literal.number 0x00
        |) in, let _ :=
        M.assign (|
          [expr_268_slot],
          _11_slot
        |) in, let _ :=
        M.assign (|
          [_12],
          var_account_247
        |) in, let _ :=
        M.assign (|
          [expr_269],
          _12
        |) in, let _ :=
        M.assign (|
          [_13],
          M.call (|
            mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address,
            [
            ]
          |)
        |) in, M.call (|
        update_storage_value_offset_0t_uint256_to_t_uint256,
        [
        ]
      |), let _ :=
        M.assign (|
          [expr_276],
          expr_275
        |) in, let _ :=
        M.assign (|
          [expr_281],
          Literal.number 0x00
        |) in, let _ :=
        M.assign (|
          [expr_282],
          M.call (|
            convert_t_rational_0_by_1_to_t_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_14],
          var_account_247
        |) in, let _ :=
        M.assign (|
          [expr_283],
          _14
        |) in, let _ :=
        M.assign (|
          [_15],
          var_value_249
        |) in, let _ :=
        M.assign (|
          [expr_284],
          _15
        |) in, let _ :=
        M.assign (|
          [_16],
          Literal.number 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
        |) in, let _ :=
        M.assign (|
          [_17],
          M.call (|
            convert_t_address_to_t_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_18],
          M.call (|
            convert_t_address_to_t_address,
            [
            ]
          |)
        |) in, ltac:(M.monadic (
        [let _ :=
          M.assign (|
            [_19],
            M.call (|
              allocate_unbounded,
              [
              ]
            |)
          |) in, let _ :=
          M.assign (|
            [_20],
            M.call (|
              abi_encode_tuple_t_uint256__to_t_uint256__fromStack,
              [
              ]
            |)
          |) in, M.call (|
          log3,
          [
          ]
        |), ]
)), ]
))
  |), ]
))ltac:(M.monadic (
  [M.call (|
    mstore,
    [
    ]
  |), M.if (|
    M.call (|
      iszero,
      [
      ]
    |),
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [selector],
          M.call (|
            shift_right_224_unsigned,
            [
            ]
          |)
        |) in, M.switch (|
        selector,
        [
          M.case (|
            Literal.number 0x095ea7b3,
            ltac:(M.monadic (
              [M.call (|
                external_fun_approve_113,
                [
                ]
              |), ]
))
          |),
          M.case (|
            Literal.number 0x18160ddd,
            ltac:(M.monadic (
              [M.call (|
                external_fun_totalSupply_47,
                [
                ]
              |), ]
))
          |),
          M.case (|
            Literal.number 0x23b872dd,
            ltac:(M.monadic (
              [M.call (|
                external_fun_transferFrom_147,
                [
                ]
              |), ]
))
          |),
          M.case (|
            Literal.number 0x39509351,
            ltac:(M.monadic (
              [M.call (|
                external_fun_increaseAllowance_173,
                [
                ]
              |), ]
))
          |),
          M.case (|
            Literal.number 0x70a08231,
            ltac:(M.monadic (
              [M.call (|
                external_fun_balanceOf_59,
                [
                ]
              |), ]
))
          |),
          M.case (|
            Literal.number 0xa457c2d7,
            ltac:(M.monadic (
              [M.call (|
                external_fun_decreaseAllowance_199,
                [
                ]
              |), ]
))
          |),
          M.case (|
            Literal.number 0xa9059cbb,
            ltac:(M.monadic (
              [M.call (|
                external_fun_transfer_94,
                [
                ]
              |), ]
))
          |),
          M.case (|
            Literal.number 0xdd62ed3e,
            ltac:(M.monadic (
              [M.call (|
                external_fun_allowance_75,
                [
                ]
              |), ]
))
          |),
          M.case (|
            default,
            ltac:(M.monadic (
              []
))
          |),
        ]
      |), ]
))
  |), M.call (|
    revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74,
    [
    ]
  |), M.function (|
    shift_right_224_unsigned,
    [
      value,
    ],
    [
      newValue,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [newValue],
          M.call (|
            shr,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    allocate_unbounded,
    [
    ],
    [
      memPtr,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [memPtr],
          M.call (|
            mload,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.call (|
        revert,
        [
        ]
      |), ]
))
  |), M.function (|
    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.call (|
        revert,
        [
        ]
      |), ]
))
  |), M.function (|
    revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.call (|
        revert,
        [
        ]
      |), ]
))
  |), M.function (|
    cleanup_t_uint160,
    [
      value,
    ],
    [
      cleaned,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [cleaned],
          M.call (|
            and,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    cleanup_t_address,
    [
      value,
    ],
    [
      cleaned,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [cleaned],
          M.call (|
            cleanup_t_uint160,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    validator_revert_t_address,
    [
      value,
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          iszero,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert,
            [
            ]
          |), ]
))
      |), ]
))
  |), M.function (|
    abi_decode_t_address,
    [
      offset,
      end,
    ],
    [
      value,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [value],
          M.call (|
            calldataload,
            [
            ]
          |)
        |) in, M.call (|
        validator_revert_t_address,
        [
        ]
      |), ]
))
  |), M.function (|
    cleanup_t_uint256,
    [
      value,
    ],
    [
      cleaned,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [cleaned],
          value
        |) in, ]
))
  |), M.function (|
    validator_revert_t_uint256,
    [
      value,
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          iszero,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert,
            [
            ]
          |), ]
))
      |), ]
))
  |), M.function (|
    abi_decode_t_uint256,
    [
      offset,
      end,
    ],
    [
      value,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [value],
          M.call (|
            calldataload,
            [
            ]
          |)
        |) in, M.call (|
        validator_revert_t_uint256,
        [
        ]
      |), ]
))
  |), M.function (|
    abi_decode_tuple_t_addresst_uint256,
    [
      headStart,
      dataEnd,
    ],
    [
      value0,
      value1,
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          slt,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b,
            [
            ]
          |), ]
))
      |), ltac:(M.monadic (
        [let _ :=
          M.assign (|
            [offset],
            Literal.number 0
          |) in, let _ :=
          M.declare (|
            [value0],
            M.call (|
              abi_decode_t_address,
              [
              ]
            |)
          |) in, ]
)), ltac:(M.monadic (
        [let _ :=
          M.assign (|
            [offset],
            Literal.number 32
          |) in, let _ :=
          M.declare (|
            [value1],
            M.call (|
              abi_decode_t_uint256,
              [
              ]
            |)
          |) in, ]
)), ]
))
  |), M.function (|
    cleanup_t_bool,
    [
      value,
    ],
    [
      cleaned,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [cleaned],
          M.call (|
            iszero,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    abi_encode_t_bool_to_t_bool_fromStack,
    [
      value,
      pos,
    ],
    [
    ],
    ltac:(M.monadic (
      [M.call (|
        mstore,
        [
        ]
      |), ]
))
  |), M.function (|
    abi_encode_tuple_t_bool__to_t_bool__fromStack,
    [
      headStart,
      value0,
    ],
    [
      tail,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [tail],
          M.call (|
            add,
            [
            ]
          |)
        |) in, M.call (|
        abi_encode_t_bool_to_t_bool_fromStack,
        [
        ]
      |), ]
))
  |), M.function (|
    external_fun_approve_113,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          callvalue,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,
            [
            ]
          |), ]
))
      |), let _ :=
        M.assign (|
          [param_0param_1],
          M.call (|
            abi_decode_tuple_t_addresst_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [ret_0],
          M.call (|
            fun_approve_113,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memPos],
          M.call (|
            allocate_unbounded,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memEnd],
          M.call (|
            abi_encode_tuple_t_bool__to_t_bool__fromStack,
            [
            ]
          |)
        |) in, M.call (|
        return,
        [
        ]
      |), ]
))
  |), M.function (|
    abi_decode_tuple_,
    [
      headStart,
      dataEnd,
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          slt,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b,
            [
            ]
          |), ]
))
      |), ]
))
  |), M.function (|
    abi_encode_t_uint256_to_t_uint256_fromStack,
    [
      value,
      pos,
    ],
    [
    ],
    ltac:(M.monadic (
      [M.call (|
        mstore,
        [
        ]
      |), ]
))
  |), M.function (|
    abi_encode_tuple_t_uint256__to_t_uint256__fromStack,
    [
      headStart,
      value0,
    ],
    [
      tail,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [tail],
          M.call (|
            add,
            [
            ]
          |)
        |) in, M.call (|
        abi_encode_t_uint256_to_t_uint256_fromStack,
        [
        ]
      |), ]
))
  |), M.function (|
    external_fun_totalSupply_47,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          callvalue,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,
            [
            ]
          |), ]
))
      |), M.call (|
        abi_decode_tuple_,
        [
        ]
      |), let _ :=
        M.assign (|
          [ret_0],
          M.call (|
            fun_totalSupply_47,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memPos],
          M.call (|
            allocate_unbounded,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memEnd],
          M.call (|
            abi_encode_tuple_t_uint256__to_t_uint256__fromStack,
            [
            ]
          |)
        |) in, M.call (|
        return,
        [
        ]
      |), ]
))
  |), M.function (|
    abi_decode_tuple_t_addresst_addresst_uint256,
    [
      headStart,
      dataEnd,
    ],
    [
      value0,
      value1,
      value2,
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          slt,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b,
            [
            ]
          |), ]
))
      |), ltac:(M.monadic (
        [let _ :=
          M.assign (|
            [offset],
            Literal.number 0
          |) in, let _ :=
          M.declare (|
            [value0],
            M.call (|
              abi_decode_t_address,
              [
              ]
            |)
          |) in, ]
)), ltac:(M.monadic (
        [let _ :=
          M.assign (|
            [offset],
            Literal.number 32
          |) in, let _ :=
          M.declare (|
            [value1],
            M.call (|
              abi_decode_t_address,
              [
              ]
            |)
          |) in, ]
)), ltac:(M.monadic (
        [let _ :=
          M.assign (|
            [offset],
            Literal.number 64
          |) in, let _ :=
          M.declare (|
            [value2],
            M.call (|
              abi_decode_t_uint256,
              [
              ]
            |)
          |) in, ]
)), ]
))
  |), M.function (|
    external_fun_transferFrom_147,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          callvalue,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,
            [
            ]
          |), ]
))
      |), let _ :=
        M.assign (|
          [param_0param_1param_2],
          M.call (|
            abi_decode_tuple_t_addresst_addresst_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [ret_0],
          M.call (|
            fun_transferFrom_147,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memPos],
          M.call (|
            allocate_unbounded,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memEnd],
          M.call (|
            abi_encode_tuple_t_bool__to_t_bool__fromStack,
            [
            ]
          |)
        |) in, M.call (|
        return,
        [
        ]
      |), ]
))
  |), M.function (|
    external_fun_increaseAllowance_173,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          callvalue,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,
            [
            ]
          |), ]
))
      |), let _ :=
        M.assign (|
          [param_0param_1],
          M.call (|
            abi_decode_tuple_t_addresst_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [ret_0],
          M.call (|
            fun_increaseAllowance_173,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memPos],
          M.call (|
            allocate_unbounded,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memEnd],
          M.call (|
            abi_encode_tuple_t_bool__to_t_bool__fromStack,
            [
            ]
          |)
        |) in, M.call (|
        return,
        [
        ]
      |), ]
))
  |), M.function (|
    abi_decode_tuple_t_address,
    [
      headStart,
      dataEnd,
    ],
    [
      value0,
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          slt,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b,
            [
            ]
          |), ]
))
      |), ltac:(M.monadic (
        [let _ :=
          M.assign (|
            [offset],
            Literal.number 0
          |) in, let _ :=
          M.declare (|
            [value0],
            M.call (|
              abi_decode_t_address,
              [
              ]
            |)
          |) in, ]
)), ]
))
  |), M.function (|
    external_fun_balanceOf_59,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          callvalue,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,
            [
            ]
          |), ]
))
      |), let _ :=
        M.assign (|
          [param_0],
          M.call (|
            abi_decode_tuple_t_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [ret_0],
          M.call (|
            fun_balanceOf_59,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memPos],
          M.call (|
            allocate_unbounded,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memEnd],
          M.call (|
            abi_encode_tuple_t_uint256__to_t_uint256__fromStack,
            [
            ]
          |)
        |) in, M.call (|
        return,
        [
        ]
      |), ]
))
  |), M.function (|
    external_fun_decreaseAllowance_199,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          callvalue,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,
            [
            ]
          |), ]
))
      |), let _ :=
        M.assign (|
          [param_0param_1],
          M.call (|
            abi_decode_tuple_t_addresst_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [ret_0],
          M.call (|
            fun_decreaseAllowance_199,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memPos],
          M.call (|
            allocate_unbounded,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memEnd],
          M.call (|
            abi_encode_tuple_t_bool__to_t_bool__fromStack,
            [
            ]
          |)
        |) in, M.call (|
        return,
        [
        ]
      |), ]
))
  |), M.function (|
    external_fun_transfer_94,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          callvalue,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,
            [
            ]
          |), ]
))
      |), let _ :=
        M.assign (|
          [param_0param_1],
          M.call (|
            abi_decode_tuple_t_addresst_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [ret_0],
          M.call (|
            fun_transfer_94,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memPos],
          M.call (|
            allocate_unbounded,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memEnd],
          M.call (|
            abi_encode_tuple_t_bool__to_t_bool__fromStack,
            [
            ]
          |)
        |) in, M.call (|
        return,
        [
        ]
      |), ]
))
  |), M.function (|
    abi_decode_tuple_t_addresst_address,
    [
      headStart,
      dataEnd,
    ],
    [
      value0,
      value1,
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          slt,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b,
            [
            ]
          |), ]
))
      |), ltac:(M.monadic (
        [let _ :=
          M.assign (|
            [offset],
            Literal.number 0
          |) in, let _ :=
          M.declare (|
            [value0],
            M.call (|
              abi_decode_t_address,
              [
              ]
            |)
          |) in, ]
)), ltac:(M.monadic (
        [let _ :=
          M.assign (|
            [offset],
            Literal.number 32
          |) in, let _ :=
          M.declare (|
            [value1],
            M.call (|
              abi_decode_t_address,
              [
              ]
            |)
          |) in, ]
)), ]
))
  |), M.function (|
    external_fun_allowance_75,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          callvalue,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,
            [
            ]
          |), ]
))
      |), let _ :=
        M.assign (|
          [param_0param_1],
          M.call (|
            abi_decode_tuple_t_addresst_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [ret_0],
          M.call (|
            fun_allowance_75,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memPos],
          M.call (|
            allocate_unbounded,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memEnd],
          M.call (|
            abi_encode_tuple_t_uint256__to_t_uint256__fromStack,
            [
            ]
          |)
        |) in, M.call (|
        return,
        [
        ]
      |), ]
))
  |), M.function (|
    revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.call (|
        revert,
        [
        ]
      |), ]
))
  |), M.function (|
    zero_value_for_split_t_bool,
    [
    ],
    [
      ret,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [ret],
          Literal.number 0
        |) in, ]
))
  |), M.function (|
    fun_approve_113,
    [
      var_spender_96,
      var_value_98,
    ],
    [
      var__101,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [zero_t_bool_1],
          M.call (|
            zero_value_for_split_t_bool,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [var__101],
          zero_t_bool_1
        |) in, let _ :=
        M.assign (|
          [expr_105],
          M.call (|
            caller,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_2],
          var_spender_96
        |) in, let _ :=
        M.assign (|
          [expr_106],
          _2
        |) in, let _ :=
        M.assign (|
          [_3],
          var_value_98
        |) in, let _ :=
        M.assign (|
          [expr_107],
          _3
        |) in, M.call (|
        fun__approve_375,
        [
        ]
      |), let _ :=
        M.assign (|
          [expr_110],
          Literal.number 0x01
        |) in, let _ :=
        M.declare (|
          [var__101],
          expr_110
        |) in, M.leave, ]
))
  |), M.function (|
    zero_value_for_split_t_uint256,
    [
    ],
    [
      ret,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [ret],
          Literal.number 0
        |) in, ]
))
  |), M.function (|
    shift_right_0_unsigned,
    [
      value,
    ],
    [
      newValue,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [newValue],
          M.call (|
            shr,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    cleanup_from_storage_t_uint256,
    [
      value,
    ],
    [
      cleaned,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [cleaned],
          value
        |) in, ]
))
  |), M.function (|
    extract_from_storage_value_offset_0t_uint256,
    [
      slot_value,
    ],
    [
      value,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [value],
          M.call (|
            cleanup_from_storage_t_uint256,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    read_from_storage_split_offset_0_t_uint256,
    [
      slot,
    ],
    [
      value,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [value],
          M.call (|
            extract_from_storage_value_offset_0t_uint256,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    fun_totalSupply_47,
    [
    ],
    [
      var__42,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [zero_t_uint256_4],
          M.call (|
            zero_value_for_split_t_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [var__42],
          zero_t_uint256_4
        |) in, let _ :=
        M.assign (|
          [_5],
          M.call (|
            read_from_storage_split_offset_0_t_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_44],
          _5
        |) in, let _ :=
        M.declare (|
          [var__42],
          expr_44
        |) in, M.leave, ]
))
  |), M.function (|
    identity,
    [
      value,
    ],
    [
      ret,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [ret],
          value
        |) in, ]
))
  |), M.function (|
    convert_t_uint160_to_t_uint160,
    [
      value,
    ],
    [
      converted,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [converted],
          M.call (|
            cleanup_t_uint160,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    convert_t_uint160_to_t_address,
    [
      value,
    ],
    [
      converted,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [converted],
          M.call (|
            convert_t_uint160_to_t_uint160,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    convert_t_address_to_t_address,
    [
      value,
    ],
    [
      converted,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [converted],
          M.call (|
            convert_t_uint160_to_t_address,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$_of_t_address,
    [
      slot,
      key,
    ],
    [
      dataSlot,
    ],
    ltac:(M.monadic (
      [M.call (|
        mstore,
        [
        ]
      |), M.call (|
        mstore,
        [
        ]
      |), let _ :=
        M.declare (|
          [dataSlot],
          M.call (|
            keccak256,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address,
    [
      slot,
      key,
    ],
    [
      dataSlot,
    ],
    ltac:(M.monadic (
      [M.call (|
        mstore,
        [
        ]
      |), M.call (|
        mstore,
        [
        ]
      |), let _ :=
        M.declare (|
          [dataSlot],
          M.call (|
            keccak256,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    panic_error_0x11,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.call (|
        mstore,
        [
        ]
      |), M.call (|
        mstore,
        [
        ]
      |), M.call (|
        revert,
        [
        ]
      |), ]
))
  |), M.function (|
    checked_sub_t_uint256,
    [
      x,
      y,
    ],
    [
      diff,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [x],
          M.call (|
            cleanup_t_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [y],
          M.call (|
            cleanup_t_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [diff],
          M.call (|
            sub,
            [
            ]
          |)
        |) in, M.if (|
        M.call (|
          gt,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            panic_error_0x11,
            [
            ]
          |), ]
))
      |), ]
))
  |), M.function (|
    fun_transferFrom_147,
    [
      var_from_115,
      var_to_117,
      var_value_119,
    ],
    [
      var__122,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [zero_t_bool_6],
          M.call (|
            zero_value_for_split_t_bool,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [var__122],
          zero_t_bool_6
        |) in, let _ :=
        M.assign (|
          [_7],
          var_from_115
        |) in, let _ :=
        M.assign (|
          [expr_125],
          _7
        |) in, let _ :=
        M.assign (|
          [_8],
          var_to_117
        |) in, let _ :=
        M.assign (|
          [expr_126],
          _8
        |) in, let _ :=
        M.assign (|
          [_9],
          var_value_119
        |) in, let _ :=
        M.assign (|
          [expr_127],
          _9
        |) in, M.call (|
        fun__transfer_245,
        [
        ]
      |), let _ :=
        M.assign (|
          [_10],
          var_from_115
        |) in, let _ :=
        M.assign (|
          [expr_131],
          _10
        |) in, let _ :=
        M.assign (|
          [expr_133],
          M.call (|
            caller,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_11_slot],
          Literal.number 0x01
        |) in, let _ :=
        M.assign (|
          [expr_134_slot],
          _11_slot
        |) in, let _ :=
        M.assign (|
          [_12],
          var_from_115
        |) in, let _ :=
        M.assign (|
          [expr_135],
          _12
        |) in, let _ :=
        M.assign (|
          [_13],
          M.call (|
            mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$_of_t_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_14_slot],
          _13
        |) in, let _ :=
        M.assign (|
          [expr_136_slot],
          _14_slot
        |) in, let _ :=
        M.assign (|
          [expr_138],
          M.call (|
            caller,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_15],
          M.call (|
            mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_16],
          M.call (|
            read_from_storage_split_offset_0_t_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_139],
          _16
        |) in, let _ :=
        M.assign (|
          [_17],
          var_value_119
        |) in, let _ :=
        M.assign (|
          [expr_140],
          _17
        |) in, let _ :=
        M.assign (|
          [expr_141],
          M.call (|
            checked_sub_t_uint256,
            [
            ]
          |)
        |) in, M.call (|
        fun__approve_375,
        [
        ]
      |), let _ :=
        M.assign (|
          [expr_144],
          Literal.number 0x01
        |) in, let _ :=
        M.declare (|
          [var__122],
          expr_144
        |) in, M.leave, ]
))
  |), M.function (|
    checked_add_t_uint256,
    [
      x,
      y,
    ],
    [
      sum,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [x],
          M.call (|
            cleanup_t_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [y],
          M.call (|
            cleanup_t_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [sum],
          M.call (|
            add,
            [
            ]
          |)
        |) in, M.if (|
        M.call (|
          gt,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            panic_error_0x11,
            [
            ]
          |), ]
))
      |), ]
))
  |), M.function (|
    fun_increaseAllowance_173,
    [
      var_spender_149,
      var_addedValue_151,
    ],
    [
      var__154,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [zero_t_bool_18],
          M.call (|
            zero_value_for_split_t_bool,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [var__154],
          zero_t_bool_18
        |) in, let _ :=
        M.assign (|
          [expr_158],
          M.call (|
            caller,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_19],
          var_spender_149
        |) in, let _ :=
        M.assign (|
          [expr_159],
          _19
        |) in, let _ :=
        M.assign (|
          [_20_slot],
          Literal.number 0x01
        |) in, let _ :=
        M.assign (|
          [expr_160_slot],
          _20_slot
        |) in, let _ :=
        M.assign (|
          [expr_162],
          M.call (|
            caller,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_21],
          M.call (|
            mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$_of_t_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_22_slot],
          _21
        |) in, let _ :=
        M.assign (|
          [expr_163_slot],
          _22_slot
        |) in, let _ :=
        M.assign (|
          [_23],
          var_spender_149
        |) in, let _ :=
        M.assign (|
          [expr_164],
          _23
        |) in, let _ :=
        M.assign (|
          [_24],
          M.call (|
            mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_25],
          M.call (|
            read_from_storage_split_offset_0_t_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_165],
          _25
        |) in, let _ :=
        M.assign (|
          [_26],
          var_addedValue_151
        |) in, let _ :=
        M.assign (|
          [expr_166],
          _26
        |) in, let _ :=
        M.assign (|
          [expr_167],
          M.call (|
            checked_add_t_uint256,
            [
            ]
          |)
        |) in, M.call (|
        fun__approve_375,
        [
        ]
      |), let _ :=
        M.assign (|
          [expr_170],
          Literal.number 0x01
        |) in, let _ :=
        M.declare (|
          [var__154],
          expr_170
        |) in, M.leave, ]
))
  |), M.function (|
    fun_balanceOf_59,
    [
      var_owner_49,
    ],
    [
      var__52,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [zero_t_uint256_27],
          M.call (|
            zero_value_for_split_t_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [var__52],
          zero_t_uint256_27
        |) in, let _ :=
        M.assign (|
          [_28_slot],
          Literal.number 0x00
        |) in, let _ :=
        M.assign (|
          [expr_54_slot],
          _28_slot
        |) in, let _ :=
        M.assign (|
          [_29],
          var_owner_49
        |) in, let _ :=
        M.assign (|
          [expr_55],
          _29
        |) in, let _ :=
        M.assign (|
          [_30],
          M.call (|
            mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_31],
          M.call (|
            read_from_storage_split_offset_0_t_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_56],
          _31
        |) in, let _ :=
        M.declare (|
          [var__52],
          expr_56
        |) in, M.leave, ]
))
  |), M.function (|
    fun_decreaseAllowance_199,
    [
      var_spender_175,
      var_subtractedValue_177,
    ],
    [
      var__180,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [zero_t_bool_32],
          M.call (|
            zero_value_for_split_t_bool,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [var__180],
          zero_t_bool_32
        |) in, let _ :=
        M.assign (|
          [expr_184],
          M.call (|
            caller,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_33],
          var_spender_175
        |) in, let _ :=
        M.assign (|
          [expr_185],
          _33
        |) in, let _ :=
        M.assign (|
          [_34_slot],
          Literal.number 0x01
        |) in, let _ :=
        M.assign (|
          [expr_186_slot],
          _34_slot
        |) in, let _ :=
        M.assign (|
          [expr_188],
          M.call (|
            caller,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_35],
          M.call (|
            mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$_of_t_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_36_slot],
          _35
        |) in, let _ :=
        M.assign (|
          [expr_189_slot],
          _36_slot
        |) in, let _ :=
        M.assign (|
          [_37],
          var_spender_175
        |) in, let _ :=
        M.assign (|
          [expr_190],
          _37
        |) in, let _ :=
        M.assign (|
          [_38],
          M.call (|
            mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_39],
          M.call (|
            read_from_storage_split_offset_0_t_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_191],
          _39
        |) in, let _ :=
        M.assign (|
          [_40],
          var_subtractedValue_177
        |) in, let _ :=
        M.assign (|
          [expr_192],
          _40
        |) in, let _ :=
        M.assign (|
          [expr_193],
          M.call (|
            checked_sub_t_uint256,
            [
            ]
          |)
        |) in, M.call (|
        fun__approve_375,
        [
        ]
      |), let _ :=
        M.assign (|
          [expr_196],
          Literal.number 0x01
        |) in, let _ :=
        M.declare (|
          [var__180],
          expr_196
        |) in, M.leave, ]
))
  |), M.function (|
    fun_transfer_94,
    [
      var_to_77,
      var_value_79,
    ],
    [
      var__82,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [zero_t_bool_41],
          M.call (|
            zero_value_for_split_t_bool,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [var__82],
          zero_t_bool_41
        |) in, let _ :=
        M.assign (|
          [expr_86],
          M.call (|
            caller,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_42],
          var_to_77
        |) in, let _ :=
        M.assign (|
          [expr_87],
          _42
        |) in, let _ :=
        M.assign (|
          [_43],
          var_value_79
        |) in, let _ :=
        M.assign (|
          [expr_88],
          _43
        |) in, M.call (|
        fun__transfer_245,
        [
        ]
      |), let _ :=
        M.assign (|
          [expr_91],
          Literal.number 0x01
        |) in, let _ :=
        M.declare (|
          [var__82],
          expr_91
        |) in, M.leave, ]
))
  |), M.function (|
    fun_allowance_75,
    [
      var_owner_61,
      var_spender_63,
    ],
    [
      var__66,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [zero_t_uint256_44],
          M.call (|
            zero_value_for_split_t_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [var__66],
          zero_t_uint256_44
        |) in, let _ :=
        M.assign (|
          [_45_slot],
          Literal.number 0x01
        |) in, let _ :=
        M.assign (|
          [expr_68_slot],
          _45_slot
        |) in, let _ :=
        M.assign (|
          [_46],
          var_owner_61
        |) in, let _ :=
        M.assign (|
          [expr_69],
          _46
        |) in, let _ :=
        M.assign (|
          [_47],
          M.call (|
            mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$_of_t_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_48_slot],
          _47
        |) in, let _ :=
        M.assign (|
          [expr_70_slot],
          _48_slot
        |) in, let _ :=
        M.assign (|
          [_49],
          var_spender_63
        |) in, let _ :=
        M.assign (|
          [expr_71],
          _49
        |) in, let _ :=
        M.assign (|
          [_50],
          M.call (|
            mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_51],
          M.call (|
            read_from_storage_split_offset_0_t_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_72],
          _51
        |) in, let _ :=
        M.declare (|
          [var__66],
          expr_72
        |) in, M.leave, ]
))
  |), M.function (|
    cleanup_t_rational_0_by_1,
    [
      value,
    ],
    [
      cleaned,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [cleaned],
          value
        |) in, ]
))
  |), M.function (|
    convert_t_rational_0_by_1_to_t_uint160,
    [
      value,
    ],
    [
      converted,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [converted],
          M.call (|
            cleanup_t_uint160,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    convert_t_rational_0_by_1_to_t_address,
    [
      value,
    ],
    [
      converted,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [converted],
          M.call (|
            convert_t_rational_0_by_1_to_t_uint160,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    array_storeLengthForEncoding_t_string_memory_ptr_fromStack,
    [
      pos,
      length,
    ],
    [
      updated_pos,
    ],
    ltac:(M.monadic (
      [M.call (|
        mstore,
        [
        ]
      |), let _ :=
        M.declare (|
          [updated_pos],
          M.call (|
            add,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208,
    [
      memPtr,
    ],
    [
    ],
    ltac:(M.monadic (
      [M.call (|
        mstore,
        [
        ]
      |), M.call (|
        mstore,
        [
        ]
      |), ]
))
  |), M.function (|
    abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack,
    [
      pos,
    ],
    [
      end,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [pos],
          M.call (|
            array_storeLengthForEncoding_t_string_memory_ptr_fromStack,
            [
            ]
          |)
        |) in, M.call (|
        store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208,
        [
        ]
      |), let _ :=
        M.declare (|
          [end],
          M.call (|
            add,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack,
    [
      headStart,
    ],
    [
      tail,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [tail],
          M.call (|
            add,
            [
            ]
          |)
        |) in, M.call (|
        mstore,
        [
        ]
      |), let _ :=
        M.declare (|
          [tail],
          M.call (|
            abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    require_helper_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208,
    [
      condition,
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          iszero,
          [
          ]
        |),
        ltac:(M.monadic (
          [let _ :=
            M.assign (|
              [memPtr],
              M.call (|
                allocate_unbounded,
                [
                ]
              |)
            |) in, M.call (|
            mstore,
            [
            ]
          |), let _ :=
            M.assign (|
              [end],
              M.call (|
                abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack,
                [
                ]
              |)
            |) in, M.call (|
            revert,
            [
            ]
          |), ]
))
      |), ]
))
  |), M.function (|
    store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029,
    [
      memPtr,
    ],
    [
    ],
    ltac:(M.monadic (
      [M.call (|
        mstore,
        [
        ]
      |), M.call (|
        mstore,
        [
        ]
      |), ]
))
  |), M.function (|
    abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack,
    [
      pos,
    ],
    [
      end,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [pos],
          M.call (|
            array_storeLengthForEncoding_t_string_memory_ptr_fromStack,
            [
            ]
          |)
        |) in, M.call (|
        store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029,
        [
        ]
      |), let _ :=
        M.declare (|
          [end],
          M.call (|
            add,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack,
    [
      headStart,
    ],
    [
      tail,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [tail],
          M.call (|
            add,
            [
            ]
          |)
        |) in, M.call (|
        mstore,
        [
        ]
      |), let _ :=
        M.declare (|
          [tail],
          M.call (|
            abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    require_helper_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029,
    [
      condition,
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          iszero,
          [
          ]
        |),
        ltac:(M.monadic (
          [let _ :=
            M.assign (|
              [memPtr],
              M.call (|
                allocate_unbounded,
                [
                ]
              |)
            |) in, M.call (|
            mstore,
            [
            ]
          |), let _ :=
            M.assign (|
              [end],
              M.call (|
                abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack,
                [
                ]
              |)
            |) in, M.call (|
            revert,
            [
            ]
          |), ]
))
      |), ]
))
  |), M.function (|
    shift_left_0,
    [
      value,
    ],
    [
      newValue,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [newValue],
          M.call (|
            shl,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    update_byte_slice_32_shift_0,
    [
      value,
      toInsert,
    ],
    [
      result,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [mask],
          Literal.number 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
        |) in, let _ :=
        M.declare (|
          [toInsert],
          M.call (|
            shift_left_0,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [value],
          M.call (|
            and,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [result],
          M.call (|
            or,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    convert_t_uint256_to_t_uint256,
    [
      value,
    ],
    [
      converted,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [converted],
          M.call (|
            cleanup_t_uint256,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    prepare_store_t_uint256,
    [
      value,
    ],
    [
      ret,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [ret],
          value
        |) in, ]
))
  |), M.function (|
    update_storage_value_offset_0t_uint256_to_t_uint256,
    [
      slot,
      value_0,
    ],
    [
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [convertedValue_0],
          M.call (|
            convert_t_uint256_to_t_uint256,
            [
            ]
          |)
        |) in, M.call (|
        sstore,
        [
        ]
      |), ]
))
  |), M.function (|
    fun__approve_375,
    [
      var_owner_333,
      var_spender_335,
      var_value_337,
    ],
    [
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [_52],
          var_owner_333
        |) in, let _ :=
        M.assign (|
          [expr_341],
          _52
        |) in, let _ :=
        M.assign (|
          [expr_344],
          Literal.number 0x00
        |) in, let _ :=
        M.assign (|
          [expr_345],
          M.call (|
            convert_t_rational_0_by_1_to_t_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_346],
          M.call (|
            iszero,
            [
            ]
          |)
        |) in, M.call (|
        require_helper_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208,
        [
        ]
      |), let _ :=
        M.assign (|
          [_53],
          var_spender_335
        |) in, let _ :=
        M.assign (|
          [expr_351],
          _53
        |) in, let _ :=
        M.assign (|
          [expr_354],
          Literal.number 0x00
        |) in, let _ :=
        M.assign (|
          [expr_355],
          M.call (|
            convert_t_rational_0_by_1_to_t_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_356],
          M.call (|
            iszero,
            [
            ]
          |)
        |) in, M.call (|
        require_helper_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029,
        [
        ]
      |), let _ :=
        M.assign (|
          [_54],
          var_value_337
        |) in, let _ :=
        M.assign (|
          [expr_365],
          _54
        |) in, let _ :=
        M.assign (|
          [_55_slot],
          Literal.number 0x01
        |) in, let _ :=
        M.assign (|
          [expr_360_slot],
          _55_slot
        |) in, let _ :=
        M.assign (|
          [_56],
          var_owner_333
        |) in, let _ :=
        M.assign (|
          [expr_361],
          _56
        |) in, let _ :=
        M.assign (|
          [_57],
          M.call (|
            mapping_index_access_t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$_of_t_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_58_slot],
          _57
        |) in, let _ :=
        M.assign (|
          [expr_363_slot],
          _58_slot
        |) in, let _ :=
        M.assign (|
          [_59],
          var_spender_335
        |) in, let _ :=
        M.assign (|
          [expr_362],
          _59
        |) in, let _ :=
        M.assign (|
          [_60],
          M.call (|
            mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address,
            [
            ]
          |)
        |) in, M.call (|
        update_storage_value_offset_0t_uint256_to_t_uint256,
        [
        ]
      |), let _ :=
        M.assign (|
          [expr_366],
          expr_365
        |) in, let _ :=
        M.assign (|
          [_61],
          var_owner_333
        |) in, let _ :=
        M.assign (|
          [expr_369],
          _61
        |) in, let _ :=
        M.assign (|
          [_62],
          var_spender_335
        |) in, let _ :=
        M.assign (|
          [expr_370],
          _62
        |) in, let _ :=
        M.assign (|
          [_63],
          var_value_337
        |) in, let _ :=
        M.assign (|
          [expr_371],
          _63
        |) in, let _ :=
        M.assign (|
          [_64],
          Literal.number 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925
        |) in, let _ :=
        M.assign (|
          [_65],
          M.call (|
            convert_t_address_to_t_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_66],
          M.call (|
            convert_t_address_to_t_address,
            [
            ]
          |)
        |) in, ltac:(M.monadic (
        [let _ :=
          M.assign (|
            [_67],
            M.call (|
              allocate_unbounded,
              [
              ]
            |)
          |) in, let _ :=
          M.assign (|
            [_68],
            M.call (|
              abi_encode_tuple_t_uint256__to_t_uint256__fromStack,
              [
              ]
            |)
          |) in, M.call (|
          log3,
          [
          ]
        |), ]
)), ]
))
  |), M.function (|
    store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f,
    [
      memPtr,
    ],
    [
    ],
    ltac:(M.monadic (
      [M.call (|
        mstore,
        [
        ]
      |), M.call (|
        mstore,
        [
        ]
      |), ]
))
  |), M.function (|
    abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack,
    [
      pos,
    ],
    [
      end,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [pos],
          M.call (|
            array_storeLengthForEncoding_t_string_memory_ptr_fromStack,
            [
            ]
          |)
        |) in, M.call (|
        store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f,
        [
        ]
      |), let _ :=
        M.declare (|
          [end],
          M.call (|
            add,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack,
    [
      headStart,
    ],
    [
      tail,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [tail],
          M.call (|
            add,
            [
            ]
          |)
        |) in, M.call (|
        mstore,
        [
        ]
      |), let _ :=
        M.declare (|
          [tail],
          M.call (|
            abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    require_helper_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f,
    [
      condition,
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          iszero,
          [
          ]
        |),
        ltac:(M.monadic (
          [let _ :=
            M.assign (|
              [memPtr],
              M.call (|
                allocate_unbounded,
                [
                ]
              |)
            |) in, M.call (|
            mstore,
            [
            ]
          |), let _ :=
            M.assign (|
              [end],
              M.call (|
                abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack,
                [
                ]
              |)
            |) in, M.call (|
            revert,
            [
            ]
          |), ]
))
      |), ]
))
  |), M.function (|
    fun__transfer_245,
    [
      var_from_201,
      var_to_203,
      var_value_205,
    ],
    [
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [_69],
          var_to_203
        |) in, let _ :=
        M.assign (|
          [expr_209],
          _69
        |) in, let _ :=
        M.assign (|
          [expr_212],
          Literal.number 0x00
        |) in, let _ :=
        M.assign (|
          [expr_213],
          M.call (|
            convert_t_rational_0_by_1_to_t_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_214],
          M.call (|
            iszero,
            [
            ]
          |)
        |) in, M.call (|
        require_helper_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f,
        [
        ]
      |), let _ :=
        M.assign (|
          [_70_slot],
          Literal.number 0x00
        |) in, let _ :=
        M.assign (|
          [expr_221_slot],
          _70_slot
        |) in, let _ :=
        M.assign (|
          [_71],
          var_from_201
        |) in, let _ :=
        M.assign (|
          [expr_222],
          _71
        |) in, let _ :=
        M.assign (|
          [_72],
          M.call (|
            mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_73],
          M.call (|
            read_from_storage_split_offset_0_t_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_223],
          _73
        |) in, let _ :=
        M.assign (|
          [_74],
          var_value_205
        |) in, let _ :=
        M.assign (|
          [expr_224],
          _74
        |) in, let _ :=
        M.assign (|
          [expr_225],
          M.call (|
            checked_sub_t_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_75_slot],
          Literal.number 0x00
        |) in, let _ :=
        M.assign (|
          [expr_218_slot],
          _75_slot
        |) in, let _ :=
        M.assign (|
          [_76],
          var_from_201
        |) in, let _ :=
        M.assign (|
          [expr_219],
          _76
        |) in, let _ :=
        M.assign (|
          [_77],
          M.call (|
            mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address,
            [
            ]
          |)
        |) in, M.call (|
        update_storage_value_offset_0t_uint256_to_t_uint256,
        [
        ]
      |), let _ :=
        M.assign (|
          [expr_226],
          expr_225
        |) in, let _ :=
        M.assign (|
          [_78_slot],
          Literal.number 0x00
        |) in, let _ :=
        M.assign (|
          [expr_231_slot],
          _78_slot
        |) in, let _ :=
        M.assign (|
          [_79],
          var_to_203
        |) in, let _ :=
        M.assign (|
          [expr_232],
          _79
        |) in, let _ :=
        M.assign (|
          [_80],
          M.call (|
            mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_81],
          M.call (|
            read_from_storage_split_offset_0_t_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_233],
          _81
        |) in, let _ :=
        M.assign (|
          [_82],
          var_value_205
        |) in, let _ :=
        M.assign (|
          [expr_234],
          _82
        |) in, let _ :=
        M.assign (|
          [expr_235],
          M.call (|
            checked_add_t_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_83_slot],
          Literal.number 0x00
        |) in, let _ :=
        M.assign (|
          [expr_228_slot],
          _83_slot
        |) in, let _ :=
        M.assign (|
          [_84],
          var_to_203
        |) in, let _ :=
        M.assign (|
          [expr_229],
          _84
        |) in, let _ :=
        M.assign (|
          [_85],
          M.call (|
            mapping_index_access_t_mapping$_t_address_$_t_uint256_$_of_t_address,
            [
            ]
          |)
        |) in, M.call (|
        update_storage_value_offset_0t_uint256_to_t_uint256,
        [
        ]
      |), let _ :=
        M.assign (|
          [expr_236],
          expr_235
        |) in, let _ :=
        M.assign (|
          [_86],
          var_from_201
        |) in, let _ :=
        M.assign (|
          [expr_239],
          _86
        |) in, let _ :=
        M.assign (|
          [_87],
          var_to_203
        |) in, let _ :=
        M.assign (|
          [expr_240],
          _87
        |) in, let _ :=
        M.assign (|
          [_88],
          var_value_205
        |) in, let _ :=
        M.assign (|
          [expr_241],
          _88
        |) in, let _ :=
        M.assign (|
          [_89],
          Literal.number 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
        |) in, let _ :=
        M.assign (|
          [_90],
          M.call (|
            convert_t_address_to_t_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_91],
          M.call (|
            convert_t_address_to_t_address,
            [
            ]
          |)
        |) in, ltac:(M.monadic (
        [let _ :=
          M.assign (|
            [_92],
            M.call (|
              allocate_unbounded,
              [
              ]
            |)
          |) in, let _ :=
          M.assign (|
            [_93],
            M.call (|
              abi_encode_tuple_t_uint256__to_t_uint256__fromStack,
              [
              ]
            |)
          |) in, M.call (|
          log3,
          [
          ]
        |), ]
)), ]
))
  |), ]
))ltac:(M.monadic (
  [ltac:(M.monadic (
    [M.call (|
      mstore,
      [
      ]
    |), M.if (|
      M.call (|
        callvalue,
        [
        ]
      |),
      ltac:(M.monadic (
        [M.call (|
          revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,
          [
          ]
        |), ]
))
    |), M.call (|
      constructor_ERC20,
      [
      ]
    |), let _ :=
      M.assign (|
        [_1],
        M.call (|
          allocate_unbounded,
          [
          ]
        |)
      |) in, M.call (|
      codecopy,
      [
      ]
    |), M.call (|
      return,
      [
      ]
    |), ]
)), M.function (|
    allocate_unbounded,
    [
    ],
    [
      memPtr,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [memPtr],
          M.call (|
            mload,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.call (|
        revert,
        [
        ]
      |), ]
))
  |), M.function (|
    cleanup_rational_by,
    [
      value,
    ],
    [
      cleaned,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [cleaned],
          value
        |) in, ]
))
  |), M.function (|
    cleanup_uint256,
    [
      value,
    ],
    [
      cleaned,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [cleaned],
          value
        |) in, ]
))
  |), M.function (|
    identity,
    [
      value,
    ],
    [
      ret,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [ret],
          value
        |) in, ]
))
  |), M.function (|
    convert_rational_by_to_uint256,
    [
      value,
    ],
    [
      converted,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [converted],
          M.call (|
            cleanup_uint256,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    constructor_ERC20,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [expr],
          M.call (|
            caller,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_1],
          Literal.number 0x14
        |) in, let _ :=
        M.assign (|
          [_1],
          M.call (|
            convert_rational_by_to_uint256,
            [
            ]
          |)
        |) in, M.call (|
        fun_mint,
        [
        ]
      |), ]
))
  |), M.function (|
    cleanup_t_rational_by,
    [
      value,
    ],
    [
      cleaned,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [cleaned],
          value
        |) in, ]
))
  |), M.function (|
    cleanup_uint160,
    [
      value,
    ],
    [
      cleaned,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [cleaned],
          M.call (|
            and,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    convert_rational_by_to_uint160,
    [
      value,
    ],
    [
      converted,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [converted],
          M.call (|
            cleanup_uint160,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    convert_rational_by_to_address,
    [
      value,
    ],
    [
      converted,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [converted],
          M.call (|
            convert_rational_by_to_uint160,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    cleanup_address,
    [
      value,
    ],
    [
      cleaned,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [cleaned],
          M.call (|
            cleanup_uint160,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    array_storeLengthForEncoding_string,
    [
      pos,
      length,
    ],
    [
      updated_pos,
    ],
    ltac:(M.monadic (
      [M.call (|
        mstore,
        [
        ]
      |), let _ :=
        M.declare (|
          [updated_pos],
          M.call (|
            add,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e,
    [
      memPtr,
    ],
    [
    ],
    ltac:(M.monadic (
      [M.call (|
        mstore,
        [
        ]
      |), ]
))
  |), M.function (|
    abi_encode_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e,
    [
      pos,
    ],
    [
      end,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [pos],
          M.call (|
            array_storeLengthForEncoding_string,
            [
            ]
          |)
        |) in, M.call (|
        store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e,
        [
        ]
      |), let _ :=
        M.declare (|
          [end],
          M.call (|
            add,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    abi_encode_stringliteral_fc0b,
    [
      headStart,
    ],
    [
      tail,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [tail],
          M.call (|
            add,
            [
            ]
          |)
        |) in, M.call (|
        mstore,
        [
        ]
      |), let _ :=
        M.declare (|
          [tail],
          M.call (|
            abi_encode_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    require_helper_stringliteral_fc0b,
    [
      condition,
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          iszero,
          [
          ]
        |),
        ltac:(M.monadic (
          [let _ :=
            M.assign (|
              [memPtr],
              M.call (|
                allocate_unbounded,
                [
                ]
              |)
            |) in, M.call (|
            mstore,
            [
            ]
          |), let _ :=
            M.assign (|
              [end],
              M.call (|
                abi_encode_stringliteral_fc0b,
                [
                ]
              |)
            |) in, M.call (|
            revert,
            [
            ]
          |), ]
))
      |), ]
))
  |), M.function (|
    shift_right_unsigned,
    [
      value,
    ],
    [
      newValue,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [newValue],
          M.call (|
            shr,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    cleanup_from_storage_uint256,
    [
      value,
    ],
    [
      cleaned,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [cleaned],
          value
        |) in, ]
))
  |), M.function (|
    extract_from_storage_value_offsett_uint256,
    [
      slot_value,
    ],
    [
      value,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [value],
          M.call (|
            cleanup_from_storage_uint256,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    read_from_storage_split_offset_uint256,
    [
      slot,
    ],
    [
      value,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [value],
          M.call (|
            extract_from_storage_value_offsett_uint256,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    panic_error_0x11,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.call (|
        mstore,
        [
        ]
      |), M.call (|
        mstore,
        [
        ]
      |), M.call (|
        revert,
        [
        ]
      |), ]
))
  |), M.function (|
    checked_add_uint256,
    [
      x,
      y,
    ],
    [
      sum,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [x],
          M.call (|
            cleanup_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [y],
          M.call (|
            cleanup_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [sum],
          M.call (|
            add,
            [
            ]
          |)
        |) in, M.if (|
        M.call (|
          gt,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            panic_error_0x11,
            [
            ]
          |), ]
))
      |), ]
))
  |), M.function (|
    shift_left,
    [
      value,
    ],
    [
      newValue,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [newValue],
          M.call (|
            shl,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    update_byte_slice_shift,
    [
      value,
      toInsert,
    ],
    [
      result,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [mask],
          M.call (|
            not,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [toInsert],
          M.call (|
            shift_left,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [value],
          M.call (|
            and,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [result],
          M.call (|
            or,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    convert_uint256_to_uint256,
    [
      value,
    ],
    [
      converted,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [converted],
          M.call (|
            cleanup_uint256,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    prepare_store_uint256,
    [
      value,
    ],
    [
      ret,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [ret],
          value
        |) in, ]
))
  |), M.function (|
    update_storage_value_offsett_uint256_to_uint256,
    [
      slot,
      value,
    ],
    [
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [convertedValue],
          M.call (|
            convert_uint256_to_uint256,
            [
            ]
          |)
        |) in, M.call (|
        sstore,
        [
        ]
      |), ]
))
  |), M.function (|
    convert_uint160_to_uint160,
    [
      value,
    ],
    [
      converted,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [converted],
          M.call (|
            cleanup_uint160,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    convert_uint160_to_address,
    [
      value,
    ],
    [
      converted,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [converted],
          M.call (|
            convert_uint160_to_uint160,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    convert_address_to_address,
    [
      value,
    ],
    [
      converted,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [converted],
          M.call (|
            convert_uint160_to_address,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    mapping_index_access_mapping_address_uint256_of_address,
    [
      slot,
      key,
    ],
    [
      dataSlot,
    ],
    ltac:(M.monadic (
      [M.call (|
        mstore,
        [
        ]
      |), M.call (|
        mstore,
        [
        ]
      |), let _ :=
        M.declare (|
          [dataSlot],
          M.call (|
            keccak256,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    abi_encode_uint256_to_uint256,
    [
      value,
      pos,
    ],
    [
    ],
    ltac:(M.monadic (
      [M.call (|
        mstore,
        [
        ]
      |), ]
))
  |), M.function (|
    abi_encode_uint256,
    [
      headStart,
      value0,
    ],
    [
      tail,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [tail],
          M.call (|
            add,
            [
            ]
          |)
        |) in, M.call (|
        abi_encode_uint256_to_uint256,
        [
        ]
      |), ]
))
  |), M.function (|
    fun_mint,
    [
      var_account,
      var_value,
    ],
    [
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [_1],
          var_account
        |) in, let _ :=
        M.assign (|
          [expr],
          _1
        |) in, let _ :=
        M.assign (|
          [expr_1],
          Literal.number 0x00
        |) in, let _ :=
        M.assign (|
          [expr_2],
          M.call (|
            convert_rational_by_to_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_3],
          M.call (|
            iszero,
            [
            ]
          |)
        |) in, M.call (|
        require_helper_stringliteral_fc0b,
        [
        ]
      |), let _ :=
        M.assign (|
          [_2],
          M.call (|
            read_from_storage_split_offset_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_4],
          _2
        |) in, let _ :=
        M.assign (|
          [_3],
          var_value
        |) in, let _ :=
        M.assign (|
          [expr_5],
          _3
        |) in, let _ :=
        M.assign (|
          [expr_6],
          M.call (|
            checked_add_uint256,
            [
            ]
          |)
        |) in, M.call (|
        update_storage_value_offsett_uint256_to_uint256,
        [
        ]
      |), let _ :=
        M.assign (|
          [_6_slot],
          Literal.number 0x00
        |) in, let _ :=
        M.assign (|
          [expr_271_slot],
          _6_slot
        |) in, let _ :=
        M.assign (|
          [_4],
          var_account
        |) in, let _ :=
        M.assign (|
          [expr_7],
          _4
        |) in, let _ :=
        M.assign (|
          [_5],
          M.call (|
            mapping_index_access_mapping_address_uint256_of_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_6],
          M.call (|
            read_from_storage_split_offset_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_8],
          _6
        |) in, let _ :=
        M.assign (|
          [_7],
          var_value
        |) in, let _ :=
        M.assign (|
          [expr_9],
          _7
        |) in, let _ :=
        M.assign (|
          [expr_10],
          M.call (|
            checked_add_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_slot],
          Literal.number 0x00
        |) in, let _ :=
        M.assign (|
          [expr_slot],
          _slot
        |) in, let _ :=
        M.assign (|
          [_8],
          var_account
        |) in, let _ :=
        M.assign (|
          [expr_11],
          _8
        |) in, let _ :=
        M.assign (|
          [_9],
          M.call (|
            mapping_index_access_mapping_address_uint256_of_address,
            [
            ]
          |)
        |) in, M.call (|
        update_storage_value_offsett_uint256_to_uint256,
        [
        ]
      |), let _ :=
        M.assign (|
          [expr_12],
          Literal.number 0x00
        |) in, let _ :=
        M.assign (|
          [expr_13],
          M.call (|
            convert_rational_by_to_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_10],
          var_account
        |) in, let _ :=
        M.assign (|
          [expr_14],
          _10
        |) in, let _ :=
        M.assign (|
          [_11],
          var_value
        |) in, let _ :=
        M.assign (|
          [expr_15],
          _11
        |) in, let _ :=
        M.assign (|
          [_12],
          Literal.number 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
        |) in, let _ :=
        M.assign (|
          [_13],
          M.call (|
            convert_address_to_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_14],
          M.call (|
            convert_address_to_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_15],
          M.call (|
            allocate_unbounded,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_16],
          M.call (|
            abi_encode_uint256,
            [
            ]
          |)
        |) in, M.call (|
        log3,
        [
        ]
      |), ]
))
  |), ]
))ltac:(M.monadic (
  [ltac:(M.monadic (
    [M.call (|
      mstore,
      [
      ]
    |), M.if (|
      M.call (|
        iszero,
        [
        ]
      |),
      ltac:(M.monadic (
        [let _ :=
          M.assign (|
            [selector],
            M.call (|
              shift_right_unsigned,
              [
              ]
            |)
          |) in, M.switch (|
          selector,
          [
            M.case (|
              Literal.number 0x095ea7b3,
              ltac:(M.monadic (
                [M.call (|
                  external_fun_approve,
                  [
                  ]
                |), ]
))
            |),
            M.case (|
              Literal.number 0x18160ddd,
              ltac:(M.monadic (
                [M.call (|
                  external_fun_totalSupply,
                  [
                  ]
                |), ]
))
            |),
            M.case (|
              Literal.number 0x23b872dd,
              ltac:(M.monadic (
                [M.call (|
                  external_fun_transferFrom,
                  [
                  ]
                |), ]
))
            |),
            M.case (|
              Literal.number 0x39509351,
              ltac:(M.monadic (
                [M.call (|
                  external_fun_increaseAllowance,
                  [
                  ]
                |), ]
))
            |),
            M.case (|
              Literal.number 0x70a08231,
              ltac:(M.monadic (
                [M.call (|
                  external_fun_balanceOf,
                  [
                  ]
                |), ]
))
            |),
            M.case (|
              Literal.number 0xa457c2d7,
              ltac:(M.monadic (
                [M.call (|
                  external_fun_decreaseAllowance,
                  [
                  ]
                |), ]
))
            |),
            M.case (|
              Literal.number 0xa9059cbb,
              ltac:(M.monadic (
                [M.call (|
                  external_fun_transfer,
                  [
                  ]
                |), ]
))
            |),
            M.case (|
              Literal.number 0xdd62ed3e,
              ltac:(M.monadic (
                [M.call (|
                  external_fun_allowance,
                  [
                  ]
                |), ]
))
            |),
            M.case (|
              default,
              ltac:(M.monadic (
                []
))
            |),
          ]
        |), ]
))
    |), M.call (|
      revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74,
      [
      ]
    |), ]
)), M.function (|
    shift_right_unsigned,
    [
      value,
    ],
    [
      newValue,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [newValue],
          M.call (|
            shr,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    allocate_unbounded,
    [
    ],
    [
      memPtr,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [memPtr],
          M.call (|
            mload,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.call (|
        revert,
        [
        ]
      |), ]
))
  |), M.function (|
    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.call (|
        revert,
        [
        ]
      |), ]
))
  |), M.function (|
    cleanup_uint160,
    [
      value,
    ],
    [
      cleaned,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [cleaned],
          M.call (|
            and,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    cleanup_address,
    [
      value,
    ],
    [
      cleaned,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [cleaned],
          M.call (|
            cleanup_uint160,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    validator_revert_address,
    [
      value,
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          iszero,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert,
            [
            ]
          |), ]
))
      |), ]
))
  |), M.function (|
    abi_decode_address,
    [
      offset,
      end,
    ],
    [
      value,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [value],
          M.call (|
            calldataload,
            [
            ]
          |)
        |) in, M.call (|
        validator_revert_address,
        [
        ]
      |), ]
))
  |), M.function (|
    cleanup_uint256,
    [
      value,
    ],
    [
      cleaned,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [cleaned],
          value
        |) in, ]
))
  |), M.function (|
    validator_revert_uint256,
    [
      value,
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          iszero,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert,
            [
            ]
          |), ]
))
      |), ]
))
  |), M.function (|
    abi_decode_uint256,
    [
      offset,
      end,
    ],
    [
      value,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [value],
          M.call (|
            calldataload,
            [
            ]
          |)
        |) in, M.call (|
        validator_revert_uint256,
        [
        ]
      |), ]
))
  |), M.function (|
    abi_decode_addresst_uint256,
    [
      headStart,
      dataEnd,
    ],
    [
      value0,
      value1,
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          slt,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b,
            [
            ]
          |), ]
))
      |), let _ :=
        M.assign (|
          [offset],
          Literal.number 0
        |) in, let _ :=
        M.declare (|
          [value0],
          M.call (|
            abi_decode_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [offset_1],
          Literal.number 32
        |) in, let _ :=
        M.declare (|
          [value1],
          M.call (|
            abi_decode_uint256,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    cleanup_bool,
    [
      value,
    ],
    [
      cleaned,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [cleaned],
          M.call (|
            iszero,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    abi_encode_bool_to_bool,
    [
      value,
      pos,
    ],
    [
    ],
    ltac:(M.monadic (
      [M.call (|
        mstore,
        [
        ]
      |), ]
))
  |), M.function (|
    abi_encode_bool,
    [
      headStart,
      value0,
    ],
    [
      tail,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [tail],
          M.call (|
            add,
            [
            ]
          |)
        |) in, M.call (|
        abi_encode_bool_to_bool,
        [
        ]
      |), ]
))
  |), M.function (|
    external_fun_approve,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          callvalue,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,
            [
            ]
          |), ]
))
      |), let _ :=
        M.assign (|
          [paramparam_1],
          M.call (|
            abi_decode_addresst_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [ret],
          M.call (|
            fun_approve,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memPos],
          M.call (|
            allocate_unbounded,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memEnd],
          M.call (|
            abi_encode_bool,
            [
            ]
          |)
        |) in, M.call (|
        return,
        [
        ]
      |), ]
))
  |), M.function (|
    abi_decode,
    [
      headStart,
      dataEnd,
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          slt,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b,
            [
            ]
          |), ]
))
      |), ]
))
  |), M.function (|
    abi_encode_uint256_to_uint256,
    [
      value,
      pos,
    ],
    [
    ],
    ltac:(M.monadic (
      [M.call (|
        mstore,
        [
        ]
      |), ]
))
  |), M.function (|
    abi_encode_uint256,
    [
      headStart,
      value0,
    ],
    [
      tail,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [tail],
          M.call (|
            add,
            [
            ]
          |)
        |) in, M.call (|
        abi_encode_uint256_to_uint256,
        [
        ]
      |), ]
))
  |), M.function (|
    external_fun_totalSupply,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          callvalue,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,
            [
            ]
          |), ]
))
      |), M.call (|
        abi_decode,
        [
        ]
      |), let _ :=
        M.assign (|
          [ret],
          M.call (|
            fun_totalSupply,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memPos],
          M.call (|
            allocate_unbounded,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memEnd],
          M.call (|
            abi_encode_uint256,
            [
            ]
          |)
        |) in, M.call (|
        return,
        [
        ]
      |), ]
))
  |), M.function (|
    abi_decode_addresst_addresst_uint256,
    [
      headStart,
      dataEnd,
    ],
    [
      value0,
      value1,
      value2,
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          slt,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b,
            [
            ]
          |), ]
))
      |), let _ :=
        M.assign (|
          [offset],
          Literal.number 0
        |) in, let _ :=
        M.declare (|
          [value0],
          M.call (|
            abi_decode_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [offset_1],
          Literal.number 32
        |) in, let _ :=
        M.declare (|
          [value1],
          M.call (|
            abi_decode_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [offset_2],
          Literal.number 64
        |) in, let _ :=
        M.declare (|
          [value2],
          M.call (|
            abi_decode_uint256,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    external_fun_transferFrom,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          callvalue,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,
            [
            ]
          |), ]
))
      |), let _ :=
        M.assign (|
          [paramparam_1param_2],
          M.call (|
            abi_decode_addresst_addresst_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [ret],
          M.call (|
            fun_transferFrom,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memPos],
          M.call (|
            allocate_unbounded,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memEnd],
          M.call (|
            abi_encode_bool,
            [
            ]
          |)
        |) in, M.call (|
        return,
        [
        ]
      |), ]
))
  |), M.function (|
    external_fun_increaseAllowance,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          callvalue,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,
            [
            ]
          |), ]
))
      |), let _ :=
        M.assign (|
          [paramparam_1],
          M.call (|
            abi_decode_addresst_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [ret],
          M.call (|
            fun_increaseAllowance,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memPos],
          M.call (|
            allocate_unbounded,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memEnd],
          M.call (|
            abi_encode_bool,
            [
            ]
          |)
        |) in, M.call (|
        return,
        [
        ]
      |), ]
))
  |), M.function (|
    abi_decode_tuple_address,
    [
      headStart,
      dataEnd,
    ],
    [
      value0,
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          slt,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b,
            [
            ]
          |), ]
))
      |), let _ :=
        M.assign (|
          [offset],
          Literal.number 0
        |) in, let _ :=
        M.declare (|
          [value0],
          M.call (|
            abi_decode_address,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    external_fun_balanceOf,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          callvalue,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,
            [
            ]
          |), ]
))
      |), let _ :=
        M.assign (|
          [param],
          M.call (|
            abi_decode_tuple_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [ret],
          M.call (|
            fun_balanceOf,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memPos],
          M.call (|
            allocate_unbounded,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memEnd],
          M.call (|
            abi_encode_uint256,
            [
            ]
          |)
        |) in, M.call (|
        return,
        [
        ]
      |), ]
))
  |), M.function (|
    external_fun_decreaseAllowance,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          callvalue,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,
            [
            ]
          |), ]
))
      |), let _ :=
        M.assign (|
          [paramparam_1],
          M.call (|
            abi_decode_addresst_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [ret],
          M.call (|
            fun_decreaseAllowance,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memPos],
          M.call (|
            allocate_unbounded,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memEnd],
          M.call (|
            abi_encode_bool,
            [
            ]
          |)
        |) in, M.call (|
        return,
        [
        ]
      |), ]
))
  |), M.function (|
    external_fun_transfer,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          callvalue,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,
            [
            ]
          |), ]
))
      |), let _ :=
        M.assign (|
          [paramparam_1],
          M.call (|
            abi_decode_addresst_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [ret],
          M.call (|
            fun_transfer_94,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memPos],
          M.call (|
            allocate_unbounded,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memEnd],
          M.call (|
            abi_encode_bool,
            [
            ]
          |)
        |) in, M.call (|
        return,
        [
        ]
      |), ]
))
  |), M.function (|
    abi_decode_addresst_address,
    [
      headStart,
      dataEnd,
    ],
    [
      value0,
      value1,
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          slt,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b,
            [
            ]
          |), ]
))
      |), let _ :=
        M.assign (|
          [offset],
          Literal.number 0
        |) in, let _ :=
        M.declare (|
          [value0],
          M.call (|
            abi_decode_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [offset_1],
          Literal.number 32
        |) in, let _ :=
        M.declare (|
          [value1],
          M.call (|
            abi_decode_address,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    external_fun_allowance,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          callvalue,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,
            [
            ]
          |), ]
))
      |), let _ :=
        M.assign (|
          [paramparam_1],
          M.call (|
            abi_decode_addresst_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [ret],
          M.call (|
            fun_allowance,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memPos],
          M.call (|
            allocate_unbounded,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [memEnd],
          M.call (|
            abi_encode_uint256,
            [
            ]
          |)
        |) in, M.call (|
        return,
        [
        ]
      |), ]
))
  |), M.function (|
    revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.call (|
        revert,
        [
        ]
      |), ]
))
  |), M.function (|
    zero_value_for_split_bool,
    [
    ],
    [
      ret,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [ret],
          Literal.number 0
        |) in, ]
))
  |), M.function (|
    fun_approve,
    [
      var_spender,
      var_value,
    ],
    [
      var,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [zero_bool],
          M.call (|
            zero_value_for_split_bool,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [var],
          zero_bool
        |) in, let _ :=
        M.assign (|
          [expr],
          M.call (|
            caller,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_1],
          var_spender
        |) in, let _ :=
        M.assign (|
          [expr_1],
          _1
        |) in, let _ :=
        M.assign (|
          [_2],
          var_value
        |) in, let _ :=
        M.assign (|
          [expr_2],
          _2
        |) in, M.call (|
        fun__approve,
        [
        ]
      |), let _ :=
        M.assign (|
          [expr_3],
          Literal.number 0x01
        |) in, let _ :=
        M.declare (|
          [var],
          expr_3
        |) in, M.leave, ]
))
  |), M.function (|
    zero_value_for_split_uint256,
    [
    ],
    [
      ret,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [ret],
          Literal.number 0
        |) in, ]
))
  |), M.function (|
    shift_right_0_unsigned,
    [
      value,
    ],
    [
      newValue,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [newValue],
          M.call (|
            shr,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    cleanup_from_storage_uint256,
    [
      value,
    ],
    [
      cleaned,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [cleaned],
          value
        |) in, ]
))
  |), M.function (|
    extract_from_storage_value_offsett_uint256,
    [
      slot_value,
    ],
    [
      value,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [value],
          M.call (|
            cleanup_from_storage_uint256,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    read_from_storage_split_offset_uint256,
    [
      slot,
    ],
    [
      value,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [value],
          M.call (|
            extract_from_storage_value_offsett_uint256,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    fun_totalSupply,
    [
    ],
    [
      var,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [zero_uint256],
          M.call (|
            zero_value_for_split_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [var],
          zero_uint256
        |) in, let _ :=
        M.assign (|
          [_1],
          M.call (|
            read_from_storage_split_offset_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr],
          _1
        |) in, let _ :=
        M.declare (|
          [var],
          expr
        |) in, M.leave, ]
))
  |), M.function (|
    identity,
    [
      value,
    ],
    [
      ret,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [ret],
          value
        |) in, ]
))
  |), M.function (|
    convert_uint160_to_uint160,
    [
      value,
    ],
    [
      converted,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [converted],
          M.call (|
            cleanup_uint160,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    convert_uint160_to_address,
    [
      value,
    ],
    [
      converted,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [converted],
          M.call (|
            convert_uint160_to_uint160,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    convert_address_to_address,
    [
      value,
    ],
    [
      converted,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [converted],
          M.call (|
            convert_uint160_to_address,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    mapping_index_access_mapping_address_mapping_address_uint256_of_address,
    [
      slot,
      key,
    ],
    [
      dataSlot,
    ],
    ltac:(M.monadic (
      [M.call (|
        mstore,
        [
        ]
      |), M.call (|
        mstore,
        [
        ]
      |), let _ :=
        M.declare (|
          [dataSlot],
          M.call (|
            keccak256,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    mapping_index_access_mapping_address_uint256_of_address,
    [
      slot,
      key,
    ],
    [
      dataSlot,
    ],
    ltac:(M.monadic (
      [M.call (|
        mstore,
        [
        ]
      |), M.call (|
        mstore,
        [
        ]
      |), let _ :=
        M.declare (|
          [dataSlot],
          M.call (|
            keccak256,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    panic_error_0x11,
    [
    ],
    [
    ],
    ltac:(M.monadic (
      [M.call (|
        mstore,
        [
        ]
      |), M.call (|
        mstore,
        [
        ]
      |), M.call (|
        revert,
        [
        ]
      |), ]
))
  |), M.function (|
    checked_sub_uint256,
    [
      x,
      y,
    ],
    [
      diff,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [x],
          M.call (|
            cleanup_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [y],
          M.call (|
            cleanup_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [diff],
          M.call (|
            sub,
            [
            ]
          |)
        |) in, M.if (|
        M.call (|
          gt,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            panic_error_0x11,
            [
            ]
          |), ]
))
      |), ]
))
  |), M.function (|
    fun_transferFrom,
    [
      var_from,
      var_to,
      var_value,
    ],
    [
      var,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [zero_bool],
          M.call (|
            zero_value_for_split_bool,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [var],
          zero_bool
        |) in, let _ :=
        M.assign (|
          [_1],
          var_from
        |) in, let _ :=
        M.assign (|
          [expr],
          _1
        |) in, let _ :=
        M.assign (|
          [_2],
          var_to
        |) in, let _ :=
        M.assign (|
          [expr_1],
          _2
        |) in, let _ :=
        M.assign (|
          [_3],
          var_value
        |) in, let _ :=
        M.assign (|
          [expr_2],
          _3
        |) in, M.call (|
        fun_transfer,
        [
        ]
      |), let _ :=
        M.assign (|
          [_4],
          var_from
        |) in, let _ :=
        M.assign (|
          [expr_3],
          _4
        |) in, let _ :=
        M.assign (|
          [expr_4],
          M.call (|
            caller,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_11_slot],
          Literal.number 0x01
        |) in, let _ :=
        M.assign (|
          [expr_134_slot],
          _11_slot
        |) in, let _ :=
        M.assign (|
          [_5],
          var_from
        |) in, let _ :=
        M.assign (|
          [expr_5],
          _5
        |) in, let _ :=
        M.assign (|
          [_6],
          M.call (|
            mapping_index_access_mapping_address_mapping_address_uint256_of_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_slot],
          _6
        |) in, let _ :=
        M.assign (|
          [expr_136_slot],
          _slot
        |) in, let _ :=
        M.assign (|
          [expr_6],
          M.call (|
            caller,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_7],
          M.call (|
            mapping_index_access_mapping_address_uint256_of_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_8],
          M.call (|
            read_from_storage_split_offset_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_7],
          _8
        |) in, let _ :=
        M.assign (|
          [_9],
          var_value
        |) in, let _ :=
        M.assign (|
          [expr_8],
          _9
        |) in, let _ :=
        M.assign (|
          [expr_9],
          M.call (|
            checked_sub_uint256,
            [
            ]
          |)
        |) in, M.call (|
        fun__approve,
        [
        ]
      |), let _ :=
        M.assign (|
          [expr_10],
          Literal.number 0x01
        |) in, let _ :=
        M.declare (|
          [var],
          expr_10
        |) in, M.leave, ]
))
  |), M.function (|
    checked_add_uint256,
    [
      x,
      y,
    ],
    [
      sum,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [x],
          M.call (|
            cleanup_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [y],
          M.call (|
            cleanup_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [sum],
          M.call (|
            add,
            [
            ]
          |)
        |) in, M.if (|
        M.call (|
          gt,
          [
          ]
        |),
        ltac:(M.monadic (
          [M.call (|
            panic_error_0x11,
            [
            ]
          |), ]
))
      |), ]
))
  |), M.function (|
    fun_increaseAllowance,
    [
      var_spender,
      var_addedValue,
    ],
    [
      var,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [zero_t_bool],
          M.call (|
            zero_value_for_split_bool,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [var],
          zero_t_bool
        |) in, let _ :=
        M.assign (|
          [expr],
          M.call (|
            caller,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_1],
          var_spender
        |) in, let _ :=
        M.assign (|
          [expr_1],
          _1
        |) in, let _ :=
        M.assign (|
          [_20_slot],
          Literal.number 0x01
        |) in, let _ :=
        M.assign (|
          [expr_160_slot],
          _20_slot
        |) in, let _ :=
        M.assign (|
          [expr_2],
          M.call (|
            caller,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_2],
          M.call (|
            mapping_index_access_mapping_address_mapping_address_uint256_of_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_22_slot],
          _2
        |) in, let _ :=
        M.assign (|
          [expr_163_slot],
          _22_slot
        |) in, let _ :=
        M.assign (|
          [_3],
          var_spender
        |) in, let _ :=
        M.assign (|
          [expr_3],
          _3
        |) in, let _ :=
        M.assign (|
          [_4],
          M.call (|
            mapping_index_access_mapping_address_uint256_of_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_5],
          M.call (|
            read_from_storage_split_offset_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_4],
          _5
        |) in, let _ :=
        M.assign (|
          [_6],
          var_addedValue
        |) in, let _ :=
        M.assign (|
          [expr_5],
          _6
        |) in, let _ :=
        M.assign (|
          [expr_6],
          M.call (|
            checked_add_uint256,
            [
            ]
          |)
        |) in, M.call (|
        fun__approve,
        [
        ]
      |), let _ :=
        M.assign (|
          [expr_7],
          Literal.number 0x01
        |) in, let _ :=
        M.declare (|
          [var],
          expr_7
        |) in, M.leave, ]
))
  |), M.function (|
    fun_balanceOf,
    [
      var_owner,
    ],
    [
      var,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [zero_t_uint256],
          M.call (|
            zero_value_for_split_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [var],
          zero_t_uint256
        |) in, let _ :=
        M.assign (|
          [_28_slot],
          Literal.number 0x00
        |) in, let _ :=
        M.assign (|
          [expr_54_slot],
          _28_slot
        |) in, let _ :=
        M.assign (|
          [_1],
          var_owner
        |) in, let _ :=
        M.assign (|
          [expr],
          _1
        |) in, let _ :=
        M.assign (|
          [_2],
          M.call (|
            mapping_index_access_mapping_address_uint256_of_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_3],
          M.call (|
            read_from_storage_split_offset_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_1],
          _3
        |) in, let _ :=
        M.declare (|
          [var],
          expr_1
        |) in, M.leave, ]
))
  |), M.function (|
    fun_decreaseAllowance,
    [
      var_spender,
      var_subtractedValue,
    ],
    [
      var,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [zero_bool],
          M.call (|
            zero_value_for_split_bool,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [var],
          zero_bool
        |) in, let _ :=
        M.assign (|
          [expr],
          M.call (|
            caller,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_1],
          var_spender
        |) in, let _ :=
        M.assign (|
          [expr_1],
          _1
        |) in, let _ :=
        M.assign (|
          [_34_slot],
          Literal.number 0x01
        |) in, let _ :=
        M.assign (|
          [expr_slot],
          _34_slot
        |) in, let _ :=
        M.assign (|
          [expr_2],
          M.call (|
            caller,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_2],
          M.call (|
            mapping_index_access_mapping_address_mapping_address_uint256_of_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_36_slot],
          _2
        |) in, let _ :=
        M.assign (|
          [expr_189_slot],
          _36_slot
        |) in, let _ :=
        M.assign (|
          [_3],
          var_spender
        |) in, let _ :=
        M.assign (|
          [expr_3],
          _3
        |) in, let _ :=
        M.assign (|
          [_4],
          M.call (|
            mapping_index_access_mapping_address_uint256_of_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_5],
          M.call (|
            read_from_storage_split_offset_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_4],
          _5
        |) in, let _ :=
        M.assign (|
          [_6],
          var_subtractedValue
        |) in, let _ :=
        M.assign (|
          [expr_5],
          _6
        |) in, let _ :=
        M.assign (|
          [expr_6],
          M.call (|
            checked_sub_uint256,
            [
            ]
          |)
        |) in, M.call (|
        fun__approve,
        [
        ]
      |), let _ :=
        M.assign (|
          [expr_7],
          Literal.number 0x01
        |) in, let _ :=
        M.declare (|
          [var],
          expr_7
        |) in, M.leave, ]
))
  |), M.function (|
    fun_transfer_94,
    [
      var_to,
      var_value,
    ],
    [
      var,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [zero_bool],
          M.call (|
            zero_value_for_split_bool,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [var],
          zero_bool
        |) in, let _ :=
        M.assign (|
          [expr],
          M.call (|
            caller,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_1],
          var_to
        |) in, let _ :=
        M.assign (|
          [expr_1],
          _1
        |) in, let _ :=
        M.assign (|
          [_2],
          var_value
        |) in, let _ :=
        M.assign (|
          [expr_2],
          _2
        |) in, M.call (|
        fun_transfer,
        [
        ]
      |), let _ :=
        M.assign (|
          [expr_3],
          Literal.number 0x01
        |) in, let _ :=
        M.declare (|
          [var],
          expr_3
        |) in, M.leave, ]
))
  |), M.function (|
    fun_allowance,
    [
      var_owner,
      var_spender,
    ],
    [
      var_,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [zero_uint256],
          M.call (|
            zero_value_for_split_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [var_],
          zero_uint256
        |) in, let _ :=
        M.assign (|
          [_45_slot],
          Literal.number 0x01
        |) in, let _ :=
        M.assign (|
          [expr_68_slot],
          _45_slot
        |) in, let _ :=
        M.assign (|
          [_1],
          var_owner
        |) in, let _ :=
        M.assign (|
          [expr],
          _1
        |) in, let _ :=
        M.assign (|
          [_2],
          M.call (|
            mapping_index_access_mapping_address_mapping_address_uint256_of_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_48_slot],
          _2
        |) in, let _ :=
        M.assign (|
          [expr_70_slot],
          _48_slot
        |) in, let _ :=
        M.assign (|
          [_3],
          var_spender
        |) in, let _ :=
        M.assign (|
          [expr_1],
          _3
        |) in, let _ :=
        M.assign (|
          [_4],
          M.call (|
            mapping_index_access_mapping_address_uint256_of_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_5],
          M.call (|
            read_from_storage_split_offset_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_2],
          _5
        |) in, let _ :=
        M.declare (|
          [var_],
          expr_2
        |) in, M.leave, ]
))
  |), M.function (|
    cleanup_rational_by,
    [
      value,
    ],
    [
      cleaned,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [cleaned],
          value
        |) in, ]
))
  |), M.function (|
    convert_rational_by_to_uint160,
    [
      value,
    ],
    [
      converted,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [converted],
          M.call (|
            cleanup_uint160,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    convert_rational_by_to_address,
    [
      value,
    ],
    [
      converted,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [converted],
          M.call (|
            convert_rational_by_to_uint160,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    array_storeLengthForEncoding_string,
    [
      pos,
      length,
    ],
    [
      updated_pos,
    ],
    ltac:(M.monadic (
      [M.call (|
        mstore,
        [
        ]
      |), let _ :=
        M.declare (|
          [updated_pos],
          M.call (|
            add,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208,
    [
      memPtr,
    ],
    [
    ],
    ltac:(M.monadic (
      [M.call (|
        mstore,
        [
        ]
      |), M.call (|
        mstore,
        [
        ]
      |), ]
))
  |), M.function (|
    abi_encode_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208,
    [
      pos,
    ],
    [
      end,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [pos],
          M.call (|
            array_storeLengthForEncoding_string,
            [
            ]
          |)
        |) in, M.call (|
        store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208,
        [
        ]
      |), let _ :=
        M.declare (|
          [end],
          M.call (|
            add,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    abi_encode_stringliteral_c953,
    [
      headStart,
    ],
    [
      tail,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [tail],
          M.call (|
            add,
            [
            ]
          |)
        |) in, M.call (|
        mstore,
        [
        ]
      |), let _ :=
        M.declare (|
          [tail],
          M.call (|
            abi_encode_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    require_helper_stringliteral_c953,
    [
      condition,
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          iszero,
          [
          ]
        |),
        ltac:(M.monadic (
          [let _ :=
            M.assign (|
              [memPtr],
              M.call (|
                allocate_unbounded,
                [
                ]
              |)
            |) in, M.call (|
            mstore,
            [
            ]
          |), let _ :=
            M.assign (|
              [end],
              M.call (|
                abi_encode_stringliteral_c953,
                [
                ]
              |)
            |) in, M.call (|
            revert,
            [
            ]
          |), ]
))
      |), ]
))
  |), M.function (|
    store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029,
    [
      memPtr,
    ],
    [
    ],
    ltac:(M.monadic (
      [M.call (|
        mstore,
        [
        ]
      |), M.call (|
        mstore,
        [
        ]
      |), ]
))
  |), M.function (|
    abi_encode_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029,
    [
      pos,
    ],
    [
      end,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [pos],
          M.call (|
            array_storeLengthForEncoding_string,
            [
            ]
          |)
        |) in, M.call (|
        store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029,
        [
        ]
      |), let _ :=
        M.declare (|
          [end],
          M.call (|
            add,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    abi_encode_stringliteral,
    [
      headStart,
    ],
    [
      tail,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [tail],
          M.call (|
            add,
            [
            ]
          |)
        |) in, M.call (|
        mstore,
        [
        ]
      |), let _ :=
        M.declare (|
          [tail],
          M.call (|
            abi_encode_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    require_helper_stringliteral_2488,
    [
      condition,
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          iszero,
          [
          ]
        |),
        ltac:(M.monadic (
          [let _ :=
            M.assign (|
              [memPtr],
              M.call (|
                allocate_unbounded,
                [
                ]
              |)
            |) in, M.call (|
            mstore,
            [
            ]
          |), let _ :=
            M.assign (|
              [end],
              M.call (|
                abi_encode_stringliteral,
                [
                ]
              |)
            |) in, M.call (|
            revert,
            [
            ]
          |), ]
))
      |), ]
))
  |), M.function (|
    shift_left,
    [
      value,
    ],
    [
      newValue,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [newValue],
          M.call (|
            shl,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    update_byte_slice_shift,
    [
      value,
      toInsert,
    ],
    [
      result,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [mask],
          M.call (|
            not,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [toInsert],
          M.call (|
            shift_left,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [value],
          M.call (|
            and,
            [
            ]
          |)
        |) in, let _ :=
        M.declare (|
          [result],
          M.call (|
            or,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    convert_uint256_to_uint256,
    [
      value,
    ],
    [
      converted,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [converted],
          M.call (|
            cleanup_uint256,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    prepare_store_uint256,
    [
      value,
    ],
    [
      ret,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [ret],
          value
        |) in, ]
))
  |), M.function (|
    update_storage_value_offsett_uint256_to_uint256,
    [
      slot,
      value,
    ],
    [
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [convertedValue],
          M.call (|
            convert_uint256_to_uint256,
            [
            ]
          |)
        |) in, M.call (|
        sstore,
        [
        ]
      |), ]
))
  |), M.function (|
    fun__approve,
    [
      var_owner,
      var_spender,
      var_value,
    ],
    [
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [_1],
          var_owner
        |) in, let _ :=
        M.assign (|
          [expr],
          _1
        |) in, let _ :=
        M.assign (|
          [expr_1],
          Literal.number 0x00
        |) in, let _ :=
        M.assign (|
          [expr_2],
          M.call (|
            convert_rational_by_to_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_3],
          M.call (|
            iszero,
            [
            ]
          |)
        |) in, M.call (|
        require_helper_stringliteral_c953,
        [
        ]
      |), let _ :=
        M.assign (|
          [_2],
          var_spender
        |) in, let _ :=
        M.assign (|
          [expr_4],
          _2
        |) in, let _ :=
        M.assign (|
          [expr_5],
          Literal.number 0x00
        |) in, let _ :=
        M.assign (|
          [expr_6],
          M.call (|
            convert_rational_by_to_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_7],
          M.call (|
            iszero,
            [
            ]
          |)
        |) in, M.call (|
        require_helper_stringliteral_2488,
        [
        ]
      |), let _ :=
        M.assign (|
          [_3],
          var_value
        |) in, let _ :=
        M.assign (|
          [expr_8],
          _3
        |) in, let _ :=
        M.assign (|
          [_55_slot],
          Literal.number 0x01
        |) in, let _ :=
        M.assign (|
          [expr_360_slot],
          _55_slot
        |) in, let _ :=
        M.assign (|
          [_4],
          var_owner
        |) in, let _ :=
        M.assign (|
          [expr_9],
          _4
        |) in, let _ :=
        M.assign (|
          [_5],
          M.call (|
            mapping_index_access_mapping_address_mapping_address_uint256_of_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_58_slot],
          _5
        |) in, let _ :=
        M.assign (|
          [expr_363_slot],
          _58_slot
        |) in, let _ :=
        M.assign (|
          [_6],
          var_spender
        |) in, let _ :=
        M.assign (|
          [expr_10],
          _6
        |) in, let _ :=
        M.assign (|
          [_7],
          M.call (|
            mapping_index_access_mapping_address_uint256_of_address,
            [
            ]
          |)
        |) in, M.call (|
        update_storage_value_offsett_uint256_to_uint256,
        [
        ]
      |), let _ :=
        M.assign (|
          [_8],
          var_owner
        |) in, let _ :=
        M.assign (|
          [expr_11],
          _8
        |) in, let _ :=
        M.assign (|
          [_9],
          var_spender
        |) in, let _ :=
        M.assign (|
          [expr_12],
          _9
        |) in, let _ :=
        M.assign (|
          [_10],
          var_value
        |) in, let _ :=
        M.assign (|
          [expr_13],
          _10
        |) in, let _ :=
        M.assign (|
          [_11],
          Literal.number 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925
        |) in, let _ :=
        M.assign (|
          [_12],
          M.call (|
            convert_address_to_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_13],
          M.call (|
            convert_address_to_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_14],
          M.call (|
            allocate_unbounded,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_15],
          M.call (|
            abi_encode_uint256,
            [
            ]
          |)
        |) in, M.call (|
        log3,
        [
        ]
      |), ]
))
  |), M.function (|
    store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f,
    [
      memPtr,
    ],
    [
    ],
    ltac:(M.monadic (
      [M.call (|
        mstore,
        [
        ]
      |), M.call (|
        mstore,
        [
        ]
      |), ]
))
  |), M.function (|
    abi_encode_stringliteral_0557,
    [
      pos,
    ],
    [
      end,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [pos],
          M.call (|
            array_storeLengthForEncoding_string,
            [
            ]
          |)
        |) in, M.call (|
        store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f,
        [
        ]
      |), let _ :=
        M.declare (|
          [end],
          M.call (|
            add,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    abi_encode_tuple_stringliteral,
    [
      headStart,
    ],
    [
      tail,
    ],
    ltac:(M.monadic (
      [let _ :=
        M.declare (|
          [tail],
          M.call (|
            add,
            [
            ]
          |)
        |) in, M.call (|
        mstore,
        [
        ]
      |), let _ :=
        M.declare (|
          [tail],
          M.call (|
            abi_encode_stringliteral_0557,
            [
            ]
          |)
        |) in, ]
))
  |), M.function (|
    require_helper_stringliteral,
    [
      condition,
    ],
    [
    ],
    ltac:(M.monadic (
      [M.if (|
        M.call (|
          iszero,
          [
          ]
        |),
        ltac:(M.monadic (
          [let _ :=
            M.assign (|
              [memPtr],
              M.call (|
                allocate_unbounded,
                [
                ]
              |)
            |) in, M.call (|
            mstore,
            [
            ]
          |), let _ :=
            M.assign (|
              [end],
              M.call (|
                abi_encode_tuple_stringliteral,
                [
                ]
              |)
            |) in, M.call (|
            revert,
            [
            ]
          |), ]
))
      |), ]
))
  |), M.function (|
    fun_transfer,
    [
      var_from,
      var_to,
      var_value,
    ],
    [
    ],
    ltac:(M.monadic (
      [let _ :=
        M.assign (|
          [_1],
          var_to
        |) in, let _ :=
        M.assign (|
          [expr],
          _1
        |) in, let _ :=
        M.assign (|
          [expr_1],
          Literal.number 0x00
        |) in, let _ :=
        M.assign (|
          [expr_2],
          M.call (|
            convert_rational_by_to_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_3],
          M.call (|
            iszero,
            [
            ]
          |)
        |) in, M.call (|
        require_helper_stringliteral,
        [
        ]
      |), let _ :=
        M.assign (|
          [_70_slot],
          Literal.number 0x00
        |) in, let _ :=
        M.assign (|
          [expr_221_slot],
          _70_slot
        |) in, let _ :=
        M.assign (|
          [_2],
          var_from
        |) in, let _ :=
        M.assign (|
          [expr_4],
          _2
        |) in, let _ :=
        M.assign (|
          [_3],
          M.call (|
            mapping_index_access_mapping_address_uint256_of_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_4],
          M.call (|
            read_from_storage_split_offset_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_5],
          _4
        |) in, let _ :=
        M.assign (|
          [_5],
          var_value
        |) in, let _ :=
        M.assign (|
          [expr_6],
          _5
        |) in, let _ :=
        M.assign (|
          [expr_7],
          M.call (|
            checked_sub_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_75_slot],
          Literal.number 0x00
        |) in, let _ :=
        M.assign (|
          [expr_218_slot],
          _75_slot
        |) in, let _ :=
        M.assign (|
          [_6],
          var_from
        |) in, let _ :=
        M.assign (|
          [expr_8],
          _6
        |) in, let _ :=
        M.assign (|
          [_7],
          M.call (|
            mapping_index_access_mapping_address_uint256_of_address,
            [
            ]
          |)
        |) in, M.call (|
        update_storage_value_offsett_uint256_to_uint256,
        [
        ]
      |), let _ :=
        M.assign (|
          [_78_slot],
          Literal.number 0x00
        |) in, let _ :=
        M.assign (|
          [expr_231_slot],
          _78_slot
        |) in, let _ :=
        M.assign (|
          [_8],
          var_to
        |) in, let _ :=
        M.assign (|
          [expr_9],
          _8
        |) in, let _ :=
        M.assign (|
          [_9],
          M.call (|
            mapping_index_access_mapping_address_uint256_of_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_10],
          M.call (|
            read_from_storage_split_offset_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [expr_10],
          _10
        |) in, let _ :=
        M.assign (|
          [_11],
          var_value
        |) in, let _ :=
        M.assign (|
          [expr_11],
          _11
        |) in, let _ :=
        M.assign (|
          [expr_12],
          M.call (|
            checked_add_uint256,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_83_slot],
          Literal.number 0x00
        |) in, let _ :=
        M.assign (|
          [expr_228_slot],
          _83_slot
        |) in, let _ :=
        M.assign (|
          [_12],
          var_to
        |) in, let _ :=
        M.assign (|
          [expr_13],
          _12
        |) in, let _ :=
        M.assign (|
          [_13],
          M.call (|
            mapping_index_access_mapping_address_uint256_of_address,
            [
            ]
          |)
        |) in, M.call (|
        update_storage_value_offsett_uint256_to_uint256,
        [
        ]
      |), let _ :=
        M.assign (|
          [_14],
          var_from
        |) in, let _ :=
        M.assign (|
          [expr_14],
          _14
        |) in, let _ :=
        M.assign (|
          [_15],
          var_to
        |) in, let _ :=
        M.assign (|
          [expr_15],
          _15
        |) in, let _ :=
        M.assign (|
          [_16],
          var_value
        |) in, let _ :=
        M.assign (|
          [expr_16],
          _16
        |) in, let _ :=
        M.assign (|
          [_17],
          Literal.number 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
        |) in, let _ :=
        M.assign (|
          [_18],
          M.call (|
            convert_address_to_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_19],
          M.call (|
            convert_address_to_address,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_20],
          M.call (|
            allocate_unbounded,
            [
            ]
          |)
        |) in, let _ :=
        M.assign (|
          [_21],
          M.call (|
            abi_encode_uint256,
            [
            ]
          |)
        |) in, M.call (|
        log3,
        [
        ]
      |), ]
))
  |), ]
))Coq AST:


======= erc20.sol =======
(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma solidity>=0.4.0<0.9.0 *)

(* Contract *)
Module ERC20.
  (* Event Transfer *)

  (* Event Approval *)

  Definition _balances : Value.t :=
    undefined.

  Definition _allowances : Value.t :=
    undefined.

  Definition _totalSupply : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "_mint" |),
          [
            M.member_access (|
              M.get_name (| "msg" |),
              "sender"
            |),
            Value.Integer 20
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition totalSupply (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.get_name (| "_totalSupply" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition balanceOf (α : list Value.t) : M :=
    match α with
    | [owner] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "_balances" |),
            Some (M.get_name (| "owner" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition allowance (α : list Value.t) : M :=
    match α with
    | [owner, spender] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.index_access (|
              M.get_name (| "_allowances" |),
              Some (M.get_name (| "owner" |))
            |),
            Some (M.get_name (| "spender" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition transfer (α : list Value.t) : M :=
    match α with
    | [to, value] =>
      let _ :=
        M.call (|
          M.get_name (| "_transfer" |),
          [
            M.member_access (|
              M.get_name (| "msg" |),
              "sender"
            |),
            M.get_name (| "to" |),
            M.get_name (| "value" |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition approve (α : list Value.t) : M :=
    match α with
    | [spender, value] =>
      let _ :=
        M.call (|
          M.get_name (| "_approve" |),
          [
            M.member_access (|
              M.get_name (| "msg" |),
              "sender"
            |),
            M.get_name (| "spender" |),
            M.get_name (| "value" |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition transferFrom (α : list Value.t) : M :=
    match α with
    | [from, to, value] =>
      let _ :=
        M.call (|
          M.get_name (| "_transfer" |),
          [
            M.get_name (| "from" |),
            M.get_name (| "to" |),
            M.get_name (| "value" |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "_approve" |),
          [
            M.get_name (| "from" |),
            M.member_access (|
              M.get_name (| "msg" |),
              "sender"
            |),
            M.bin_op (|
              "-",
              M.index_access (|
                M.index_access (|
                  M.get_name (| "_allowances" |),
                  Some (M.get_name (| "from" |))
                |),
                Some (M.member_access (|
                  M.get_name (| "msg" |),
                  "sender"
                |))
              |),
              M.get_name (| "value" |)
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition increaseAllowance (α : list Value.t) : M :=
    match α with
    | [spender, addedValue] =>
      let _ :=
        M.call (|
          M.get_name (| "_approve" |),
          [
            M.member_access (|
              M.get_name (| "msg" |),
              "sender"
            |),
            M.get_name (| "spender" |),
            M.bin_op (|
              "+",
              M.index_access (|
                M.index_access (|
                  M.get_name (| "_allowances" |),
                  Some (M.member_access (|
                    M.get_name (| "msg" |),
                    "sender"
                  |))
                |),
                Some (M.get_name (| "spender" |))
              |),
              M.get_name (| "addedValue" |)
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition decreaseAllowance (α : list Value.t) : M :=
    match α with
    | [spender, subtractedValue] =>
      let _ :=
        M.call (|
          M.get_name (| "_approve" |),
          [
            M.member_access (|
              M.get_name (| "msg" |),
              "sender"
            |),
            M.get_name (| "spender" |),
            M.bin_op (|
              "-",
              M.index_access (|
                M.index_access (|
                  M.get_name (| "_allowances" |),
                  Some (M.member_access (|
                    M.get_name (| "msg" |),
                    "sender"
                  |))
                |),
                Some (M.get_name (| "spender" |))
              |),
              M.get_name (| "subtractedValue" |)
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition _transfer (α : list Value.t) : M :=
    match α with
    | [from, to, value] =>
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "!=",
              M.get_name (| "to" |),
              M.call (|
                Ty.path "address",
                [
                  Value.Integer 0
                ]
              |)
            |),
            Value.String "ERC20: transfer to the zero address"
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "_balances" |),
            Some (M.get_name (| "from" |))
          |),
          M.bin_op (|
            "-",
            M.index_access (|
              M.get_name (| "_balances" |),
              Some (M.get_name (| "from" |))
            |),
            M.get_name (| "value" |)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "_balances" |),
            Some (M.get_name (| "to" |))
          |),
          M.bin_op (|
            "+",
            M.index_access (|
              M.get_name (| "_balances" |),
              Some (M.get_name (| "to" |))
            |),
            M.get_name (| "value" |)
          |)
        |) in
      let _ :=
        EmitStatement M.call (|
          M.get_name (| "Transfer" |),
          [
            M.get_name (| "from" |),
            M.get_name (| "to" |),
            M.get_name (| "value" |)
          ]
        |)
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition _mint (α : list Value.t) : M :=
    match α with
    | [account, value] =>
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "!=",
              M.get_name (| "account" |),
              M.call (|
                Ty.path "address",
                [
                  Value.Integer 0
                ]
              |)
            |),
            Value.String "ERC20: mint to the zero address"
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "_totalSupply" |),
          M.bin_op (|
            "+",
            M.get_name (| "_totalSupply" |),
            M.get_name (| "value" |)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "_balances" |),
            Some (M.get_name (| "account" |))
          |),
          M.bin_op (|
            "+",
            M.index_access (|
              M.get_name (| "_balances" |),
              Some (M.get_name (| "account" |))
            |),
            M.get_name (| "value" |)
          |)
        |) in
      let _ :=
        EmitStatement M.call (|
          M.get_name (| "Transfer" |),
          [
            M.call (|
              Ty.path "address",
              [
                Value.Integer 0
              ]
            |),
            M.get_name (| "account" |),
            M.get_name (| "value" |)
          ]
        |)
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition _burn (α : list Value.t) : M :=
    match α with
    | [account, value] =>
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "!=",
              M.get_name (| "account" |),
              M.call (|
                Ty.path "address",
                [
                  Value.Integer 0
                ]
              |)
            |),
            Value.String "ERC20: burn from the zero address"
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "_totalSupply" |),
          M.bin_op (|
            "-",
            M.get_name (| "_totalSupply" |),
            M.get_name (| "value" |)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "_balances" |),
            Some (M.get_name (| "account" |))
          |),
          M.bin_op (|
            "-",
            M.index_access (|
              M.get_name (| "_balances" |),
              Some (M.get_name (| "account" |))
            |),
            M.get_name (| "value" |)
          |)
        |) in
      let _ :=
        EmitStatement M.call (|
          M.get_name (| "Transfer" |),
          [
            M.get_name (| "account" |),
            M.call (|
              Ty.path "address",
              [
                Value.Integer 0
              ]
            |),
            M.get_name (| "value" |)
          ]
        |)
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition _approve (α : list Value.t) : M :=
    match α with
    | [owner, spender, value] =>
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "!=",
              M.get_name (| "owner" |),
              M.call (|
                Ty.path "address",
                [
                  Value.Integer 0
                ]
              |)
            |),
            Value.String "ERC20: approve from the zero address"
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "!=",
              M.get_name (| "spender" |),
              M.call (|
                Ty.path "address",
                [
                  Value.Integer 0
                ]
              |)
            |),
            Value.String "ERC20: approve to the zero address"
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "_allowances" |),
              Some (M.get_name (| "owner" |))
            |),
            Some (M.get_name (| "spender" |))
          |),
          M.get_name (| "value" |)
        |) in
      let _ :=
        EmitStatement M.call (|
          M.get_name (| "Approval" |),
          [
            M.get_name (| "owner" |),
            M.get_name (| "spender" |),
            M.get_name (| "value" |)
          ]
        |)
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition _burnFrom (α : list Value.t) : M :=
    match α with
    | [account, value] =>
      let _ :=
        M.call (|
          M.get_name (| "_burn" |),
          [
            M.get_name (| "account" |),
            M.get_name (| "value" |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "_approve" |),
          [
            M.get_name (| "account" |),
            M.member_access (|
              M.get_name (| "msg" |),
              "sender"
            |),
            M.bin_op (|
              "-",
              M.index_access (|
                M.index_access (|
                  M.get_name (| "_allowances" |),
                  Some (M.get_name (| "account" |))
                |),
                Some (M.member_access (|
                  M.get_name (| "msg" |),
                  "sender"
                |))
              |),
              M.get_name (| "value" |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End ERC20.
Optimized IR AST:
{"code":{"block":"ltac:(M.monadic (\n  [ltac:(M.monadic (\n    [M.call (|\n      mstore,\n      [\n      ]\n    |), M.if (|\n      M.call (|\n        callvalue,\n        [\n        ]\n      |),\n      ltac:(M.monadic (\n        [M.call (|\n          revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,\n          [\n          ]\n        |), ]\n))\n    |), M.call (|\n      constructor_ERC20,\n      [\n      ]\n    |), let _ :=\n      M.assign (|\n        [_1],\n        M.call (|\n          allocate_unbounded,\n          [\n          ]\n        |)\n      |) in, M.call (|\n      codecopy,\n      [\n      ]\n    |), M.call (|\n      return,\n      [\n      ]\n    |), ]\n)), M.function (|\n    allocate_unbounded,\n    [\n    ],\n    [\n      memPtr,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [memPtr],\n          M.call (|\n            mload,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,\n    [\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [M.call (|\n        revert,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    cleanup_rational_by,\n    [\n      value,\n    ],\n    [\n      cleaned,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [cleaned],\n          value\n        |) in, ]\n))\n  |), M.function (|\n    cleanup_uint256,\n    [\n      value,\n    ],\n    [\n      cleaned,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [cleaned],\n          value\n        |) in, ]\n))\n  |), M.function (|\n    identity,\n    [\n      value,\n    ],\n    [\n      ret,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [ret],\n          value\n        |) in, ]\n))\n  |), M.function (|\n    convert_rational_by_to_uint256,\n    [\n      value,\n    ],\n    [\n      converted,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [converted],\n          M.call (|\n            cleanup_uint256,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    constructor_ERC20,\n    [\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.assign (|\n          [expr],\n          M.call (|\n            caller,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [expr_1],\n          Literal.number 0x14\n        |) in, let _ :=\n        M.assign (|\n          [_1],\n          M.call (|\n            convert_rational_by_to_uint256,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        fun_mint,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    cleanup_t_rational_by,\n    [\n      value,\n    ],\n    [\n      cleaned,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [cleaned],\n          value\n        |) in, ]\n))\n  |), M.function (|\n    cleanup_uint160,\n    [\n      value,\n    ],\n    [\n      cleaned,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [cleaned],\n          M.call (|\n            and,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    convert_rational_by_to_uint160,\n    [\n      value,\n    ],\n    [\n      converted,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [converted],\n          M.call (|\n            cleanup_uint160,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    convert_rational_by_to_address,\n    [\n      value,\n    ],\n    [\n      converted,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [converted],\n          M.call (|\n            convert_rational_by_to_uint160,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    cleanup_address,\n    [\n      value,\n    ],\n    [\n      cleaned,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [cleaned],\n          M.call (|\n            cleanup_uint160,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    array_storeLengthForEncoding_string,\n    [\n      pos,\n      length,\n    ],\n    [\n      updated_pos,\n    ],\n    ltac:(M.monadic (\n      [M.call (|\n        mstore,\n        [\n        ]\n      |), let _ :=\n        M.declare (|\n          [updated_pos],\n          M.call (|\n            add,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e,\n    [\n      memPtr,\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [M.call (|\n        mstore,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    abi_encode_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e,\n    [\n      pos,\n    ],\n    [\n      end,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [pos],\n          M.call (|\n            array_storeLengthForEncoding_string,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e,\n        [\n        ]\n      |), let _ :=\n        M.declare (|\n          [end],\n          M.call (|\n            add,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    abi_encode_stringliteral_fc0b,\n    [\n      headStart,\n    ],\n    [\n      tail,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [tail],\n          M.call (|\n            add,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        mstore,\n        [\n        ]\n      |), let _ :=\n        M.declare (|\n          [tail],\n          M.call (|\n            abi_encode_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    require_helper_stringliteral_fc0b,\n    [\n      condition,\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [M.if (|\n        M.call (|\n          iszero,\n          [\n          ]\n        |),\n        ltac:(M.monadic (\n          [let _ :=\n            M.assign (|\n              [memPtr],\n              M.call (|\n                allocate_unbounded,\n                [\n                ]\n              |)\n            |) in, M.call (|\n            mstore,\n            [\n            ]\n          |), let _ :=\n            M.assign (|\n              [end],\n              M.call (|\n                abi_encode_stringliteral_fc0b,\n                [\n                ]\n              |)\n            |) in, M.call (|\n            revert,\n            [\n            ]\n          |), ]\n))\n      |), ]\n))\n  |), M.function (|\n    shift_right_unsigned,\n    [\n      value,\n    ],\n    [\n      newValue,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [newValue],\n          M.call (|\n            shr,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    cleanup_from_storage_uint256,\n    [\n      value,\n    ],\n    [\n      cleaned,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [cleaned],\n          value\n        |) in, ]\n))\n  |), M.function (|\n    extract_from_storage_value_offsett_uint256,\n    [\n      slot_value,\n    ],\n    [\n      value,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [value],\n          M.call (|\n            cleanup_from_storage_uint256,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    read_from_storage_split_offset_uint256,\n    [\n      slot,\n    ],\n    [\n      value,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [value],\n          M.call (|\n            extract_from_storage_value_offsett_uint256,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    panic_error_0x11,\n    [\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [M.call (|\n        mstore,\n        [\n        ]\n      |), M.call (|\n        mstore,\n        [\n        ]\n      |), M.call (|\n        revert,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    checked_add_uint256,\n    [\n      x,\n      y,\n    ],\n    [\n      sum,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [x],\n          M.call (|\n            cleanup_uint256,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.declare (|\n          [y],\n          M.call (|\n            cleanup_uint256,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.declare (|\n          [sum],\n          M.call (|\n            add,\n            [\n            ]\n          |)\n        |) in, M.if (|\n        M.call (|\n          gt,\n          [\n          ]\n        |),\n        ltac:(M.monadic (\n          [M.call (|\n            panic_error_0x11,\n            [\n            ]\n          |), ]\n))\n      |), ]\n))\n  |), M.function (|\n    shift_left,\n    [\n      value,\n    ],\n    [\n      newValue,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [newValue],\n          M.call (|\n            shl,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    update_byte_slice_shift,\n    [\n      value,\n      toInsert,\n    ],\n    [\n      result,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.assign (|\n          [mask],\n          M.call (|\n            not,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.declare (|\n          [toInsert],\n          M.call (|\n            shift_left,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.declare (|\n          [value],\n          M.call (|\n            and,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.declare (|\n          [result],\n          M.call (|\n            or,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    convert_uint256_to_uint256,\n    [\n      value,\n    ],\n    [\n      converted,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [converted],\n          M.call (|\n            cleanup_uint256,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    prepare_store_uint256,\n    [\n      value,\n    ],\n    [\n      ret,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [ret],\n          value\n        |) in, ]\n))\n  |), M.function (|\n    update_storage_value_offsett_uint256_to_uint256,\n    [\n      slot,\n      value,\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.assign (|\n          [convertedValue],\n          M.call (|\n            convert_uint256_to_uint256,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        sstore,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    convert_uint160_to_uint160,\n    [\n      value,\n    ],\n    [\n      converted,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [converted],\n          M.call (|\n            cleanup_uint160,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    convert_uint160_to_address,\n    [\n      value,\n    ],\n    [\n      converted,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [converted],\n          M.call (|\n            convert_uint160_to_uint160,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    convert_address_to_address,\n    [\n      value,\n    ],\n    [\n      converted,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [converted],\n          M.call (|\n            convert_uint160_to_address,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    mapping_index_access_mapping_address_uint256_of_address,\n    [\n      slot,\n      key,\n    ],\n    [\n      dataSlot,\n    ],\n    ltac:(M.monadic (\n      [M.call (|\n        mstore,\n        [\n        ]\n      |), M.call (|\n        mstore,\n        [\n        ]\n      |), let _ :=\n        M.declare (|\n          [dataSlot],\n          M.call (|\n            keccak256,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    abi_encode_uint256_to_uint256,\n    [\n      value,\n      pos,\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [M.call (|\n        mstore,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    abi_encode_uint256,\n    [\n      headStart,\n      value0,\n    ],\n    [\n      tail,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [tail],\n          M.call (|\n            add,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        abi_encode_uint256_to_uint256,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    fun_mint,\n    [\n      var_account,\n      var_value,\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.assign (|\n          [_1],\n          var_account\n        |) in, let _ :=\n        M.assign (|\n          [expr],\n          _1\n        |) in, let _ :=\n        M.assign (|\n          [expr_1],\n          Literal.number 0x00\n        |) in, let _ :=\n        M.assign (|\n          [expr_2],\n          M.call (|\n            convert_rational_by_to_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [expr_3],\n          M.call (|\n            iszero,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        require_helper_stringliteral_fc0b,\n        [\n        ]\n      |), let _ :=\n        M.assign (|\n          [_2],\n          M.call (|\n            read_from_storage_split_offset_uint256,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [expr_4],\n          _2\n        |) in, let _ :=\n        M.assign (|\n          [_3],\n          var_value\n        |) in, let _ :=\n        M.assign (|\n          [expr_5],\n          _3\n        |) in, let _ :=\n        M.assign (|\n          [expr_6],\n          M.call (|\n            checked_add_uint256,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        update_storage_value_offsett_uint256_to_uint256,\n        [\n        ]\n      |), let _ :=\n        M.assign (|\n          [_6_slot],\n          Literal.number 0x00\n        |) in, let _ :=\n        M.assign (|\n          [expr_271_slot],\n          _6_slot\n        |) in, let _ :=\n        M.assign (|\n          [_4],\n          var_account\n        |) in, let _ :=\n        M.assign (|\n          [expr_7],\n          _4\n        |) in, let _ :=\n        M.assign (|\n          [_5],\n          M.call (|\n            mapping_index_access_mapping_address_uint256_of_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_6],\n          M.call (|\n            read_from_storage_split_offset_uint256,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [expr_8],\n          _6\n        |) in, let _ :=\n        M.assign (|\n          [_7],\n          var_value\n        |) in, let _ :=\n        M.assign (|\n          [expr_9],\n          _7\n        |) in, let _ :=\n        M.assign (|\n          [expr_10],\n          M.call (|\n            checked_add_uint256,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_slot],\n          Literal.number 0x00\n        |) in, let _ :=\n        M.assign (|\n          [expr_slot],\n          _slot\n        |) in, let _ :=\n        M.assign (|\n          [_8],\n          var_account\n        |) in, let _ :=\n        M.assign (|\n          [expr_11],\n          _8\n        |) in, let _ :=\n        M.assign (|\n          [_9],\n          M.call (|\n            mapping_index_access_mapping_address_uint256_of_address,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        update_storage_value_offsett_uint256_to_uint256,\n        [\n        ]\n      |), let _ :=\n        M.assign (|\n          [expr_12],\n          Literal.number 0x00\n        |) in, let _ :=\n        M.assign (|\n          [expr_13],\n          M.call (|\n            convert_rational_by_to_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_10],\n          var_account\n        |) in, let _ :=\n        M.assign (|\n          [expr_14],\n          _10\n        |) in, let _ :=\n        M.assign (|\n          [_11],\n          var_value\n        |) in, let _ :=\n        M.assign (|\n          [expr_15],\n          _11\n        |) in, let _ :=\n        M.assign (|\n          [_12],\n          Literal.number 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        |) in, let _ :=\n        M.assign (|\n          [_13],\n          M.call (|\n            convert_address_to_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_14],\n          M.call (|\n            convert_address_to_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_15],\n          M.call (|\n            allocate_unbounded,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_16],\n          M.call (|\n            abi_encode_uint256,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        log3,\n        [\n        ]\n      |), ]\n))\n  |), ]\n))","nodeType":"YulCode"},"name":"ERC20_403","nodeType":"YulObject","subObjects":[{"code":{"block":"ltac:(M.monadic (\n  [ltac:(M.monadic (\n    [M.call (|\n      mstore,\n      [\n      ]\n    |), M.if (|\n      M.call (|\n        iszero,\n        [\n        ]\n      |),\n      ltac:(M.monadic (\n        [let _ :=\n          M.assign (|\n            [selector],\n            M.call (|\n              shift_right_unsigned,\n              [\n              ]\n            |)\n          |) in, M.switch (|\n          selector,\n          [\n            M.case (|\n              Literal.number 0x095ea7b3,\n              ltac:(M.monadic (\n                [M.call (|\n                  external_fun_approve,\n                  [\n                  ]\n                |), ]\n))\n            |),\n            M.case (|\n              Literal.number 0x18160ddd,\n              ltac:(M.monadic (\n                [M.call (|\n                  external_fun_totalSupply,\n                  [\n                  ]\n                |), ]\n))\n            |),\n            M.case (|\n              Literal.number 0x23b872dd,\n              ltac:(M.monadic (\n                [M.call (|\n                  external_fun_transferFrom,\n                  [\n                  ]\n                |), ]\n))\n            |),\n            M.case (|\n              Literal.number 0x39509351,\n              ltac:(M.monadic (\n                [M.call (|\n                  external_fun_increaseAllowance,\n                  [\n                  ]\n                |), ]\n))\n            |),\n            M.case (|\n              Literal.number 0x70a08231,\n              ltac:(M.monadic (\n                [M.call (|\n                  external_fun_balanceOf,\n                  [\n                  ]\n                |), ]\n))\n            |),\n            M.case (|\n              Literal.number 0xa457c2d7,\n              ltac:(M.monadic (\n                [M.call (|\n                  external_fun_decreaseAllowance,\n                  [\n                  ]\n                |), ]\n))\n            |),\n            M.case (|\n              Literal.number 0xa9059cbb,\n              ltac:(M.monadic (\n                [M.call (|\n                  external_fun_transfer,\n                  [\n                  ]\n                |), ]\n))\n            |),\n            M.case (|\n              Literal.number 0xdd62ed3e,\n              ltac:(M.monadic (\n                [M.call (|\n                  external_fun_allowance,\n                  [\n                  ]\n                |), ]\n))\n            |),\n            M.case (|\n              default,\n              ltac:(M.monadic (\n                []\n))\n            |),\n          ]\n        |), ]\n))\n    |), M.call (|\n      revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74,\n      [\n      ]\n    |), ]\n)), M.function (|\n    shift_right_unsigned,\n    [\n      value,\n    ],\n    [\n      newValue,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [newValue],\n          M.call (|\n            shr,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    allocate_unbounded,\n    [\n    ],\n    [\n      memPtr,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [memPtr],\n          M.call (|\n            mload,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,\n    [\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [M.call (|\n        revert,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b,\n    [\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [M.call (|\n        revert,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    cleanup_uint160,\n    [\n      value,\n    ],\n    [\n      cleaned,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [cleaned],\n          M.call (|\n            and,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    cleanup_address,\n    [\n      value,\n    ],\n    [\n      cleaned,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [cleaned],\n          M.call (|\n            cleanup_uint160,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    validator_revert_address,\n    [\n      value,\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [M.if (|\n        M.call (|\n          iszero,\n          [\n          ]\n        |),\n        ltac:(M.monadic (\n          [M.call (|\n            revert,\n            [\n            ]\n          |), ]\n))\n      |), ]\n))\n  |), M.function (|\n    abi_decode_address,\n    [\n      offset,\n      end,\n    ],\n    [\n      value,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [value],\n          M.call (|\n            calldataload,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        validator_revert_address,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    cleanup_uint256,\n    [\n      value,\n    ],\n    [\n      cleaned,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [cleaned],\n          value\n        |) in, ]\n))\n  |), M.function (|\n    validator_revert_uint256,\n    [\n      value,\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [M.if (|\n        M.call (|\n          iszero,\n          [\n          ]\n        |),\n        ltac:(M.monadic (\n          [M.call (|\n            revert,\n            [\n            ]\n          |), ]\n))\n      |), ]\n))\n  |), M.function (|\n    abi_decode_uint256,\n    [\n      offset,\n      end,\n    ],\n    [\n      value,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [value],\n          M.call (|\n            calldataload,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        validator_revert_uint256,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    abi_decode_addresst_uint256,\n    [\n      headStart,\n      dataEnd,\n    ],\n    [\n      value0,\n      value1,\n    ],\n    ltac:(M.monadic (\n      [M.if (|\n        M.call (|\n          slt,\n          [\n          ]\n        |),\n        ltac:(M.monadic (\n          [M.call (|\n            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b,\n            [\n            ]\n          |), ]\n))\n      |), let _ :=\n        M.assign (|\n          [offset],\n          Literal.number 0\n        |) in, let _ :=\n        M.declare (|\n          [value0],\n          M.call (|\n            abi_decode_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [offset_1],\n          Literal.number 32\n        |) in, let _ :=\n        M.declare (|\n          [value1],\n          M.call (|\n            abi_decode_uint256,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    cleanup_bool,\n    [\n      value,\n    ],\n    [\n      cleaned,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [cleaned],\n          M.call (|\n            iszero,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    abi_encode_bool_to_bool,\n    [\n      value,\n      pos,\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [M.call (|\n        mstore,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    abi_encode_bool,\n    [\n      headStart,\n      value0,\n    ],\n    [\n      tail,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [tail],\n          M.call (|\n            add,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        abi_encode_bool_to_bool,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    external_fun_approve,\n    [\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [M.if (|\n        M.call (|\n          callvalue,\n          [\n          ]\n        |),\n        ltac:(M.monadic (\n          [M.call (|\n            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,\n            [\n            ]\n          |), ]\n))\n      |), let _ :=\n        M.assign (|\n          [paramparam_1],\n          M.call (|\n            abi_decode_addresst_uint256,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [ret],\n          M.call (|\n            fun_approve,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [memPos],\n          M.call (|\n            allocate_unbounded,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [memEnd],\n          M.call (|\n            abi_encode_bool,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        return,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    abi_decode,\n    [\n      headStart,\n      dataEnd,\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [M.if (|\n        M.call (|\n          slt,\n          [\n          ]\n        |),\n        ltac:(M.monadic (\n          [M.call (|\n            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b,\n            [\n            ]\n          |), ]\n))\n      |), ]\n))\n  |), M.function (|\n    abi_encode_uint256_to_uint256,\n    [\n      value,\n      pos,\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [M.call (|\n        mstore,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    abi_encode_uint256,\n    [\n      headStart,\n      value0,\n    ],\n    [\n      tail,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [tail],\n          M.call (|\n            add,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        abi_encode_uint256_to_uint256,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    external_fun_totalSupply,\n    [\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [M.if (|\n        M.call (|\n          callvalue,\n          [\n          ]\n        |),\n        ltac:(M.monadic (\n          [M.call (|\n            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,\n            [\n            ]\n          |), ]\n))\n      |), M.call (|\n        abi_decode,\n        [\n        ]\n      |), let _ :=\n        M.assign (|\n          [ret],\n          M.call (|\n            fun_totalSupply,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [memPos],\n          M.call (|\n            allocate_unbounded,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [memEnd],\n          M.call (|\n            abi_encode_uint256,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        return,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    abi_decode_addresst_addresst_uint256,\n    [\n      headStart,\n      dataEnd,\n    ],\n    [\n      value0,\n      value1,\n      value2,\n    ],\n    ltac:(M.monadic (\n      [M.if (|\n        M.call (|\n          slt,\n          [\n          ]\n        |),\n        ltac:(M.monadic (\n          [M.call (|\n            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b,\n            [\n            ]\n          |), ]\n))\n      |), let _ :=\n        M.assign (|\n          [offset],\n          Literal.number 0\n        |) in, let _ :=\n        M.declare (|\n          [value0],\n          M.call (|\n            abi_decode_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [offset_1],\n          Literal.number 32\n        |) in, let _ :=\n        M.declare (|\n          [value1],\n          M.call (|\n            abi_decode_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [offset_2],\n          Literal.number 64\n        |) in, let _ :=\n        M.declare (|\n          [value2],\n          M.call (|\n            abi_decode_uint256,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    external_fun_transferFrom,\n    [\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [M.if (|\n        M.call (|\n          callvalue,\n          [\n          ]\n        |),\n        ltac:(M.monadic (\n          [M.call (|\n            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,\n            [\n            ]\n          |), ]\n))\n      |), let _ :=\n        M.assign (|\n          [paramparam_1param_2],\n          M.call (|\n            abi_decode_addresst_addresst_uint256,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [ret],\n          M.call (|\n            fun_transferFrom,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [memPos],\n          M.call (|\n            allocate_unbounded,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [memEnd],\n          M.call (|\n            abi_encode_bool,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        return,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    external_fun_increaseAllowance,\n    [\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [M.if (|\n        M.call (|\n          callvalue,\n          [\n          ]\n        |),\n        ltac:(M.monadic (\n          [M.call (|\n            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,\n            [\n            ]\n          |), ]\n))\n      |), let _ :=\n        M.assign (|\n          [paramparam_1],\n          M.call (|\n            abi_decode_addresst_uint256,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [ret],\n          M.call (|\n            fun_increaseAllowance,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [memPos],\n          M.call (|\n            allocate_unbounded,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [memEnd],\n          M.call (|\n            abi_encode_bool,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        return,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    abi_decode_tuple_address,\n    [\n      headStart,\n      dataEnd,\n    ],\n    [\n      value0,\n    ],\n    ltac:(M.monadic (\n      [M.if (|\n        M.call (|\n          slt,\n          [\n          ]\n        |),\n        ltac:(M.monadic (\n          [M.call (|\n            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b,\n            [\n            ]\n          |), ]\n))\n      |), let _ :=\n        M.assign (|\n          [offset],\n          Literal.number 0\n        |) in, let _ :=\n        M.declare (|\n          [value0],\n          M.call (|\n            abi_decode_address,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    external_fun_balanceOf,\n    [\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [M.if (|\n        M.call (|\n          callvalue,\n          [\n          ]\n        |),\n        ltac:(M.monadic (\n          [M.call (|\n            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,\n            [\n            ]\n          |), ]\n))\n      |), let _ :=\n        M.assign (|\n          [param],\n          M.call (|\n            abi_decode_tuple_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [ret],\n          M.call (|\n            fun_balanceOf,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [memPos],\n          M.call (|\n            allocate_unbounded,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [memEnd],\n          M.call (|\n            abi_encode_uint256,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        return,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    external_fun_decreaseAllowance,\n    [\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [M.if (|\n        M.call (|\n          callvalue,\n          [\n          ]\n        |),\n        ltac:(M.monadic (\n          [M.call (|\n            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,\n            [\n            ]\n          |), ]\n))\n      |), let _ :=\n        M.assign (|\n          [paramparam_1],\n          M.call (|\n            abi_decode_addresst_uint256,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [ret],\n          M.call (|\n            fun_decreaseAllowance,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [memPos],\n          M.call (|\n            allocate_unbounded,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [memEnd],\n          M.call (|\n            abi_encode_bool,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        return,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    external_fun_transfer,\n    [\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [M.if (|\n        M.call (|\n          callvalue,\n          [\n          ]\n        |),\n        ltac:(M.monadic (\n          [M.call (|\n            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,\n            [\n            ]\n          |), ]\n))\n      |), let _ :=\n        M.assign (|\n          [paramparam_1],\n          M.call (|\n            abi_decode_addresst_uint256,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [ret],\n          M.call (|\n            fun_transfer_94,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [memPos],\n          M.call (|\n            allocate_unbounded,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [memEnd],\n          M.call (|\n            abi_encode_bool,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        return,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    abi_decode_addresst_address,\n    [\n      headStart,\n      dataEnd,\n    ],\n    [\n      value0,\n      value1,\n    ],\n    ltac:(M.monadic (\n      [M.if (|\n        M.call (|\n          slt,\n          [\n          ]\n        |),\n        ltac:(M.monadic (\n          [M.call (|\n            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b,\n            [\n            ]\n          |), ]\n))\n      |), let _ :=\n        M.assign (|\n          [offset],\n          Literal.number 0\n        |) in, let _ :=\n        M.declare (|\n          [value0],\n          M.call (|\n            abi_decode_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [offset_1],\n          Literal.number 32\n        |) in, let _ :=\n        M.declare (|\n          [value1],\n          M.call (|\n            abi_decode_address,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    external_fun_allowance,\n    [\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [M.if (|\n        M.call (|\n          callvalue,\n          [\n          ]\n        |),\n        ltac:(M.monadic (\n          [M.call (|\n            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb,\n            [\n            ]\n          |), ]\n))\n      |), let _ :=\n        M.assign (|\n          [paramparam_1],\n          M.call (|\n            abi_decode_addresst_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [ret],\n          M.call (|\n            fun_allowance,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [memPos],\n          M.call (|\n            allocate_unbounded,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [memEnd],\n          M.call (|\n            abi_encode_uint256,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        return,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74,\n    [\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [M.call (|\n        revert,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    zero_value_for_split_bool,\n    [\n    ],\n    [\n      ret,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [ret],\n          Literal.number 0\n        |) in, ]\n))\n  |), M.function (|\n    fun_approve,\n    [\n      var_spender,\n      var_value,\n    ],\n    [\n      var,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.assign (|\n          [zero_bool],\n          M.call (|\n            zero_value_for_split_bool,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.declare (|\n          [var],\n          zero_bool\n        |) in, let _ :=\n        M.assign (|\n          [expr],\n          M.call (|\n            caller,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_1],\n          var_spender\n        |) in, let _ :=\n        M.assign (|\n          [expr_1],\n          _1\n        |) in, let _ :=\n        M.assign (|\n          [_2],\n          var_value\n        |) in, let _ :=\n        M.assign (|\n          [expr_2],\n          _2\n        |) in, M.call (|\n        fun__approve,\n        [\n        ]\n      |), let _ :=\n        M.assign (|\n          [expr_3],\n          Literal.number 0x01\n        |) in, let _ :=\n        M.declare (|\n          [var],\n          expr_3\n        |) in, M.leave, ]\n))\n  |), M.function (|\n    zero_value_for_split_uint256,\n    [\n    ],\n    [\n      ret,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [ret],\n          Literal.number 0\n        |) in, ]\n))\n  |), M.function (|\n    shift_right_0_unsigned,\n    [\n      value,\n    ],\n    [\n      newValue,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [newValue],\n          M.call (|\n            shr,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    cleanup_from_storage_uint256,\n    [\n      value,\n    ],\n    [\n      cleaned,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [cleaned],\n          value\n        |) in, ]\n))\n  |), M.function (|\n    extract_from_storage_value_offsett_uint256,\n    [\n      slot_value,\n    ],\n    [\n      value,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [value],\n          M.call (|\n            cleanup_from_storage_uint256,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    read_from_storage_split_offset_uint256,\n    [\n      slot,\n    ],\n    [\n      value,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [value],\n          M.call (|\n            extract_from_storage_value_offsett_uint256,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    fun_totalSupply,\n    [\n    ],\n    [\n      var,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.assign (|\n          [zero_uint256],\n          M.call (|\n            zero_value_for_split_uint256,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.declare (|\n          [var],\n          zero_uint256\n        |) in, let _ :=\n        M.assign (|\n          [_1],\n          M.call (|\n            read_from_storage_split_offset_uint256,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [expr],\n          _1\n        |) in, let _ :=\n        M.declare (|\n          [var],\n          expr\n        |) in, M.leave, ]\n))\n  |), M.function (|\n    identity,\n    [\n      value,\n    ],\n    [\n      ret,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [ret],\n          value\n        |) in, ]\n))\n  |), M.function (|\n    convert_uint160_to_uint160,\n    [\n      value,\n    ],\n    [\n      converted,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [converted],\n          M.call (|\n            cleanup_uint160,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    convert_uint160_to_address,\n    [\n      value,\n    ],\n    [\n      converted,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [converted],\n          M.call (|\n            convert_uint160_to_uint160,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    convert_address_to_address,\n    [\n      value,\n    ],\n    [\n      converted,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [converted],\n          M.call (|\n            convert_uint160_to_address,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    mapping_index_access_mapping_address_mapping_address_uint256_of_address,\n    [\n      slot,\n      key,\n    ],\n    [\n      dataSlot,\n    ],\n    ltac:(M.monadic (\n      [M.call (|\n        mstore,\n        [\n        ]\n      |), M.call (|\n        mstore,\n        [\n        ]\n      |), let _ :=\n        M.declare (|\n          [dataSlot],\n          M.call (|\n            keccak256,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    mapping_index_access_mapping_address_uint256_of_address,\n    [\n      slot,\n      key,\n    ],\n    [\n      dataSlot,\n    ],\n    ltac:(M.monadic (\n      [M.call (|\n        mstore,\n        [\n        ]\n      |), M.call (|\n        mstore,\n        [\n        ]\n      |), let _ :=\n        M.declare (|\n          [dataSlot],\n          M.call (|\n            keccak256,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    panic_error_0x11,\n    [\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [M.call (|\n        mstore,\n        [\n        ]\n      |), M.call (|\n        mstore,\n        [\n        ]\n      |), M.call (|\n        revert,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    checked_sub_uint256,\n    [\n      x,\n      y,\n    ],\n    [\n      diff,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [x],\n          M.call (|\n            cleanup_uint256,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.declare (|\n          [y],\n          M.call (|\n            cleanup_uint256,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.declare (|\n          [diff],\n          M.call (|\n            sub,\n            [\n            ]\n          |)\n        |) in, M.if (|\n        M.call (|\n          gt,\n          [\n          ]\n        |),\n        ltac:(M.monadic (\n          [M.call (|\n            panic_error_0x11,\n            [\n            ]\n          |), ]\n))\n      |), ]\n))\n  |), M.function (|\n    fun_transferFrom,\n    [\n      var_from,\n      var_to,\n      var_value,\n    ],\n    [\n      var,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.assign (|\n          [zero_bool],\n          M.call (|\n            zero_value_for_split_bool,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.declare (|\n          [var],\n          zero_bool\n        |) in, let _ :=\n        M.assign (|\n          [_1],\n          var_from\n        |) in, let _ :=\n        M.assign (|\n          [expr],\n          _1\n        |) in, let _ :=\n        M.assign (|\n          [_2],\n          var_to\n        |) in, let _ :=\n        M.assign (|\n          [expr_1],\n          _2\n        |) in, let _ :=\n        M.assign (|\n          [_3],\n          var_value\n        |) in, let _ :=\n        M.assign (|\n          [expr_2],\n          _3\n        |) in, M.call (|\n        fun_transfer,\n        [\n        ]\n      |), let _ :=\n        M.assign (|\n          [_4],\n          var_from\n        |) in, let _ :=\n        M.assign (|\n          [expr_3],\n          _4\n        |) in, let _ :=\n        M.assign (|\n          [expr_4],\n          M.call (|\n            caller,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_11_slot],\n          Literal.number 0x01\n        |) in, let _ :=\n        M.assign (|\n          [expr_134_slot],\n          _11_slot\n        |) in, let _ :=\n        M.assign (|\n          [_5],\n          var_from\n        |) in, let _ :=\n        M.assign (|\n          [expr_5],\n          _5\n        |) in, let _ :=\n        M.assign (|\n          [_6],\n          M.call (|\n            mapping_index_access_mapping_address_mapping_address_uint256_of_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_slot],\n          _6\n        |) in, let _ :=\n        M.assign (|\n          [expr_136_slot],\n          _slot\n        |) in, let _ :=\n        M.assign (|\n          [expr_6],\n          M.call (|\n            caller,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_7],\n          M.call (|\n            mapping_index_access_mapping_address_uint256_of_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_8],\n          M.call (|\n            read_from_storage_split_offset_uint256,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [expr_7],\n          _8\n        |) in, let _ :=\n        M.assign (|\n          [_9],\n          var_value\n        |) in, let _ :=\n        M.assign (|\n          [expr_8],\n          _9\n        |) in, let _ :=\n        M.assign (|\n          [expr_9],\n          M.call (|\n            checked_sub_uint256,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        fun__approve,\n        [\n        ]\n      |), let _ :=\n        M.assign (|\n          [expr_10],\n          Literal.number 0x01\n        |) in, let _ :=\n        M.declare (|\n          [var],\n          expr_10\n        |) in, M.leave, ]\n))\n  |), M.function (|\n    checked_add_uint256,\n    [\n      x,\n      y,\n    ],\n    [\n      sum,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [x],\n          M.call (|\n            cleanup_uint256,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.declare (|\n          [y],\n          M.call (|\n            cleanup_uint256,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.declare (|\n          [sum],\n          M.call (|\n            add,\n            [\n            ]\n          |)\n        |) in, M.if (|\n        M.call (|\n          gt,\n          [\n          ]\n        |),\n        ltac:(M.monadic (\n          [M.call (|\n            panic_error_0x11,\n            [\n            ]\n          |), ]\n))\n      |), ]\n))\n  |), M.function (|\n    fun_increaseAllowance,\n    [\n      var_spender,\n      var_addedValue,\n    ],\n    [\n      var,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.assign (|\n          [zero_t_bool],\n          M.call (|\n            zero_value_for_split_bool,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.declare (|\n          [var],\n          zero_t_bool\n        |) in, let _ :=\n        M.assign (|\n          [expr],\n          M.call (|\n            caller,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_1],\n          var_spender\n        |) in, let _ :=\n        M.assign (|\n          [expr_1],\n          _1\n        |) in, let _ :=\n        M.assign (|\n          [_20_slot],\n          Literal.number 0x01\n        |) in, let _ :=\n        M.assign (|\n          [expr_160_slot],\n          _20_slot\n        |) in, let _ :=\n        M.assign (|\n          [expr_2],\n          M.call (|\n            caller,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_2],\n          M.call (|\n            mapping_index_access_mapping_address_mapping_address_uint256_of_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_22_slot],\n          _2\n        |) in, let _ :=\n        M.assign (|\n          [expr_163_slot],\n          _22_slot\n        |) in, let _ :=\n        M.assign (|\n          [_3],\n          var_spender\n        |) in, let _ :=\n        M.assign (|\n          [expr_3],\n          _3\n        |) in, let _ :=\n        M.assign (|\n          [_4],\n          M.call (|\n            mapping_index_access_mapping_address_uint256_of_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_5],\n          M.call (|\n            read_from_storage_split_offset_uint256,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [expr_4],\n          _5\n        |) in, let _ :=\n        M.assign (|\n          [_6],\n          var_addedValue\n        |) in, let _ :=\n        M.assign (|\n          [expr_5],\n          _6\n        |) in, let _ :=\n        M.assign (|\n          [expr_6],\n          M.call (|\n            checked_add_uint256,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        fun__approve,\n        [\n        ]\n      |), let _ :=\n        M.assign (|\n          [expr_7],\n          Literal.number 0x01\n        |) in, let _ :=\n        M.declare (|\n          [var],\n          expr_7\n        |) in, M.leave, ]\n))\n  |), M.function (|\n    fun_balanceOf,\n    [\n      var_owner,\n    ],\n    [\n      var,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.assign (|\n          [zero_t_uint256],\n          M.call (|\n            zero_value_for_split_uint256,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.declare (|\n          [var],\n          zero_t_uint256\n        |) in, let _ :=\n        M.assign (|\n          [_28_slot],\n          Literal.number 0x00\n        |) in, let _ :=\n        M.assign (|\n          [expr_54_slot],\n          _28_slot\n        |) in, let _ :=\n        M.assign (|\n          [_1],\n          var_owner\n        |) in, let _ :=\n        M.assign (|\n          [expr],\n          _1\n        |) in, let _ :=\n        M.assign (|\n          [_2],\n          M.call (|\n            mapping_index_access_mapping_address_uint256_of_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_3],\n          M.call (|\n            read_from_storage_split_offset_uint256,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [expr_1],\n          _3\n        |) in, let _ :=\n        M.declare (|\n          [var],\n          expr_1\n        |) in, M.leave, ]\n))\n  |), M.function (|\n    fun_decreaseAllowance,\n    [\n      var_spender,\n      var_subtractedValue,\n    ],\n    [\n      var,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.assign (|\n          [zero_bool],\n          M.call (|\n            zero_value_for_split_bool,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.declare (|\n          [var],\n          zero_bool\n        |) in, let _ :=\n        M.assign (|\n          [expr],\n          M.call (|\n            caller,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_1],\n          var_spender\n        |) in, let _ :=\n        M.assign (|\n          [expr_1],\n          _1\n        |) in, let _ :=\n        M.assign (|\n          [_34_slot],\n          Literal.number 0x01\n        |) in, let _ :=\n        M.assign (|\n          [expr_slot],\n          _34_slot\n        |) in, let _ :=\n        M.assign (|\n          [expr_2],\n          M.call (|\n            caller,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_2],\n          M.call (|\n            mapping_index_access_mapping_address_mapping_address_uint256_of_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_36_slot],\n          _2\n        |) in, let _ :=\n        M.assign (|\n          [expr_189_slot],\n          _36_slot\n        |) in, let _ :=\n        M.assign (|\n          [_3],\n          var_spender\n        |) in, let _ :=\n        M.assign (|\n          [expr_3],\n          _3\n        |) in, let _ :=\n        M.assign (|\n          [_4],\n          M.call (|\n            mapping_index_access_mapping_address_uint256_of_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_5],\n          M.call (|\n            read_from_storage_split_offset_uint256,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [expr_4],\n          _5\n        |) in, let _ :=\n        M.assign (|\n          [_6],\n          var_subtractedValue\n        |) in, let _ :=\n        M.assign (|\n          [expr_5],\n          _6\n        |) in, let _ :=\n        M.assign (|\n          [expr_6],\n          M.call (|\n            checked_sub_uint256,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        fun__approve,\n        [\n        ]\n      |), let _ :=\n        M.assign (|\n          [expr_7],\n          Literal.number 0x01\n        |) in, let _ :=\n        M.declare (|\n          [var],\n          expr_7\n        |) in, M.leave, ]\n))\n  |), M.function (|\n    fun_transfer_94,\n    [\n      var_to,\n      var_value,\n    ],\n    [\n      var,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.assign (|\n          [zero_bool],\n          M.call (|\n            zero_value_for_split_bool,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.declare (|\n          [var],\n          zero_bool\n        |) in, let _ :=\n        M.assign (|\n          [expr],\n          M.call (|\n            caller,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_1],\n          var_to\n        |) in, let _ :=\n        M.assign (|\n          [expr_1],\n          _1\n        |) in, let _ :=\n        M.assign (|\n          [_2],\n          var_value\n        |) in, let _ :=\n        M.assign (|\n          [expr_2],\n          _2\n        |) in, M.call (|\n        fun_transfer,\n        [\n        ]\n      |), let _ :=\n        M.assign (|\n          [expr_3],\n          Literal.number 0x01\n        |) in, let _ :=\n        M.declare (|\n          [var],\n          expr_3\n        |) in, M.leave, ]\n))\n  |), M.function (|\n    fun_allowance,\n    [\n      var_owner,\n      var_spender,\n    ],\n    [\n      var_,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.assign (|\n          [zero_uint256],\n          M.call (|\n            zero_value_for_split_uint256,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.declare (|\n          [var_],\n          zero_uint256\n        |) in, let _ :=\n        M.assign (|\n          [_45_slot],\n          Literal.number 0x01\n        |) in, let _ :=\n        M.assign (|\n          [expr_68_slot],\n          _45_slot\n        |) in, let _ :=\n        M.assign (|\n          [_1],\n          var_owner\n        |) in, let _ :=\n        M.assign (|\n          [expr],\n          _1\n        |) in, let _ :=\n        M.assign (|\n          [_2],\n          M.call (|\n            mapping_index_access_mapping_address_mapping_address_uint256_of_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_48_slot],\n          _2\n        |) in, let _ :=\n        M.assign (|\n          [expr_70_slot],\n          _48_slot\n        |) in, let _ :=\n        M.assign (|\n          [_3],\n          var_spender\n        |) in, let _ :=\n        M.assign (|\n          [expr_1],\n          _3\n        |) in, let _ :=\n        M.assign (|\n          [_4],\n          M.call (|\n            mapping_index_access_mapping_address_uint256_of_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_5],\n          M.call (|\n            read_from_storage_split_offset_uint256,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [expr_2],\n          _5\n        |) in, let _ :=\n        M.declare (|\n          [var_],\n          expr_2\n        |) in, M.leave, ]\n))\n  |), M.function (|\n    cleanup_rational_by,\n    [\n      value,\n    ],\n    [\n      cleaned,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [cleaned],\n          value\n        |) in, ]\n))\n  |), M.function (|\n    convert_rational_by_to_uint160,\n    [\n      value,\n    ],\n    [\n      converted,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [converted],\n          M.call (|\n            cleanup_uint160,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    convert_rational_by_to_address,\n    [\n      value,\n    ],\n    [\n      converted,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [converted],\n          M.call (|\n            convert_rational_by_to_uint160,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    array_storeLengthForEncoding_string,\n    [\n      pos,\n      length,\n    ],\n    [\n      updated_pos,\n    ],\n    ltac:(M.monadic (\n      [M.call (|\n        mstore,\n        [\n        ]\n      |), let _ :=\n        M.declare (|\n          [updated_pos],\n          M.call (|\n            add,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208,\n    [\n      memPtr,\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [M.call (|\n        mstore,\n        [\n        ]\n      |), M.call (|\n        mstore,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    abi_encode_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208,\n    [\n      pos,\n    ],\n    [\n      end,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [pos],\n          M.call (|\n            array_storeLengthForEncoding_string,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208,\n        [\n        ]\n      |), let _ :=\n        M.declare (|\n          [end],\n          M.call (|\n            add,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    abi_encode_stringliteral_c953,\n    [\n      headStart,\n    ],\n    [\n      tail,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [tail],\n          M.call (|\n            add,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        mstore,\n        [\n        ]\n      |), let _ :=\n        M.declare (|\n          [tail],\n          M.call (|\n            abi_encode_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    require_helper_stringliteral_c953,\n    [\n      condition,\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [M.if (|\n        M.call (|\n          iszero,\n          [\n          ]\n        |),\n        ltac:(M.monadic (\n          [let _ :=\n            M.assign (|\n              [memPtr],\n              M.call (|\n                allocate_unbounded,\n                [\n                ]\n              |)\n            |) in, M.call (|\n            mstore,\n            [\n            ]\n          |), let _ :=\n            M.assign (|\n              [end],\n              M.call (|\n                abi_encode_stringliteral_c953,\n                [\n                ]\n              |)\n            |) in, M.call (|\n            revert,\n            [\n            ]\n          |), ]\n))\n      |), ]\n))\n  |), M.function (|\n    store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029,\n    [\n      memPtr,\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [M.call (|\n        mstore,\n        [\n        ]\n      |), M.call (|\n        mstore,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    abi_encode_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029,\n    [\n      pos,\n    ],\n    [\n      end,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [pos],\n          M.call (|\n            array_storeLengthForEncoding_string,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029,\n        [\n        ]\n      |), let _ :=\n        M.declare (|\n          [end],\n          M.call (|\n            add,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    abi_encode_stringliteral,\n    [\n      headStart,\n    ],\n    [\n      tail,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [tail],\n          M.call (|\n            add,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        mstore,\n        [\n        ]\n      |), let _ :=\n        M.declare (|\n          [tail],\n          M.call (|\n            abi_encode_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    require_helper_stringliteral_2488,\n    [\n      condition,\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [M.if (|\n        M.call (|\n          iszero,\n          [\n          ]\n        |),\n        ltac:(M.monadic (\n          [let _ :=\n            M.assign (|\n              [memPtr],\n              M.call (|\n                allocate_unbounded,\n                [\n                ]\n              |)\n            |) in, M.call (|\n            mstore,\n            [\n            ]\n          |), let _ :=\n            M.assign (|\n              [end],\n              M.call (|\n                abi_encode_stringliteral,\n                [\n                ]\n              |)\n            |) in, M.call (|\n            revert,\n            [\n            ]\n          |), ]\n))\n      |), ]\n))\n  |), M.function (|\n    shift_left,\n    [\n      value,\n    ],\n    [\n      newValue,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [newValue],\n          M.call (|\n            shl,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    update_byte_slice_shift,\n    [\n      value,\n      toInsert,\n    ],\n    [\n      result,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.assign (|\n          [mask],\n          M.call (|\n            not,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.declare (|\n          [toInsert],\n          M.call (|\n            shift_left,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.declare (|\n          [value],\n          M.call (|\n            and,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.declare (|\n          [result],\n          M.call (|\n            or,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    convert_uint256_to_uint256,\n    [\n      value,\n    ],\n    [\n      converted,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [converted],\n          M.call (|\n            cleanup_uint256,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    prepare_store_uint256,\n    [\n      value,\n    ],\n    [\n      ret,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [ret],\n          value\n        |) in, ]\n))\n  |), M.function (|\n    update_storage_value_offsett_uint256_to_uint256,\n    [\n      slot,\n      value,\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.assign (|\n          [convertedValue],\n          M.call (|\n            convert_uint256_to_uint256,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        sstore,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    fun__approve,\n    [\n      var_owner,\n      var_spender,\n      var_value,\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.assign (|\n          [_1],\n          var_owner\n        |) in, let _ :=\n        M.assign (|\n          [expr],\n          _1\n        |) in, let _ :=\n        M.assign (|\n          [expr_1],\n          Literal.number 0x00\n        |) in, let _ :=\n        M.assign (|\n          [expr_2],\n          M.call (|\n            convert_rational_by_to_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [expr_3],\n          M.call (|\n            iszero,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        require_helper_stringliteral_c953,\n        [\n        ]\n      |), let _ :=\n        M.assign (|\n          [_2],\n          var_spender\n        |) in, let _ :=\n        M.assign (|\n          [expr_4],\n          _2\n        |) in, let _ :=\n        M.assign (|\n          [expr_5],\n          Literal.number 0x00\n        |) in, let _ :=\n        M.assign (|\n          [expr_6],\n          M.call (|\n            convert_rational_by_to_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [expr_7],\n          M.call (|\n            iszero,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        require_helper_stringliteral_2488,\n        [\n        ]\n      |), let _ :=\n        M.assign (|\n          [_3],\n          var_value\n        |) in, let _ :=\n        M.assign (|\n          [expr_8],\n          _3\n        |) in, let _ :=\n        M.assign (|\n          [_55_slot],\n          Literal.number 0x01\n        |) in, let _ :=\n        M.assign (|\n          [expr_360_slot],\n          _55_slot\n        |) in, let _ :=\n        M.assign (|\n          [_4],\n          var_owner\n        |) in, let _ :=\n        M.assign (|\n          [expr_9],\n          _4\n        |) in, let _ :=\n        M.assign (|\n          [_5],\n          M.call (|\n            mapping_index_access_mapping_address_mapping_address_uint256_of_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_58_slot],\n          _5\n        |) in, let _ :=\n        M.assign (|\n          [expr_363_slot],\n          _58_slot\n        |) in, let _ :=\n        M.assign (|\n          [_6],\n          var_spender\n        |) in, let _ :=\n        M.assign (|\n          [expr_10],\n          _6\n        |) in, let _ :=\n        M.assign (|\n          [_7],\n          M.call (|\n            mapping_index_access_mapping_address_uint256_of_address,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        update_storage_value_offsett_uint256_to_uint256,\n        [\n        ]\n      |), let _ :=\n        M.assign (|\n          [_8],\n          var_owner\n        |) in, let _ :=\n        M.assign (|\n          [expr_11],\n          _8\n        |) in, let _ :=\n        M.assign (|\n          [_9],\n          var_spender\n        |) in, let _ :=\n        M.assign (|\n          [expr_12],\n          _9\n        |) in, let _ :=\n        M.assign (|\n          [_10],\n          var_value\n        |) in, let _ :=\n        M.assign (|\n          [expr_13],\n          _10\n        |) in, let _ :=\n        M.assign (|\n          [_11],\n          Literal.number 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        |) in, let _ :=\n        M.assign (|\n          [_12],\n          M.call (|\n            convert_address_to_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_13],\n          M.call (|\n            convert_address_to_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_14],\n          M.call (|\n            allocate_unbounded,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_15],\n          M.call (|\n            abi_encode_uint256,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        log3,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f,\n    [\n      memPtr,\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [M.call (|\n        mstore,\n        [\n        ]\n      |), M.call (|\n        mstore,\n        [\n        ]\n      |), ]\n))\n  |), M.function (|\n    abi_encode_stringliteral_0557,\n    [\n      pos,\n    ],\n    [\n      end,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [pos],\n          M.call (|\n            array_storeLengthForEncoding_string,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f,\n        [\n        ]\n      |), let _ :=\n        M.declare (|\n          [end],\n          M.call (|\n            add,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    abi_encode_tuple_stringliteral,\n    [\n      headStart,\n    ],\n    [\n      tail,\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.declare (|\n          [tail],\n          M.call (|\n            add,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        mstore,\n        [\n        ]\n      |), let _ :=\n        M.declare (|\n          [tail],\n          M.call (|\n            abi_encode_stringliteral_0557,\n            [\n            ]\n          |)\n        |) in, ]\n))\n  |), M.function (|\n    require_helper_stringliteral,\n    [\n      condition,\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [M.if (|\n        M.call (|\n          iszero,\n          [\n          ]\n        |),\n        ltac:(M.monadic (\n          [let _ :=\n            M.assign (|\n              [memPtr],\n              M.call (|\n                allocate_unbounded,\n                [\n                ]\n              |)\n            |) in, M.call (|\n            mstore,\n            [\n            ]\n          |), let _ :=\n            M.assign (|\n              [end],\n              M.call (|\n                abi_encode_tuple_stringliteral,\n                [\n                ]\n              |)\n            |) in, M.call (|\n            revert,\n            [\n            ]\n          |), ]\n))\n      |), ]\n))\n  |), M.function (|\n    fun_transfer,\n    [\n      var_from,\n      var_to,\n      var_value,\n    ],\n    [\n    ],\n    ltac:(M.monadic (\n      [let _ :=\n        M.assign (|\n          [_1],\n          var_to\n        |) in, let _ :=\n        M.assign (|\n          [expr],\n          _1\n        |) in, let _ :=\n        M.assign (|\n          [expr_1],\n          Literal.number 0x00\n        |) in, let _ :=\n        M.assign (|\n          [expr_2],\n          M.call (|\n            convert_rational_by_to_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [expr_3],\n          M.call (|\n            iszero,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        require_helper_stringliteral,\n        [\n        ]\n      |), let _ :=\n        M.assign (|\n          [_70_slot],\n          Literal.number 0x00\n        |) in, let _ :=\n        M.assign (|\n          [expr_221_slot],\n          _70_slot\n        |) in, let _ :=\n        M.assign (|\n          [_2],\n          var_from\n        |) in, let _ :=\n        M.assign (|\n          [expr_4],\n          _2\n        |) in, let _ :=\n        M.assign (|\n          [_3],\n          M.call (|\n            mapping_index_access_mapping_address_uint256_of_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_4],\n          M.call (|\n            read_from_storage_split_offset_uint256,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [expr_5],\n          _4\n        |) in, let _ :=\n        M.assign (|\n          [_5],\n          var_value\n        |) in, let _ :=\n        M.assign (|\n          [expr_6],\n          _5\n        |) in, let _ :=\n        M.assign (|\n          [expr_7],\n          M.call (|\n            checked_sub_uint256,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_75_slot],\n          Literal.number 0x00\n        |) in, let _ :=\n        M.assign (|\n          [expr_218_slot],\n          _75_slot\n        |) in, let _ :=\n        M.assign (|\n          [_6],\n          var_from\n        |) in, let _ :=\n        M.assign (|\n          [expr_8],\n          _6\n        |) in, let _ :=\n        M.assign (|\n          [_7],\n          M.call (|\n            mapping_index_access_mapping_address_uint256_of_address,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        update_storage_value_offsett_uint256_to_uint256,\n        [\n        ]\n      |), let _ :=\n        M.assign (|\n          [_78_slot],\n          Literal.number 0x00\n        |) in, let _ :=\n        M.assign (|\n          [expr_231_slot],\n          _78_slot\n        |) in, let _ :=\n        M.assign (|\n          [_8],\n          var_to\n        |) in, let _ :=\n        M.assign (|\n          [expr_9],\n          _8\n        |) in, let _ :=\n        M.assign (|\n          [_9],\n          M.call (|\n            mapping_index_access_mapping_address_uint256_of_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_10],\n          M.call (|\n            read_from_storage_split_offset_uint256,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [expr_10],\n          _10\n        |) in, let _ :=\n        M.assign (|\n          [_11],\n          var_value\n        |) in, let _ :=\n        M.assign (|\n          [expr_11],\n          _11\n        |) in, let _ :=\n        M.assign (|\n          [expr_12],\n          M.call (|\n            checked_add_uint256,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_83_slot],\n          Literal.number 0x00\n        |) in, let _ :=\n        M.assign (|\n          [expr_228_slot],\n          _83_slot\n        |) in, let _ :=\n        M.assign (|\n          [_12],\n          var_to\n        |) in, let _ :=\n        M.assign (|\n          [expr_13],\n          _12\n        |) in, let _ :=\n        M.assign (|\n          [_13],\n          M.call (|\n            mapping_index_access_mapping_address_uint256_of_address,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        update_storage_value_offsett_uint256_to_uint256,\n        [\n        ]\n      |), let _ :=\n        M.assign (|\n          [_14],\n          var_from\n        |) in, let _ :=\n        M.assign (|\n          [expr_14],\n          _14\n        |) in, let _ :=\n        M.assign (|\n          [_15],\n          var_to\n        |) in, let _ :=\n        M.assign (|\n          [expr_15],\n          _15\n        |) in, let _ :=\n        M.assign (|\n          [_16],\n          var_value\n        |) in, let _ :=\n        M.assign (|\n          [expr_16],\n          _16\n        |) in, let _ :=\n        M.assign (|\n          [_17],\n          Literal.number 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        |) in, let _ :=\n        M.assign (|\n          [_18],\n          M.call (|\n            convert_address_to_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_19],\n          M.call (|\n            convert_address_to_address,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_20],\n          M.call (|\n            allocate_unbounded,\n            [\n            ]\n          |)\n        |) in, let _ :=\n        M.assign (|\n          [_21],\n          M.call (|\n            abi_encode_uint256,\n            [\n            ]\n          |)\n        |) in, M.call (|\n        log3,\n        [\n        ]\n      |), ]\n))\n  |), ]\n))","nodeType":"YulCode"},"name":"ERC20_403_deployed","nodeType":"YulObject","subObjects":[{"nodeType":"YulData","value":"a26469706673582212208533e2f7d62c46809742bf36a80d520531aa724490b83ba1486feb4fd3ca3b3764736f6c634300081b0033"}]}]}
