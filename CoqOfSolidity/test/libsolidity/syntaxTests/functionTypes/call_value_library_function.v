(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Library *)
Module L.
  Definition value (α : list Value.t) : M :=
    match α with
    | [a, b] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End L.

(* Contract *)
Module C.
  (* Beginning of a node! *)
id: 16
src: 95:31:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 15
src: 107:19:0
nodeType: FunctionTypeName
visibility: internal
stateMutability: nonpayable
parameterTypes: (* Beginning of a node! *)
id: 13
src: 115:2:0
nodeType: ParameterList
parameters: 

returnParameterTypes: (* Beginning of a node! *)
id: 14
src: 125:0:0
nodeType: ParameterList
parameters: 

typeDescriptions: typeString function ()typeIdentifier st_function_internal_nonpayable$__$returns$__$

libraryName: (* Beginning of a node! *)
id: 12
src: 101:1:0
nodeType: IdentifierPath
name: L
nameLocations: [101:1:0, ]
referencedDeclaration: 11

global: 0


  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Default
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "x" |),
            "value"
          |),
          [
            Value.Integer 42
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
