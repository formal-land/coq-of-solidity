(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition x : Value.t :=
    undefined.

  Definition y : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "a" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "b" ],
          M.get_name (| "y" |)
        |) in
      let _ :=
        M.define (|
          [ "c" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "c" |),
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 63
src: 333:40:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 62
src: 333:39:0
nodeType: FunctionTypeName
visibility: external
stateMutability: nonpayable
parameterTypes: (* Beginning of a node! *)
id: 58
src: 341:6:0
nodeType: ParameterList
parameters: Definition  : Value.t :=
              undefined.

returnParameterTypes: (* Beginning of a node! *)
id: 61
src: 365:6:0
nodeType: ParameterList
parameters: Definition  : Value.t :=
              undefined.

typeDescriptions: typeString function (uint256) external returns (uint256)typeIdentifier st_function_external_nonpayable$_t_uint256_$returns$_t_uint256_$

length: 
typeDescriptions: typeString function (uint256) external returns (uint256)[]typeIdentifier st_array$_t_function_external_nonpayable$_t_uint256_$returns$_t_uint256_$_$dyn_storage_ptr

,
            [
              Value.Integer 200
            ]
          |)
        |) in
      let _ :=
        M.get_name (| "a" |) in
      let _ :=
        M.get_name (| "b" |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
