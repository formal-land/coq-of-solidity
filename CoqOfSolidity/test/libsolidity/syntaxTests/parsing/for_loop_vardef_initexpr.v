(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module test.
  Definition fun (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        (* Beginning of a node! *)
id: 22
src: 61:88:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          Value.Integer 10
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "i" |)
        |)
body: let _ :=
          M.define (|
            [ "x" ],
            M.get_name (| "i" |)
          |) in
        let _ :=
          M.break (||) in
        let _ :=
          M.continue (||) in
        Value.Tuple []
isSimpleCounterLoop: 1
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End test.
