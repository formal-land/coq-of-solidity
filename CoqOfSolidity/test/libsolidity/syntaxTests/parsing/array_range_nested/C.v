(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_57.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            []
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                []
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          Some (M.call (|
            "allocate_unbounded",
            []
          |))
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f35375f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f35375f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f35375f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_57_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      []
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  Some (M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0xc26b6b9a),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_f",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            []
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_array_uint256_dyn_calldata_dyn_calldata",
          ["offset"; "end"],
          ["arrayPos";
      "length"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "offset" |);
                            [Literal.number 0x1f]
                          ]
                        |);
                        M.get (| "end" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["arrayPos"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "arrayPos" |);
                        M.call (|
                          "mul",
                          [
                            M.get (| "length" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      ]
                    |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_array_uint256_dyn_calldata_ptr_dyn_calldata_ptr",
          ["headStart"; "dataEnd"],
          ["value0";
      "value1"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value0"; "value1"],
                M.call (|
                  "abi_decode_array_array_uint256_dyn_calldata_dyn_calldata",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple",
          ["headStart"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_f",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"],
                Some (M.call (|
                  "abi_decode_array_array_uint256_dyn_calldata_ptr_dyn_calldata_ptr",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "fun_f",
                [
                  M.get (| "param" |);
                  M.get (| "param_1" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_tuple",
                  [
                    M.get (| "memPos" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x32",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x32]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_356d538aaf70fba12156cc466564b792649f8f3befb07b071c91142253e175ad",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_1e55d03107e9c4f1b5e21c76a16fba166a461117ab153bcce65e6a4ea8e5fc8a",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_977805620ff29572292dee35f70b0f3f3f73d3fdd0e9f4d7a901c2e43ab18a2e",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "access_calldata_tail_array_uint256_dyn_calldata",
          ["base_ref"; "ptr_to_tail"],
          ["addr";
      "length"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["rel_offset_of_tail"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.get (| "ptr_to_tail" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.get (| "rel_offset_of_tail" |);
                        M.call (|
                          "sub",
                          [
                            M.call (|
                              "sub",
                              [
                                M.call (|
                                  "calldatasize",
                                  []
                                |);
                                M.get (| "base_ref" |)
                              ]
                            |);
                            M.call (|
                              "sub",
                              [
                                [Literal.number 0x20];
                                [Literal.number 1]
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_356d538aaf70fba12156cc466564b792649f8f3befb07b071c91142253e175ad",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "base_ref" |);
                    M.get (| "rel_offset_of_tail" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "addr" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_1e55d03107e9c4f1b5e21c76a16fba166a461117ab153bcce65e6a4ea8e5fc8a",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "addr" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "sgt",
                  [
                    M.get (| "addr" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "calldatasize",
                          []
                        |);
                        M.call (|
                          "mul",
                          [
                            M.get (| "length" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_977805620ff29572292dee35f70b0f3f3f73d3fdd0e9f4d7a901c2e43ab18a2e",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "calldata_array_index_access_uint256_dyn_calldata_dyn_calldata",
          ["base_ref"; "length"; "index"],
          ["addr";
      "len"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "length" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "base_ref" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 32]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"; "len"],
                M.call (|
                  "access_calldata_tail_array_uint256_dyn_calldata",
                  [
                    M.get (| "base_ref" |);
                    M.get (| "addr" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_0_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_1_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_2_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_7678404c0552a58cf14944d1a786cf4c81aab3563e2735cb332aee47bbb57c4a",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_46e3e63c93837e9efa638abb3b4e76ced8c11259a873f1381a0abdf6ae6a823c",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "calldata_array_index_range_access_array_uint256_dyn_calldata",
          ["offset"; "length"; "startIndex"; "endIndex"],
          ["offsetOut";
      "lengthOut"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "startIndex" |);
                    M.get (| "endIndex" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_7678404c0552a58cf14944d1a786cf4c81aab3563e2735cb332aee47bbb57c4a",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "endIndex" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_46e3e63c93837e9efa638abb3b4e76ced8c11259a873f1381a0abdf6ae6a823c",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["offsetOut"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "startIndex" |);
                        [Literal.number 32]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["lengthOut"],
                M.call (|
                  "sub",
                  [
                    M.get (| "endIndex" |);
                    M.get (| "startIndex" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_3_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_3_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "calldata_array_index_access_uint256_dyn_calldata",
          ["base_ref"; "length"; "index"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "length" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "base_ref" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 32]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_uint256",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_calldatat_uint256",
          ["ptr"],
          ["returnValue"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["value"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.get (| "ptr" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "validator_revert_uint256",
                [
                  M.get (| "value" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["returnValue"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_f",
          ["var_x_offset"; "var_x_length"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["_1_offset"],
                Some (M.get (| "var_x_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["_1_length"],
                Some (M.get (| "var_x_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_8_offset"],
                Some (M.get (| "_1_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_8_length"],
                Some (M.get (| "_1_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_12_offset"; "expr_12_length"],
                Some (M.call (|
                  "calldata_array_index_access_uint256_dyn_calldata_dyn_calldata",
                  [
                    M.get (| "expr_8_offset" |);
                    M.get (| "expr_8_length" |);
                    M.call (|
                      "convert_rational_0_by_1_to_uint256",
                      [
                        M.get (| "expr" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.call (|
                  "convert_rational_1_by_1_to_uint256",
                  [
                    M.get (| "expr_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.call (|
                  "convert_rational_2_by_1_to_uint256",
                  [
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13_offset"; "expr_13_length"],
                Some (M.call (|
                  "calldata_array_index_range_access_array_uint256_dyn_calldata",
                  [
                    M.get (| "expr_12_offset" |);
                    M.get (| "expr_12_length" |);
                    M.get (| "_1" |);
                    M.get (| "_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_offset"],
                Some (M.get (| "var_x_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["_4_length"],
                Some (M.get (| "var_x_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_17_offset"],
                Some (M.get (| "_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_17_length"],
                Some (M.get (| "_4_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_19_offset"; "expr_19_length"],
                Some (M.call (|
                  "calldata_array_index_access_uint256_dyn_calldata_dyn_calldata",
                  [
                    M.get (| "expr_17_offset" |);
                    M.get (| "expr_17_length" |);
                    M.call (|
                      "convert_rational_0_by_1_to_uint256",
                      [
                        M.get (| "expr_3" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.call (|
                  "convert_rational_1_by_1_to_uint256",
                  [
                    M.get (| "expr_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.call (|
                  "convert_rational_2_by_1_to_uint256",
                  [
                    M.get (| "expr_5" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_22_offset"; "expr_22_length"],
                Some (M.call (|
                  "calldata_array_index_range_access_array_uint256_dyn_calldata",
                  [
                    M.get (| "expr_19_offset" |);
                    M.get (| "expr_19_length" |);
                    M.get (| "_3" |);
                    M.get (| "_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.call (|
                  "convert_rational_1_by_1_to_uint256",
                  [
                    M.get (| "expr_6" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.call (|
                  "convert_rational_2_by_1_to_uint256",
                  [
                    M.get (| "expr_7" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_25_offset"; "expr_25_length"],
                Some (M.call (|
                  "calldata_array_index_range_access_array_uint256_dyn_calldata",
                  [
                    M.get (| "expr_22_offset" |);
                    M.get (| "expr_22_length" |);
                    M.get (| "_5" |);
                    M.get (| "_6" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                Some (M.call (|
                  "convert_rational_1_by_1_to_uint256",
                  [
                    M.get (| "expr_8" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.get (| "expr_25_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_27_offset"; "expr_27_length"],
                Some (M.call (|
                  "calldata_array_index_range_access_array_uint256_dyn_calldata",
                  [
                    M.get (| "expr_25_offset" |);
                    M.get (| "expr_25_length" |);
                    M.get (| "_7" |);
                    M.get (| "_8" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some ([Literal.number 0x03])
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                Some (M.call (|
                  "convert_t_rational_by_to_t_uint256",
                  [
                    M.get (| "expr_9" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_10"],
                Some (M.get (| "expr_27_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_offset"; "expr_length"],
                Some (M.call (|
                  "calldata_array_index_range_access_array_uint256_dyn_calldata",
                  [
                    M.get (| "expr_27_offset" |);
                    M.get (| "expr_27_length" |);
                    M.get (| "_9" |);
                    M.get (| "_10" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.call (|
                "pop",
                [
                  M.call (|
                    "read_from_calldatat_uint256",
                    [
                      M.call (|
                        "calldata_array_index_access_uint256_dyn_calldata",
                        [
                          M.get (| "expr_offset" |);
                          M.get (| "expr_length" |);
                          M.call (|
                            "convert_rational_0_by_1_to_uint256",
                            [
                              M.get (| "expr_10" |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_13_offset"],
                Some (M.get (| "var_x_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["_length"],
                Some (M.get (| "var_x_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_35_offset"],
                Some (M.get (| "_13_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_35_length"],
                Some (M.get (| "_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_37_offset"; "expr_37_length"],
                Some (M.call (|
                  "calldata_array_index_access_uint256_dyn_calldata_dyn_calldata",
                  [
                    M.get (| "expr_35_offset" |);
                    M.get (| "expr_35_length" |);
                    M.call (|
                      "convert_rational_1_by_1_to_uint256",
                      [
                        M.get (| "expr_11" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_11"],
                Some (M.call (|
                  "convert_rational_1_by_1_to_uint256",
                  [
                    M.get (| "expr_12" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_12"],
                Some (M.get (| "expr_37_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_39_offset"; "expr_39_length"],
                Some (M.call (|
                  "calldata_array_index_range_access_array_uint256_dyn_calldata",
                  [
                    M.get (| "expr_37_offset" |);
                    M.get (| "expr_37_length" |);
                    M.get (| "_11" |);
                    M.get (| "_12" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some ([Literal.number 0x03])
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some ([Literal.number 0x04])
              |) in
            let _ :=
              M.assign (|
                ["_13"],
                Some (M.call (|
                  "convert_t_rational_by_to_t_uint256",
                  [
                    M.get (| "expr_13" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_14"],
                Some (M.call (|
                  "convert_rational_by_to_uint256",
                  [
                    M.get (| "expr_14" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_42_offset"; "expr_42_length"],
                Some (M.call (|
                  "calldata_array_index_range_access_array_uint256_dyn_calldata",
                  [
                    M.get (| "expr_39_offset" |);
                    M.get (| "expr_39_length" |);
                    M.get (| "_13" |);
                    M.get (| "_14" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_15"],
                Some (M.call (|
                  "convert_rational_1_by_1_to_uint256",
                  [
                    M.get (| "expr_15" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_16"],
                Some (M.get (| "expr_42_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_44_offset"; "expr_44_length"],
                Some (M.call (|
                  "calldata_array_index_range_access_array_uint256_dyn_calldata",
                  [
                    M.get (| "expr_42_offset" |);
                    M.get (| "expr_42_length" |);
                    M.get (| "_15" |);
                    M.get (| "_16" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some ([Literal.number 0x03])
              |) in
            let _ :=
              M.assign (|
                ["_17"],
                Some (M.call (|
                  "convert_rational_2_by_1_to_uint256",
                  [
                    M.get (| "expr_16" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_18"],
                Some (M.call (|
                  "convert_t_rational_by_to_t_uint256",
                  [
                    M.get (| "expr_17" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_47_offset"; "expr_47_length"],
                Some (M.call (|
                  "calldata_array_index_range_access_array_uint256_dyn_calldata",
                  [
                    M.get (| "expr_44_offset" |);
                    M.get (| "expr_44_length" |);
                    M.get (| "_17" |);
                    M.get (| "_18" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.call (|
                "pop",
                [
                  M.call (|
                    "read_from_calldatat_uint256",
                    [
                      M.call (|
                        "calldata_array_index_access_uint256_dyn_calldata",
                        [
                          M.get (| "expr_47_offset" |);
                          M.get (| "expr_47_length" |);
                          M.call (|
                            "convert_rational_0_by_1_to_uint256",
                            [
                              M.get (| "expr_18" |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a2646970667358221220cec4740c512ff49640e15b0580ece38b8b319e62a7e748c08f84cbd6b146dfc664736f6c634300081b0033".
  End C_57_deployed.
End C_57.
