(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        (* Beginning of a node! *)
id: 21
src: 52:87:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "a" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "a" |),
          Value.Integer 1
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "a" |)
        |)
body: let _ :=
          M.break (||) in
        let _ :=
          M.define (|
            [ "b" ],
            Value.Integer 42
          |) in
        let _ :=
          M.get_name (| "b" |) in
        Value.Tuple []
isSimpleCounterLoop: 1
 in
      let _ :=
        M.return_ (|
          Value.Tuple []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
