(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  (* Struct S *)

  Definition s : Value.t :=
    undefined.

  Definition ext (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "r" ],
          Value.Default
        |) in
      let _ :=
        TryStatement M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "ext"
          |),
          []
        |) TryCatchClause   let _ :=
          M.assign (|
            "=",
            M.get_name (| "r" |),
            M.get_name (| "s" |)
          |) in
        Value.Tuple [], TryCatchClause  (* Beginning of a node! *)
id: 28
src: 180:14:0
nodeType: ParameterList
parameters: Definition  : Value.t :=
          undefined.
 let _ :=
          M.assign (|
            "=",
            M.get_name (| "r" |),
            M.get_name (| "s" |)
          |) in
        Value.Tuple [] in
      let _ :=
        M.get_name (| "r" |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "r" ],
          Value.Default
        |) in
      let _ :=
        TryStatement M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "ext"
          |),
          []
        |) TryCatchClause   let _ :=
          M.assign (|
            "=",
            M.get_name (| "r" |),
            M.get_name (| "s" |)
          |) in
        Value.Tuple [], TryCatchClause Error (* Beginning of a node! *)
id: 57
src: 330:15:0
nodeType: ParameterList
parameters: Definition  : Value.t :=
          undefined.
 let _ :=
          M.assign (|
            "=",
            M.get_name (| "r" |),
            M.get_name (| "s" |)
          |) in
        Value.Tuple [], TryCatchClause  (* Beginning of a node! *)
id: 66
src: 371:14:0
nodeType: ParameterList
parameters: Definition  : Value.t :=
          undefined.
 let _ :=
          M.assign (|
            "=",
            M.get_name (| "r" |),
            M.get_name (| "s" |)
          |) in
        Value.Tuple [] in
      let _ :=
        M.get_name (| "r" |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "r" ],
          Value.Default
        |) in
      let _ :=
        TryStatement M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "ext"
          |),
          []
        |) TryCatchClause   let _ :=
           in
        Value.Tuple [], TryCatchClause  (* Beginning of a node! *)
id: 91
src: 508:14:0
nodeType: ParameterList
parameters: Definition  : Value.t :=
          undefined.
 let _ :=
           in
        Value.Tuple [] in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "r" |),
          M.get_name (| "s" |)
        |) in
      let _ :=
        M.get_name (| "r" |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
