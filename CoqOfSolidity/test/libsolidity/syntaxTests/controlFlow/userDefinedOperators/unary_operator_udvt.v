(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

Axiom user_type_X : Ty.path "X" = Ty.path "uint24".
Axiom user_type_Y : Ty.path "Y" = Ty.path "uint16".
(* Beginning of a node! *)
id: 8
src: 37:33:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 7
src: 61:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 6
src: 61:1:0
nodeType: IdentifierPath
name: X
nameLocations: [61:1:0, ]
referencedDeclaration: 2

referencedDeclaration: 2
typeDescriptions: typeString XtypeIdentifier st_userDefinedValueType$_X_$2

functionList: [{definition: (* Beginning of a node! *)
id: 5
src: 44:6:0
nodeType: IdentifierPath
name: unsubX
nameLocations: [44:6:0, ]
referencedDeclaration: 22
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 12
src: 71:33:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 11
src: 95:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 10
src: 95:1:0
nodeType: IdentifierPath
name: Y
nameLocations: [95:1:0, ]
referencedDeclaration: 4

referencedDeclaration: 4
typeDescriptions: typeString YtypeIdentifier st_userDefinedValueType$_Y_$4

functionList: [{definition: (* Beginning of a node! *)
id: 9
src: 78:6:0
nodeType: IdentifierPath
name: unsubY
nameLocations: [78:6:0, ]
referencedDeclaration: 35
, operator: -, }, ]
global: 1

Definition unsubX (α : list Value.t) : M :=
  match α with
  | [] =>
    let _ :=
       in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubY (α : list Value.t) : M :=
  match α with
  | [] =>
    let _ :=
      M.call (|
        M.get_name (| "revert" |),
        []
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.un_op (|
          true,
          "-",
          M.call (|
            M.member_access (|
              M.get_name (| "X" |),
              "wrap"
            |),
            [
              M.call (|
                M.member_access (|
                  M.get_name (| "Y" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Y" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.un_op (|
          true,
          "-",
          M.call (|
            M.member_access (|
              M.get_name (| "X" |),
              "wrap"
            |),
            [
              M.call (|
                M.member_access (|
                  M.get_name (| "Y" |),
                  "unwrap"
                |),
                [
                  M.call (|
                    M.member_access (|
                      M.get_name (| "Y" |),
                      "wrap"
                    |),
                    [
                      Value.Integer 2
                    ]
                  |)
                ]
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
