(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Library *)
Module WithModifier.
  (* Beginning of a node! *)
id: 11
src: 27:52:0
nodeType: ModifierDefinition
name: mod
nameLocation: 36:3:0
documentation: 
visibility: internal
parameters: (* Beginning of a node! *)
id: 1
src: 39:2:0
nodeType: ParameterList
parameters: 

virtual: 0
overrides: 
body: let _ :=
    M.call (|
      M.get_name (| "require" |),
      [
        M.bin_op (|
          ">",
          M.member_access (|
            M.get_name (| "msg" |),
            "value"
          |),
          Value.Integer 10
        |)
      ]
    |) in
  let _ :=
    (* Beginning of a node! *)
id: 9
src: 75:1:0
nodeType: PlaceholderStatement
 in
  Value.Tuple []


  Definition withMod (α : list Value.t) : M :=
    match α with
    | [self] =>
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              ">",
              M.get_name (| "self" |),
              Value.Integer 0
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End WithModifier.

(* Contract *)
Module Test.
  (* Beginning of a node! *)
id: 28
src: 178:25:0
nodeType: UsingForDirective
typeName: 
libraryName: (* Beginning of a node! *)
id: 27
src: 184:12:0
nodeType: IdentifierPath
name: WithModifier
nameLocations: [184:12:0, ]
referencedDeclaration: 26

global: 0


  Definition f (α : list Value.t) : M :=
    match α with
    | [_value] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "_value" |),
            "withMod"
          |),
          []
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "WithModifier" |),
            "withMod"
          |),
          [
            M.get_name (| "_value" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Test.
