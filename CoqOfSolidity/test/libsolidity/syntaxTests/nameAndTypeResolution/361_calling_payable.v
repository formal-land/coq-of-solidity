(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module receiver.
  Definition pay (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End receiver.

(* Contract *)
Module test.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          FunctionCallOptions M.member_access (|
            Value.Tuple [
              M.call (|
                NewExpression (* Beginning of a node! *)
id: 9
src: 102:8:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 8
src: 102:8:0
nodeType: IdentifierPath
name: receiver
nameLocations: [102:8:0, ]
referencedDeclaration: 5

referencedDeclaration: 5
typeDescriptions: typeString contract receivertypeIdentifier st_contract$_receiver_$5

,
                []
              |)
            ],
            "pay"
          |) [value, ] Value.Integer 10
,
          []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition r : Value.t :=
    M.call (|
      NewExpression (* Beginning of a node! *)
id: 23
src: 155:8:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 22
src: 155:8:0
nodeType: IdentifierPath
name: receiver
nameLocations: [155:8:0, ]
referencedDeclaration: 5

referencedDeclaration: 5
typeDescriptions: typeString contract receivertypeIdentifier st_contract$_receiver_$5

,
      []
    |).

  Definition h (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          FunctionCallOptions M.member_access (|
            M.get_name (| "r" |),
            "pay"
          |) [value, ] Value.Integer 10
,
          []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End test.
