(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module test_50.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            []
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                []
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          Some (M.call (|
            "allocate_unbounded",
            []
          |))
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "746573745f35305f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "746573745f35305f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "746573745f35305f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module test_50_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      []
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  Some (M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x26121ff0),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_f",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xe2179b8e),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_g",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "callvalue",
              []
            |),
            ltac:(M.monadic (
              let _ :=
                M.call (|
                  "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                  []
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "fun",
            []
          |) in
        let _ :=
          M.call (|
            "stop",
            []
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple",
          ["headStart"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_f",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "fun_f",
                []
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_tuple",
                  [
                    M.get (| "memPos" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_g",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "fun_g",
                []
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_tuple",
                  [
                    M.get (| "memPos" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int16",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 1];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int16",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int16",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint8",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x11",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x11]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_1_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 1];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_exp_helper",
          ["_power"; "_base"; "exponent"; "max"],
          ["power";
      "base"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["power"],
                M.get (| "_power" |)
              |) in
            let _ :=
              M.declare (|
                ["base"],
                M.get (| "_base" |)
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "exponent" |);
                    [Literal.number 1]
                  ]
                |),
                ltac:(M.monadic (
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "gt",
                        [
                          M.get (| "base" |);
                          M.call (|
                            "div",
                            [
                              M.get (| "max" |);
                              M.get (| "base" |)
                            ]
                          |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "panic_error_0x11",
                            []
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "and",
                        [
                          M.get (| "exponent" |);
                          [Literal.number 1]
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["power"],
                            M.call (|
                              "mul",
                              [
                                M.get (| "power" |);
                                M.get (| "base" |)
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.declare (|
                      ["base"],
                      M.call (|
                        "mul",
                        [
                          M.get (| "base" |);
                          M.get (| "base" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["exponent"],
                      M.call (|
                        "shift_right_1_unsigned",
                        [
                          M.get (| "exponent" |)
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_exp_signed",
          ["base"; "exponent"; "min"; "max"],
          ["power"],
          ltac:(M.monadic (
            let _ :=
              M.switch (|
                M.get (| "exponent" |),
                [
                  (
                    Some (Literal.number 0),
                    ltac:(M.monadic (
                      let _ :=
                        M.declare (|
                          ["power"],
                          [Literal.number 1]
                        |) in
                      let _ :=
                        M.leave (||) in
                      tt
                    ))            );
                  (
                    Some (Literal.number 1),
                    ltac:(M.monadic (
                      let _ :=
                        M.declare (|
                          ["power"],
                          M.get (| "base" |)
                        |) in
                      let _ :=
                        M.leave (||) in
                      tt
                    ))            )          ]
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "base" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["power"],
                      [Literal.number 0]
                    |) in
                  let _ :=
                    M.leave (||) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["power"],
                [Literal.number 1]
              |) in
            let _ :=
              M.switch (|
                M.call (|
                  "sgt",
                  [
                    M.get (| "base" |);
                    [Literal.number 0]
                  ]
                |),
                [
                  (
                    Some (Literal.number 1),
                    ltac:(M.monadic (
                      let _ :=
                        M.if_ (|
                          M.call (|
                            "gt",
                            [
                              M.get (| "base" |);
                              M.call (|
                                "div",
                                [
                                  M.get (| "max" |);
                                  M.get (| "base" |)
                                ]
                              |)
                            ]
                          |),
                          ltac:(M.monadic (
                            let _ :=
                              M.call (|
                                "panic_error_0x11",
                                []
                              |) in
                            tt
                          ))
                        |) in
                      tt
                    ))            );
                  (
                    Some (Literal.number 0),
                    ltac:(M.monadic (
                      let _ :=
                        M.if_ (|
                          M.call (|
                            "slt",
                            [
                              M.get (| "base" |);
                              M.call (|
                                "sdiv",
                                [
                                  M.get (| "max" |);
                                  M.get (| "base" |)
                                ]
                              |)
                            ]
                          |),
                          ltac:(M.monadic (
                            let _ :=
                              M.call (|
                                "panic_error_0x11",
                                []
                              |) in
                            tt
                          ))
                        |) in
                      tt
                    ))            )          ]
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "and",
                  [
                    M.get (| "exponent" |);
                    [Literal.number 1]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["power"],
                      M.get (| "base" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["base"],
                M.call (|
                  "mul",
                  [
                    M.get (| "base" |);
                    M.get (| "base" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["exponent"],
                M.call (|
                  "shift_right_1_unsigned",
                  [
                    M.get (| "exponent" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["power"; "base"],
                M.call (|
                  "checked_exp_helper",
                  [
                    M.get (| "power" |);
                    M.get (| "base" |);
                    M.get (| "exponent" |);
                    M.get (| "max" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "and",
                  [
                    M.call (|
                      "sgt",
                      [
                        M.get (| "power" |);
                        [Literal.number 0]
                      ]
                    |);
                    M.call (|
                      "gt",
                      [
                        M.get (| "power" |);
                        M.call (|
                          "div",
                          [
                            M.get (| "max" |);
                            M.get (| "base" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "and",
                  [
                    M.call (|
                      "slt",
                      [
                        M.get (| "power" |);
                        [Literal.number 0]
                      ]
                    |);
                    M.call (|
                      "slt",
                      [
                        M.get (| "power" |);
                        M.call (|
                          "sdiv",
                          [
                            M.get (| "min" |);
                            M.get (| "base" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["power"],
                M.call (|
                  "mul",
                  [
                    M.get (| "power" |);
                    M.get (| "base" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_exp_int16_uint8",
          ["base"; "exponent"],
          ["power"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["base"],
                M.call (|
                  "cleanup_int16",
                  [
                    M.get (| "base" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["exponent"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.get (| "exponent" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["power"],
                M.call (|
                  "checked_exp_signed",
                  [
                    M.get (| "base" |);
                    M.get (| "exponent" |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 32767]
                      ]
                    |);
                    [Literal.number 0x7fff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_f",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0x03])
              |) in
            let _ :=
              M.assign (|
                ["var_x"],
                Some (M.call (|
                  "convert_rational_by_to_int16",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some ([Literal.number 0x04])
              |) in
            let _ :=
              M.assign (|
                ["var_y"],
                Some (M.call (|
                  "convert_rational_by_to_uint8",
                  [
                    M.get (| "expr_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_x" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_y" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.call (|
                "pop",
                [
                  M.call (|
                    "checked_exp_int16_uint8",
                    [
                      M.get (| "expr_2" |);
                      M.get (| "expr_3" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint16",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint16",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint16",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_exp_int16_uint16",
          ["base"; "exponent"],
          ["power"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["base"],
                M.call (|
                  "cleanup_int16",
                  [
                    M.get (| "base" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["exponent"],
                M.call (|
                  "cleanup_uint16",
                  [
                    M.get (| "exponent" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["power"],
                M.call (|
                  "checked_exp_signed",
                  [
                    M.get (| "base" |);
                    M.get (| "exponent" |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 32767]
                      ]
                    |);
                    [Literal.number 0x7fff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_g",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0x03])
              |) in
            let _ :=
              M.assign (|
                ["var_x"],
                Some (M.call (|
                  "convert_rational_by_to_int16",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some ([Literal.number 0x04])
              |) in
            let _ :=
              M.assign (|
                ["var_y"],
                Some (M.call (|
                  "convert_rational_by_to_uint16",
                  [
                    M.get (| "expr_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_x" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_y" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.call (|
                "pop",
                [
                  M.call (|
                    "checked_exp_int16_uint16",
                    [
                      M.get (| "expr_2" |);
                      M.get (| "expr_3" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_exp_int256_uint256",
          ["base"; "exponent"],
          ["power"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["base"],
                M.call (|
                  "cleanup_int256",
                  [
                    M.get (| "base" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["exponent"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "exponent" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["power"],
                M.call (|
                  "checked_exp_signed",
                  [
                    M.get (| "base" |);
                    M.get (| "exponent" |);
                    M.call (|
                      "shl",
                      [
                        [Literal.number 255];
                        [Literal.number 1]
                      ]
                    |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "shl",
                          [
                            [Literal.number 255];
                            [Literal.number 1]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0x03])
              |) in
            let _ :=
              M.assign (|
                ["var_x"],
                Some (M.call (|
                  "convert_rational_by_to_uint256",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 3]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_y"],
                Some (M.call (|
                  "convert_rational_minus_by_to_int256",
                  [
                    M.get (| "expr_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_y" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_x" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.call (|
                "pop",
                [
                  M.call (|
                    "checked_exp_int256_uint256",
                    [
                      M.get (| "expr_2" |);
                      M.get (| "expr_3" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a2646970667358221220d4f79a09c113c9bd2c14475854b066224ceb591c431f9c65c81999c590de79c264736f6c634300081b0033".
  End test_50_deployed.
End test_50.
