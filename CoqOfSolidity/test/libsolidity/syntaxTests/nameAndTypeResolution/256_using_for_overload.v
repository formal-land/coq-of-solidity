(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Library *)
Module D.
  (* Struct s *)

  Definition mul (α : list Value.t) : M :=
    match α with
    | [self, x] =>
      let _ :=
        M.return_ (|
          M.assign (|
            "*=",
            M.member_access (|
              M.get_name (| "self" |),
              "a"
            |),
            M.get_name (| "x" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition mul (α : list Value.t) : M :=
    match α with
    | [, ] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End D.

(* Contract *)
Module C.
  (* Beginning of a node! *)
id: 35
src: 209:16:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 34
src: 221:3:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 33
src: 221:3:0
nodeType: IdentifierPath
name: D.s
nameLocations: [221:1:0, 223:1:0, ]
referencedDeclaration: 3

referencedDeclaration: 3
typeDescriptions: typeString struct D.stypeIdentifier st_struct$_s_$3_storage_ptr

libraryName: (* Beginning of a node! *)
id: 32
src: 215:1:0
nodeType: IdentifierPath
name: D
nameLocations: [215:1:0, ]
referencedDeclaration: 31

global: 0


  Definition x : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "x" |),
              "mul"
            |),
            [
              M.get_name (| "a" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
