(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_6.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      M.call (|
        "mstore",
        [
          [Literal.number 64];
          M.call (|
            "memoryguard",
            [
              [Literal.number 128]
            ]
          |)
        ]
      |) in
    let _ :=
      M.if_ (|
        M.call (|
          "callvalue",
          [

          ]
        |),
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
              [

              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.call (|
        "constructor_C_6",
        [

        ]
      |) in
    let _ :=
      M.assign (|
        ["_1"],
        M.call (|
          "allocate_unbounded",
          [

          ]
        |)
      |) in
    let _ :=
      M.call (|
        "codecopy",
        [
          M.get (| "_1" |);
          M.call (|
            "dataoffset",
            [
              [Literal.string "435f365f6465706c6f796564"]
            ]
          |);
          M.call (|
            "datasize",
            [
              [Literal.string "435f365f6465706c6f796564"]
            ]
          |)
        ]
      |) in
    let _ :=
      M.call (|
        "return",
        [
          M.get (| "_1" |);
          M.call (|
            "datasize",
            [
              [Literal.string "435f365f6465706c6f796564"]
            ]
          |)
        ]
      |) in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "constructor_C_6",
        [],
        [],
        ltac:(M.monadic (
          tt
        ))
      |) in
    tt
  )).

  Module C_6_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            [Literal.number 128]
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "iszero",
            [
              M.call (|
                "lt",
                [
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |);
                  [Literal.number 4]
                ]
              |)
            ]
          |),
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["selector"],
                M.call (|
                  "shift_right_224_unsigned",
                  [
                    M.call (|
                      "calldataload",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.switch (|
                M.get (| "selector" |),
                [
                  (
                    Some (Literal.number 0x26121ff0),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "external_fun_f_5",
                          [

                          ]
                        |) in
                      tt
                    ))            );
                  (
                    None,
                    ltac:(M.monadic (
                      tt
                    ))            )          ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.call (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [

          ]
        |) in
      let _ :=
        M.function (|
          "shift_right_224_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_tuple_",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple__to__fromStack",
          ["headStart"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_f_5",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode_tuple_",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "fun_f_5",
                [

                ]
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_tuple__to__fromStack",
                  [
                    M.get (| "memPos" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_f_5",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              let _ :=
                M.assign (|
                  ["usr$x"],
                  M.call (|
                    "msize",
                    [

                    ]
                  |)
                |) in
              tt in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a2646970667358221220f4230ce0071cd2e486cb4a8c5fa11ccd92cde2d4f471cdd55396a608ea4fa25964736f6c634300081b0033".
  End C_6_deployed.
End C_6.
