(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

Axiom user_type_Int : Ty.path "Int" = Ty.path "int16".
(* Beginning of a node! *)
id: 7
src: 19:44:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 6
src: 52:3:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 5
src: 52:3:0
nodeType: IdentifierPath
name: Int
nameLocations: [52:3:0, ]
referencedDeclaration: 2

referencedDeclaration: 2
typeDescriptions: typeString InttypeIdentifier st_userDefinedValueType$_Int_$2

functionList: [{definition: (* Beginning of a node! *)
id: 3
src: 26:3:0
nodeType: IdentifierPath
name: add
nameLocations: [26:3:0, ]
referencedDeclaration: 35
, operator: +, }, {definition: (* Beginning of a node! *)
id: 4
src: 36:5:0
nodeType: IdentifierPath
name: unsub
nameLocations: [36:5:0, ]
referencedDeclaration: 50
, operator: -, }, ]
global: 1

Definition ADDER : Value.t :=
  M.call (|
    M.get_name (| "IAdder" |),
    [
      M.call (|
        Ty.path "address",
        [
          Value.Integer 0
        ]
      |)
    ]
  |).
Definition add (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "ADDER" |),
            "mul"
          |),
          [
            M.get_name (| "x" |),
            M.get_name (| "y" |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsub (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "ADDER" |),
            "inc"
          |),
          [
            M.get_name (| "x" |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
(* Interface *)
Module IAdder.
  Definition mul (α : list Value.t) : M :=
    match α with
    | [, ] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition inc (α : list Value.t) : M :=
    match α with
    | [] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.
End IAdder.
