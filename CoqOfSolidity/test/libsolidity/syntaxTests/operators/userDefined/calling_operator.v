(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

Axiom user_type_Int : Ty.path "Int" = Ty.path "int".
(* Beginning of a node! *)
id: 6
src: 17:32:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 5
src: 38:3:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 4
src: 38:3:0
nodeType: IdentifierPath
name: Int
nameLocations: [38:3:0, ]
referencedDeclaration: 2

referencedDeclaration: 2
typeDescriptions: typeString InttypeIdentifier st_userDefinedValueType$_Int_$2

functionList: [{definition: (* Beginning of a node! *)
id: 3
src: 24:3:0
nodeType: IdentifierPath
name: add
nameLocations: [24:3:0, ]
referencedDeclaration: 23
, operator: +, }, ]
global: 1

(* Beginning of a node! *)
id: 10
src: 50:34:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 9
src: 73:3:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 8
src: 73:3:0
nodeType: IdentifierPath
name: Int
nameLocations: [73:3:0, ]
referencedDeclaration: 2

referencedDeclaration: 2
typeDescriptions: typeString InttypeIdentifier st_userDefinedValueType$_Int_$2

functionList: [{definition: (* Beginning of a node! *)
id: 7
src: 57:5:0
nodeType: IdentifierPath
name: unsub
nameLocations: [57:5:0, ]
referencedDeclaration: 33
, operator: -, }, ]
global: 1

Definition add (α : list Value.t) : M :=
  match α with
  | [, ] =>
    let _ :=
       in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsub (α : list Value.t) : M :=
  match α with
  | [] =>
    let _ :=
       in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition f (α : list Value.t) : M :=
  match α with
  | [] =>
    let _ :=
      M.bin_op (|
        "+",
        M.call (|
          M.member_access (|
            M.get_name (| "Int" |),
            "wrap"
          |),
          [
            Value.Integer 0
          ]
        |),
        M.call (|
          M.member_access (|
            M.get_name (| "Int" |),
            "wrap"
          |),
          [
            Value.Integer 0
          ]
        |)
      |) in
    let _ :=
      M.un_op (|
        true,
        "-",
        M.call (|
          M.member_access (|
            M.get_name (| "Int" |),
            "wrap"
          |),
          [
            Value.Integer 0
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.