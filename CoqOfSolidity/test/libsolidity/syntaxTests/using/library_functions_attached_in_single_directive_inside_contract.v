(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Library *)
Module L.
  Definition externalFunction (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition publicFunction (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition internalFunction (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End L.

(* Contract *)
Module C.
  (* Beginning of a node! *)
id: 24
src: 187:74:0
nodeType: UsingForDirective
typeName: Ty.path "uint"
functionList: [{function: (* Beginning of a node! *)
id: 20
src: 194:18:0
nodeType: IdentifierPath
name: L.externalFunction
nameLocations: [194:1:0, 196:16:0, ]
referencedDeclaration: 6
, }, {function: (* Beginning of a node! *)
id: 21
src: 214:16:0
nodeType: IdentifierPath
name: L.publicFunction
nameLocations: [214:1:0, 216:14:0, ]
referencedDeclaration: 12
, }, {function: (* Beginning of a node! *)
id: 22
src: 232:18:0
nodeType: IdentifierPath
name: L.internalFunction
nameLocations: [232:1:0, 234:16:0, ]
referencedDeclaration: 18
, }, ]
global: 0


  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Default
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "x" |),
            "externalFunction"
          |),
          []
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "x" |),
            "publicFunction"
          |),
          []
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "x" |),
            "internalFunction"
          |),
          []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
