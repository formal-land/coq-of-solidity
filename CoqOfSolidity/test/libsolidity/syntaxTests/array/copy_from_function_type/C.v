(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_28.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            []
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                []
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          Some (M.call (|
            "copy_arguments_for_constructor_object_C",
            []
          |))
        |) in
      let _ :=
        M.call (|
          "constructor_C",
          [
            M.get (| "_1" |)
          ]
        |) in
      let _ :=
        M.assign (|
          ["_2"],
          Some (M.call (|
            "allocate_unbounded",
            []
          |))
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_2" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f32385f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f32385f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_2" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f32385f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "round_up_to_mul_of",
        ["value"],
        ["result"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["result"],
              M.call (|
                "and",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 31]
                    ]
                  |);
                  M.call (|
                    "not",
                    [
                      [Literal.number 31]
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "panic_error_0x41",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    [Literal.number 0x4e487b71]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 4];
                [Literal.number 0x41]
              ]
            |) in
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0x24]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "finalize_allocation",
        ["memPtr"; "size"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["newFreePtr"],
              Some (M.call (|
                "add",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "round_up_to_mul_of",
                    [
                      M.get (| "size" |)
                    ]
                  |)
                ]
              |))
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "or",
                [
                  M.call (|
                    "gt",
                    [
                      M.get (| "newFreePtr" |);
                      M.call (|
                        "sub",
                        [
                          M.call (|
                            "shl",
                            [
                              [Literal.number 64];
                              [Literal.number 1]
                            ]
                          |);
                          [Literal.number 1]
                        ]
                      |)
                    ]
                  |);
                  M.call (|
                    "lt",
                    [
                      M.get (| "newFreePtr" |);
                      M.get (| "memPtr" |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x41",
                    []
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 64];
                M.get (| "newFreePtr" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "allocate_memory",
        ["size"],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "allocate_unbounded",
                []
              |)
            |) in
          let _ :=
            M.call (|
              "finalize_allocation",
              [
                M.get (| "memPtr" |);
                M.get (| "size" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_allocation_size_array_array_function_external_nonpayable_returns_dyn",
        ["length"],
        ["size"],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "gt",
                [
                  M.get (| "length" |);
                  M.call (|
                    "sub",
                    [
                      M.call (|
                        "shl",
                        [
                          [Literal.number 64];
                          [Literal.number 1]
                        ]
                      |);
                      [Literal.number 1]
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x41",
                    []
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.declare (|
              ["size"],
              M.call (|
                "mul",
                [
                  M.get (| "length" |);
                  [Literal.number 0x20]
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["size"],
              M.call (|
                "add",
                [
                  M.get (| "size" |);
                  [Literal.number 0x20]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_allocation_size_array_function_external_nonpayable_returns",
        ["length"],
        ["size"],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "gt",
                [
                  M.get (| "length" |);
                  M.call (|
                    "sub",
                    [
                      M.call (|
                        "shl",
                        [
                          [Literal.number 64];
                          [Literal.number 1]
                        ]
                      |);
                      [Literal.number 1]
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x41",
                    []
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.declare (|
              ["size"],
              M.call (|
                "mul",
                [
                  M.get (| "length" |);
                  [Literal.number 0x20]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_bytes24",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.call (|
                "and",
                [
                  M.get (| "value" |);
                  M.call (|
                    "not",
                    [
                      M.call (|
                        "sub",
                        [
                          M.call (|
                            "shl",
                            [
                              [Literal.number 64];
                              [Literal.number 1]
                            ]
                          |);
                          [Literal.number 1]
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_function_external_nonpayable_returns",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.call (|
                "cleanup_bytes24",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "validator_revert_function_external_nonpayable_returns",
        ["value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "eq",
                    [
                      M.get (| "value" |);
                      M.call (|
                        "cleanup_function_external_nonpayable_returns",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "revert",
                    [
                      [Literal.number 0];
                      [Literal.number 0]
                    ]
                  |) in
                tt
              ))
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_decode_function_external_nonpayable_returns_fromMemory",
        ["offset"; "end"],
        ["fun"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["fun"],
              M.call (|
                "mload",
                [
                  M.get (| "offset" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "validator_revert_function_external_nonpayable_returns",
              [
                M.get (| "fun" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_decode_available_length_array_function_external_nonpayable_returns_fromMemory",
        ["offset"; "length"; "end"],
        ["array"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["array"],
              M.call (|
                "allocate_memory",
                [
                  M.call (|
                    "array_allocation_size_array_function_external_nonpayable_returns",
                    [
                      M.get (| "length" |)
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["dst"],
              Some (M.get (| "array" |))
            |) in
          let _ :=
            M.assign (|
              ["srcEnd"],
              Some (M.call (|
                "add",
                [
                  M.get (| "offset" |);
                  M.call (|
                    "mul",
                    [
                      M.get (| "length" |);
                      [Literal.number 0x20]
                    ]
                  |)
                ]
              |))
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "gt",
                [
                  M.get (| "srcEnd" |);
                  M.get (| "end" |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                    []
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["src"],
              Some (M.get (| "offset" |))
            |) in
          let _ :=
            let _ :=
              tt in
            M.for_ (|
              M.call (|
                "lt",
                [
                  M.get (| "src" |);
                  M.get (| "srcEnd" |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["src"],
                    M.call (|
                      "add",
                      [
                        M.get (| "src" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                tt
              )),
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["elementPos"],
                    Some (M.get (| "src" |))
                  |) in
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.get (| "dst" |);
                      M.call (|
                        "abi_decode_function_external_nonpayable_returns_fromMemory",
                        [
                          M.get (| "elementPos" |);
                          M.get (| "end" |)
                        ]
                      |)
                    ]
                  |) in
                let _ :=
                  M.declare (|
                    ["dst"],
                    M.call (|
                      "add",
                      [
                        M.get (| "dst" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_decode_array_function_external_nonpayable_returns_fromMemory",
        ["offset"; "end"],
        ["array"],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "slt",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "offset" |);
                          [Literal.number 0x1f]
                        ]
                      |);
                      M.get (| "end" |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                    []
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["length"],
              Some ([Literal.number 0x01])
            |) in
          let _ :=
            M.declare (|
              ["array"],
              M.call (|
                "abi_decode_available_length_array_function_external_nonpayable_returns_fromMemory",
                [
                  M.get (| "offset" |);
                  M.get (| "length" |);
                  M.get (| "end" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_decode_available_length_array_array_function_external_nonpayable_returns_dyn_fromMemory",
        ["offset"; "length"; "end"],
        ["array"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["array"],
              M.call (|
                "allocate_memory",
                [
                  M.call (|
                    "array_allocation_size_array_array_function_external_nonpayable_returns_dyn",
                    [
                      M.get (| "length" |)
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["dst"],
              Some (M.get (| "array" |))
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                M.get (| "array" |);
                M.get (| "length" |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["dst"],
              M.call (|
                "add",
                [
                  M.get (| "array" |);
                  [Literal.number 0x20]
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["srcEnd"],
              Some (M.call (|
                "add",
                [
                  M.get (| "offset" |);
                  M.call (|
                    "mul",
                    [
                      M.get (| "length" |);
                      [Literal.number 0x20]
                    ]
                  |)
                ]
              |))
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "gt",
                [
                  M.get (| "srcEnd" |);
                  M.get (| "end" |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                    []
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["src"],
              Some (M.get (| "offset" |))
            |) in
          let _ :=
            let _ :=
              tt in
            M.for_ (|
              M.call (|
                "lt",
                [
                  M.get (| "src" |);
                  M.get (| "srcEnd" |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["src"],
                    M.call (|
                      "add",
                      [
                        M.get (| "src" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                tt
              )),
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["elementPos"],
                    Some (M.get (| "src" |))
                  |) in
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.get (| "dst" |);
                      M.call (|
                        "abi_decode_array_function_external_nonpayable_returns_fromMemory",
                        [
                          M.get (| "elementPos" |);
                          M.get (| "end" |)
                        ]
                      |)
                    ]
                  |) in
                let _ :=
                  M.declare (|
                    ["dst"],
                    M.call (|
                      "add",
                      [
                        M.get (| "dst" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_decode_array_array_function_external_nonpayable_returns__dyn_fromMemory",
        ["offset"; "end"],
        ["array"],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "slt",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "offset" |);
                          [Literal.number 0x1f]
                        ]
                      |);
                      M.get (| "end" |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                    []
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["length"],
              Some (M.call (|
                "mload",
                [
                  M.get (| "offset" |)
                ]
              |))
            |) in
          let _ :=
            M.declare (|
              ["array"],
              M.call (|
                "abi_decode_available_length_array_array_function_external_nonpayable_returns_dyn_fromMemory",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "offset" |);
                      [Literal.number 0x20]
                    ]
                  |);
                  M.get (| "length" |);
                  M.get (| "end" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_decode_array_array_function_external_nonpayable_returns_dyn_fromMemory",
        ["headStart"; "dataEnd"],
        ["value0"],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "slt",
                [
                  M.call (|
                    "sub",
                    [
                      M.get (| "dataEnd" |);
                      M.get (| "headStart" |)
                    ]
                  |);
                  [Literal.number 32]
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                    []
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["offset"],
              Some (M.call (|
                "mload",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |))
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "gt",
                [
                  M.get (| "offset" |);
                  M.call (|
                    "sub",
                    [
                      M.call (|
                        "shl",
                        [
                          [Literal.number 64];
                          [Literal.number 1]
                        ]
                      |);
                      [Literal.number 1]
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                    []
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.declare (|
              ["value0"],
              M.call (|
                "abi_decode_array_array_function_external_nonpayable_returns__dyn_fromMemory",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      M.get (| "offset" |)
                    ]
                  |);
                  M.get (| "dataEnd" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "copy_arguments_for_constructor_object_C",
        [],
        ["ret_param"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["programSize"],
              Some (M.call (|
                "datasize",
                [
                  [Literal.string "435f3238"]
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["argSize"],
              Some (M.call (|
                "sub",
                [
                  M.call (|
                    "codesize",
                    []
                  |);
                  M.get (| "programSize" |)
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["memoryDataOffset"],
              Some (M.call (|
                "allocate_memory",
                [
                  M.get (| "argSize" |)
                ]
              |))
            |) in
          let _ :=
            M.call (|
              "codecopy",
              [
                M.get (| "memoryDataOffset" |);
                M.get (| "programSize" |);
                M.get (| "argSize" |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["ret_param"],
              M.call (|
                "abi_decode_array_array_function_external_nonpayable_returns_dyn_fromMemory",
                [
                  M.get (| "memoryDataOffset" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "memoryDataOffset" |);
                      M.get (| "argSize" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "panic_error_0x32",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    [Literal.number 0x4e487b71]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 4];
                [Literal.number 0x32]
              ]
            |) in
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0x24]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_length_array_array_function_external_nonpayable_returns_storage_dyn",
        ["value"],
        ["length"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["length"],
              M.call (|
                "sload",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_dataslot_array_array_function_external_nonpayable_returns_storage_dyn",
        ["ptr"],
        ["data"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["data"],
              M.get (| "ptr" |)
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.get (| "ptr" |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["data"],
              M.call (|
                "keccak256",
                [
                  [Literal.number 0];
                  [Literal.number 0x20]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "storage_array_index_access_function_external_nonpayable_returns__dyn",
        ["array"; "index"],
        ["slot";
    "offset"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["arrayLength"],
              Some (M.call (|
                "array_length_array_array_function_external_nonpayable_returns_storage_dyn",
                [
                  M.get (| "array" |)
                ]
              |))
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "lt",
                    [
                      M.get (| "index" |);
                      M.get (| "arrayLength" |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x32",
                    []
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["dataArea"],
              Some (M.call (|
                "array_dataslot_array_array_function_external_nonpayable_returns_storage_dyn",
                [
                  M.get (| "array" |)
                ]
              |))
            |) in
          let _ :=
            M.declare (|
              ["slot"],
              M.call (|
                "add",
                [
                  M.get (| "dataArea" |);
                  M.call (|
                    "mul",
                    [
                      M.get (| "index" |);
                      [Literal.number 1]
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["offset"],
              [Literal.number 0]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_length_array_array_function_external_nonpayable_returns_dyn",
        ["value"],
        ["length"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["length"],
              M.call (|
                "mload",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "memory_array_index_access_function_external_nonpayable_returns_dyn",
        ["baseRef"; "index"],
        ["addr"],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "lt",
                    [
                      M.get (| "index" |);
                      M.call (|
                        "array_length_array_array_function_external_nonpayable_returns_dyn",
                        [
                          M.get (| "baseRef" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x32",
                    []
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["offset"],
              Some (M.call (|
                "mul",
                [
                  M.get (| "index" |);
                  [Literal.number 32]
                ]
              |))
            |) in
          let _ :=
            M.declare (|
              ["offset"],
              M.call (|
                "add",
                [
                  M.get (| "offset" |);
                  [Literal.number 32]
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["addr"],
              M.call (|
                "add",
                [
                  M.get (| "baseRef" |);
                  M.get (| "offset" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_uint256",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "identity",
        ["value"],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_by_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_length_array_function_external_nonpayable_returns_storage",
        ["value"],
        ["length"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["length"],
              [Literal.number 0x01]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_storeLengthForEncoding_array_function_external_nonpayable_returns",
        ["pos"; "length"],
        ["updated_pos"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["updated_pos"],
              M.get (| "pos" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_dataslot_array_function_external_nonpayable_returns_storage",
        ["ptr"],
        ["data"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["data"],
              M.get (| "ptr" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_encode_function_external_nonpayable_returns",
        ["addr_and_function_id"; "pos"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                M.get (| "pos" |);
                M.call (|
                  "cleanup_function_external_nonpayable_returns",
                  [
                    M.get (| "addr_and_function_id" |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_encodeUpdatedPos_function_external_nonpayable_returns",
        ["value0"; "pos"],
        ["updatedPos"],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "abi_encode_function_external_nonpayable_returns",
              [
                M.get (| "value0" |);
                M.get (| "pos" |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["updatedPos"],
              M.call (|
                "add",
                [
                  M.get (| "pos" |);
                  [Literal.number 0x20]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 0];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_left",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shl",
                [
                  [Literal.number 64];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_from_storage_function_external_nonpayable_returns",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.call (|
                "shift_left",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offsett_function_external_nonpayable_returns",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_function_external_nonpayable_returns",
                [
                  M.call (|
                    "shift_right_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "read_from_storage_offset_function_external_nonpayable_returns",
        ["slot"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "extract_from_storage_value_offsett_function_external_nonpayable_returns",
                [
                  M.call (|
                    "sload",
                    [
                      M.get (| "slot" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_nextElement_array_function_external_nonpayable_returns_storage",
        ["ptr"],
        ["next"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["next"],
              M.call (|
                "add",
                [
                  M.get (| "ptr" |);
                  [Literal.number 0x01]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_encode_array_function_external_nonpayable_returns_storage",
        ["value"; "pos"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["length"],
              Some (M.call (|
                "array_length_array_function_external_nonpayable_returns_storage",
                [
                  M.get (| "value" |)
                ]
              |))
            |) in
          let _ :=
            M.declare (|
              ["pos"],
              M.call (|
                "array_storeLengthForEncoding_array_function_external_nonpayable_returns",
                [
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["baseRef"],
              Some (M.call (|
                "array_dataslot_array_function_external_nonpayable_returns_storage",
                [
                  M.get (| "value" |)
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["srcPtr"],
              Some (M.get (| "baseRef" |))
            |) in
          let _ :=
            M.assign (|
              ["i"],
              Some ([Literal.number 0])
            |) in
          let _ :=
            let _ :=
              tt in
            M.for_ (|
              M.call (|
                "lt",
                [
                  M.get (| "i" |);
                  M.get (| "length" |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["i"],
                    M.call (|
                      "add",
                      [
                        M.get (| "i" |);
                        [Literal.number 1]
                      ]
                    |)
                  |) in
                tt
              )),
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["elementValue0"],
                    Some (M.call (|
                      "read_from_storage_offset_function_external_nonpayable_returns",
                      [
                        M.get (| "srcPtr" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.declare (|
                    ["pos"],
                    M.call (|
                      "abi_encodeUpdatedPos_function_external_nonpayable_returns",
                      [
                        M.get (| "elementValue0" |);
                        M.get (| "pos" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["srcPtr"],
                    M.call (|
                      "array_nextElement_array_function_external_nonpayable_returns_storage",
                      [
                        M.get (| "srcPtr" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_encodeUpdatedPos_array_function_external_nonpayable_returns_storage",
        ["value0"; "pos"],
        ["updatedPos"],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "abi_encode_array_function_external_nonpayable_returns_storage",
              [
                M.get (| "value0" |);
                M.get (| "pos" |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["updatedPos"],
              M.call (|
                "add",
                [
                  M.get (| "pos" |);
                  [Literal.number 0x20]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "copy_array_from_storage_to_memory_array_function_external_nonpayable_returns",
        ["slot"],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "allocate_unbounded",
                []
              |)
            |) in
          let _ :=
            M.assign (|
              ["end"],
              Some (M.call (|
                "abi_encodeUpdatedPos_array_function_external_nonpayable_returns_storage",
                [
                  M.get (| "slot" |);
                  M.get (| "memPtr" |)
                ]
              |))
            |) in
          let _ :=
            M.call (|
              "finalize_allocation",
              [
                M.get (| "memPtr" |);
                M.call (|
                  "sub",
                  [
                    M.get (| "end" |);
                    M.get (| "memPtr" |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_array_array_function_external_nonpayable_returns_storage_to_array_function_external_nonpayable_returns",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "copy_array_from_storage_to_memory_array_function_external_nonpayable_returns",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "constructor_C",
        ["var_i0_mpos"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["_slot"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.assign (|
              ["expr_slot"],
              Some (M.get (| "_slot" |))
            |) in
          let _ :=
            M.assign (|
              ["expr"],
              Some ([Literal.number 0x01])
            |) in
          let _ :=
            M.assign (|
              ["_1"; "_2"],
              Some (M.call (|
                "storage_array_index_access_function_external_nonpayable_returns__dyn",
                [
                  M.get (| "expr_slot" |);
                  M.get (| "expr" |)
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["_6_slot"],
              Some (M.get (| "_1" |))
            |) in
          let _ :=
            M.assign (|
              ["expr_23_slot"],
              Some (M.get (| "_6_slot" |))
            |) in
          let _ :=
            M.assign (|
              ["_mpos"],
              Some (M.get (| "var_i0_mpos" |))
            |) in
          let _ :=
            M.assign (|
              ["expr_mpos"],
              Some (M.get (| "_mpos" |))
            |) in
          let _ :=
            M.assign (|
              ["expr_1"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                M.call (|
                  "memory_array_index_access_function_external_nonpayable_returns_dyn",
                  [
                    M.get (| "expr_mpos" |);
                    M.call (|
                      "convert_rational_by_to_uint256",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |)
                  ]
                |);
                M.call (|
                  "convert_array_array_function_external_nonpayable_returns_storage_to_array_function_external_nonpayable_returns",
                  [
                    M.get (| "expr_23_slot" |)
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "pop",
              [
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_function_external_nonpayable_returns_dyn",
                      [
                        M.get (| "expr_mpos" |);
                        M.call (|
                          "convert_rational_by_to_uint256",
                          [
                            M.get (| "expr_1" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_28_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            []
          |) in
        tt in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a2646970667358221220438f9357afae1ed2da8b4f4bfb4123e9a56a076d6bead2cdbe6c05104c46c06664736f6c634300081b0033".
  End C_28_deployed.
End C_28.
