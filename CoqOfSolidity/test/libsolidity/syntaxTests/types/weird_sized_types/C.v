(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_100.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            []
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                []
              |) in
            tt
          ))
        |) in
      let _ :=
        M.call (|
          "constructor_C",
          []
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          Some (M.call (|
            "allocate_unbounded",
            []
          |))
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f3130305f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3130305f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3130305f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_left",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shl",
                [
                  [Literal.number 0];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_byte_slice_shift",
        ["value"; "toInsert"],
        ["result"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["mask"],
              Some (M.call (|
                "not",
                [
                  [Literal.number 0]
                ]
              |))
            |) in
          let _ :=
            M.declare (|
              ["toInsert"],
              M.call (|
                "shift_left",
                [
                  M.get (| "toInsert" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "and",
                [
                  M.get (| "value" |);
                  M.call (|
                    "not",
                    [
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["result"],
              M.call (|
                "or",
                [
                  M.get (| "value" |);
                  M.call (|
                    "and",
                    [
                      M.get (| "toInsert" |);
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_uint256",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "identity",
        ["value"],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_by_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "prepare_store_uint256",
        ["value"],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_storage_value_offsett_rational_by_to_uint256",
        ["slot"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["convertedValue"],
              Some (M.call (|
                "convert_rational_by_to_uint256",
                [
                  M.get (| "value" |)
                ]
              |))
            |) in
          let _ :=
            M.call (|
              "sstore",
              [
                M.get (| "slot" |);
                M.call (|
                  "update_byte_slice_shift",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |);
                    M.call (|
                      "prepare_store_uint256",
                      [
                        M.get (| "convertedValue" |)
                      ]
                    |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "constructor_C",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["expr"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x00];
                M.get (| "expr" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_1"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x01];
                M.get (| "expr_1" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_2"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x02];
                M.get (| "expr_2" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_3"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x03];
                M.get (| "expr_3" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_4"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x04];
                M.get (| "expr_4" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_5"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x05];
                M.get (| "expr_5" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_6"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x06];
                M.get (| "expr_6" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_7"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x07];
                M.get (| "expr_7" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_8"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x08];
                M.get (| "expr_8" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_9"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x09];
                M.get (| "expr_9" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_10"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x0a];
                M.get (| "expr_10" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_11"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x0b];
                M.get (| "expr_11" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_12"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x0c];
                M.get (| "expr_12" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_13"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x0d];
                M.get (| "expr_13" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_14"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x0e];
                M.get (| "expr_14" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_15"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x0f];
                M.get (| "expr_15" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_16"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x10];
                M.get (| "expr_16" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_17"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x11];
                M.get (| "expr_17" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_18"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x12];
                M.get (| "expr_18" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_19"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x13];
                M.get (| "expr_19" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_20"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x14];
                M.get (| "expr_20" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_21"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x15];
                M.get (| "expr_21" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_22"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x16];
                M.get (| "expr_22" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_23"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x17];
                M.get (| "expr_23" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_24"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x18];
                M.get (| "expr_24" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_25"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x19];
                M.get (| "expr_25" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_26"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x1a];
                M.get (| "expr_26" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_27"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x1b];
                M.get (| "expr_27" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_28"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x1c];
                M.get (| "expr_28" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_29"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x1d];
                M.get (| "expr_29" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_30"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x1e];
                M.get (| "expr_30" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_31"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x1f];
                M.get (| "expr_31" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_32"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_rational_by_to_uint256",
              [
                [Literal.number 0x20];
                M.get (| "expr_32" |)
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_100_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            []
          |) in
        tt in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a2646970667358221220e4af2bf8fc0c10844b6f47b7670d4f48df6a11f521ef37bfba989a2d459e614c64736f6c634300081b0033".
  End C_100_deployed.
End C_100.
