(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "a" ],
          M.call (|
            Ty.path "address",
            [
              M.call (|
                Ty.path "address",
                [
                  M.call (|
                    NewExpression (* Beginning of a node! *)
id: 10
src: 87:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 9
src: 87:1:0
nodeType: IdentifierPath
name: D
nameLocations: [87:1:0, ]
referencedDeclaration: 45

referencedDeclaration: 45
typeDescriptions: typeString contract DtypeIdentifier st_contract$_D_$45

,
                    []
                  |)
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "b" ],
          M.call (|
            Ty.path "address",
            [
              M.call (|
                NewExpression (* Beginning of a node! *)
id: 21
src: 134:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 20
src: 134:1:0
nodeType: IdentifierPath
name: E
nameLocations: [134:1:0, ]
referencedDeclaration: 50

referencedDeclaration: 50
typeDescriptions: typeString contract EtypeIdentifier st_contract$_E_$50

,
                []
              |)
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "c" ],
          M.call (|
            Ty.path "address",
            [
              M.call (|
                NewExpression (* Beginning of a node! *)
id: 31
src: 180:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 30
src: 180:1:0
nodeType: IdentifierPath
name: F
nameLocations: [180:1:0, ]
referencedDeclaration: 55

referencedDeclaration: 55
typeDescriptions: typeString contract FtypeIdentifier st_contract$_F_$55

,
                []
              |)
            ]
          |)
        |) in
      let _ :=
        M.get_name (| "a" |) in
      let _ :=
        M.get_name (| "b" |) in
      let _ :=
        M.get_name (| "c" |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.

(* Contract *)
Module D.
  
End D.

(* Contract *)
Module E.
  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End E.

(* Contract *)
Module F.
  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End F.
