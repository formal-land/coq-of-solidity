(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module A_48.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0xa0]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            []
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                []
              |) in
            tt
          ))
        |) in
      let _ :=
        M.call (|
          "constructor_A",
          []
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          Some (M.call (|
            "allocate_unbounded",
            []
          |))
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "415f34385f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "415f34385f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "setimmutable",
          [
            M.get (| "_1" |);
            [Literal.string "32"];
            M.call (|
              "mload",
              [
                [Literal.number 128]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "415f34385f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "zero_value_for_split_contract_B",
        [],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              [Literal.number 0]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_uint160",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.call (|
                "and",
                [
                  M.get (| "value" |);
                  M.call (|
                    "sub",
                    [
                      M.call (|
                        "shl",
                        [
                          [Literal.number 160];
                          [Literal.number 1]
                        ]
                      |);
                      [Literal.number 1]
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "identity",
        ["value"],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_uint160_to_uint160",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint160",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_uint160",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_uint160_to_address",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "convert_uint160_to_uint160",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_contract_B_to_address",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "convert_uint160_to_address",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_t_rational_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_uint256",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_1_by_1_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_t_rational_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "round_up_to_mul_of",
        ["value"],
        ["result"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["result"],
              M.call (|
                "and",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 31]
                    ]
                  |);
                  M.call (|
                    "not",
                    [
                      [Literal.number 31]
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "panic_error_0x41",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    [Literal.number 0x4e487b71]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 4];
                [Literal.number 0x41]
              ]
            |) in
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0x24]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "finalize_allocation",
        ["memPtr"; "size"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["newFreePtr"],
              Some (M.call (|
                "add",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "round_up_to_mul_of",
                    [
                      M.get (| "size" |)
                    ]
                  |)
                ]
              |))
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "or",
                [
                  M.call (|
                    "gt",
                    [
                      M.get (| "newFreePtr" |);
                      M.call (|
                        "sub",
                        [
                          M.call (|
                            "shl",
                            [
                              [Literal.number 64];
                              [Literal.number 1]
                            ]
                          |);
                          [Literal.number 1]
                        ]
                      |)
                    ]
                  |);
                  M.call (|
                    "lt",
                    [
                      M.get (| "newFreePtr" |);
                      M.get (| "memPtr" |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x41",
                    []
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 64];
                M.get (| "newFreePtr" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_left",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shl",
                [
                  [Literal.number 224];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_decode_fromMemory",
        ["headStart"; "dataEnd"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "slt",
                [
                  M.call (|
                    "sub",
                    [
                      M.get (| "dataEnd" |);
                      M.get (| "headStart" |)
                    ]
                  |);
                  [Literal.number 0]
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                    []
                  |) in
                tt
              ))
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_encode_uint256_to_uint256",
        ["value"; "pos"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                M.get (| "pos" |);
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "value" |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_encode_uint256",
        ["headStart"; "value0"],
        ["tail"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["tail"],
              M.call (|
                "add",
                [
                  M.get (| "headStart" |);
                  [Literal.number 32]
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "abi_encode_uint256_to_uint256",
              [
                M.get (| "value0" |);
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 0]
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_t_rational_by_1",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_2_by_1_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_t_rational_by_1",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 224];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "return_data_selector",
        [],
        ["sig"],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "gt",
                [
                  M.call (|
                    "returndatasize",
                    []
                  |);
                  [Literal.number 3]
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "returndatacopy",
                    [
                      [Literal.number 0];
                      [Literal.number 0];
                      [Literal.number 4]
                    ]
                  |) in
                let _ :=
                  M.declare (|
                    ["sig"],
                    M.call (|
                      "shift_right_unsigned",
                      [
                        M.call (|
                          "mload",
                          [
                            [Literal.number 0]
                          ]
                        |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "try_decode_error_message",
        [],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "lt",
                [
                  M.call (|
                    "returndatasize",
                    []
                  |);
                  [Literal.number 0x44]
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.leave (||) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["data"],
              Some (M.call (|
                "allocate_unbounded",
                []
              |))
            |) in
          let _ :=
            M.call (|
              "returndatacopy",
              [
                M.get (| "data" |);
                [Literal.number 4];
                M.call (|
                  "sub",
                  [
                    M.call (|
                      "returndatasize",
                      []
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["offset"],
              Some (M.call (|
                "mload",
                [
                  M.get (| "data" |)
                ]
              |))
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "or",
                [
                  M.call (|
                    "gt",
                    [
                      M.get (| "offset" |);
                      M.call (|
                        "sub",
                        [
                          M.call (|
                            "shl",
                            [
                              [Literal.number 64];
                              [Literal.number 1]
                            ]
                          |);
                          [Literal.number 1]
                        ]
                      |)
                    ]
                  |);
                  M.call (|
                    "gt",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "offset" |);
                          [Literal.number 0x24]
                        ]
                      |);
                      M.call (|
                        "returndatasize",
                        []
                      |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.leave (||) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["msg"],
              Some (M.call (|
                "add",
                [
                  M.get (| "data" |);
                  M.get (| "offset" |)
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["length"],
              Some (M.call (|
                "mload",
                [
                  M.get (| "msg" |)
                ]
              |))
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "gt",
                [
                  M.get (| "length" |);
                  M.call (|
                    "sub",
                    [
                      M.call (|
                        "shl",
                        [
                          [Literal.number 64];
                          [Literal.number 1]
                        ]
                      |);
                      [Literal.number 1]
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.leave (||) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["end"],
              Some (M.call (|
                "add",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "msg" |);
                      [Literal.number 0x20]
                    ]
                  |);
                  M.get (| "length" |)
                ]
              |))
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "gt",
                [
                  M.get (| "end" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "data" |);
                      M.call (|
                        "sub",
                        [
                          M.call (|
                            "returndatasize",
                            []
                          |);
                          [Literal.number 4]
                        ]
                      |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.leave (||) in
                tt
              ))
            |) in
          let _ :=
            M.call (|
              "finalize_allocation",
              [
                M.get (| "data" |);
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    M.call (|
                      "add",
                      [
                        [Literal.number 0x20];
                        M.get (| "length" |)
                      ]
                    |)
                  ]
                |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["ret"],
              M.get (| "msg" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_by_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "try_decode_panic_data",
        [],
        ["success";
    "data"],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "gt",
                [
                  M.call (|
                    "returndatasize",
                    []
                  |);
                  [Literal.number 0x23]
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "returndatacopy",
                    [
                      [Literal.number 0];
                      [Literal.number 4];
                      [Literal.number 0x20]
                    ]
                  |) in
                let _ :=
                  M.declare (|
                    ["success"],
                    [Literal.number 1]
                  |) in
                let _ :=
                  M.declare (|
                    ["data"],
                    M.call (|
                      "mload",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_3_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_t_rational_by_to_t_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_3_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_by_1",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_5_by_1_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_by_1",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "constructor_A",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["var_b_address"],
              None
            |) in
          let _ :=
            M.assign (|
              ["zero_contract_B_address"],
              Some (M.call (|
                "zero_value_for_split_contract_B",
                []
              |))
            |) in
          let _ :=
            M.declare (|
              ["var_b_address"],
              M.get (| "zero_contract_B_address" |)
            |) in
          let _ :=
            M.assign (|
              ["_address"],
              Some (M.get (| "var_b_address" |))
            |) in
          let _ :=
            M.assign (|
              ["expr_address"],
              Some (M.get (| "_address" |))
            |) in
          let _ :=
            M.assign (|
              ["expr_10_address"],
              Some (M.call (|
                "convert_contract_B_to_address",
                [
                  M.get (| "expr_address" |)
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["expr_functionSelector"],
              Some ([Literal.number 0x2fbebd38])
            |) in
          let _ :=
            M.assign (|
              ["expr"],
              Some ([Literal.number 0x01])
            |) in
          let _ :=
            M.assign (|
              ["_1"],
              Some (M.call (|
                "convert_rational_1_by_1_to_uint256",
                [
                  M.get (| "expr" |)
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["_2"],
              Some (M.get (| "_1" |))
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 128];
                M.get (| "_2" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_1"],
              Some (M.get (| "_1" |))
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "extcodesize",
                    [
                      M.get (| "expr_10_address" |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20",
                    []
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["_3"],
              Some (M.call (|
                "allocate_unbounded",
                []
              |))
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                M.get (| "_3" |);
                M.call (|
                  "shift_left",
                  [
                    M.get (| "expr_functionSelector" |)
                  ]
                |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["_4"],
              Some (M.call (|
                "abi_encode_uint256",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "_3" |);
                      [Literal.number 4]
                    ]
                  |);
                  M.get (| "expr_1" |)
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["trySuccessCondition"],
              Some (M.call (|
                "staticcall",
                [
                  M.call (|
                    "gas",
                    []
                  |);
                  M.get (| "expr_10_address" |);
                  M.get (| "_3" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_4" |);
                      M.get (| "_3" |)
                    ]
                  |);
                  M.get (| "_3" |);
                  [Literal.number 0]
                ]
              |))
            |) in
          let _ :=
            M.if_ (|
              M.get (| "trySuccessCondition" |),
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["_5"],
                    Some ([Literal.number 0])
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "gt",
                      [
                        M.get (| "_5" |);
                        M.call (|
                          "returndatasize",
                          []
                        |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.declare (|
                          ["_5"],
                          M.call (|
                            "returndatasize",
                            []
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.call (|
                    "finalize_allocation",
                    [
                      M.get (| "_3" |);
                      M.get (| "_5" |)
                    ]
                  |) in
                let _ :=
                  M.call (|
                    "abi_decode_fromMemory",
                    [
                      M.get (| "_3" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "_3" |);
                          M.get (| "_5" |)
                        ]
                      |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.switch (|
              M.call (|
                "iszero",
                [
                  M.get (| "trySuccessCondition" |)
                ]
              |),
              [
                (
                  Some (Literal.number 0),
                  ltac:(M.monadic (
                    let _ :=
                      M.assign (|
                        ["expr_2"],
                        Some ([Literal.number 0x02])
                      |) in
                    let _ :=
                      M.assign (|
                        ["_6"],
                        Some (M.call (|
                          "convert_rational_2_by_1_to_uint256",
                          [
                            M.get (| "expr_2" |)
                          ]
                        |))
                      |) in
                    let _ :=
                      M.assign (|
                        ["_7"],
                        Some (M.get (| "_6" |))
                      |) in
                    let _ :=
                      M.call (|
                        "mstore",
                        [
                          [Literal.number 128];
                          M.get (| "_7" |)
                        ]
                      |) in
                    tt
                  ))            );
                (
                  None,
                  ltac:(M.monadic (
                    let _ :=
                      M.assign (|
                        ["_8"],
                        Some ([Literal.number 1])
                      |) in
                    let _ :=
                      M.switch (|
                        M.call (|
                          "return_data_selector",
                          []
                        |),
                        [
                          (
                            Some (Literal.number 147028384),
                            ltac:(M.monadic (
                              let _ :=
                                M.assign (|
                                  ["_9"],
                                  Some (M.call (|
                                    "try_decode_error_message",
                                    []
                                  |))
                                |) in
                              let _ :=
                                M.if_ (|
                                  M.get (| "_9" |),
                                  ltac:(M.monadic (
                                    let _ :=
                                      M.declare (|
                                        ["_8"],
                                        [Literal.number 0]
                                      |) in
                                    let _ :=
                                      M.assign (|
                                        ["expr_3"],
                                        Some ([Literal.number 0x04])
                                      |) in
                                    let _ :=
                                      M.assign (|
                                        ["_10"],
                                        Some (M.call (|
                                          "convert_rational_by_to_uint256",
                                          [
                                            M.get (| "expr_3" |)
                                          ]
                                        |))
                                      |) in
                                    let _ :=
                                      M.assign (|
                                        ["_11"],
                                        Some (M.get (| "_10" |))
                                      |) in
                                    let _ :=
                                      M.call (|
                                        "mstore",
                                        [
                                          [Literal.number 128];
                                          M.get (| "_11" |)
                                        ]
                                      |) in
                                    tt
                                  ))
                                |) in
                              tt
                            ))                      );
                          (
                            Some (Literal.number 1313373041),
                            ltac:(M.monadic (
                              let _ :=
                                M.assign (|
                                  ["_12"; "_13"],
                                  Some (M.call (|
                                    "try_decode_panic_data",
                                    []
                                  |))
                                |) in
                              let _ :=
                                M.if_ (|
                                  M.get (| "_12" |),
                                  ltac:(M.monadic (
                                    let _ :=
                                      M.declare (|
                                        ["_8"],
                                        [Literal.number 0]
                                      |) in
                                    let _ :=
                                      M.assign (|
                                        ["expr_4"],
                                        Some ([Literal.number 0x03])
                                      |) in
                                    let _ :=
                                      M.assign (|
                                        ["_14"],
                                        Some (M.call (|
                                          "convert_t_rational_by_to_t_uint256",
                                          [
                                            M.get (| "expr_4" |)
                                          ]
                                        |))
                                      |) in
                                    let _ :=
                                      M.assign (|
                                        ["_15"],
                                        Some (M.get (| "_14" |))
                                      |) in
                                    let _ :=
                                      M.call (|
                                        "mstore",
                                        [
                                          [Literal.number 128];
                                          M.get (| "_15" |)
                                        ]
                                      |) in
                                    tt
                                  ))
                                |) in
                              tt
                            ))                      )                    ]
                      |) in
                    let _ :=
                      M.if_ (|
                        M.get (| "_8" |),
                        ltac:(M.monadic (
                          let _ :=
                            M.assign (|
                              ["expr_5"],
                              Some ([Literal.number 0x05])
                            |) in
                          let _ :=
                            M.assign (|
                              ["_16"],
                              Some (M.call (|
                                "convert_rational_5_by_1_to_uint256",
                                [
                                  M.get (| "expr_5" |)
                                ]
                              |))
                            |) in
                          let _ :=
                            M.assign (|
                              ["_17"],
                              Some (M.get (| "_16" |))
                            |) in
                          let _ :=
                            M.call (|
                              "mstore",
                              [
                                [Literal.number 128];
                                M.get (| "_17" |)
                              ]
                            |) in
                          tt
                        ))
                      |) in
                    tt
                  ))            )          ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module A_48_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      []
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  Some (M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0xb6854a21),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_variable",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            []
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "getter_fun_variable",
          [],
          ["rval"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["rval"],
                M.call (|
                  "loadimmutable",
                  [
                    [Literal.string "32"]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_to_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_variable",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "getter_fun_variable",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a26469706673582212207d7f0175a06781fac503428b2659dc471a721017dbb2da5dd139ad4aa458a5d164736f6c634300081b0033".
  End A_48_deployed.
End A_48.
