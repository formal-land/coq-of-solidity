(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module A.
  Definition variable : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "b" ],
          Value.Default
        |) in
      let _ :=
        TryStatement M.call (|
          M.member_access (|
            M.get_name (| "b" |),
            "foo"
          |),
          [
            M.assign (|
              "=",
              M.get_name (| "variable" |),
              Value.Integer 1
            |)
          ]
        |) TryCatchClause   let _ :=
          M.assign (|
            "=",
            M.get_name (| "variable" |),
            Value.Integer 2
          |) in
        Value.Tuple [], TryCatchClause Panic (* Beginning of a node! *)
id: 23
src: 187:6:0
nodeType: ParameterList
parameters: Definition  : Value.t :=
          undefined.
 let _ :=
          M.assign (|
            "=",
            M.get_name (| "variable" |),
            Value.Integer 3
          |) in
        Value.Tuple [], TryCatchClause Error (* Beginning of a node! *)
id: 32
src: 259:15:0
nodeType: ParameterList
parameters: Definition  : Value.t :=
          undefined.
 let _ :=
          M.assign (|
            "=",
            M.get_name (| "variable" |),
            Value.Integer 4
          |) in
        Value.Tuple [], TryCatchClause   let _ :=
          M.assign (|
            "=",
            M.get_name (| "variable" |),
            Value.Integer 5
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End A.

(* Contract *)
Module B.
  Definition foo (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "revert" |),
          []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End B.
