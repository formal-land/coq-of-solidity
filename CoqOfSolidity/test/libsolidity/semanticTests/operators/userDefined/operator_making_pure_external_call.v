(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

Axiom user_type_Int32 : Ty.path "Int32" = Ty.path "int32".
(* Beginning of a node! *)
id: 7
src: 21:46:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 6
src: 54:5:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 5
src: 54:5:0
nodeType: IdentifierPath
name: Int32
nameLocations: [54:5:0, ]
referencedDeclaration: 2

referencedDeclaration: 2
typeDescriptions: typeString Int32typeIdentifier st_userDefinedValueType$_Int32_$2

functionList: [{definition: (* Beginning of a node! *)
id: 3
src: 28:3:0
nodeType: IdentifierPath
name: add
nameLocations: [28:3:0, ]
referencedDeclaration: 27
, operator: +, }, {definition: (* Beginning of a node! *)
id: 4
src: 38:5:0
nodeType: IdentifierPath
name: unsub
nameLocations: [38:5:0, ]
referencedDeclaration: 43
, operator: -, }, ]
global: 1

Definition add (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.call (|
              M.get_name (| "loadAdder" |),
              []
            |),
            "mul"
          |),
          [
            M.get_name (| "x" |),
            M.get_name (| "y" |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsub (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.call (|
              M.get_name (| "loadAdder" |),
              []
            |),
            "inc"
          |),
          [
            M.get_name (| "x" |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
(* Interface *)
Module IAdder.
  Definition mul (α : list Value.t) : M :=
    match α with
    | [, ] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition inc (α : list Value.t) : M :=
    match α with
    | [] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.
End IAdder.

(* Contract *)
Module Adder.
  Definition mul (α : list Value.t) : M :=
    match α with
    | [x, y] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "Int32" |),
              "wrap"
            |),
            [
              M.bin_op (|
                "*",
                M.call (|
                  M.member_access (|
                    M.get_name (| "Int32" |),
                    "unwrap"
                  |),
                  [
                    M.get_name (| "x" |)
                  ]
                |),
                M.call (|
                  M.member_access (|
                    M.get_name (| "Int32" |),
                    "unwrap"
                  |),
                  [
                    M.get_name (| "y" |)
                  ]
                |)
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition inc (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "Int32" |),
              "wrap"
            |),
            [
              M.bin_op (|
                "+",
                M.call (|
                  M.member_access (|
                    M.get_name (| "Int32" |),
                    "unwrap"
                  |),
                  [
                    M.get_name (| "x" |)
                  ]
                |),
                Value.Integer 1
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Adder.

Definition storeAdder (α : list Value.t) : M :=
  match α with
  | [adder] =>
    let _ :=
      (* Beginning of a node! *)
id: 122
src: 721:134:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 843:5:0declaration: 119isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition loadAdder (α : list Value.t) : M :=
  match α with
  | [] =>
    let _ :=
      (* Beginning of a node! *)
id: 130
src: 914:42:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 933:5:0declaration: 128isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
(* Contract *)
Module C.
  Definition testMul (α : list Value.t) : M :=
    match α with
    | [x, y] =>
      let _ :=
        M.call (|
          M.get_name (| "storeAdder" |),
          [
            M.call (|
              NewExpression (* Beginning of a node! *)
id: 146
src: 1060:5:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 145
src: 1060:5:0
nodeType: IdentifierPath
name: Adder
nameLocations: [1060:5:0, ]
referencedDeclaration: 116

referencedDeclaration: 116
typeDescriptions: typeString contract AddertypeIdentifier st_contract$_Adder_$116

,
              []
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.get_name (| "x" |),
            M.get_name (| "y" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testInc (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.call (|
          M.get_name (| "storeAdder" |),
          [
            M.call (|
              NewExpression (* Beginning of a node! *)
id: 167
src: 1178:5:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 166
src: 1178:5:0
nodeType: IdentifierPath
name: Adder
nameLocations: [1178:5:0, ]
referencedDeclaration: 116

referencedDeclaration: 116
typeDescriptions: typeString contract AddertypeIdentifier st_contract$_Adder_$116

,
              []
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          M.un_op (|
            true,
            "-",
            M.get_name (| "x" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
