(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

Axiom user_type_Int8 : Ty.path "Int8" = Ty.path "int8".
Axiom user_type_Int16 : Ty.path "Int16" = Ty.path "int16".
Axiom user_type_Int24 : Ty.path "Int24" = Ty.path "int24".
Axiom user_type_Int32 : Ty.path "Int32" = Ty.path "int32".
Axiom user_type_Int40 : Ty.path "Int40" = Ty.path "int40".
Axiom user_type_Int48 : Ty.path "Int48" = Ty.path "int48".
Axiom user_type_Int56 : Ty.path "Int56" = Ty.path "int56".
Axiom user_type_Int64 : Ty.path "Int64" = Ty.path "int64".
Axiom user_type_Int72 : Ty.path "Int72" = Ty.path "int72".
Axiom user_type_Int80 : Ty.path "Int80" = Ty.path "int80".
Axiom user_type_Int88 : Ty.path "Int88" = Ty.path "int88".
Axiom user_type_Int96 : Ty.path "Int96" = Ty.path "int96".
Axiom user_type_Int104 : Ty.path "Int104" = Ty.path "int104".
Axiom user_type_Int112 : Ty.path "Int112" = Ty.path "int112".
Axiom user_type_Int120 : Ty.path "Int120" = Ty.path "int120".
Axiom user_type_Int128 : Ty.path "Int128" = Ty.path "int128".
Axiom user_type_Int136 : Ty.path "Int136" = Ty.path "int136".
Axiom user_type_Int144 : Ty.path "Int144" = Ty.path "int144".
Axiom user_type_Int152 : Ty.path "Int152" = Ty.path "int152".
Axiom user_type_Int160 : Ty.path "Int160" = Ty.path "int160".
Axiom user_type_Int168 : Ty.path "Int168" = Ty.path "int168".
Axiom user_type_Int176 : Ty.path "Int176" = Ty.path "int176".
Axiom user_type_Int184 : Ty.path "Int184" = Ty.path "int184".
Axiom user_type_Int192 : Ty.path "Int192" = Ty.path "int192".
Axiom user_type_Int200 : Ty.path "Int200" = Ty.path "int200".
Axiom user_type_Int208 : Ty.path "Int208" = Ty.path "int208".
Axiom user_type_Int216 : Ty.path "Int216" = Ty.path "int216".
Axiom user_type_Int224 : Ty.path "Int224" = Ty.path "int224".
Axiom user_type_Int232 : Ty.path "Int232" = Ty.path "int232".
Axiom user_type_Int240 : Ty.path "Int240" = Ty.path "int240".
Axiom user_type_Int248 : Ty.path "Int248" = Ty.path "int248".
Axiom user_type_Int256 : Ty.path "Int256" = Ty.path "int256".
Axiom user_type_Int : Ty.path "Int" = Ty.path "int".
Axiom user_type_Uint8 : Ty.path "Uint8" = Ty.path "uint8".
Axiom user_type_Uint16 : Ty.path "Uint16" = Ty.path "uint16".
Axiom user_type_Uint24 : Ty.path "Uint24" = Ty.path "uint24".
Axiom user_type_Uint32 : Ty.path "Uint32" = Ty.path "uint32".
Axiom user_type_Uint40 : Ty.path "Uint40" = Ty.path "uint40".
Axiom user_type_Uint48 : Ty.path "Uint48" = Ty.path "uint48".
Axiom user_type_Uint56 : Ty.path "Uint56" = Ty.path "uint56".
Axiom user_type_Uint64 : Ty.path "Uint64" = Ty.path "uint64".
Axiom user_type_Uint72 : Ty.path "Uint72" = Ty.path "uint72".
Axiom user_type_Uint80 : Ty.path "Uint80" = Ty.path "uint80".
Axiom user_type_Uint88 : Ty.path "Uint88" = Ty.path "uint88".
Axiom user_type_Uint96 : Ty.path "Uint96" = Ty.path "uint96".
Axiom user_type_Uint104 : Ty.path "Uint104" = Ty.path "uint104".
Axiom user_type_Uint112 : Ty.path "Uint112" = Ty.path "uint112".
Axiom user_type_Uint120 : Ty.path "Uint120" = Ty.path "uint120".
Axiom user_type_Uint128 : Ty.path "Uint128" = Ty.path "uint128".
Axiom user_type_Uint136 : Ty.path "Uint136" = Ty.path "uint136".
Axiom user_type_Uint144 : Ty.path "Uint144" = Ty.path "uint144".
Axiom user_type_Uint152 : Ty.path "Uint152" = Ty.path "uint152".
Axiom user_type_Uint160 : Ty.path "Uint160" = Ty.path "uint160".
Axiom user_type_Uint168 : Ty.path "Uint168" = Ty.path "uint168".
Axiom user_type_Uint176 : Ty.path "Uint176" = Ty.path "uint176".
Axiom user_type_Uint184 : Ty.path "Uint184" = Ty.path "uint184".
Axiom user_type_Uint192 : Ty.path "Uint192" = Ty.path "uint192".
Axiom user_type_Uint200 : Ty.path "Uint200" = Ty.path "uint200".
Axiom user_type_Uint208 : Ty.path "Uint208" = Ty.path "uint208".
Axiom user_type_Uint216 : Ty.path "Uint216" = Ty.path "uint216".
Axiom user_type_Uint224 : Ty.path "Uint224" = Ty.path "uint224".
Axiom user_type_Uint232 : Ty.path "Uint232" = Ty.path "uint232".
Axiom user_type_Uint240 : Ty.path "Uint240" = Ty.path "uint240".
Axiom user_type_Uint248 : Ty.path "Uint248" = Ty.path "uint248".
Axiom user_type_Uint256 : Ty.path "Uint256" = Ty.path "uint256".
Axiom user_type_Uint : Ty.path "Uint" = Ty.path "uint".
Axiom user_type_Bytes1 : Ty.path "Bytes1" = Ty.path "bytes1".
Axiom user_type_Bytes2 : Ty.path "Bytes2" = Ty.path "bytes2".
Axiom user_type_Bytes3 : Ty.path "Bytes3" = Ty.path "bytes3".
Axiom user_type_Bytes4 : Ty.path "Bytes4" = Ty.path "bytes4".
Axiom user_type_Bytes5 : Ty.path "Bytes5" = Ty.path "bytes5".
Axiom user_type_Bytes6 : Ty.path "Bytes6" = Ty.path "bytes6".
Axiom user_type_Bytes7 : Ty.path "Bytes7" = Ty.path "bytes7".
Axiom user_type_Bytes8 : Ty.path "Bytes8" = Ty.path "bytes8".
Axiom user_type_Bytes9 : Ty.path "Bytes9" = Ty.path "bytes9".
Axiom user_type_Bytes10 : Ty.path "Bytes10" = Ty.path "bytes10".
Axiom user_type_Bytes11 : Ty.path "Bytes11" = Ty.path "bytes11".
Axiom user_type_Bytes12 : Ty.path "Bytes12" = Ty.path "bytes12".
Axiom user_type_Bytes13 : Ty.path "Bytes13" = Ty.path "bytes13".
Axiom user_type_Bytes14 : Ty.path "Bytes14" = Ty.path "bytes14".
Axiom user_type_Bytes15 : Ty.path "Bytes15" = Ty.path "bytes15".
Axiom user_type_Bytes16 : Ty.path "Bytes16" = Ty.path "bytes16".
Axiom user_type_Bytes17 : Ty.path "Bytes17" = Ty.path "bytes17".
Axiom user_type_Bytes18 : Ty.path "Bytes18" = Ty.path "bytes18".
Axiom user_type_Bytes19 : Ty.path "Bytes19" = Ty.path "bytes19".
Axiom user_type_Bytes20 : Ty.path "Bytes20" = Ty.path "bytes20".
Axiom user_type_Bytes21 : Ty.path "Bytes21" = Ty.path "bytes21".
Axiom user_type_Bytes22 : Ty.path "Bytes22" = Ty.path "bytes22".
Axiom user_type_Bytes23 : Ty.path "Bytes23" = Ty.path "bytes23".
Axiom user_type_Bytes24 : Ty.path "Bytes24" = Ty.path "bytes24".
Axiom user_type_Bytes25 : Ty.path "Bytes25" = Ty.path "bytes25".
Axiom user_type_Bytes26 : Ty.path "Bytes26" = Ty.path "bytes26".
Axiom user_type_Bytes27 : Ty.path "Bytes27" = Ty.path "bytes27".
Axiom user_type_Bytes28 : Ty.path "Bytes28" = Ty.path "bytes28".
Axiom user_type_Bytes29 : Ty.path "Bytes29" = Ty.path "bytes29".
Axiom user_type_Bytes30 : Ty.path "Bytes30" = Ty.path "bytes30".
Axiom user_type_Bytes31 : Ty.path "Bytes31" = Ty.path "bytes31".
Axiom user_type_Bytes32 : Ty.path "Bytes32" = Ty.path "bytes32".
Axiom user_type_Address : Ty.path "Address" = Ty.path "address".
Axiom user_type_AddressPayable : Ty.path "AddressPayable" = Ty.path "address".
Axiom user_type_Bool : Ty.path "Bool" = Ty.path "bool".
(* Beginning of a node! *)
id: 207
src: 2391:55:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 206
src: 2434:4:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 205
src: 2434:4:0
nodeType: IdentifierPath
name: Int8
nameLocations: [2434:4:0, ]
referencedDeclaration: 2

referencedDeclaration: 2
typeDescriptions: typeString Int8typeIdentifier st_userDefinedValueType$_Int8_$2

functionList: [{definition: (* Beginning of a node! *)
id: 203
src: 2398:9:0
nodeType: IdentifierPath
name: bitorInt8
nameLocations: [2398:9:0, ]
referencedDeclaration: 718
, operator: |, }, {definition: (* Beginning of a node! *)
id: 204
src: 2414:9:0
nodeType: IdentifierPath
name: unsubInt8
nameLocations: [2414:9:0, ]
referencedDeclaration: 1569
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 212
src: 2447:58:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 211
src: 2492:5:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 210
src: 2492:5:0
nodeType: IdentifierPath
name: Int16
nameLocations: [2492:5:0, ]
referencedDeclaration: 4

referencedDeclaration: 4
typeDescriptions: typeString Int16typeIdentifier st_userDefinedValueType$_Int16_$4

functionList: [{definition: (* Beginning of a node! *)
id: 208
src: 2454:10:0
nodeType: IdentifierPath
name: bitorInt16
nameLocations: [2454:10:0, ]
referencedDeclaration: 744
, operator: |, }, {definition: (* Beginning of a node! *)
id: 209
src: 2471:10:0
nodeType: IdentifierPath
name: unsubInt16
nameLocations: [2471:10:0, ]
referencedDeclaration: 1588
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 217
src: 2506:58:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 216
src: 2551:5:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 215
src: 2551:5:0
nodeType: IdentifierPath
name: Int24
nameLocations: [2551:5:0, ]
referencedDeclaration: 6

referencedDeclaration: 6
typeDescriptions: typeString Int24typeIdentifier st_userDefinedValueType$_Int24_$6

functionList: [{definition: (* Beginning of a node! *)
id: 213
src: 2513:10:0
nodeType: IdentifierPath
name: bitorInt24
nameLocations: [2513:10:0, ]
referencedDeclaration: 770
, operator: |, }, {definition: (* Beginning of a node! *)
id: 214
src: 2530:10:0
nodeType: IdentifierPath
name: unsubInt24
nameLocations: [2530:10:0, ]
referencedDeclaration: 1607
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 222
src: 2565:58:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 221
src: 2610:5:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 220
src: 2610:5:0
nodeType: IdentifierPath
name: Int32
nameLocations: [2610:5:0, ]
referencedDeclaration: 8

referencedDeclaration: 8
typeDescriptions: typeString Int32typeIdentifier st_userDefinedValueType$_Int32_$8

functionList: [{definition: (* Beginning of a node! *)
id: 218
src: 2572:10:0
nodeType: IdentifierPath
name: bitorInt32
nameLocations: [2572:10:0, ]
referencedDeclaration: 796
, operator: |, }, {definition: (* Beginning of a node! *)
id: 219
src: 2589:10:0
nodeType: IdentifierPath
name: unsubInt32
nameLocations: [2589:10:0, ]
referencedDeclaration: 1626
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 227
src: 2624:58:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 226
src: 2669:5:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 225
src: 2669:5:0
nodeType: IdentifierPath
name: Int40
nameLocations: [2669:5:0, ]
referencedDeclaration: 10

referencedDeclaration: 10
typeDescriptions: typeString Int40typeIdentifier st_userDefinedValueType$_Int40_$10

functionList: [{definition: (* Beginning of a node! *)
id: 223
src: 2631:10:0
nodeType: IdentifierPath
name: bitorInt40
nameLocations: [2631:10:0, ]
referencedDeclaration: 822
, operator: |, }, {definition: (* Beginning of a node! *)
id: 224
src: 2648:10:0
nodeType: IdentifierPath
name: unsubInt40
nameLocations: [2648:10:0, ]
referencedDeclaration: 1645
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 232
src: 2683:58:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 231
src: 2728:5:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 230
src: 2728:5:0
nodeType: IdentifierPath
name: Int48
nameLocations: [2728:5:0, ]
referencedDeclaration: 12

referencedDeclaration: 12
typeDescriptions: typeString Int48typeIdentifier st_userDefinedValueType$_Int48_$12

functionList: [{definition: (* Beginning of a node! *)
id: 228
src: 2690:10:0
nodeType: IdentifierPath
name: bitorInt48
nameLocations: [2690:10:0, ]
referencedDeclaration: 848
, operator: |, }, {definition: (* Beginning of a node! *)
id: 229
src: 2707:10:0
nodeType: IdentifierPath
name: unsubInt48
nameLocations: [2707:10:0, ]
referencedDeclaration: 1664
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 237
src: 2742:58:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 236
src: 2787:5:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 235
src: 2787:5:0
nodeType: IdentifierPath
name: Int56
nameLocations: [2787:5:0, ]
referencedDeclaration: 14

referencedDeclaration: 14
typeDescriptions: typeString Int56typeIdentifier st_userDefinedValueType$_Int56_$14

functionList: [{definition: (* Beginning of a node! *)
id: 233
src: 2749:10:0
nodeType: IdentifierPath
name: bitorInt56
nameLocations: [2749:10:0, ]
referencedDeclaration: 874
, operator: |, }, {definition: (* Beginning of a node! *)
id: 234
src: 2766:10:0
nodeType: IdentifierPath
name: unsubInt56
nameLocations: [2766:10:0, ]
referencedDeclaration: 1683
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 242
src: 2801:58:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 241
src: 2846:5:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 240
src: 2846:5:0
nodeType: IdentifierPath
name: Int64
nameLocations: [2846:5:0, ]
referencedDeclaration: 16

referencedDeclaration: 16
typeDescriptions: typeString Int64typeIdentifier st_userDefinedValueType$_Int64_$16

functionList: [{definition: (* Beginning of a node! *)
id: 238
src: 2808:10:0
nodeType: IdentifierPath
name: bitorInt64
nameLocations: [2808:10:0, ]
referencedDeclaration: 900
, operator: |, }, {definition: (* Beginning of a node! *)
id: 239
src: 2825:10:0
nodeType: IdentifierPath
name: unsubInt64
nameLocations: [2825:10:0, ]
referencedDeclaration: 1702
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 247
src: 2860:58:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 246
src: 2905:5:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 245
src: 2905:5:0
nodeType: IdentifierPath
name: Int72
nameLocations: [2905:5:0, ]
referencedDeclaration: 18

referencedDeclaration: 18
typeDescriptions: typeString Int72typeIdentifier st_userDefinedValueType$_Int72_$18

functionList: [{definition: (* Beginning of a node! *)
id: 243
src: 2867:10:0
nodeType: IdentifierPath
name: bitorInt72
nameLocations: [2867:10:0, ]
referencedDeclaration: 926
, operator: |, }, {definition: (* Beginning of a node! *)
id: 244
src: 2884:10:0
nodeType: IdentifierPath
name: unsubInt72
nameLocations: [2884:10:0, ]
referencedDeclaration: 1721
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 252
src: 2919:58:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 251
src: 2964:5:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 250
src: 2964:5:0
nodeType: IdentifierPath
name: Int80
nameLocations: [2964:5:0, ]
referencedDeclaration: 20

referencedDeclaration: 20
typeDescriptions: typeString Int80typeIdentifier st_userDefinedValueType$_Int80_$20

functionList: [{definition: (* Beginning of a node! *)
id: 248
src: 2926:10:0
nodeType: IdentifierPath
name: bitorInt80
nameLocations: [2926:10:0, ]
referencedDeclaration: 952
, operator: |, }, {definition: (* Beginning of a node! *)
id: 249
src: 2943:10:0
nodeType: IdentifierPath
name: unsubInt80
nameLocations: [2943:10:0, ]
referencedDeclaration: 1740
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 257
src: 2978:58:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 256
src: 3023:5:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 255
src: 3023:5:0
nodeType: IdentifierPath
name: Int88
nameLocations: [3023:5:0, ]
referencedDeclaration: 22

referencedDeclaration: 22
typeDescriptions: typeString Int88typeIdentifier st_userDefinedValueType$_Int88_$22

functionList: [{definition: (* Beginning of a node! *)
id: 253
src: 2985:10:0
nodeType: IdentifierPath
name: bitorInt88
nameLocations: [2985:10:0, ]
referencedDeclaration: 978
, operator: |, }, {definition: (* Beginning of a node! *)
id: 254
src: 3002:10:0
nodeType: IdentifierPath
name: unsubInt88
nameLocations: [3002:10:0, ]
referencedDeclaration: 1759
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 262
src: 3037:58:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 261
src: 3082:5:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 260
src: 3082:5:0
nodeType: IdentifierPath
name: Int96
nameLocations: [3082:5:0, ]
referencedDeclaration: 24

referencedDeclaration: 24
typeDescriptions: typeString Int96typeIdentifier st_userDefinedValueType$_Int96_$24

functionList: [{definition: (* Beginning of a node! *)
id: 258
src: 3044:10:0
nodeType: IdentifierPath
name: bitorInt96
nameLocations: [3044:10:0, ]
referencedDeclaration: 1004
, operator: |, }, {definition: (* Beginning of a node! *)
id: 259
src: 3061:10:0
nodeType: IdentifierPath
name: unsubInt96
nameLocations: [3061:10:0, ]
referencedDeclaration: 1778
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 267
src: 3096:61:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 266
src: 3143:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 265
src: 3143:6:0
nodeType: IdentifierPath
name: Int104
nameLocations: [3143:6:0, ]
referencedDeclaration: 26

referencedDeclaration: 26
typeDescriptions: typeString Int104typeIdentifier st_userDefinedValueType$_Int104_$26

functionList: [{definition: (* Beginning of a node! *)
id: 263
src: 3103:11:0
nodeType: IdentifierPath
name: bitorInt104
nameLocations: [3103:11:0, ]
referencedDeclaration: 1030
, operator: |, }, {definition: (* Beginning of a node! *)
id: 264
src: 3121:11:0
nodeType: IdentifierPath
name: unsubInt104
nameLocations: [3121:11:0, ]
referencedDeclaration: 1797
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 272
src: 3158:61:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 271
src: 3205:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 270
src: 3205:6:0
nodeType: IdentifierPath
name: Int112
nameLocations: [3205:6:0, ]
referencedDeclaration: 28

referencedDeclaration: 28
typeDescriptions: typeString Int112typeIdentifier st_userDefinedValueType$_Int112_$28

functionList: [{definition: (* Beginning of a node! *)
id: 268
src: 3165:11:0
nodeType: IdentifierPath
name: bitorInt112
nameLocations: [3165:11:0, ]
referencedDeclaration: 1056
, operator: |, }, {definition: (* Beginning of a node! *)
id: 269
src: 3183:11:0
nodeType: IdentifierPath
name: unsubInt112
nameLocations: [3183:11:0, ]
referencedDeclaration: 1816
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 277
src: 3220:61:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 276
src: 3267:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 275
src: 3267:6:0
nodeType: IdentifierPath
name: Int120
nameLocations: [3267:6:0, ]
referencedDeclaration: 30

referencedDeclaration: 30
typeDescriptions: typeString Int120typeIdentifier st_userDefinedValueType$_Int120_$30

functionList: [{definition: (* Beginning of a node! *)
id: 273
src: 3227:11:0
nodeType: IdentifierPath
name: bitorInt120
nameLocations: [3227:11:0, ]
referencedDeclaration: 1082
, operator: |, }, {definition: (* Beginning of a node! *)
id: 274
src: 3245:11:0
nodeType: IdentifierPath
name: unsubInt120
nameLocations: [3245:11:0, ]
referencedDeclaration: 1835
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 282
src: 3282:61:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 281
src: 3329:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 280
src: 3329:6:0
nodeType: IdentifierPath
name: Int128
nameLocations: [3329:6:0, ]
referencedDeclaration: 32

referencedDeclaration: 32
typeDescriptions: typeString Int128typeIdentifier st_userDefinedValueType$_Int128_$32

functionList: [{definition: (* Beginning of a node! *)
id: 278
src: 3289:11:0
nodeType: IdentifierPath
name: bitorInt128
nameLocations: [3289:11:0, ]
referencedDeclaration: 1108
, operator: |, }, {definition: (* Beginning of a node! *)
id: 279
src: 3307:11:0
nodeType: IdentifierPath
name: unsubInt128
nameLocations: [3307:11:0, ]
referencedDeclaration: 1854
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 287
src: 3344:61:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 286
src: 3391:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 285
src: 3391:6:0
nodeType: IdentifierPath
name: Int136
nameLocations: [3391:6:0, ]
referencedDeclaration: 34

referencedDeclaration: 34
typeDescriptions: typeString Int136typeIdentifier st_userDefinedValueType$_Int136_$34

functionList: [{definition: (* Beginning of a node! *)
id: 283
src: 3351:11:0
nodeType: IdentifierPath
name: bitorInt136
nameLocations: [3351:11:0, ]
referencedDeclaration: 1134
, operator: |, }, {definition: (* Beginning of a node! *)
id: 284
src: 3369:11:0
nodeType: IdentifierPath
name: unsubInt136
nameLocations: [3369:11:0, ]
referencedDeclaration: 1873
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 292
src: 3406:61:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 291
src: 3453:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 290
src: 3453:6:0
nodeType: IdentifierPath
name: Int144
nameLocations: [3453:6:0, ]
referencedDeclaration: 36

referencedDeclaration: 36
typeDescriptions: typeString Int144typeIdentifier st_userDefinedValueType$_Int144_$36

functionList: [{definition: (* Beginning of a node! *)
id: 288
src: 3413:11:0
nodeType: IdentifierPath
name: bitorInt144
nameLocations: [3413:11:0, ]
referencedDeclaration: 1160
, operator: |, }, {definition: (* Beginning of a node! *)
id: 289
src: 3431:11:0
nodeType: IdentifierPath
name: unsubInt144
nameLocations: [3431:11:0, ]
referencedDeclaration: 1892
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 297
src: 3468:61:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 296
src: 3515:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 295
src: 3515:6:0
nodeType: IdentifierPath
name: Int152
nameLocations: [3515:6:0, ]
referencedDeclaration: 38

referencedDeclaration: 38
typeDescriptions: typeString Int152typeIdentifier st_userDefinedValueType$_Int152_$38

functionList: [{definition: (* Beginning of a node! *)
id: 293
src: 3475:11:0
nodeType: IdentifierPath
name: bitorInt152
nameLocations: [3475:11:0, ]
referencedDeclaration: 1186
, operator: |, }, {definition: (* Beginning of a node! *)
id: 294
src: 3493:11:0
nodeType: IdentifierPath
name: unsubInt152
nameLocations: [3493:11:0, ]
referencedDeclaration: 1911
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 302
src: 3530:61:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 301
src: 3577:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 300
src: 3577:6:0
nodeType: IdentifierPath
name: Int160
nameLocations: [3577:6:0, ]
referencedDeclaration: 40

referencedDeclaration: 40
typeDescriptions: typeString Int160typeIdentifier st_userDefinedValueType$_Int160_$40

functionList: [{definition: (* Beginning of a node! *)
id: 298
src: 3537:11:0
nodeType: IdentifierPath
name: bitorInt160
nameLocations: [3537:11:0, ]
referencedDeclaration: 1212
, operator: |, }, {definition: (* Beginning of a node! *)
id: 299
src: 3555:11:0
nodeType: IdentifierPath
name: unsubInt160
nameLocations: [3555:11:0, ]
referencedDeclaration: 1930
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 307
src: 3592:61:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 306
src: 3639:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 305
src: 3639:6:0
nodeType: IdentifierPath
name: Int168
nameLocations: [3639:6:0, ]
referencedDeclaration: 42

referencedDeclaration: 42
typeDescriptions: typeString Int168typeIdentifier st_userDefinedValueType$_Int168_$42

functionList: [{definition: (* Beginning of a node! *)
id: 303
src: 3599:11:0
nodeType: IdentifierPath
name: bitorInt168
nameLocations: [3599:11:0, ]
referencedDeclaration: 1238
, operator: |, }, {definition: (* Beginning of a node! *)
id: 304
src: 3617:11:0
nodeType: IdentifierPath
name: unsubInt168
nameLocations: [3617:11:0, ]
referencedDeclaration: 1949
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 312
src: 3654:61:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 311
src: 3701:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 310
src: 3701:6:0
nodeType: IdentifierPath
name: Int176
nameLocations: [3701:6:0, ]
referencedDeclaration: 44

referencedDeclaration: 44
typeDescriptions: typeString Int176typeIdentifier st_userDefinedValueType$_Int176_$44

functionList: [{definition: (* Beginning of a node! *)
id: 308
src: 3661:11:0
nodeType: IdentifierPath
name: bitorInt176
nameLocations: [3661:11:0, ]
referencedDeclaration: 1264
, operator: |, }, {definition: (* Beginning of a node! *)
id: 309
src: 3679:11:0
nodeType: IdentifierPath
name: unsubInt176
nameLocations: [3679:11:0, ]
referencedDeclaration: 1968
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 317
src: 3716:61:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 316
src: 3763:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 315
src: 3763:6:0
nodeType: IdentifierPath
name: Int184
nameLocations: [3763:6:0, ]
referencedDeclaration: 46

referencedDeclaration: 46
typeDescriptions: typeString Int184typeIdentifier st_userDefinedValueType$_Int184_$46

functionList: [{definition: (* Beginning of a node! *)
id: 313
src: 3723:11:0
nodeType: IdentifierPath
name: bitorInt184
nameLocations: [3723:11:0, ]
referencedDeclaration: 1290
, operator: |, }, {definition: (* Beginning of a node! *)
id: 314
src: 3741:11:0
nodeType: IdentifierPath
name: unsubInt184
nameLocations: [3741:11:0, ]
referencedDeclaration: 1987
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 322
src: 3778:61:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 321
src: 3825:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 320
src: 3825:6:0
nodeType: IdentifierPath
name: Int192
nameLocations: [3825:6:0, ]
referencedDeclaration: 48

referencedDeclaration: 48
typeDescriptions: typeString Int192typeIdentifier st_userDefinedValueType$_Int192_$48

functionList: [{definition: (* Beginning of a node! *)
id: 318
src: 3785:11:0
nodeType: IdentifierPath
name: bitorInt192
nameLocations: [3785:11:0, ]
referencedDeclaration: 1316
, operator: |, }, {definition: (* Beginning of a node! *)
id: 319
src: 3803:11:0
nodeType: IdentifierPath
name: unsubInt192
nameLocations: [3803:11:0, ]
referencedDeclaration: 2006
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 327
src: 3840:61:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 326
src: 3887:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 325
src: 3887:6:0
nodeType: IdentifierPath
name: Int200
nameLocations: [3887:6:0, ]
referencedDeclaration: 50

referencedDeclaration: 50
typeDescriptions: typeString Int200typeIdentifier st_userDefinedValueType$_Int200_$50

functionList: [{definition: (* Beginning of a node! *)
id: 323
src: 3847:11:0
nodeType: IdentifierPath
name: bitorInt200
nameLocations: [3847:11:0, ]
referencedDeclaration: 1342
, operator: |, }, {definition: (* Beginning of a node! *)
id: 324
src: 3865:11:0
nodeType: IdentifierPath
name: unsubInt200
nameLocations: [3865:11:0, ]
referencedDeclaration: 2025
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 332
src: 3902:61:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 331
src: 3949:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 330
src: 3949:6:0
nodeType: IdentifierPath
name: Int208
nameLocations: [3949:6:0, ]
referencedDeclaration: 52

referencedDeclaration: 52
typeDescriptions: typeString Int208typeIdentifier st_userDefinedValueType$_Int208_$52

functionList: [{definition: (* Beginning of a node! *)
id: 328
src: 3909:11:0
nodeType: IdentifierPath
name: bitorInt208
nameLocations: [3909:11:0, ]
referencedDeclaration: 1368
, operator: |, }, {definition: (* Beginning of a node! *)
id: 329
src: 3927:11:0
nodeType: IdentifierPath
name: unsubInt208
nameLocations: [3927:11:0, ]
referencedDeclaration: 2044
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 337
src: 3964:61:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 336
src: 4011:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 335
src: 4011:6:0
nodeType: IdentifierPath
name: Int216
nameLocations: [4011:6:0, ]
referencedDeclaration: 54

referencedDeclaration: 54
typeDescriptions: typeString Int216typeIdentifier st_userDefinedValueType$_Int216_$54

functionList: [{definition: (* Beginning of a node! *)
id: 333
src: 3971:11:0
nodeType: IdentifierPath
name: bitorInt216
nameLocations: [3971:11:0, ]
referencedDeclaration: 1394
, operator: |, }, {definition: (* Beginning of a node! *)
id: 334
src: 3989:11:0
nodeType: IdentifierPath
name: unsubInt216
nameLocations: [3989:11:0, ]
referencedDeclaration: 2063
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 342
src: 4026:61:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 341
src: 4073:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 340
src: 4073:6:0
nodeType: IdentifierPath
name: Int224
nameLocations: [4073:6:0, ]
referencedDeclaration: 56

referencedDeclaration: 56
typeDescriptions: typeString Int224typeIdentifier st_userDefinedValueType$_Int224_$56

functionList: [{definition: (* Beginning of a node! *)
id: 338
src: 4033:11:0
nodeType: IdentifierPath
name: bitorInt224
nameLocations: [4033:11:0, ]
referencedDeclaration: 1420
, operator: |, }, {definition: (* Beginning of a node! *)
id: 339
src: 4051:11:0
nodeType: IdentifierPath
name: unsubInt224
nameLocations: [4051:11:0, ]
referencedDeclaration: 2082
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 347
src: 4088:61:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 346
src: 4135:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 345
src: 4135:6:0
nodeType: IdentifierPath
name: Int232
nameLocations: [4135:6:0, ]
referencedDeclaration: 58

referencedDeclaration: 58
typeDescriptions: typeString Int232typeIdentifier st_userDefinedValueType$_Int232_$58

functionList: [{definition: (* Beginning of a node! *)
id: 343
src: 4095:11:0
nodeType: IdentifierPath
name: bitorInt232
nameLocations: [4095:11:0, ]
referencedDeclaration: 1446
, operator: |, }, {definition: (* Beginning of a node! *)
id: 344
src: 4113:11:0
nodeType: IdentifierPath
name: unsubInt232
nameLocations: [4113:11:0, ]
referencedDeclaration: 2101
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 352
src: 4150:61:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 351
src: 4197:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 350
src: 4197:6:0
nodeType: IdentifierPath
name: Int240
nameLocations: [4197:6:0, ]
referencedDeclaration: 60

referencedDeclaration: 60
typeDescriptions: typeString Int240typeIdentifier st_userDefinedValueType$_Int240_$60

functionList: [{definition: (* Beginning of a node! *)
id: 348
src: 4157:11:0
nodeType: IdentifierPath
name: bitorInt240
nameLocations: [4157:11:0, ]
referencedDeclaration: 1472
, operator: |, }, {definition: (* Beginning of a node! *)
id: 349
src: 4175:11:0
nodeType: IdentifierPath
name: unsubInt240
nameLocations: [4175:11:0, ]
referencedDeclaration: 2120
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 357
src: 4212:61:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 356
src: 4259:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 355
src: 4259:6:0
nodeType: IdentifierPath
name: Int248
nameLocations: [4259:6:0, ]
referencedDeclaration: 62

referencedDeclaration: 62
typeDescriptions: typeString Int248typeIdentifier st_userDefinedValueType$_Int248_$62

functionList: [{definition: (* Beginning of a node! *)
id: 353
src: 4219:11:0
nodeType: IdentifierPath
name: bitorInt248
nameLocations: [4219:11:0, ]
referencedDeclaration: 1498
, operator: |, }, {definition: (* Beginning of a node! *)
id: 354
src: 4237:11:0
nodeType: IdentifierPath
name: unsubInt248
nameLocations: [4237:11:0, ]
referencedDeclaration: 2139
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 362
src: 4274:61:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 361
src: 4321:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 360
src: 4321:6:0
nodeType: IdentifierPath
name: Int256
nameLocations: [4321:6:0, ]
referencedDeclaration: 64

referencedDeclaration: 64
typeDescriptions: typeString Int256typeIdentifier st_userDefinedValueType$_Int256_$64

functionList: [{definition: (* Beginning of a node! *)
id: 358
src: 4281:11:0
nodeType: IdentifierPath
name: bitorInt256
nameLocations: [4281:11:0, ]
referencedDeclaration: 1524
, operator: |, }, {definition: (* Beginning of a node! *)
id: 359
src: 4299:11:0
nodeType: IdentifierPath
name: unsubInt256
nameLocations: [4299:11:0, ]
referencedDeclaration: 2158
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 367
src: 4336:52:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 366
src: 4377:3:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 365
src: 4377:3:0
nodeType: IdentifierPath
name: Int
nameLocations: [4377:3:0, ]
referencedDeclaration: 66

referencedDeclaration: 66
typeDescriptions: typeString InttypeIdentifier st_userDefinedValueType$_Int_$66

functionList: [{definition: (* Beginning of a node! *)
id: 363
src: 4343:8:0
nodeType: IdentifierPath
name: bitorInt
nameLocations: [4343:8:0, ]
referencedDeclaration: 1550
, operator: |, }, {definition: (* Beginning of a node! *)
id: 364
src: 4358:8:0
nodeType: IdentifierPath
name: unsubInt
nameLocations: [4358:8:0, ]
referencedDeclaration: 2177
, operator: -, }, ]
global: 1

(* Beginning of a node! *)
id: 372
src: 4390:59:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 371
src: 4436:5:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 370
src: 4436:5:0
nodeType: IdentifierPath
name: Uint8
nameLocations: [4436:5:0, ]
referencedDeclaration: 68

referencedDeclaration: 68
typeDescriptions: typeString Uint8typeIdentifier st_userDefinedValueType$_Uint8_$68

functionList: [{definition: (* Beginning of a node! *)
id: 368
src: 4397:10:0
nodeType: IdentifierPath
name: bitorUint8
nameLocations: [4397:10:0, ]
referencedDeclaration: 2203
, operator: |, }, {definition: (* Beginning of a node! *)
id: 369
src: 4414:11:0
nodeType: IdentifierPath
name: bitnotUint8
nameLocations: [4414:11:0, ]
referencedDeclaration: 3054
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 377
src: 4450:62:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 376
src: 4498:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 375
src: 4498:6:0
nodeType: IdentifierPath
name: Uint16
nameLocations: [4498:6:0, ]
referencedDeclaration: 70

referencedDeclaration: 70
typeDescriptions: typeString Uint16typeIdentifier st_userDefinedValueType$_Uint16_$70

functionList: [{definition: (* Beginning of a node! *)
id: 373
src: 4457:11:0
nodeType: IdentifierPath
name: bitorUint16
nameLocations: [4457:11:0, ]
referencedDeclaration: 2229
, operator: |, }, {definition: (* Beginning of a node! *)
id: 374
src: 4475:12:0
nodeType: IdentifierPath
name: bitnotUint16
nameLocations: [4475:12:0, ]
referencedDeclaration: 3073
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 382
src: 4513:62:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 381
src: 4561:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 380
src: 4561:6:0
nodeType: IdentifierPath
name: Uint24
nameLocations: [4561:6:0, ]
referencedDeclaration: 72

referencedDeclaration: 72
typeDescriptions: typeString Uint24typeIdentifier st_userDefinedValueType$_Uint24_$72

functionList: [{definition: (* Beginning of a node! *)
id: 378
src: 4520:11:0
nodeType: IdentifierPath
name: bitorUint24
nameLocations: [4520:11:0, ]
referencedDeclaration: 2255
, operator: |, }, {definition: (* Beginning of a node! *)
id: 379
src: 4538:12:0
nodeType: IdentifierPath
name: bitnotUint24
nameLocations: [4538:12:0, ]
referencedDeclaration: 3092
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 387
src: 4576:62:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 386
src: 4624:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 385
src: 4624:6:0
nodeType: IdentifierPath
name: Uint32
nameLocations: [4624:6:0, ]
referencedDeclaration: 74

referencedDeclaration: 74
typeDescriptions: typeString Uint32typeIdentifier st_userDefinedValueType$_Uint32_$74

functionList: [{definition: (* Beginning of a node! *)
id: 383
src: 4583:11:0
nodeType: IdentifierPath
name: bitorUint32
nameLocations: [4583:11:0, ]
referencedDeclaration: 2281
, operator: |, }, {definition: (* Beginning of a node! *)
id: 384
src: 4601:12:0
nodeType: IdentifierPath
name: bitnotUint32
nameLocations: [4601:12:0, ]
referencedDeclaration: 3111
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 392
src: 4639:62:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 391
src: 4687:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 390
src: 4687:6:0
nodeType: IdentifierPath
name: Uint40
nameLocations: [4687:6:0, ]
referencedDeclaration: 76

referencedDeclaration: 76
typeDescriptions: typeString Uint40typeIdentifier st_userDefinedValueType$_Uint40_$76

functionList: [{definition: (* Beginning of a node! *)
id: 388
src: 4646:11:0
nodeType: IdentifierPath
name: bitorUint40
nameLocations: [4646:11:0, ]
referencedDeclaration: 2307
, operator: |, }, {definition: (* Beginning of a node! *)
id: 389
src: 4664:12:0
nodeType: IdentifierPath
name: bitnotUint40
nameLocations: [4664:12:0, ]
referencedDeclaration: 3130
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 397
src: 4702:62:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 396
src: 4750:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 395
src: 4750:6:0
nodeType: IdentifierPath
name: Uint48
nameLocations: [4750:6:0, ]
referencedDeclaration: 78

referencedDeclaration: 78
typeDescriptions: typeString Uint48typeIdentifier st_userDefinedValueType$_Uint48_$78

functionList: [{definition: (* Beginning of a node! *)
id: 393
src: 4709:11:0
nodeType: IdentifierPath
name: bitorUint48
nameLocations: [4709:11:0, ]
referencedDeclaration: 2333
, operator: |, }, {definition: (* Beginning of a node! *)
id: 394
src: 4727:12:0
nodeType: IdentifierPath
name: bitnotUint48
nameLocations: [4727:12:0, ]
referencedDeclaration: 3149
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 402
src: 4765:62:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 401
src: 4813:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 400
src: 4813:6:0
nodeType: IdentifierPath
name: Uint56
nameLocations: [4813:6:0, ]
referencedDeclaration: 80

referencedDeclaration: 80
typeDescriptions: typeString Uint56typeIdentifier st_userDefinedValueType$_Uint56_$80

functionList: [{definition: (* Beginning of a node! *)
id: 398
src: 4772:11:0
nodeType: IdentifierPath
name: bitorUint56
nameLocations: [4772:11:0, ]
referencedDeclaration: 2359
, operator: |, }, {definition: (* Beginning of a node! *)
id: 399
src: 4790:12:0
nodeType: IdentifierPath
name: bitnotUint56
nameLocations: [4790:12:0, ]
referencedDeclaration: 3168
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 407
src: 4828:62:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 406
src: 4876:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 405
src: 4876:6:0
nodeType: IdentifierPath
name: Uint64
nameLocations: [4876:6:0, ]
referencedDeclaration: 82

referencedDeclaration: 82
typeDescriptions: typeString Uint64typeIdentifier st_userDefinedValueType$_Uint64_$82

functionList: [{definition: (* Beginning of a node! *)
id: 403
src: 4835:11:0
nodeType: IdentifierPath
name: bitorUint64
nameLocations: [4835:11:0, ]
referencedDeclaration: 2385
, operator: |, }, {definition: (* Beginning of a node! *)
id: 404
src: 4853:12:0
nodeType: IdentifierPath
name: bitnotUint64
nameLocations: [4853:12:0, ]
referencedDeclaration: 3187
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 412
src: 4891:62:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 411
src: 4939:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 410
src: 4939:6:0
nodeType: IdentifierPath
name: Uint72
nameLocations: [4939:6:0, ]
referencedDeclaration: 84

referencedDeclaration: 84
typeDescriptions: typeString Uint72typeIdentifier st_userDefinedValueType$_Uint72_$84

functionList: [{definition: (* Beginning of a node! *)
id: 408
src: 4898:11:0
nodeType: IdentifierPath
name: bitorUint72
nameLocations: [4898:11:0, ]
referencedDeclaration: 2411
, operator: |, }, {definition: (* Beginning of a node! *)
id: 409
src: 4916:12:0
nodeType: IdentifierPath
name: bitnotUint72
nameLocations: [4916:12:0, ]
referencedDeclaration: 3206
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 417
src: 4954:62:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 416
src: 5002:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 415
src: 5002:6:0
nodeType: IdentifierPath
name: Uint80
nameLocations: [5002:6:0, ]
referencedDeclaration: 86

referencedDeclaration: 86
typeDescriptions: typeString Uint80typeIdentifier st_userDefinedValueType$_Uint80_$86

functionList: [{definition: (* Beginning of a node! *)
id: 413
src: 4961:11:0
nodeType: IdentifierPath
name: bitorUint80
nameLocations: [4961:11:0, ]
referencedDeclaration: 2437
, operator: |, }, {definition: (* Beginning of a node! *)
id: 414
src: 4979:12:0
nodeType: IdentifierPath
name: bitnotUint80
nameLocations: [4979:12:0, ]
referencedDeclaration: 3225
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 422
src: 5017:62:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 421
src: 5065:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 420
src: 5065:6:0
nodeType: IdentifierPath
name: Uint88
nameLocations: [5065:6:0, ]
referencedDeclaration: 88

referencedDeclaration: 88
typeDescriptions: typeString Uint88typeIdentifier st_userDefinedValueType$_Uint88_$88

functionList: [{definition: (* Beginning of a node! *)
id: 418
src: 5024:11:0
nodeType: IdentifierPath
name: bitorUint88
nameLocations: [5024:11:0, ]
referencedDeclaration: 2463
, operator: |, }, {definition: (* Beginning of a node! *)
id: 419
src: 5042:12:0
nodeType: IdentifierPath
name: bitnotUint88
nameLocations: [5042:12:0, ]
referencedDeclaration: 3244
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 427
src: 5080:62:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 426
src: 5128:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 425
src: 5128:6:0
nodeType: IdentifierPath
name: Uint96
nameLocations: [5128:6:0, ]
referencedDeclaration: 90

referencedDeclaration: 90
typeDescriptions: typeString Uint96typeIdentifier st_userDefinedValueType$_Uint96_$90

functionList: [{definition: (* Beginning of a node! *)
id: 423
src: 5087:11:0
nodeType: IdentifierPath
name: bitorUint96
nameLocations: [5087:11:0, ]
referencedDeclaration: 2489
, operator: |, }, {definition: (* Beginning of a node! *)
id: 424
src: 5105:12:0
nodeType: IdentifierPath
name: bitnotUint96
nameLocations: [5105:12:0, ]
referencedDeclaration: 3263
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 432
src: 5143:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 431
src: 5193:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 430
src: 5193:7:0
nodeType: IdentifierPath
name: Uint104
nameLocations: [5193:7:0, ]
referencedDeclaration: 92

referencedDeclaration: 92
typeDescriptions: typeString Uint104typeIdentifier st_userDefinedValueType$_Uint104_$92

functionList: [{definition: (* Beginning of a node! *)
id: 428
src: 5150:12:0
nodeType: IdentifierPath
name: bitorUint104
nameLocations: [5150:12:0, ]
referencedDeclaration: 2515
, operator: |, }, {definition: (* Beginning of a node! *)
id: 429
src: 5169:13:0
nodeType: IdentifierPath
name: bitnotUint104
nameLocations: [5169:13:0, ]
referencedDeclaration: 3282
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 437
src: 5209:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 436
src: 5259:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 435
src: 5259:7:0
nodeType: IdentifierPath
name: Uint112
nameLocations: [5259:7:0, ]
referencedDeclaration: 94

referencedDeclaration: 94
typeDescriptions: typeString Uint112typeIdentifier st_userDefinedValueType$_Uint112_$94

functionList: [{definition: (* Beginning of a node! *)
id: 433
src: 5216:12:0
nodeType: IdentifierPath
name: bitorUint112
nameLocations: [5216:12:0, ]
referencedDeclaration: 2541
, operator: |, }, {definition: (* Beginning of a node! *)
id: 434
src: 5235:13:0
nodeType: IdentifierPath
name: bitnotUint112
nameLocations: [5235:13:0, ]
referencedDeclaration: 3301
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 442
src: 5275:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 441
src: 5325:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 440
src: 5325:7:0
nodeType: IdentifierPath
name: Uint120
nameLocations: [5325:7:0, ]
referencedDeclaration: 96

referencedDeclaration: 96
typeDescriptions: typeString Uint120typeIdentifier st_userDefinedValueType$_Uint120_$96

functionList: [{definition: (* Beginning of a node! *)
id: 438
src: 5282:12:0
nodeType: IdentifierPath
name: bitorUint120
nameLocations: [5282:12:0, ]
referencedDeclaration: 2567
, operator: |, }, {definition: (* Beginning of a node! *)
id: 439
src: 5301:13:0
nodeType: IdentifierPath
name: bitnotUint120
nameLocations: [5301:13:0, ]
referencedDeclaration: 3320
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 447
src: 5341:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 446
src: 5391:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 445
src: 5391:7:0
nodeType: IdentifierPath
name: Uint128
nameLocations: [5391:7:0, ]
referencedDeclaration: 98

referencedDeclaration: 98
typeDescriptions: typeString Uint128typeIdentifier st_userDefinedValueType$_Uint128_$98

functionList: [{definition: (* Beginning of a node! *)
id: 443
src: 5348:12:0
nodeType: IdentifierPath
name: bitorUint128
nameLocations: [5348:12:0, ]
referencedDeclaration: 2593
, operator: |, }, {definition: (* Beginning of a node! *)
id: 444
src: 5367:13:0
nodeType: IdentifierPath
name: bitnotUint128
nameLocations: [5367:13:0, ]
referencedDeclaration: 3339
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 452
src: 5407:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 451
src: 5457:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 450
src: 5457:7:0
nodeType: IdentifierPath
name: Uint136
nameLocations: [5457:7:0, ]
referencedDeclaration: 100

referencedDeclaration: 100
typeDescriptions: typeString Uint136typeIdentifier st_userDefinedValueType$_Uint136_$100

functionList: [{definition: (* Beginning of a node! *)
id: 448
src: 5414:12:0
nodeType: IdentifierPath
name: bitorUint136
nameLocations: [5414:12:0, ]
referencedDeclaration: 2619
, operator: |, }, {definition: (* Beginning of a node! *)
id: 449
src: 5433:13:0
nodeType: IdentifierPath
name: bitnotUint136
nameLocations: [5433:13:0, ]
referencedDeclaration: 3358
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 457
src: 5473:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 456
src: 5523:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 455
src: 5523:7:0
nodeType: IdentifierPath
name: Uint144
nameLocations: [5523:7:0, ]
referencedDeclaration: 102

referencedDeclaration: 102
typeDescriptions: typeString Uint144typeIdentifier st_userDefinedValueType$_Uint144_$102

functionList: [{definition: (* Beginning of a node! *)
id: 453
src: 5480:12:0
nodeType: IdentifierPath
name: bitorUint144
nameLocations: [5480:12:0, ]
referencedDeclaration: 2645
, operator: |, }, {definition: (* Beginning of a node! *)
id: 454
src: 5499:13:0
nodeType: IdentifierPath
name: bitnotUint144
nameLocations: [5499:13:0, ]
referencedDeclaration: 3377
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 462
src: 5539:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 461
src: 5589:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 460
src: 5589:7:0
nodeType: IdentifierPath
name: Uint152
nameLocations: [5589:7:0, ]
referencedDeclaration: 104

referencedDeclaration: 104
typeDescriptions: typeString Uint152typeIdentifier st_userDefinedValueType$_Uint152_$104

functionList: [{definition: (* Beginning of a node! *)
id: 458
src: 5546:12:0
nodeType: IdentifierPath
name: bitorUint152
nameLocations: [5546:12:0, ]
referencedDeclaration: 2671
, operator: |, }, {definition: (* Beginning of a node! *)
id: 459
src: 5565:13:0
nodeType: IdentifierPath
name: bitnotUint152
nameLocations: [5565:13:0, ]
referencedDeclaration: 3396
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 467
src: 5605:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 466
src: 5655:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 465
src: 5655:7:0
nodeType: IdentifierPath
name: Uint160
nameLocations: [5655:7:0, ]
referencedDeclaration: 106

referencedDeclaration: 106
typeDescriptions: typeString Uint160typeIdentifier st_userDefinedValueType$_Uint160_$106

functionList: [{definition: (* Beginning of a node! *)
id: 463
src: 5612:12:0
nodeType: IdentifierPath
name: bitorUint160
nameLocations: [5612:12:0, ]
referencedDeclaration: 2697
, operator: |, }, {definition: (* Beginning of a node! *)
id: 464
src: 5631:13:0
nodeType: IdentifierPath
name: bitnotUint160
nameLocations: [5631:13:0, ]
referencedDeclaration: 3415
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 472
src: 5671:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 471
src: 5721:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 470
src: 5721:7:0
nodeType: IdentifierPath
name: Uint168
nameLocations: [5721:7:0, ]
referencedDeclaration: 108

referencedDeclaration: 108
typeDescriptions: typeString Uint168typeIdentifier st_userDefinedValueType$_Uint168_$108

functionList: [{definition: (* Beginning of a node! *)
id: 468
src: 5678:12:0
nodeType: IdentifierPath
name: bitorUint168
nameLocations: [5678:12:0, ]
referencedDeclaration: 2723
, operator: |, }, {definition: (* Beginning of a node! *)
id: 469
src: 5697:13:0
nodeType: IdentifierPath
name: bitnotUint168
nameLocations: [5697:13:0, ]
referencedDeclaration: 3434
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 477
src: 5737:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 476
src: 5787:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 475
src: 5787:7:0
nodeType: IdentifierPath
name: Uint176
nameLocations: [5787:7:0, ]
referencedDeclaration: 110

referencedDeclaration: 110
typeDescriptions: typeString Uint176typeIdentifier st_userDefinedValueType$_Uint176_$110

functionList: [{definition: (* Beginning of a node! *)
id: 473
src: 5744:12:0
nodeType: IdentifierPath
name: bitorUint176
nameLocations: [5744:12:0, ]
referencedDeclaration: 2749
, operator: |, }, {definition: (* Beginning of a node! *)
id: 474
src: 5763:13:0
nodeType: IdentifierPath
name: bitnotUint176
nameLocations: [5763:13:0, ]
referencedDeclaration: 3453
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 482
src: 5803:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 481
src: 5853:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 480
src: 5853:7:0
nodeType: IdentifierPath
name: Uint184
nameLocations: [5853:7:0, ]
referencedDeclaration: 112

referencedDeclaration: 112
typeDescriptions: typeString Uint184typeIdentifier st_userDefinedValueType$_Uint184_$112

functionList: [{definition: (* Beginning of a node! *)
id: 478
src: 5810:12:0
nodeType: IdentifierPath
name: bitorUint184
nameLocations: [5810:12:0, ]
referencedDeclaration: 2775
, operator: |, }, {definition: (* Beginning of a node! *)
id: 479
src: 5829:13:0
nodeType: IdentifierPath
name: bitnotUint184
nameLocations: [5829:13:0, ]
referencedDeclaration: 3472
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 487
src: 5869:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 486
src: 5919:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 485
src: 5919:7:0
nodeType: IdentifierPath
name: Uint192
nameLocations: [5919:7:0, ]
referencedDeclaration: 114

referencedDeclaration: 114
typeDescriptions: typeString Uint192typeIdentifier st_userDefinedValueType$_Uint192_$114

functionList: [{definition: (* Beginning of a node! *)
id: 483
src: 5876:12:0
nodeType: IdentifierPath
name: bitorUint192
nameLocations: [5876:12:0, ]
referencedDeclaration: 2801
, operator: |, }, {definition: (* Beginning of a node! *)
id: 484
src: 5895:13:0
nodeType: IdentifierPath
name: bitnotUint192
nameLocations: [5895:13:0, ]
referencedDeclaration: 3491
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 492
src: 5935:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 491
src: 5985:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 490
src: 5985:7:0
nodeType: IdentifierPath
name: Uint200
nameLocations: [5985:7:0, ]
referencedDeclaration: 116

referencedDeclaration: 116
typeDescriptions: typeString Uint200typeIdentifier st_userDefinedValueType$_Uint200_$116

functionList: [{definition: (* Beginning of a node! *)
id: 488
src: 5942:12:0
nodeType: IdentifierPath
name: bitorUint200
nameLocations: [5942:12:0, ]
referencedDeclaration: 2827
, operator: |, }, {definition: (* Beginning of a node! *)
id: 489
src: 5961:13:0
nodeType: IdentifierPath
name: bitnotUint200
nameLocations: [5961:13:0, ]
referencedDeclaration: 3510
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 497
src: 6001:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 496
src: 6051:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 495
src: 6051:7:0
nodeType: IdentifierPath
name: Uint208
nameLocations: [6051:7:0, ]
referencedDeclaration: 118

referencedDeclaration: 118
typeDescriptions: typeString Uint208typeIdentifier st_userDefinedValueType$_Uint208_$118

functionList: [{definition: (* Beginning of a node! *)
id: 493
src: 6008:12:0
nodeType: IdentifierPath
name: bitorUint208
nameLocations: [6008:12:0, ]
referencedDeclaration: 2853
, operator: |, }, {definition: (* Beginning of a node! *)
id: 494
src: 6027:13:0
nodeType: IdentifierPath
name: bitnotUint208
nameLocations: [6027:13:0, ]
referencedDeclaration: 3529
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 502
src: 6067:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 501
src: 6117:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 500
src: 6117:7:0
nodeType: IdentifierPath
name: Uint216
nameLocations: [6117:7:0, ]
referencedDeclaration: 120

referencedDeclaration: 120
typeDescriptions: typeString Uint216typeIdentifier st_userDefinedValueType$_Uint216_$120

functionList: [{definition: (* Beginning of a node! *)
id: 498
src: 6074:12:0
nodeType: IdentifierPath
name: bitorUint216
nameLocations: [6074:12:0, ]
referencedDeclaration: 2879
, operator: |, }, {definition: (* Beginning of a node! *)
id: 499
src: 6093:13:0
nodeType: IdentifierPath
name: bitnotUint216
nameLocations: [6093:13:0, ]
referencedDeclaration: 3548
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 507
src: 6133:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 506
src: 6183:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 505
src: 6183:7:0
nodeType: IdentifierPath
name: Uint224
nameLocations: [6183:7:0, ]
referencedDeclaration: 122

referencedDeclaration: 122
typeDescriptions: typeString Uint224typeIdentifier st_userDefinedValueType$_Uint224_$122

functionList: [{definition: (* Beginning of a node! *)
id: 503
src: 6140:12:0
nodeType: IdentifierPath
name: bitorUint224
nameLocations: [6140:12:0, ]
referencedDeclaration: 2905
, operator: |, }, {definition: (* Beginning of a node! *)
id: 504
src: 6159:13:0
nodeType: IdentifierPath
name: bitnotUint224
nameLocations: [6159:13:0, ]
referencedDeclaration: 3567
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 512
src: 6199:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 511
src: 6249:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 510
src: 6249:7:0
nodeType: IdentifierPath
name: Uint232
nameLocations: [6249:7:0, ]
referencedDeclaration: 124

referencedDeclaration: 124
typeDescriptions: typeString Uint232typeIdentifier st_userDefinedValueType$_Uint232_$124

functionList: [{definition: (* Beginning of a node! *)
id: 508
src: 6206:12:0
nodeType: IdentifierPath
name: bitorUint232
nameLocations: [6206:12:0, ]
referencedDeclaration: 2931
, operator: |, }, {definition: (* Beginning of a node! *)
id: 509
src: 6225:13:0
nodeType: IdentifierPath
name: bitnotUint232
nameLocations: [6225:13:0, ]
referencedDeclaration: 3586
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 517
src: 6265:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 516
src: 6315:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 515
src: 6315:7:0
nodeType: IdentifierPath
name: Uint240
nameLocations: [6315:7:0, ]
referencedDeclaration: 126

referencedDeclaration: 126
typeDescriptions: typeString Uint240typeIdentifier st_userDefinedValueType$_Uint240_$126

functionList: [{definition: (* Beginning of a node! *)
id: 513
src: 6272:12:0
nodeType: IdentifierPath
name: bitorUint240
nameLocations: [6272:12:0, ]
referencedDeclaration: 2957
, operator: |, }, {definition: (* Beginning of a node! *)
id: 514
src: 6291:13:0
nodeType: IdentifierPath
name: bitnotUint240
nameLocations: [6291:13:0, ]
referencedDeclaration: 3605
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 522
src: 6331:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 521
src: 6381:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 520
src: 6381:7:0
nodeType: IdentifierPath
name: Uint248
nameLocations: [6381:7:0, ]
referencedDeclaration: 128

referencedDeclaration: 128
typeDescriptions: typeString Uint248typeIdentifier st_userDefinedValueType$_Uint248_$128

functionList: [{definition: (* Beginning of a node! *)
id: 518
src: 6338:12:0
nodeType: IdentifierPath
name: bitorUint248
nameLocations: [6338:12:0, ]
referencedDeclaration: 2983
, operator: |, }, {definition: (* Beginning of a node! *)
id: 519
src: 6357:13:0
nodeType: IdentifierPath
name: bitnotUint248
nameLocations: [6357:13:0, ]
referencedDeclaration: 3624
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 527
src: 6397:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 526
src: 6447:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 525
src: 6447:7:0
nodeType: IdentifierPath
name: Uint256
nameLocations: [6447:7:0, ]
referencedDeclaration: 130

referencedDeclaration: 130
typeDescriptions: typeString Uint256typeIdentifier st_userDefinedValueType$_Uint256_$130

functionList: [{definition: (* Beginning of a node! *)
id: 523
src: 6404:12:0
nodeType: IdentifierPath
name: bitorUint256
nameLocations: [6404:12:0, ]
referencedDeclaration: 3009
, operator: |, }, {definition: (* Beginning of a node! *)
id: 524
src: 6423:13:0
nodeType: IdentifierPath
name: bitnotUint256
nameLocations: [6423:13:0, ]
referencedDeclaration: 3643
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 532
src: 6463:56:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 531
src: 6507:4:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 530
src: 6507:4:0
nodeType: IdentifierPath
name: Uint
nameLocations: [6507:4:0, ]
referencedDeclaration: 132

referencedDeclaration: 132
typeDescriptions: typeString UinttypeIdentifier st_userDefinedValueType$_Uint_$132

functionList: [{definition: (* Beginning of a node! *)
id: 528
src: 6470:9:0
nodeType: IdentifierPath
name: bitorUint
nameLocations: [6470:9:0, ]
referencedDeclaration: 3035
, operator: |, }, {definition: (* Beginning of a node! *)
id: 529
src: 6486:10:0
nodeType: IdentifierPath
name: bitnotUint
nameLocations: [6486:10:0, ]
referencedDeclaration: 3662
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 537
src: 6521:62:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 536
src: 6569:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 535
src: 6569:6:0
nodeType: IdentifierPath
name: Bytes1
nameLocations: [6569:6:0, ]
referencedDeclaration: 134

referencedDeclaration: 134
typeDescriptions: typeString Bytes1typeIdentifier st_userDefinedValueType$_Bytes1_$134

functionList: [{definition: (* Beginning of a node! *)
id: 533
src: 6528:11:0
nodeType: IdentifierPath
name: bitorBytes1
nameLocations: [6528:11:0, ]
referencedDeclaration: 3688
, operator: |, }, {definition: (* Beginning of a node! *)
id: 534
src: 6546:12:0
nodeType: IdentifierPath
name: bitnotBytes1
nameLocations: [6546:12:0, ]
referencedDeclaration: 4513
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 542
src: 6584:62:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 541
src: 6632:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 540
src: 6632:6:0
nodeType: IdentifierPath
name: Bytes2
nameLocations: [6632:6:0, ]
referencedDeclaration: 136

referencedDeclaration: 136
typeDescriptions: typeString Bytes2typeIdentifier st_userDefinedValueType$_Bytes2_$136

functionList: [{definition: (* Beginning of a node! *)
id: 538
src: 6591:11:0
nodeType: IdentifierPath
name: bitorBytes2
nameLocations: [6591:11:0, ]
referencedDeclaration: 3714
, operator: |, }, {definition: (* Beginning of a node! *)
id: 539
src: 6609:12:0
nodeType: IdentifierPath
name: bitnotBytes2
nameLocations: [6609:12:0, ]
referencedDeclaration: 4532
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 547
src: 6647:62:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 546
src: 6695:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 545
src: 6695:6:0
nodeType: IdentifierPath
name: Bytes3
nameLocations: [6695:6:0, ]
referencedDeclaration: 138

referencedDeclaration: 138
typeDescriptions: typeString Bytes3typeIdentifier st_userDefinedValueType$_Bytes3_$138

functionList: [{definition: (* Beginning of a node! *)
id: 543
src: 6654:11:0
nodeType: IdentifierPath
name: bitorBytes3
nameLocations: [6654:11:0, ]
referencedDeclaration: 3740
, operator: |, }, {definition: (* Beginning of a node! *)
id: 544
src: 6672:12:0
nodeType: IdentifierPath
name: bitnotBytes3
nameLocations: [6672:12:0, ]
referencedDeclaration: 4551
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 552
src: 6710:62:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 551
src: 6758:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 550
src: 6758:6:0
nodeType: IdentifierPath
name: Bytes4
nameLocations: [6758:6:0, ]
referencedDeclaration: 140

referencedDeclaration: 140
typeDescriptions: typeString Bytes4typeIdentifier st_userDefinedValueType$_Bytes4_$140

functionList: [{definition: (* Beginning of a node! *)
id: 548
src: 6717:11:0
nodeType: IdentifierPath
name: bitorBytes4
nameLocations: [6717:11:0, ]
referencedDeclaration: 3766
, operator: |, }, {definition: (* Beginning of a node! *)
id: 549
src: 6735:12:0
nodeType: IdentifierPath
name: bitnotBytes4
nameLocations: [6735:12:0, ]
referencedDeclaration: 4570
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 557
src: 6773:62:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 556
src: 6821:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 555
src: 6821:6:0
nodeType: IdentifierPath
name: Bytes5
nameLocations: [6821:6:0, ]
referencedDeclaration: 142

referencedDeclaration: 142
typeDescriptions: typeString Bytes5typeIdentifier st_userDefinedValueType$_Bytes5_$142

functionList: [{definition: (* Beginning of a node! *)
id: 553
src: 6780:11:0
nodeType: IdentifierPath
name: bitorBytes5
nameLocations: [6780:11:0, ]
referencedDeclaration: 3792
, operator: |, }, {definition: (* Beginning of a node! *)
id: 554
src: 6798:12:0
nodeType: IdentifierPath
name: bitnotBytes5
nameLocations: [6798:12:0, ]
referencedDeclaration: 4589
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 562
src: 6836:62:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 561
src: 6884:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 560
src: 6884:6:0
nodeType: IdentifierPath
name: Bytes6
nameLocations: [6884:6:0, ]
referencedDeclaration: 144

referencedDeclaration: 144
typeDescriptions: typeString Bytes6typeIdentifier st_userDefinedValueType$_Bytes6_$144

functionList: [{definition: (* Beginning of a node! *)
id: 558
src: 6843:11:0
nodeType: IdentifierPath
name: bitorBytes6
nameLocations: [6843:11:0, ]
referencedDeclaration: 3818
, operator: |, }, {definition: (* Beginning of a node! *)
id: 559
src: 6861:12:0
nodeType: IdentifierPath
name: bitnotBytes6
nameLocations: [6861:12:0, ]
referencedDeclaration: 4608
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 567
src: 6899:62:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 566
src: 6947:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 565
src: 6947:6:0
nodeType: IdentifierPath
name: Bytes7
nameLocations: [6947:6:0, ]
referencedDeclaration: 146

referencedDeclaration: 146
typeDescriptions: typeString Bytes7typeIdentifier st_userDefinedValueType$_Bytes7_$146

functionList: [{definition: (* Beginning of a node! *)
id: 563
src: 6906:11:0
nodeType: IdentifierPath
name: bitorBytes7
nameLocations: [6906:11:0, ]
referencedDeclaration: 3844
, operator: |, }, {definition: (* Beginning of a node! *)
id: 564
src: 6924:12:0
nodeType: IdentifierPath
name: bitnotBytes7
nameLocations: [6924:12:0, ]
referencedDeclaration: 4627
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 572
src: 6962:62:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 571
src: 7010:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 570
src: 7010:6:0
nodeType: IdentifierPath
name: Bytes8
nameLocations: [7010:6:0, ]
referencedDeclaration: 148

referencedDeclaration: 148
typeDescriptions: typeString Bytes8typeIdentifier st_userDefinedValueType$_Bytes8_$148

functionList: [{definition: (* Beginning of a node! *)
id: 568
src: 6969:11:0
nodeType: IdentifierPath
name: bitorBytes8
nameLocations: [6969:11:0, ]
referencedDeclaration: 3870
, operator: |, }, {definition: (* Beginning of a node! *)
id: 569
src: 6987:12:0
nodeType: IdentifierPath
name: bitnotBytes8
nameLocations: [6987:12:0, ]
referencedDeclaration: 4646
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 577
src: 7025:62:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 576
src: 7073:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 575
src: 7073:6:0
nodeType: IdentifierPath
name: Bytes9
nameLocations: [7073:6:0, ]
referencedDeclaration: 150

referencedDeclaration: 150
typeDescriptions: typeString Bytes9typeIdentifier st_userDefinedValueType$_Bytes9_$150

functionList: [{definition: (* Beginning of a node! *)
id: 573
src: 7032:11:0
nodeType: IdentifierPath
name: bitorBytes9
nameLocations: [7032:11:0, ]
referencedDeclaration: 3896
, operator: |, }, {definition: (* Beginning of a node! *)
id: 574
src: 7050:12:0
nodeType: IdentifierPath
name: bitnotBytes9
nameLocations: [7050:12:0, ]
referencedDeclaration: 4665
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 582
src: 7088:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 581
src: 7138:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 580
src: 7138:7:0
nodeType: IdentifierPath
name: Bytes10
nameLocations: [7138:7:0, ]
referencedDeclaration: 152

referencedDeclaration: 152
typeDescriptions: typeString Bytes10typeIdentifier st_userDefinedValueType$_Bytes10_$152

functionList: [{definition: (* Beginning of a node! *)
id: 578
src: 7095:12:0
nodeType: IdentifierPath
name: bitorBytes10
nameLocations: [7095:12:0, ]
referencedDeclaration: 3922
, operator: |, }, {definition: (* Beginning of a node! *)
id: 579
src: 7114:13:0
nodeType: IdentifierPath
name: bitnotBytes10
nameLocations: [7114:13:0, ]
referencedDeclaration: 4684
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 587
src: 7154:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 586
src: 7204:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 585
src: 7204:7:0
nodeType: IdentifierPath
name: Bytes11
nameLocations: [7204:7:0, ]
referencedDeclaration: 154

referencedDeclaration: 154
typeDescriptions: typeString Bytes11typeIdentifier st_userDefinedValueType$_Bytes11_$154

functionList: [{definition: (* Beginning of a node! *)
id: 583
src: 7161:12:0
nodeType: IdentifierPath
name: bitorBytes11
nameLocations: [7161:12:0, ]
referencedDeclaration: 3948
, operator: |, }, {definition: (* Beginning of a node! *)
id: 584
src: 7180:13:0
nodeType: IdentifierPath
name: bitnotBytes11
nameLocations: [7180:13:0, ]
referencedDeclaration: 4703
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 592
src: 7220:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 591
src: 7270:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 590
src: 7270:7:0
nodeType: IdentifierPath
name: Bytes12
nameLocations: [7270:7:0, ]
referencedDeclaration: 156

referencedDeclaration: 156
typeDescriptions: typeString Bytes12typeIdentifier st_userDefinedValueType$_Bytes12_$156

functionList: [{definition: (* Beginning of a node! *)
id: 588
src: 7227:12:0
nodeType: IdentifierPath
name: bitorBytes12
nameLocations: [7227:12:0, ]
referencedDeclaration: 3974
, operator: |, }, {definition: (* Beginning of a node! *)
id: 589
src: 7246:13:0
nodeType: IdentifierPath
name: bitnotBytes12
nameLocations: [7246:13:0, ]
referencedDeclaration: 4722
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 597
src: 7286:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 596
src: 7336:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 595
src: 7336:7:0
nodeType: IdentifierPath
name: Bytes13
nameLocations: [7336:7:0, ]
referencedDeclaration: 158

referencedDeclaration: 158
typeDescriptions: typeString Bytes13typeIdentifier st_userDefinedValueType$_Bytes13_$158

functionList: [{definition: (* Beginning of a node! *)
id: 593
src: 7293:12:0
nodeType: IdentifierPath
name: bitorBytes13
nameLocations: [7293:12:0, ]
referencedDeclaration: 4000
, operator: |, }, {definition: (* Beginning of a node! *)
id: 594
src: 7312:13:0
nodeType: IdentifierPath
name: bitnotBytes13
nameLocations: [7312:13:0, ]
referencedDeclaration: 4741
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 602
src: 7352:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 601
src: 7402:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 600
src: 7402:7:0
nodeType: IdentifierPath
name: Bytes14
nameLocations: [7402:7:0, ]
referencedDeclaration: 160

referencedDeclaration: 160
typeDescriptions: typeString Bytes14typeIdentifier st_userDefinedValueType$_Bytes14_$160

functionList: [{definition: (* Beginning of a node! *)
id: 598
src: 7359:12:0
nodeType: IdentifierPath
name: bitorBytes14
nameLocations: [7359:12:0, ]
referencedDeclaration: 4026
, operator: |, }, {definition: (* Beginning of a node! *)
id: 599
src: 7378:13:0
nodeType: IdentifierPath
name: bitnotBytes14
nameLocations: [7378:13:0, ]
referencedDeclaration: 4760
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 607
src: 7418:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 606
src: 7468:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 605
src: 7468:7:0
nodeType: IdentifierPath
name: Bytes15
nameLocations: [7468:7:0, ]
referencedDeclaration: 162

referencedDeclaration: 162
typeDescriptions: typeString Bytes15typeIdentifier st_userDefinedValueType$_Bytes15_$162

functionList: [{definition: (* Beginning of a node! *)
id: 603
src: 7425:12:0
nodeType: IdentifierPath
name: bitorBytes15
nameLocations: [7425:12:0, ]
referencedDeclaration: 4052
, operator: |, }, {definition: (* Beginning of a node! *)
id: 604
src: 7444:13:0
nodeType: IdentifierPath
name: bitnotBytes15
nameLocations: [7444:13:0, ]
referencedDeclaration: 4779
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 612
src: 7484:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 611
src: 7534:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 610
src: 7534:7:0
nodeType: IdentifierPath
name: Bytes16
nameLocations: [7534:7:0, ]
referencedDeclaration: 164

referencedDeclaration: 164
typeDescriptions: typeString Bytes16typeIdentifier st_userDefinedValueType$_Bytes16_$164

functionList: [{definition: (* Beginning of a node! *)
id: 608
src: 7491:12:0
nodeType: IdentifierPath
name: bitorBytes16
nameLocations: [7491:12:0, ]
referencedDeclaration: 4078
, operator: |, }, {definition: (* Beginning of a node! *)
id: 609
src: 7510:13:0
nodeType: IdentifierPath
name: bitnotBytes16
nameLocations: [7510:13:0, ]
referencedDeclaration: 4798
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 617
src: 7550:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 616
src: 7600:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 615
src: 7600:7:0
nodeType: IdentifierPath
name: Bytes17
nameLocations: [7600:7:0, ]
referencedDeclaration: 166

referencedDeclaration: 166
typeDescriptions: typeString Bytes17typeIdentifier st_userDefinedValueType$_Bytes17_$166

functionList: [{definition: (* Beginning of a node! *)
id: 613
src: 7557:12:0
nodeType: IdentifierPath
name: bitorBytes17
nameLocations: [7557:12:0, ]
referencedDeclaration: 4104
, operator: |, }, {definition: (* Beginning of a node! *)
id: 614
src: 7576:13:0
nodeType: IdentifierPath
name: bitnotBytes17
nameLocations: [7576:13:0, ]
referencedDeclaration: 4817
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 622
src: 7616:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 621
src: 7666:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 620
src: 7666:7:0
nodeType: IdentifierPath
name: Bytes18
nameLocations: [7666:7:0, ]
referencedDeclaration: 168

referencedDeclaration: 168
typeDescriptions: typeString Bytes18typeIdentifier st_userDefinedValueType$_Bytes18_$168

functionList: [{definition: (* Beginning of a node! *)
id: 618
src: 7623:12:0
nodeType: IdentifierPath
name: bitorBytes18
nameLocations: [7623:12:0, ]
referencedDeclaration: 4130
, operator: |, }, {definition: (* Beginning of a node! *)
id: 619
src: 7642:13:0
nodeType: IdentifierPath
name: bitnotBytes18
nameLocations: [7642:13:0, ]
referencedDeclaration: 4836
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 627
src: 7682:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 626
src: 7732:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 625
src: 7732:7:0
nodeType: IdentifierPath
name: Bytes19
nameLocations: [7732:7:0, ]
referencedDeclaration: 170

referencedDeclaration: 170
typeDescriptions: typeString Bytes19typeIdentifier st_userDefinedValueType$_Bytes19_$170

functionList: [{definition: (* Beginning of a node! *)
id: 623
src: 7689:12:0
nodeType: IdentifierPath
name: bitorBytes19
nameLocations: [7689:12:0, ]
referencedDeclaration: 4156
, operator: |, }, {definition: (* Beginning of a node! *)
id: 624
src: 7708:13:0
nodeType: IdentifierPath
name: bitnotBytes19
nameLocations: [7708:13:0, ]
referencedDeclaration: 4855
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 632
src: 7748:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 631
src: 7798:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 630
src: 7798:7:0
nodeType: IdentifierPath
name: Bytes20
nameLocations: [7798:7:0, ]
referencedDeclaration: 172

referencedDeclaration: 172
typeDescriptions: typeString Bytes20typeIdentifier st_userDefinedValueType$_Bytes20_$172

functionList: [{definition: (* Beginning of a node! *)
id: 628
src: 7755:12:0
nodeType: IdentifierPath
name: bitorBytes20
nameLocations: [7755:12:0, ]
referencedDeclaration: 4182
, operator: |, }, {definition: (* Beginning of a node! *)
id: 629
src: 7774:13:0
nodeType: IdentifierPath
name: bitnotBytes20
nameLocations: [7774:13:0, ]
referencedDeclaration: 4874
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 637
src: 7814:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 636
src: 7864:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 635
src: 7864:7:0
nodeType: IdentifierPath
name: Bytes21
nameLocations: [7864:7:0, ]
referencedDeclaration: 174

referencedDeclaration: 174
typeDescriptions: typeString Bytes21typeIdentifier st_userDefinedValueType$_Bytes21_$174

functionList: [{definition: (* Beginning of a node! *)
id: 633
src: 7821:12:0
nodeType: IdentifierPath
name: bitorBytes21
nameLocations: [7821:12:0, ]
referencedDeclaration: 4208
, operator: |, }, {definition: (* Beginning of a node! *)
id: 634
src: 7840:13:0
nodeType: IdentifierPath
name: bitnotBytes21
nameLocations: [7840:13:0, ]
referencedDeclaration: 4893
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 642
src: 7880:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 641
src: 7930:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 640
src: 7930:7:0
nodeType: IdentifierPath
name: Bytes22
nameLocations: [7930:7:0, ]
referencedDeclaration: 176

referencedDeclaration: 176
typeDescriptions: typeString Bytes22typeIdentifier st_userDefinedValueType$_Bytes22_$176

functionList: [{definition: (* Beginning of a node! *)
id: 638
src: 7887:12:0
nodeType: IdentifierPath
name: bitorBytes22
nameLocations: [7887:12:0, ]
referencedDeclaration: 4234
, operator: |, }, {definition: (* Beginning of a node! *)
id: 639
src: 7906:13:0
nodeType: IdentifierPath
name: bitnotBytes22
nameLocations: [7906:13:0, ]
referencedDeclaration: 4912
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 647
src: 7946:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 646
src: 7996:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 645
src: 7996:7:0
nodeType: IdentifierPath
name: Bytes23
nameLocations: [7996:7:0, ]
referencedDeclaration: 178

referencedDeclaration: 178
typeDescriptions: typeString Bytes23typeIdentifier st_userDefinedValueType$_Bytes23_$178

functionList: [{definition: (* Beginning of a node! *)
id: 643
src: 7953:12:0
nodeType: IdentifierPath
name: bitorBytes23
nameLocations: [7953:12:0, ]
referencedDeclaration: 4260
, operator: |, }, {definition: (* Beginning of a node! *)
id: 644
src: 7972:13:0
nodeType: IdentifierPath
name: bitnotBytes23
nameLocations: [7972:13:0, ]
referencedDeclaration: 4931
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 652
src: 8012:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 651
src: 8062:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 650
src: 8062:7:0
nodeType: IdentifierPath
name: Bytes24
nameLocations: [8062:7:0, ]
referencedDeclaration: 180

referencedDeclaration: 180
typeDescriptions: typeString Bytes24typeIdentifier st_userDefinedValueType$_Bytes24_$180

functionList: [{definition: (* Beginning of a node! *)
id: 648
src: 8019:12:0
nodeType: IdentifierPath
name: bitorBytes24
nameLocations: [8019:12:0, ]
referencedDeclaration: 4286
, operator: |, }, {definition: (* Beginning of a node! *)
id: 649
src: 8038:13:0
nodeType: IdentifierPath
name: bitnotBytes24
nameLocations: [8038:13:0, ]
referencedDeclaration: 4950
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 657
src: 8078:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 656
src: 8128:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 655
src: 8128:7:0
nodeType: IdentifierPath
name: Bytes25
nameLocations: [8128:7:0, ]
referencedDeclaration: 182

referencedDeclaration: 182
typeDescriptions: typeString Bytes25typeIdentifier st_userDefinedValueType$_Bytes25_$182

functionList: [{definition: (* Beginning of a node! *)
id: 653
src: 8085:12:0
nodeType: IdentifierPath
name: bitorBytes25
nameLocations: [8085:12:0, ]
referencedDeclaration: 4312
, operator: |, }, {definition: (* Beginning of a node! *)
id: 654
src: 8104:13:0
nodeType: IdentifierPath
name: bitnotBytes25
nameLocations: [8104:13:0, ]
referencedDeclaration: 4969
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 662
src: 8144:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 661
src: 8194:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 660
src: 8194:7:0
nodeType: IdentifierPath
name: Bytes26
nameLocations: [8194:7:0, ]
referencedDeclaration: 184

referencedDeclaration: 184
typeDescriptions: typeString Bytes26typeIdentifier st_userDefinedValueType$_Bytes26_$184

functionList: [{definition: (* Beginning of a node! *)
id: 658
src: 8151:12:0
nodeType: IdentifierPath
name: bitorBytes26
nameLocations: [8151:12:0, ]
referencedDeclaration: 4338
, operator: |, }, {definition: (* Beginning of a node! *)
id: 659
src: 8170:13:0
nodeType: IdentifierPath
name: bitnotBytes26
nameLocations: [8170:13:0, ]
referencedDeclaration: 4988
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 667
src: 8210:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 666
src: 8260:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 665
src: 8260:7:0
nodeType: IdentifierPath
name: Bytes27
nameLocations: [8260:7:0, ]
referencedDeclaration: 186

referencedDeclaration: 186
typeDescriptions: typeString Bytes27typeIdentifier st_userDefinedValueType$_Bytes27_$186

functionList: [{definition: (* Beginning of a node! *)
id: 663
src: 8217:12:0
nodeType: IdentifierPath
name: bitorBytes27
nameLocations: [8217:12:0, ]
referencedDeclaration: 4364
, operator: |, }, {definition: (* Beginning of a node! *)
id: 664
src: 8236:13:0
nodeType: IdentifierPath
name: bitnotBytes27
nameLocations: [8236:13:0, ]
referencedDeclaration: 5007
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 672
src: 8276:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 671
src: 8326:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 670
src: 8326:7:0
nodeType: IdentifierPath
name: Bytes28
nameLocations: [8326:7:0, ]
referencedDeclaration: 188

referencedDeclaration: 188
typeDescriptions: typeString Bytes28typeIdentifier st_userDefinedValueType$_Bytes28_$188

functionList: [{definition: (* Beginning of a node! *)
id: 668
src: 8283:12:0
nodeType: IdentifierPath
name: bitorBytes28
nameLocations: [8283:12:0, ]
referencedDeclaration: 4390
, operator: |, }, {definition: (* Beginning of a node! *)
id: 669
src: 8302:13:0
nodeType: IdentifierPath
name: bitnotBytes28
nameLocations: [8302:13:0, ]
referencedDeclaration: 5026
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 677
src: 8342:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 676
src: 8392:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 675
src: 8392:7:0
nodeType: IdentifierPath
name: Bytes29
nameLocations: [8392:7:0, ]
referencedDeclaration: 190

referencedDeclaration: 190
typeDescriptions: typeString Bytes29typeIdentifier st_userDefinedValueType$_Bytes29_$190

functionList: [{definition: (* Beginning of a node! *)
id: 673
src: 8349:12:0
nodeType: IdentifierPath
name: bitorBytes29
nameLocations: [8349:12:0, ]
referencedDeclaration: 4416
, operator: |, }, {definition: (* Beginning of a node! *)
id: 674
src: 8368:13:0
nodeType: IdentifierPath
name: bitnotBytes29
nameLocations: [8368:13:0, ]
referencedDeclaration: 5045
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 682
src: 8408:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 681
src: 8458:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 680
src: 8458:7:0
nodeType: IdentifierPath
name: Bytes30
nameLocations: [8458:7:0, ]
referencedDeclaration: 192

referencedDeclaration: 192
typeDescriptions: typeString Bytes30typeIdentifier st_userDefinedValueType$_Bytes30_$192

functionList: [{definition: (* Beginning of a node! *)
id: 678
src: 8415:12:0
nodeType: IdentifierPath
name: bitorBytes30
nameLocations: [8415:12:0, ]
referencedDeclaration: 4442
, operator: |, }, {definition: (* Beginning of a node! *)
id: 679
src: 8434:13:0
nodeType: IdentifierPath
name: bitnotBytes30
nameLocations: [8434:13:0, ]
referencedDeclaration: 5064
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 687
src: 8474:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 686
src: 8524:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 685
src: 8524:7:0
nodeType: IdentifierPath
name: Bytes31
nameLocations: [8524:7:0, ]
referencedDeclaration: 194

referencedDeclaration: 194
typeDescriptions: typeString Bytes31typeIdentifier st_userDefinedValueType$_Bytes31_$194

functionList: [{definition: (* Beginning of a node! *)
id: 683
src: 8481:12:0
nodeType: IdentifierPath
name: bitorBytes31
nameLocations: [8481:12:0, ]
referencedDeclaration: 4468
, operator: |, }, {definition: (* Beginning of a node! *)
id: 684
src: 8500:13:0
nodeType: IdentifierPath
name: bitnotBytes31
nameLocations: [8500:13:0, ]
referencedDeclaration: 5083
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 692
src: 8540:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 691
src: 8590:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 690
src: 8590:7:0
nodeType: IdentifierPath
name: Bytes32
nameLocations: [8590:7:0, ]
referencedDeclaration: 196

referencedDeclaration: 196
typeDescriptions: typeString Bytes32typeIdentifier st_userDefinedValueType$_Bytes32_$196

functionList: [{definition: (* Beginning of a node! *)
id: 688
src: 8547:12:0
nodeType: IdentifierPath
name: bitorBytes32
nameLocations: [8547:12:0, ]
referencedDeclaration: 4494
, operator: |, }, {definition: (* Beginning of a node! *)
id: 689
src: 8566:13:0
nodeType: IdentifierPath
name: bitnotBytes32
nameLocations: [8566:13:0, ]
referencedDeclaration: 5102
, operator: ~, }, ]
global: 1

Definition bitorInt8 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int8" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int8" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int8" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt16 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int16" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int16" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int16" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt24 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int24" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int24" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int24" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt32 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int32" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int32" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int32" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt40 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int40" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int40" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int40" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt48 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int48" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int48" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int48" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt56 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int56" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int56" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int56" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt64 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int64" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int64" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int64" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt72 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int72" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int72" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int72" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt80 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int80" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int80" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int80" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt88 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int88" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int88" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int88" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt96 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int96" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int96" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int96" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt104 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int104" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int104" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int104" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt112 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int112" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int112" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int112" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt120 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int120" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int120" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int120" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt128 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int128" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int128" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int128" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt136 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int136" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int136" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int136" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt144 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int144" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int144" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int144" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt152 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int152" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int152" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int152" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt160 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int160" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int160" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int160" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt168 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int168" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int168" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int168" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt176 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int176" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int176" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int176" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt184 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int184" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int184" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int184" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt192 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int192" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int192" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int192" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt200 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int200" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int200" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int200" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt208 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int208" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int208" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int208" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt216 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int216" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int216" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int216" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt224 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int224" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int224" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int224" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt232 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int232" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int232" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int232" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt240 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int240" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int240" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int240" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt248 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int248" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int248" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int248" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt256 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int256" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int256" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int256" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorInt (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt8 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int8" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int8" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt16 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int16" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int16" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt24 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int24" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int24" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt32 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int32" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int32" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt40 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int40" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int40" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt48 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int48" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int48" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt56 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int56" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int56" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt64 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int64" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int64" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt72 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int72" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int72" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt80 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int80" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int80" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt88 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int88" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int88" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt96 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int96" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int96" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt104 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int104" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int104" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt112 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int112" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int112" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt120 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int120" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int120" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt128 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int128" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int128" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt136 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int136" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int136" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt144 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int144" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int144" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt152 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int152" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int152" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt160 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int160" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int160" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt168 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int168" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int168" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt176 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int176" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int176" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt184 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int184" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int184" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt192 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int192" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int192" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt200 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int200" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int200" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt208 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int208" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int208" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt216 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int216" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int216" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt224 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int224" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int224" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt232 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int232" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int232" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt240 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int240" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int240" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt248 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int248" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int248" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt256 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int256" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int256" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition unsubInt (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint8 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint8" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint8" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint8" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint16 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint16" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint16" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint16" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint24 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint24" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint24" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint24" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint32 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint32" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint32" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint32" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint40 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint40" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint40" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint40" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint48 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint48" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint48" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint48" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint56 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint56" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint56" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint56" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint64 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint64" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint64" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint64" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint72 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint72" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint72" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint72" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint80 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint80" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint80" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint80" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint88 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint88" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint88" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint88" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint96 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint96" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint96" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint96" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint104 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint104" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint104" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint104" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint112 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint112" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint112" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint112" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint120 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint120" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint120" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint120" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint128 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint128" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint128" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint128" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint136 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint136" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint136" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint136" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint144 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint144" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint144" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint144" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint152 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint152" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint152" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint152" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint160 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint160" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint160" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint160" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint168 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint168" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint168" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint168" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint176 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint176" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint176" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint176" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint184 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint184" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint184" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint184" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint192 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint192" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint192" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint192" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint200 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint200" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint200" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint200" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint208 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint208" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint208" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint208" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint216 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint216" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint216" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint216" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint224 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint224" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint224" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint224" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint232 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint232" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint232" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint232" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint240 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint240" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint240" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint240" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint248 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint248" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint248" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint248" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint256 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint256" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint256" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint256" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorUint (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint8 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint8" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint8" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint16 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint16" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint16" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint24 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint24" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint24" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint32 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint32" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint32" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint40 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint40" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint40" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint48 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint48" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint48" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint56 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint56" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint56" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint64 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint64" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint64" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint72 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint72" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint72" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint80 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint80" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint80" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint88 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint88" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint88" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint96 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint96" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint96" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint104 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint104" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint104" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint112 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint112" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint112" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint120 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint120" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint120" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint128 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint128" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint128" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint136 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint136" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint136" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint144 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint144" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint144" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint152 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint152" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint152" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint160 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint160" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint160" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint168 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint168" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint168" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint176 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint176" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint176" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint184 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint184" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint184" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint192 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint192" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint192" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint200 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint200" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint200" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint208 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint208" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint208" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint216 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint216" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint216" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint224 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint224" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint224" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint232 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint232" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint232" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint240 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint240" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint240" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint248 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint248" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint248" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint256 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint256" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint256" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotUint (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes1 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes1" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes1" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes1" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes2 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes2" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes2" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes2" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes3 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes3" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes3" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes3" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes4 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes4" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes4" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes4" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes5 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes5" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes5" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes5" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes6 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes6" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes6" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes6" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes7 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes7" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes7" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes7" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes8 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes8" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes8" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes8" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes9 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes9" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes9" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes9" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes10 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes10" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes10" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes10" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes11 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes11" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes11" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes11" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes12 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes12" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes12" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes12" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes13 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes13" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes13" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes13" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes14 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes14" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes14" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes14" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes15 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes15" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes15" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes15" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes16 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes16" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes16" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes16" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes17 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes17" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes17" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes17" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes18 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes18" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes18" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes18" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes19 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes19" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes19" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes19" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes20 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes20" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes20" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes20" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes21 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes21" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes21" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes21" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes22 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes22" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes22" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes22" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes23 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes23" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes23" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes23" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes24 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes24" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes24" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes24" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes25 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes25" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes25" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes25" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes26 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes26" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes26" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes26" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes27 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes27" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes27" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes27" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes28 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes28" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes28" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes28" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes29 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes29" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes29" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes29" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes30 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes30" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes30" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes30" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes31 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes31" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes31" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes31" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBytes32 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes32" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes32" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes32" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes1 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes1" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes1" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes2 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes2" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes2" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes3 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes3" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes3" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes4 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes4" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes4" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes5 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes5" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes5" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes6 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes6" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes6" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes7 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes7" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes7" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes8 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes8" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes8" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes9 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes9" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes9" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes10 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes10" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes10" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes11 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes11" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes11" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes12 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes12" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes12" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes13 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes13" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes13" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes14 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes14" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes14" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes15 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes15" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes15" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes16 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes16" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes16" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes17 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes17" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes17" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes18 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes18" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes18" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes19 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes19" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes19" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes20 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes20" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes20" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes21 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes21" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes21" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes22 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes22" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes22" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes23 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes23" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes23" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes24 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes24" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes24" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes25 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes25" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes25" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes26 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes26" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes26" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes27 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes27" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes27" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes28 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes28" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes28" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes29 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes29" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes29" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes30 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes30" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes30" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes31 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes31" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes31" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBytes32 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes32" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes32" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
(* Beginning of a node! *)
id: 5107
src: 30526:65:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 5106
src: 30576:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 5105
src: 30576:7:0
nodeType: IdentifierPath
name: Address
nameLocations: [30576:7:0, ]
referencedDeclaration: 198

referencedDeclaration: 198
typeDescriptions: typeString AddresstypeIdentifier st_userDefinedValueType$_Address_$198

functionList: [{definition: (* Beginning of a node! *)
id: 5103
src: 30533:12:0
nodeType: IdentifierPath
name: bitorAddress
nameLocations: [30533:12:0, ]
referencedDeclaration: 5152
, operator: |, }, {definition: (* Beginning of a node! *)
id: 5104
src: 30552:13:0
nodeType: IdentifierPath
name: bitnotAddress
nameLocations: [30552:13:0, ]
referencedDeclaration: 5177
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 5112
src: 30592:86:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 5111
src: 30656:14:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 5110
src: 30656:14:0
nodeType: IdentifierPath
name: AddressPayable
nameLocations: [30656:14:0, ]
referencedDeclaration: 200

referencedDeclaration: 200
typeDescriptions: typeString AddressPayabletypeIdentifier st_userDefinedValueType$_AddressPayable_$200

functionList: [{definition: (* Beginning of a node! *)
id: 5108
src: 30599:19:0
nodeType: IdentifierPath
name: bitorAddressPayable
nameLocations: [30599:19:0, ]
referencedDeclaration: 5221
, operator: |, }, {definition: (* Beginning of a node! *)
id: 5109
src: 30625:20:0
nodeType: IdentifierPath
name: bitnotAddressPayable
nameLocations: [30625:20:0, ]
referencedDeclaration: 5252
, operator: ~, }, ]
global: 1

(* Beginning of a node! *)
id: 5117
src: 30679:56:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 5116
src: 30723:4:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 5115
src: 30723:4:0
nodeType: IdentifierPath
name: Bool
nameLocations: [30723:4:0, ]
referencedDeclaration: 202

referencedDeclaration: 202
typeDescriptions: typeString BooltypeIdentifier st_userDefinedValueType$_Bool_$202

functionList: [{definition: (* Beginning of a node! *)
id: 5113
src: 30686:9:0
nodeType: IdentifierPath
name: bitorBool
nameLocations: [30686:9:0, ]
referencedDeclaration: 5278
, operator: |, }, {definition: (* Beginning of a node! *)
id: 5114
src: 30702:10:0
nodeType: IdentifierPath
name: bitnotBool
nameLocations: [30702:10:0, ]
referencedDeclaration: 5297
, operator: ~, }, ]
global: 1

Definition bitorAddress (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Address" |),
            "wrap"
          |),
          [
            M.call (|
              Ty.path "address",
              [
                M.bin_op (|
                  "|",
                  M.call (|
                    Ty.path "bytes20",
                    [
                      M.call (|
                        M.member_access (|
                          M.get_name (| "Address" |),
                          "unwrap"
                        |),
                        [
                          M.get_name (| "x" |)
                        ]
                      |)
                    ]
                  |),
                  M.call (|
                    Ty.path "bytes20",
                    [
                      M.call (|
                        M.member_access (|
                          M.get_name (| "Address" |),
                          "unwrap"
                        |),
                        [
                          M.get_name (| "y" |)
                        ]
                      |)
                    ]
                  |)
                |)
              ]
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotAddress (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Address" |),
            "wrap"
          |),
          [
            M.call (|
              Ty.path "address",
              [
                M.un_op (|
                  true,
                  "~",
                  M.call (|
                    Ty.path "bytes20",
                    [
                      M.call (|
                        M.member_access (|
                          M.get_name (| "Address" |),
                          "unwrap"
                        |),
                        [
                          M.get_name (| "x" |)
                        ]
                      |)
                    ]
                  |)
                |)
              ]
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorAddressPayable (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "AddressPayable" |),
            "wrap"
          |),
          [
            M.call (|
              Ty.path "address",
              [
                M.call (|
                  Ty.path "address",
                  [
                    M.bin_op (|
                      "|",
                      M.call (|
                        Ty.path "bytes20",
                        [
                          M.call (|
                            Ty.path "address",
                            [
                              M.call (|
                                M.member_access (|
                                  M.get_name (| "AddressPayable" |),
                                  "unwrap"
                                |),
                                [
                                  M.get_name (| "x" |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |),
                      M.call (|
                        Ty.path "bytes20",
                        [
                          M.call (|
                            Ty.path "address",
                            [
                              M.call (|
                                M.member_access (|
                                  M.get_name (| "AddressPayable" |),
                                  "unwrap"
                                |),
                                [
                                  M.get_name (| "y" |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  ]
                |)
              ]
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotAddressPayable (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "AddressPayable" |),
            "wrap"
          |),
          [
            M.call (|
              Ty.path "address",
              [
                M.call (|
                  Ty.path "address",
                  [
                    M.un_op (|
                      true,
                      "~",
                      M.call (|
                        Ty.path "bytes20",
                        [
                          M.call (|
                            Ty.path "address",
                            [
                              M.call (|
                                M.member_access (|
                                  M.get_name (| "AddressPayable" |),
                                  "unwrap"
                                |),
                                [
                                  M.get_name (| "x" |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  ]
                |)
              ]
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitorBool (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bool" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "||",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bool" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bool" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition bitnotBool (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bool" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "!",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bool" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
(* Contract *)
Module C.
  Definition testIntBinary (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int8" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int8" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int8" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int16" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int16" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int16" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int24" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int24" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int24" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int32" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int32" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int32" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int40" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int40" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int40" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int48" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int48" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int48" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int56" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int56" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int56" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int64" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int64" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int64" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int72" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int72" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int72" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int80" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int80" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int80" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int88" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int88" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int88" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int96" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int96" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int96" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int104" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int104" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int104" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int112" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int112" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int112" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int120" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int120" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int120" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int128" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int128" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int128" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int136" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int136" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int136" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int144" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int144" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int144" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int152" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int152" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int152" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int160" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int160" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int160" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int168" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int168" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int168" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int176" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int176" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int176" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int184" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int184" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int184" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int192" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int192" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int192" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int200" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int200" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int200" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int208" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int208" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int208" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int216" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int216" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int216" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int224" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int224" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int224" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int232" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int232" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int232" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int240" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int240" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int240" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int248" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int248" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int248" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int256" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int256" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int256" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testIntUnary (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int8" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int8" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int16" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int16" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int24" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int24" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int32" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int32" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int40" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int40" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int48" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int48" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int56" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int56" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int64" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int64" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int72" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int72" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int80" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int80" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int88" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int88" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int96" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int96" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int104" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int104" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int112" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int112" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int120" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int120" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int128" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int128" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int136" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int136" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int144" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int144" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int152" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int152" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int160" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int160" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int168" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int168" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int176" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int176" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int184" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int184" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int192" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int192" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int200" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int200" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int208" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int208" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int216" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int216" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int224" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int224" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int232" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int232" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int240" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int240" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int248" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int248" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int256" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int256" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testUintBinary (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint8" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint8" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint8" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint16" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint16" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint16" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint24" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint24" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint24" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint32" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint32" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint32" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint40" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint40" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint40" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint48" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint48" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint48" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint56" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint56" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint56" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint64" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint64" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint64" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint72" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint72" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint72" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint80" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint80" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint80" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint88" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint88" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint88" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint96" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint96" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint96" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint104" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint104" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint104" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint112" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint112" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint112" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint120" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint120" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint120" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint128" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint128" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint128" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint136" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint136" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint136" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint144" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint144" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint144" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint152" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint152" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint152" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint160" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint160" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint160" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint168" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint168" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint168" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint176" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint176" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint176" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint184" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint184" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint184" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint192" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint192" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint192" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint200" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint200" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint200" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint208" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint208" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint208" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint216" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint216" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint216" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint224" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint224" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint224" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint232" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint232" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint232" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint240" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint240" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint240" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint248" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint248" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint248" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint256" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint256" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint256" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testUintUnary (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint8" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint8" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint8",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint16" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint16" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint16",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint24" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint24" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint24",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint32" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint32" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint32",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint40" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint40" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint40",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint48" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint48" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint48",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint56" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint56" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint56",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint64" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint64" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint64",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint72" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint72" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint72",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint80" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint80" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint80",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint88" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint88" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint88",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint96" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint96" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint96",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint104" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint104" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint104",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint112" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint112" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint112",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint120" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint120" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint120",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint128" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint128" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint128",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint136" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint136" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint136",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint144" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint144" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint144",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint152" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint152" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint152",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint160" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint160" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint160",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint168" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint168" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint168",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint176" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint176" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint176",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint184" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint184" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint184",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint192" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint192" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint192",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint200" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint200" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint200",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint208" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint208" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint208",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint216" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint216" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint216",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint224" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint224" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint224",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint232" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint232" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint232",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint240" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint240" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint240",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint248" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint248" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint248",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint256" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint256" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint256",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testBytesBinary (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes1" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes1" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 0x01
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes1" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 0x02
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes1",
                [
                  Value.Integer 0x03
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes2" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes2" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes2",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes2" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes2",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes2",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes3" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes3" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes3",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes3" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes3",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes3",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes4" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes4" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes4",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes4" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes4",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes4",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes5" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes5" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes5",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes5" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes5",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes5",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes6" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes6" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes6",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes6" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes6",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes6",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes7" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes7" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes7",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes7" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes7",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes7",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes8" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes8" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes8",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes8" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes8",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes8",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes9" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes9" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes9",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes9" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes9",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes9",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes10" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes10" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes10",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes10" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes10",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes10",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes11" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes11" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes11",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes11" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes11",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes11",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes12" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes12" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes12",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes12" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes12",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes12",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes13" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes13" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes13",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes13" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes13",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes13",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes14" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes14" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes14",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes14" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes14",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes14",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes15" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes15" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes15",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes15" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes15",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes15",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes16" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes16" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes16",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes16" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes16",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes16",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes17" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes17" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes17",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes17" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes17",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes17",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes18" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes18" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes18",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes18" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes18",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes18",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes19" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes19" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes19",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes19" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes19",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes19",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes20" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes20" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes20",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes20" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes20",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes20",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes21" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes21" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes21",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes21" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes21",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes21",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes22" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes22" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes22",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes22" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes22",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes22",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes23" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes23" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes23",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes23" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes23",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes23",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes24" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes24" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes24",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes24" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes24",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes24",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes25" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes25" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes25",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes25" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes25",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes25",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes26" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes26" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes26",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes26" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes26",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes26",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes27" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes27" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes27",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes27" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes27",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes27",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes28" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes28" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes28",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes28" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes28",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes28",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes29" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes29" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes29",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes29" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes29",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes29",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes30" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes30" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes30",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes30" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes30",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes30",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes31" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes31" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes31",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes31" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes31",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes31",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes32" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes32" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes32",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes32" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes32",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes32",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testBytesUnary (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes1" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes1" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes1",
                          [
                            Value.Integer 0x01
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes1",
                  [
                    Value.Integer 0x01
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes2" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes2" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes2",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes2",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes3" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes3" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes3",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes3",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes4" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes4" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes4",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes4",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes5" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes5" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes5",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes5",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes6" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes6" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes6",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes6",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes7" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes7" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes7",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes7",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes8" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes8" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes8",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes8",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes9" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes9" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes9",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes9",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes10" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes10" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes10",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes10",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes11" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes11" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes11",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes11",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes12" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes12" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes12",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes12",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes13" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes13" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes13",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes13",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes14" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes14" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes14",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes14",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes15" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes15" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes15",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes15",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes16" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes16" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes16",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes16",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes17" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes17" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes17",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes17",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes18" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes18" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes18",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes18",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes19" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes19" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes19",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes19",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes20" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes20" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes20",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes20",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes21" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes21" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes21",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes21",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes22" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes22" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes22",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes22",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes23" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes23" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes23",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes23",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes24" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes24" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes24",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes24",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes25" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes25" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes25",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes25",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes26" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes26" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes26",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes26",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes27" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes27" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes27",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes27",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes28" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes28" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes28",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes28",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes29" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes29" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes29",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes29",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes30" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes30" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes30",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes30",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes31" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes31" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes31",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes31",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes32" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes32" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes32",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes32",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testOtherBinary (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Address" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Address" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "address",
                          [
                            Value.Integer 0x01
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Address" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "address",
                          [
                            Value.Integer 0x02
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "address",
                [
                  Value.Integer 0x03
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "AddressPayable" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "AddressPayable" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "address",
                          [
                            M.call (|
                              Ty.path "address",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "AddressPayable" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "address",
                          [
                            M.call (|
                              Ty.path "address",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "address",
                [
                  M.call (|
                    Ty.path "address",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bool" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bool" |),
                        "wrap"
                      |),
                      [
                        Value.Bool true
                      ]
                    |)
                  |)
                ]
              |),
              Value.Bool false
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testOtherUnary (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Address" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Address" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "address",
                          [
                            Value.Integer 0
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "address",
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      Ty.path "bytes20",
                      [
                        Value.Integer 0
                      ]
                    |)
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "AddressPayable" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "AddressPayable" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "address",
                          [
                            M.call (|
                              Ty.path "address",
                              [
                                Value.Integer 0
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "address",
                [
                  M.call (|
                    Ty.path "address",
                    [
                      M.un_op (|
                        true,
                        "~",
                        M.call (|
                          Ty.path "bytes20",
                          [
                            Value.Integer 0
                          ]
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bool" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bool" |),
                        "wrap"
                      |),
                      [
                        Value.Bool true
                      ]
                    |)
                  |)
                ]
              |),
              Value.Bool false
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
