(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_712.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            [

            ]
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                [

                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          M.call (|
            "allocate_unbounded",
            [

            ]
          |)
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f3731325f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3731325f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3731325f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_712_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x0f74a039),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_testArithmetic",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x174714cd),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_testAll",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x392bad02),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_testBitwise_arithmetic",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xcf9b9c17),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_testBitwise",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            [

            ]
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple",
          ["headStart"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_testArithmetic",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "fun_testArithmetic",
                [

                ]
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_tuple",
                  [
                    M.get (| "memPos" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_testAll",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "fun_testAll",
                [

                ]
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_tuple",
                  [
                    M.get (| "memPos" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_testBitwise_arithmetic",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "fun_testBitwise_arithmetic",
                [

                ]
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_tuple",
                  [
                    M.get (| "memPos" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_testBitwise",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "fun_testBitwise",
                [

                ]
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_tuple",
                  [
                    M.get (| "memPos" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_1_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int64",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 7];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_1_by_1_to_int64",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_1_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "constant_I1",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "convert_rational_1_by_1_to_int64",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "_1" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_8_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_8_by_1_to_int64",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_8_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "constant_I8",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x08]
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "convert_rational_8_by_1_to_int64",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "_1" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_4_by_1_to_int64",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "constant_I4",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x04]
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "convert_rational_4_by_1_to_int64",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "_1" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_5_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_5_by_1_to_int64",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_5_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "constant_I5",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x05]
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "convert_rational_5_by_1_to_int64",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "_1" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int64",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "constant_I6",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x06]
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "convert_rational_by_to_int64",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "_1" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_7_by_1_to_int64",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "constant_I7",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x07]
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "convert_rational_7_by_1_to_int64",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "_1" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_int64_to_int64",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_int64",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_minus_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_minus_by_to_t_int64",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_minus_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x01",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x01]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "assert_helper",
          ["condition"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "condition" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x01",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_testArithmetic",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                M.call (|
                  "constant_I1",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "constant_I8",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.call (|
                  "constant_I4",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.call (|
                  "fun_div",
                  [
                    M.get (| "expr_1" |);
                    M.get (| "expr_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                M.call (|
                  "fun_add",
                  [
                    M.get (| "expr" |);
                    M.get (| "expr_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                M.call (|
                  "constant_I5",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                M.call (|
                  "constant_I6",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                M.call (|
                  "fun_mod",
                  [
                    M.get (| "expr_5" |);
                    M.get (| "expr_6" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                M.call (|
                  "constant_I7",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                M.call (|
                  "fun_mul",
                  [
                    M.get (| "expr_7" |);
                    M.get (| "expr_8" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                M.call (|
                  "fun_sub",
                  [
                    M.get (| "expr_4" |);
                    M.get (| "expr_9" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr_10" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                M.call (|
                  "not",
                  [
                    [Literal.number 31]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                M.get (| "expr_12" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int64",
                      [
                        M.get (| "expr_11" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_minus_by_to_t_int64",
                      [
                        M.get (| "expr_13" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_14" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                M.call (|
                  "constant_I1",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                M.call (|
                  "constant_I8",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                M.call (|
                  "constant_I4",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                M.call (|
                  "fun_div",
                  [
                    M.get (| "expr_16" |);
                    M.get (| "expr_17" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                M.call (|
                  "fun_add",
                  [
                    M.get (| "expr_15" |);
                    M.get (| "expr_18" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                M.call (|
                  "constant_I5",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                M.call (|
                  "constant_I6",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                M.call (|
                  "fun_mod",
                  [
                    M.get (| "expr_20" |);
                    M.get (| "expr_21" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                M.call (|
                  "constant_I7",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                M.call (|
                  "fun_mul",
                  [
                    M.get (| "expr_22" |);
                    M.get (| "expr_23" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                M.call (|
                  "fun_sub",
                  [
                    M.get (| "expr_19" |);
                    M.get (| "expr_24" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr_25" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                M.call (|
                  "not",
                  [
                    [Literal.number 31]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                M.get (| "expr_27" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int64",
                      [
                        M.get (| "expr_26" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_minus_by_to_t_int64",
                      [
                        M.get (| "expr_28" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_29" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_128_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_128_by_1_to_int64",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_128_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "constant_I128",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x80]
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "convert_rational_128_by_1_to_int64",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "_1" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_10_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_int64",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_10_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "constant_I10",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x0a]
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "convert_t_rational_by_to_t_int64",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "_1" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_2_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_2_by_1_to_int64",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_2_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "constant_I2",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "convert_rational_2_by_1_to_int64",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "_1" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_15_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_15_by_1_to_int64",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_15_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "constant_I15",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x0f]
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "convert_rational_15_by_1_to_int64",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "_1" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_20_by_1_to_int64",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "constant_I20",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x14]
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "convert_rational_20_by_1_to_int64",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "_1" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_13_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_13_by_1_to_int64",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_13_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "constant_I13",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x0d]
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "convert_rational_13_by_1_to_int64",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "_1" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_3_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_3_by_1_to_int64",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_3_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "constant_I3",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "convert_rational_3_by_1_to_int64",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "_1" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int64",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_testAll",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                M.call (|
                  "constant_I128",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "constant_I1",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.call (|
                  "fun_add",
                  [
                    M.get (| "expr" |);
                    M.get (| "expr_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.call (|
                  "constant_I10",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                M.call (|
                  "fun_sub",
                  [
                    M.get (| "expr_2" |);
                    M.get (| "expr_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                M.call (|
                  "constant_I4",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                M.call (|
                  "fun_add",
                  [
                    M.get (| "expr_4" |);
                    M.get (| "expr_5" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                M.call (|
                  "constant_I1",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                M.call (|
                  "fun_bitnot",
                  [
                    M.get (| "expr_7" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                M.call (|
                  "fun_bitand",
                  [
                    M.get (| "expr_6" |);
                    M.get (| "expr_8" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                M.call (|
                  "constant_I1",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                M.call (|
                  "fun_bitnot",
                  [
                    M.get (| "expr_10" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                M.call (|
                  "constant_I2",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                M.call (|
                  "fun_mul",
                  [
                    M.get (| "expr_11" |);
                    M.get (| "expr_12" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                M.call (|
                  "fun_bitxor",
                  [
                    M.get (| "expr_9" |);
                    M.get (| "expr_13" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                M.call (|
                  "constant_I15",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                M.call (|
                  "fun_unsub",
                  [
                    M.get (| "expr_15" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                M.call (|
                  "constant_I10",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                M.call (|
                  "fun_unsub",
                  [
                    M.get (| "expr_17" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                M.call (|
                  "fun_mod",
                  [
                    M.get (| "expr_16" |);
                    M.get (| "expr_18" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                M.call (|
                  "constant_I20",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                M.call (|
                  "fun_mul",
                  [
                    M.get (| "expr_19" |);
                    M.get (| "expr_20" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                M.call (|
                  "constant_I2",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                M.call (|
                  "fun_div",
                  [
                    M.get (| "expr_21" |);
                    M.get (| "expr_22" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                M.call (|
                  "constant_I13",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                M.call (|
                  "fun_add",
                  [
                    M.get (| "expr_23" |);
                    M.get (| "expr_24" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                M.call (|
                  "constant_I3",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                M.call (|
                  "fun_bitnot",
                  [
                    M.get (| "expr_26" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                M.call (|
                  "fun_bitand",
                  [
                    M.get (| "expr_25" |);
                    M.get (| "expr_27" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                M.call (|
                  "fun_bitor",
                  [
                    M.get (| "expr_14" |);
                    M.get (| "expr_28" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr_29" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                M.call (|
                  "not",
                  [
                    [Literal.number 33]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                M.get (| "expr_31" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_33"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int64",
                      [
                        M.get (| "expr_30" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int64",
                      [
                        M.get (| "expr_32" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_33" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_34"],
                M.call (|
                  "constant_I128",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_35"],
                M.call (|
                  "constant_I1",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_36"],
                M.call (|
                  "fun_add",
                  [
                    M.get (| "expr_34" |);
                    M.get (| "expr_35" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_37"],
                M.call (|
                  "constant_I10",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_38"],
                M.call (|
                  "fun_sub",
                  [
                    M.get (| "expr_36" |);
                    M.get (| "expr_37" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_39"],
                M.call (|
                  "constant_I4",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_40"],
                M.call (|
                  "fun_add",
                  [
                    M.get (| "expr_38" |);
                    M.get (| "expr_39" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_41"],
                M.call (|
                  "constant_I1",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_42"],
                M.call (|
                  "fun_bitnot",
                  [
                    M.get (| "expr_41" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_43"],
                M.call (|
                  "fun_bitand",
                  [
                    M.get (| "expr_40" |);
                    M.get (| "expr_42" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_44"],
                M.call (|
                  "constant_I1",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_45"],
                M.call (|
                  "fun_bitnot",
                  [
                    M.get (| "expr_44" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_46"],
                M.call (|
                  "constant_I2",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_47"],
                M.call (|
                  "fun_mul",
                  [
                    M.get (| "expr_45" |);
                    M.get (| "expr_46" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_48"],
                M.call (|
                  "fun_bitxor",
                  [
                    M.get (| "expr_43" |);
                    M.get (| "expr_47" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_49"],
                M.call (|
                  "constant_I15",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_50"],
                M.call (|
                  "fun_unsub",
                  [
                    M.get (| "expr_49" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_51"],
                M.call (|
                  "constant_I10",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_52"],
                M.call (|
                  "fun_unsub",
                  [
                    M.get (| "expr_51" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_53"],
                M.call (|
                  "fun_mod",
                  [
                    M.get (| "expr_50" |);
                    M.get (| "expr_52" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_54"],
                M.call (|
                  "constant_I20",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_55"],
                M.call (|
                  "fun_mul",
                  [
                    M.get (| "expr_53" |);
                    M.get (| "expr_54" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_56"],
                M.call (|
                  "constant_I2",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_57"],
                M.call (|
                  "fun_div",
                  [
                    M.get (| "expr_55" |);
                    M.get (| "expr_56" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_58"],
                M.call (|
                  "constant_I13",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_59"],
                M.call (|
                  "fun_add",
                  [
                    M.get (| "expr_57" |);
                    M.get (| "expr_58" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_60"],
                M.call (|
                  "constant_I3",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_61"],
                M.call (|
                  "fun_bitnot",
                  [
                    M.get (| "expr_60" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_62"],
                M.call (|
                  "fun_bitand",
                  [
                    M.get (| "expr_59" |);
                    M.get (| "expr_61" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_63"],
                M.call (|
                  "fun_bitor",
                  [
                    M.get (| "expr_48" |);
                    M.get (| "expr_62" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_64"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr_63" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_65"],
                M.call (|
                  "not",
                  [
                    [Literal.number 33]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_66"],
                M.get (| "expr_65" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_67"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int64",
                      [
                        M.get (| "expr_64" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int64",
                      [
                        M.get (| "expr_66" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_67" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_36_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_36_by_1_to_int64",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_36_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_testBitwise_arithmetic",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                M.call (|
                  "constant_I2",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "constant_I2",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.call (|
                  "fun_add",
                  [
                    M.get (| "expr" |);
                    M.get (| "expr_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.call (|
                  "constant_I1",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                M.call (|
                  "fun_bitnot",
                  [
                    M.get (| "expr_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                M.call (|
                  "fun_bitand",
                  [
                    M.get (| "expr_2" |);
                    M.get (| "expr_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                M.call (|
                  "constant_I6",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                M.call (|
                  "constant_I6",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                M.call (|
                  "fun_mul",
                  [
                    M.get (| "expr_6" |);
                    M.get (| "expr_7" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                M.call (|
                  "constant_I4",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                M.call (|
                  "fun_sub",
                  [
                    M.get (| "expr_8" |);
                    M.get (| "expr_9" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                M.call (|
                  "constant_I3",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                M.call (|
                  "fun_bitnot",
                  [
                    M.get (| "expr_11" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                M.call (|
                  "fun_bitand",
                  [
                    M.get (| "expr_10" |);
                    M.get (| "expr_12" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                M.call (|
                  "fun_bitor",
                  [
                    M.get (| "expr_5" |);
                    M.get (| "expr_13" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr_14" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                [Literal.number 0x24]
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                M.get (| "expr_16" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int64",
                      [
                        M.get (| "expr_15" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_36_by_1_to_int64",
                      [
                        M.get (| "expr_17" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_18" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                M.call (|
                  "constant_I2",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                M.call (|
                  "constant_I2",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                M.call (|
                  "fun_add",
                  [
                    M.get (| "expr_19" |);
                    M.get (| "expr_20" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                M.call (|
                  "constant_I1",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                M.call (|
                  "fun_bitnot",
                  [
                    M.get (| "expr_22" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                M.call (|
                  "fun_bitand",
                  [
                    M.get (| "expr_21" |);
                    M.get (| "expr_23" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                M.call (|
                  "constant_I6",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                M.call (|
                  "constant_I6",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                M.call (|
                  "fun_mul",
                  [
                    M.get (| "expr_25" |);
                    M.get (| "expr_26" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                M.call (|
                  "constant_I4",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                M.call (|
                  "fun_sub",
                  [
                    M.get (| "expr_27" |);
                    M.get (| "expr_28" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                M.call (|
                  "constant_I3",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                M.call (|
                  "fun_bitnot",
                  [
                    M.get (| "expr_30" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                M.call (|
                  "fun_bitand",
                  [
                    M.get (| "expr_29" |);
                    M.get (| "expr_31" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_33"],
                M.call (|
                  "fun_bitor",
                  [
                    M.get (| "expr_24" |);
                    M.get (| "expr_32" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_34"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr_33" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_35"],
                [Literal.number 0x24]
              |) in
            let _ :=
              M.assign (|
                ["expr_36"],
                M.get (| "expr_35" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_37"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int64",
                      [
                        M.get (| "expr_34" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_36_by_1_to_int64",
                      [
                        M.get (| "expr_36" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_37" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_0_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_0_by_1_to_int64",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "constant_I0",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "convert_rational_0_by_1_to_int64",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "_1" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_testBitwise",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                M.call (|
                  "constant_I0",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "constant_I0",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.call (|
                  "fun_bitand",
                  [
                    M.get (| "expr" |);
                    M.get (| "expr_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.call (|
                  "constant_I1",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                M.call (|
                  "fun_bitor",
                  [
                    M.get (| "expr_2" |);
                    M.get (| "expr_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                M.get (| "expr_6" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int64",
                      [
                        M.get (| "expr_5" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_1_by_1_to_int64",
                      [
                        M.get (| "expr_7" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_8" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                M.call (|
                  "constant_I0",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                M.call (|
                  "constant_I0",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                M.call (|
                  "fun_bitand",
                  [
                    M.get (| "expr_9" |);
                    M.get (| "expr_10" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                M.call (|
                  "constant_I1",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                M.call (|
                  "fun_bitor",
                  [
                    M.get (| "expr_11" |);
                    M.get (| "expr_12" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr_13" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                M.get (| "expr_15" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int64",
                      [
                        M.get (| "expr_14" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_1_by_1_to_int64",
                      [
                        M.get (| "expr_16" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_17" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_userDefinedValueType_Int",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x12",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x12]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x11",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x11]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_div_int64",
          ["x"; "y"],
          ["r"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["x"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.get (| "x" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["y"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "y" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x12",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "and",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "x" |);
                        M.call (|
                          "not",
                          [
                            [Literal.number 0x7fffffffffffffff]
                          ]
                        |)
                      ]
                    |);
                    M.call (|
                      "eq",
                      [
                        M.get (| "y" |);
                        M.call (|
                          "sub",
                          [
                            [Literal.number 0];
                            [Literal.number 1]
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["r"],
                M.call (|
                  "sdiv",
                  [
                    M.get (| "x" |);
                    M.get (| "y" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_div",
          ["var_x"; "var_y"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_userDefinedValueType_Int"],
                M.call (|
                  "zero_value_for_split_userDefinedValueType_Int",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_userDefinedValueType_Int" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_x" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.get (| "var_y" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                M.call (|
                  "checked_div_int64",
                  [
                    M.get (| "expr_1" |);
                    M.get (| "expr_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_5" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_add_int64",
          ["x"; "y"],
          ["sum"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["x"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.get (| "x" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["y"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["sum"],
                M.call (|
                  "add",
                  [
                    M.get (| "x" |);
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "sgt",
                      [
                        M.get (| "sum" |);
                        [Literal.number 0x7fffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "slt",
                      [
                        M.get (| "sum" |);
                        M.call (|
                          "not",
                          [
                            [Literal.number 0x7fffffffffffffff]
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_add",
          ["var_x"; "var_y"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_t_userDefinedValueType_Int"],
                M.call (|
                  "zero_value_for_split_userDefinedValueType_Int",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_t_userDefinedValueType_Int" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_x" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.get (| "var_y" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                M.call (|
                  "checked_add_int64",
                  [
                    M.get (| "expr_1" |);
                    M.get (| "expr_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_5" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "mod_int64",
          ["x"; "y"],
          ["r"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["x"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.get (| "x" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["y"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "y" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x12",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["r"],
                M.call (|
                  "smod",
                  [
                    M.get (| "x" |);
                    M.get (| "y" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_mod",
          ["var_x"; "var_y"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_userDefinedValueType_Int"],
                M.call (|
                  "zero_value_for_split_userDefinedValueType_Int",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_userDefinedValueType_Int" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_x" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.get (| "var_y" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                M.call (|
                  "mod_int64",
                  [
                    M.get (| "expr_1" |);
                    M.get (| "expr_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_5" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_mul_int64",
          ["x"; "y"],
          ["product"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["x"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.get (| "x" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["y"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["product_raw"],
                M.call (|
                  "mul",
                  [
                    M.get (| "x" |);
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["product"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.get (| "product_raw" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "product" |);
                        M.get (| "product_raw" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_mul",
          ["var_x"; "var_y"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_userDefinedValueType_Int"],
                M.call (|
                  "zero_value_for_split_userDefinedValueType_Int",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_userDefinedValueType_Int" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_x" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.get (| "var_y" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                M.call (|
                  "checked_mul_int64",
                  [
                    M.get (| "expr_1" |);
                    M.get (| "expr_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_5" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_sub_int64",
          ["x"; "y"],
          ["diff"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["x"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.get (| "x" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["y"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["diff"],
                M.call (|
                  "sub",
                  [
                    M.get (| "x" |);
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "slt",
                      [
                        M.get (| "diff" |);
                        M.call (|
                          "not",
                          [
                            [Literal.number 0x7fffffffffffffff]
                          ]
                        |)
                      ]
                    |);
                    M.call (|
                      "sgt",
                      [
                        M.get (| "diff" |);
                        [Literal.number 0x7fffffffffffffff]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_sub",
          ["var_x"; "var_y"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_userDefinedValueType_Int"],
                M.call (|
                  "zero_value_for_split_userDefinedValueType_Int",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_userDefinedValueType_Int" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_x" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.get (| "var_y" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                M.call (|
                  "checked_sub_int64",
                  [
                    M.get (| "expr_1" |);
                    M.get (| "expr_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_5" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_bitnot",
          ["var_x"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_userDefinedValueType_Int"],
                M.call (|
                  "zero_value_for_split_userDefinedValueType_Int",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_userDefinedValueType_Int" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_x" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.call (|
                      "not",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_3" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_bitand",
          ["var_x"; "var_y"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_userDefinedValueType_Int"],
                M.call (|
                  "zero_value_for_split_userDefinedValueType_Int",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_userDefinedValueType_Int" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_x" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.get (| "var_y" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                M.call (|
                  "and",
                  [
                    M.get (| "expr_1" |);
                    M.get (| "expr_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_5" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_bitxor",
          ["var_x"; "var_y"],
          ["var_"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_userDefinedValueType_Int"],
                M.call (|
                  "zero_value_for_split_userDefinedValueType_Int",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "zero_userDefinedValueType_Int" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_x" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.get (| "var_y" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                M.call (|
                  "xor",
                  [
                    M.get (| "expr_1" |);
                    M.get (| "expr_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "expr_5" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "negate_int64",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "eq",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 0x7fffffffffffffff]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "sub",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_unsub",
          ["var_x"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_userDefinedValueType_Int"],
                M.call (|
                  "zero_value_for_split_userDefinedValueType_Int",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_userDefinedValueType_Int" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_x" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.call (|
                  "negate_int64",
                  [
                    M.get (| "expr_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_3" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_bitor",
          ["var_x"; "var_y"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_userDefinedValueType_Int"],
                M.call (|
                  "zero_value_for_split_userDefinedValueType_Int",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_userDefinedValueType_Int" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_x" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.get (| "var_y" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                M.call (|
                  "or",
                  [
                    M.get (| "expr_1" |);
                    M.get (| "expr_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                M.call (|
                  "convert_int64_to_int64",
                  [
                    M.get (| "expr_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_5" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a2646970667358221220384b95586255c5d065443a9f69f285c655f7649ab9cc87529e057a3159043c9564736f6c634300081b0033".
  End C_712_deployed.
End C_712.
