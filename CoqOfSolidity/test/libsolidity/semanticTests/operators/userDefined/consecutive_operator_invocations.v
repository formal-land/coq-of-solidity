(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

Axiom user_type_A : Ty.path "A" = Ty.path "address".
(* Beginning of a node! *)
id: 6
src: 20:30:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 5
src: 41:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 4
src: 41:1:0
nodeType: IdentifierPath
name: A
nameLocations: [41:1:0, ]
referencedDeclaration: 2

referencedDeclaration: 2
typeDescriptions: typeString AtypeIdentifier st_userDefinedValueType$_A_$2

functionList: [{definition: (* Beginning of a node! *)
id: 3
src: 27:3:0
nodeType: IdentifierPath
name: add
nameLocations: [27:3:0, ]
referencedDeclaration: 41
, operator: +, }, ]
global: 1

Definition add (α : list Value.t) : M :=
  match α with
  | [a, b] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "A" |),
            "wrap"
          |),
          [
            M.call (|
              Ty.path "address",
              [
                M.bin_op (|
                  "+",
                  M.call (|
                    Ty.path "uint160",
                    [
                      M.call (|
                        M.member_access (|
                          M.get_name (| "A" |),
                          "unwrap"
                        |),
                        [
                          M.get_name (| "a" |)
                        ]
                      |)
                    ]
                  |),
                  M.call (|
                    Ty.path "uint160",
                    [
                      M.call (|
                        M.member_access (|
                          M.get_name (| "A" |),
                          "unwrap"
                        |),
                        [
                          M.get_name (| "b" |)
                        ]
                      |)
                    ]
                  |)
                |)
              ]
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
(* Contract *)
Module C.
  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "a" ],
          M.call (|
            M.member_access (|
              M.get_name (| "A" |),
              "wrap"
            |),
            [
              Value.Integer 0x3333333333333333333333333333333333333333
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "b" ],
          M.call (|
            M.member_access (|
              M.get_name (| "A" |),
              "wrap"
            |),
            [
              Value.Integer 0x1111111111111111111111111111111111111111
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "c" ],
          M.call (|
            M.member_access (|
              M.get_name (| "A" |),
              "wrap"
            |),
            [
              Value.Integer 0x5555555555555555555555555555555555555555
            ]
          |)
        |) in
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.bin_op (|
              "+",
              M.get_name (| "a" |),
              M.get_name (| "b" |)
            |),
            M.get_name (| "c" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
