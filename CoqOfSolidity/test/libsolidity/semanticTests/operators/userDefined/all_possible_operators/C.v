(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_785.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            []
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                []
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          Some (M.call (|
            "allocate_unbounded",
            []
          |))
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f3738355f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3738355f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3738355f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_785_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      []
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  Some (M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x0f74a039),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_testArithmetic",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x2135b4d9),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_testComparison",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xcf9b9c17),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_testBitwise",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            []
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple",
          ["headStart"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_testArithmetic",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "fun_testArithmetic",
                []
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_tuple",
                  [
                    M.get (| "memPos" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_testComparison",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "fun_testComparison",
                []
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_tuple",
                  [
                    M.get (| "memPos" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_testBitwise",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "fun_testBitwise",
                []
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_tuple",
                  [
                    M.get (| "memPos" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int8",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_1_by_1_to_int8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "constant_ONE",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "convert_rational_1_by_1_to_int8",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "expr_1" |))
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "_1" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_2_by_1_to_int8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "constant_TWO",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "convert_rational_2_by_1_to_int8",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "expr_1" |))
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "_1" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_int8_to_int8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_int8",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_3_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_3_by_1_to_int8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_3_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x01",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x01]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "assert_helper",
          ["condition"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "condition" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x01",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "constant_ZERO",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "convert_rational_by_to_int8",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "expr_1" |))
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "_1" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "constant_THREE",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0x03])
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "convert_rational_3_by_1_to_int8",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "expr_1" |))
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "_1" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_int8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "constant_SIX",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0x06])
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "convert_t_rational_by_to_t_int8",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "expr_1" |))
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "_1" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_testArithmetic",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.call (|
                  "constant_ONE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "constant_TWO",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.call (|
                  "fun_add",
                  [
                    M.get (| "expr" |);
                    M.get (| "expr_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some ([Literal.number 0x03])
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_3" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_3_by_1_to_int8",
                      [
                        M.get (| "expr_4" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_5" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some (M.call (|
                  "constant_ONE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some (M.call (|
                  "constant_ZERO",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some (M.call (|
                  "fun_add",
                  [
                    M.get (| "expr_6" |);
                    M.get (| "expr_7" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_8" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_1_by_1_to_int8",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some (M.call (|
                  "constant_TWO",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some (M.call (|
                  "constant_ONE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some (M.call (|
                  "fun_sub",
                  [
                    M.get (| "expr_12" |);
                    M.get (| "expr_13" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_14" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_15" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_1_by_1_to_int8",
                      [
                        M.get (| "expr_16" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_17" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some (M.call (|
                  "constant_THREE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some (M.call (|
                  "constant_THREE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some (M.call (|
                  "fun_sub",
                  [
                    M.get (| "expr_18" |);
                    M.get (| "expr_19" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_20" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_21" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int8",
                      [
                        M.get (| "expr_22" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_23" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                Some (M.call (|
                  "constant_TWO",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                Some (M.call (|
                  "fun_unsub",
                  [
                    M.get (| "expr_24" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_25" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_26" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int8",
                      [
                        M.get (| "expr_27" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_28" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                Some (M.call (|
                  "constant_ZERO",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                Some (M.call (|
                  "fun_unsub",
                  [
                    M.get (| "expr_29" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_30" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_33"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_31" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int8",
                      [
                        M.get (| "expr_32" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_33" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_34"],
                Some (M.call (|
                  "constant_ONE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_35"],
                Some (M.call (|
                  "constant_ONE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_36"],
                Some (M.call (|
                  "fun_mul",
                  [
                    M.get (| "expr_34" |);
                    M.get (| "expr_35" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_37"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_36" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_38"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_39"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_37" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_1_by_1_to_int8",
                      [
                        M.get (| "expr_38" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_39" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_40"],
                Some (M.call (|
                  "constant_THREE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_41"],
                Some (M.call (|
                  "constant_TWO",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_42"],
                Some (M.call (|
                  "fun_mul",
                  [
                    M.get (| "expr_40" |);
                    M.get (| "expr_41" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_43"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_42" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_44"],
                Some ([Literal.number 0x06])
              |) in
            let _ :=
              M.assign (|
                ["expr_45"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_43" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_int8",
                      [
                        M.get (| "expr_44" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_45" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_46"],
                Some (M.call (|
                  "constant_SIX",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_47"],
                Some (M.call (|
                  "constant_TWO",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_48"],
                Some (M.call (|
                  "fun_div",
                  [
                    M.get (| "expr_46" |);
                    M.get (| "expr_47" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_49"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_48" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_50"],
                Some ([Literal.number 0x03])
              |) in
            let _ :=
              M.assign (|
                ["expr_51"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_49" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_3_by_1_to_int8",
                      [
                        M.get (| "expr_50" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_51" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_52"],
                Some (M.call (|
                  "constant_THREE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_53"],
                Some (M.call (|
                  "constant_TWO",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_54"],
                Some (M.call (|
                  "fun_div",
                  [
                    M.get (| "expr_52" |);
                    M.get (| "expr_53" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_55"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_54" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_56"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_57"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_55" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_1_by_1_to_int8",
                      [
                        M.get (| "expr_56" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_57" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_58"],
                Some (M.call (|
                  "constant_SIX",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_59"],
                Some (M.call (|
                  "constant_TWO",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_60"],
                Some (M.call (|
                  "fun_mod",
                  [
                    M.get (| "expr_58" |);
                    M.get (| "expr_59" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_61"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_60" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_62"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_63"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_61" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int8",
                      [
                        M.get (| "expr_62" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_63" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_64"],
                Some (M.call (|
                  "constant_THREE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_65"],
                Some (M.call (|
                  "constant_TWO",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_66"],
                Some (M.call (|
                  "fun_mod",
                  [
                    M.get (| "expr_64" |);
                    M.get (| "expr_65" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_67"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_66" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_68"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_69"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_67" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_1_by_1_to_int8",
                      [
                        M.get (| "expr_68" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_69" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bool",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "iszero",
                      [
                        M.get (| "value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_testComparison",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.call (|
                  "constant_ONE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "constant_ONE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.call (|
                  "fun_eq",
                  [
                    M.get (| "expr" |);
                    M.get (| "expr_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.get (| "expr_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_bool",
                      [
                        M.get (| "expr_3" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_bool",
                      [
                        M.get (| "expr_4" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_5" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some (M.call (|
                  "constant_ONE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some (M.call (|
                  "constant_TWO",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some (M.call (|
                  "fun_eq",
                  [
                    M.get (| "expr_6" |);
                    M.get (| "expr_7" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.get (| "expr_8" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_bool",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_bool",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some (M.call (|
                  "constant_ONE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some (M.call (|
                  "constant_ONE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some (M.call (|
                  "fun_noteq",
                  [
                    M.get (| "expr_12" |);
                    M.get (| "expr_13" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some (M.get (| "expr_14" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_bool",
                      [
                        M.get (| "expr_15" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_bool",
                      [
                        M.get (| "expr_16" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_17" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some (M.call (|
                  "constant_ONE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some (M.call (|
                  "constant_TWO",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some (M.call (|
                  "fun_noteq",
                  [
                    M.get (| "expr_18" |);
                    M.get (| "expr_19" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                Some (M.get (| "expr_20" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_bool",
                      [
                        M.get (| "expr_21" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_bool",
                      [
                        M.get (| "expr_22" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_23" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                Some (M.call (|
                  "constant_ONE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                Some (M.call (|
                  "constant_TWO",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                Some (M.call (|
                  "fun_lt",
                  [
                    M.get (| "expr_24" |);
                    M.get (| "expr_25" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                Some (M.get (| "expr_26" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_bool",
                      [
                        M.get (| "expr_27" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_bool",
                      [
                        M.get (| "expr_28" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_29" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                Some (M.call (|
                  "constant_TWO",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                Some (M.call (|
                  "constant_ONE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                Some (M.call (|
                  "fun_lt",
                  [
                    M.get (| "expr_30" |);
                    M.get (| "expr_31" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_33"],
                Some (M.get (| "expr_32" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_34"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_35"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_bool",
                      [
                        M.get (| "expr_33" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_bool",
                      [
                        M.get (| "expr_34" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_35" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_36"],
                Some (M.call (|
                  "constant_ONE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_37"],
                Some (M.call (|
                  "constant_TWO",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_38"],
                Some (M.call (|
                  "fun_leq",
                  [
                    M.get (| "expr_36" |);
                    M.get (| "expr_37" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_39"],
                Some (M.get (| "expr_38" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_40"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_41"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_bool",
                      [
                        M.get (| "expr_39" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_bool",
                      [
                        M.get (| "expr_40" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_41" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_42"],
                Some (M.call (|
                  "constant_TWO",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_43"],
                Some (M.call (|
                  "constant_ONE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_44"],
                Some (M.call (|
                  "fun_leq",
                  [
                    M.get (| "expr_42" |);
                    M.get (| "expr_43" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_45"],
                Some (M.get (| "expr_44" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_46"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_47"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_bool",
                      [
                        M.get (| "expr_45" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_bool",
                      [
                        M.get (| "expr_46" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_47" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_48"],
                Some (M.call (|
                  "constant_ONE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_49"],
                Some (M.call (|
                  "constant_TWO",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_50"],
                Some (M.call (|
                  "fun_gt",
                  [
                    M.get (| "expr_48" |);
                    M.get (| "expr_49" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_51"],
                Some (M.get (| "expr_50" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_52"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_53"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_bool",
                      [
                        M.get (| "expr_51" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_bool",
                      [
                        M.get (| "expr_52" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_53" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_54"],
                Some (M.call (|
                  "constant_TWO",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_55"],
                Some (M.call (|
                  "constant_ONE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_56"],
                Some (M.call (|
                  "fun_gt",
                  [
                    M.get (| "expr_54" |);
                    M.get (| "expr_55" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_57"],
                Some (M.get (| "expr_56" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_58"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_59"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_bool",
                      [
                        M.get (| "expr_57" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_bool",
                      [
                        M.get (| "expr_58" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_59" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_60"],
                Some (M.call (|
                  "constant_ONE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_61"],
                Some (M.call (|
                  "constant_TWO",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_62"],
                Some (M.call (|
                  "fun_geq",
                  [
                    M.get (| "expr_60" |);
                    M.get (| "expr_61" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_63"],
                Some (M.get (| "expr_62" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_64"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_65"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_bool",
                      [
                        M.get (| "expr_63" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_bool",
                      [
                        M.get (| "expr_64" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_65" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_66"],
                Some (M.call (|
                  "constant_TWO",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_67"],
                Some (M.call (|
                  "constant_ONE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_68"],
                Some (M.call (|
                  "fun_geq",
                  [
                    M.get (| "expr_66" |);
                    M.get (| "expr_67" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_69"],
                Some (M.get (| "expr_68" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_70"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_71"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_bool",
                      [
                        M.get (| "expr_69" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_bool",
                      [
                        M.get (| "expr_70" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_71" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_minus_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_1_by_1_to_int8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_minus_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_minus_by_to_t_int8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_testBitwise",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.call (|
                  "constant_ONE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "constant_TWO",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.call (|
                  "fun_bitor",
                  [
                    M.get (| "expr" |);
                    M.get (| "expr_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some ([Literal.number 0x03])
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_3" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_3_by_1_to_int8",
                      [
                        M.get (| "expr_4" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_5" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some (M.call (|
                  "constant_ONE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some (M.call (|
                  "constant_ZERO",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some (M.call (|
                  "fun_bitor",
                  [
                    M.get (| "expr_6" |);
                    M.get (| "expr_7" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_8" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_1_by_1_to_int8",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some (M.call (|
                  "constant_ONE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some (M.call (|
                  "constant_THREE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some (M.call (|
                  "fun_bitand",
                  [
                    M.get (| "expr_12" |);
                    M.get (| "expr_13" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_14" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_15" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_1_by_1_to_int8",
                      [
                        M.get (| "expr_16" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_17" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some (M.call (|
                  "constant_ONE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some (M.call (|
                  "constant_ONE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some (M.call (|
                  "fun_bitand",
                  [
                    M.get (| "expr_18" |);
                    M.get (| "expr_19" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_20" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_21" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_1_by_1_to_int8",
                      [
                        M.get (| "expr_22" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_23" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                Some (M.call (|
                  "constant_TWO",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                Some (M.call (|
                  "constant_TWO",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                Some (M.call (|
                  "fun_bitxor",
                  [
                    M.get (| "expr_24" |);
                    M.get (| "expr_25" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_26" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_27" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int8",
                      [
                        M.get (| "expr_28" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_29" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                Some (M.call (|
                  "constant_TWO",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                Some (M.call (|
                  "constant_ONE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                Some (M.call (|
                  "fun_bitxor",
                  [
                    M.get (| "expr_30" |);
                    M.get (| "expr_31" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_33"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_32" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_34"],
                Some ([Literal.number 0x03])
              |) in
            let _ :=
              M.assign (|
                ["expr_35"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_33" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_3_by_1_to_int8",
                      [
                        M.get (| "expr_34" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_35" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_36"],
                Some (M.call (|
                  "constant_ZERO",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_37"],
                Some (M.call (|
                  "fun_bitnot",
                  [
                    M.get (| "expr_36" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_38"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_37" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_39"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_40"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_38" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_1_by_1_to_int8",
                      [
                        M.get (| "expr_39" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_40" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_41"],
                Some (M.call (|
                  "constant_ONE",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_42"],
                Some (M.call (|
                  "fun_bitnot",
                  [
                    M.get (| "expr_41" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_43"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_42" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_44"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_45"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_43" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int8",
                      [
                        M.get (| "expr_44" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_45" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_46"],
                Some (M.call (|
                  "constant_TWO",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_47"],
                Some (M.call (|
                  "fun_bitnot",
                  [
                    M.get (| "expr_46" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_48"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_47" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_49"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 2]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_50"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_48" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_minus_by_to_t_int8",
                      [
                        M.get (| "expr_49" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_50" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_userDefinedValueType_Int",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x11",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x11]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_add_int8",
          ["x"; "y"],
          ["sum"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["x"],
                M.call (|
                  "cleanup_int8",
                  [
                    M.get (| "x" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["y"],
                M.call (|
                  "cleanup_int8",
                  [
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["sum"],
                M.call (|
                  "add",
                  [
                    M.get (| "x" |);
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "sgt",
                      [
                        M.get (| "sum" |);
                        [Literal.number 0x7f]
                      ]
                    |);
                    M.call (|
                      "slt",
                      [
                        M.get (| "sum" |);
                        M.call (|
                          "not",
                          [
                            [Literal.number 127]
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_add",
          ["var_x"; "var_y"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_userDefinedValueType_Int"],
                Some (M.call (|
                  "zero_value_for_split_userDefinedValueType_Int",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_userDefinedValueType_Int" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_x" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_y" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.call (|
                  "checked_add_int8",
                  [
                    M.get (| "expr_1" |);
                    M.get (| "expr_3" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_5" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_sub_int8",
          ["x"; "y"],
          ["diff"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["x"],
                M.call (|
                  "cleanup_int8",
                  [
                    M.get (| "x" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["y"],
                M.call (|
                  "cleanup_int8",
                  [
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["diff"],
                M.call (|
                  "sub",
                  [
                    M.get (| "x" |);
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "slt",
                      [
                        M.get (| "diff" |);
                        M.call (|
                          "not",
                          [
                            [Literal.number 127]
                          ]
                        |)
                      ]
                    |);
                    M.call (|
                      "sgt",
                      [
                        M.get (| "diff" |);
                        [Literal.number 0x7f]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_sub",
          ["var_x"; "var_y"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_t_userDefinedValueType_Int"],
                Some (M.call (|
                  "zero_value_for_split_userDefinedValueType_Int",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_t_userDefinedValueType_Int" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_x" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_y" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.call (|
                  "checked_sub_int8",
                  [
                    M.get (| "expr_1" |);
                    M.get (| "expr_3" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_5" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "negate_int8",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_int8",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "eq",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 127]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "sub",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_unsub",
          ["var_x"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_userDefinedValueType_Int"],
                Some (M.call (|
                  "zero_value_for_split_userDefinedValueType_Int",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_userDefinedValueType_Int" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_x" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.call (|
                  "negate_int8",
                  [
                    M.get (| "expr_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_3" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_mul_int8",
          ["x"; "y"],
          ["product"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["x"],
                M.call (|
                  "cleanup_int8",
                  [
                    M.get (| "x" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["y"],
                M.call (|
                  "cleanup_int8",
                  [
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["product_raw"],
                Some (M.call (|
                  "mul",
                  [
                    M.get (| "x" |);
                    M.get (| "y" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["product"],
                M.call (|
                  "cleanup_int8",
                  [
                    M.get (| "product_raw" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "product" |);
                        M.get (| "product_raw" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_mul",
          ["var_x"; "var_y"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_userDefinedValueType_Int"],
                Some (M.call (|
                  "zero_value_for_split_userDefinedValueType_Int",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_userDefinedValueType_Int" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_x" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_y" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.call (|
                  "checked_mul_int8",
                  [
                    M.get (| "expr_1" |);
                    M.get (| "expr_3" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_5" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x12",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x12]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_div_int8",
          ["x"; "y"],
          ["r"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["x"],
                M.call (|
                  "cleanup_int8",
                  [
                    M.get (| "x" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["y"],
                M.call (|
                  "cleanup_int8",
                  [
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "y" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x12",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "and",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "x" |);
                        M.call (|
                          "not",
                          [
                            [Literal.number 127]
                          ]
                        |)
                      ]
                    |);
                    M.call (|
                      "eq",
                      [
                        M.get (| "y" |);
                        M.call (|
                          "sub",
                          [
                            [Literal.number 0];
                            [Literal.number 1]
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["r"],
                M.call (|
                  "sdiv",
                  [
                    M.get (| "x" |);
                    M.get (| "y" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_div",
          ["var_x"; "var_y"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_userDefinedValueType_Int"],
                Some (M.call (|
                  "zero_value_for_split_userDefinedValueType_Int",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_userDefinedValueType_Int" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_x" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_y" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.call (|
                  "checked_div_int8",
                  [
                    M.get (| "expr_1" |);
                    M.get (| "expr_3" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_5" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "mod_int8",
          ["x"; "y"],
          ["r"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["x"],
                M.call (|
                  "cleanup_int8",
                  [
                    M.get (| "x" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["y"],
                M.call (|
                  "cleanup_int8",
                  [
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "y" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x12",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["r"],
                M.call (|
                  "smod",
                  [
                    M.get (| "x" |);
                    M.get (| "y" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_mod",
          ["var_x"; "var_y"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_userDefinedValueType_Int"],
                Some (M.call (|
                  "zero_value_for_split_userDefinedValueType_Int",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_userDefinedValueType_Int" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_x" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_y" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.call (|
                  "mod_int8",
                  [
                    M.get (| "expr_1" |);
                    M.get (| "expr_3" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_5" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_bool",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_eq",
          ["var_x"; "var_y"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_t_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_t_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_x" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_y" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_3" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_4" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_noteq",
          ["var_x"; "var_y"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_x" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_y" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_int8",
                          [
                            M.get (| "expr_1" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_int8",
                          [
                            M.get (| "expr_3" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_4" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_lt",
          ["var_x"; "var_y"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_x" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_y" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.call (|
                  "slt",
                  [
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_3" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_4" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_leq",
          ["var_x"; "var_y"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_x" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_y" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.call (|
                  "iszero",
                  [
                    M.call (|
                      "sgt",
                      [
                        M.call (|
                          "cleanup_int8",
                          [
                            M.get (| "expr_1" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_int8",
                          [
                            M.get (| "expr_3" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_4" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_gt",
          ["var_x"; "var_y"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_x" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_y" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.call (|
                  "sgt",
                  [
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_3" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_4" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_geq",
          ["var_x"; "var_y"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_x" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_y" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.call (|
                          "cleanup_int8",
                          [
                            M.get (| "expr_1" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_int8",
                          [
                            M.get (| "expr_3" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_4" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_bitor",
          ["var_x"; "var_y"],
          ["var_"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_userDefinedValueType_Int"],
                Some (M.call (|
                  "zero_value_for_split_userDefinedValueType_Int",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "zero_userDefinedValueType_Int" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_x" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_y" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.call (|
                  "or",
                  [
                    M.get (| "expr_1" |);
                    M.get (| "expr_3" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "expr_5" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_bitand",
          ["var_x"; "var_y"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_userDefinedValueType_Int"],
                Some (M.call (|
                  "zero_value_for_split_userDefinedValueType_Int",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_userDefinedValueType_Int" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_x" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_y" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.call (|
                  "and",
                  [
                    M.get (| "expr_1" |);
                    M.get (| "expr_3" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_5" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_bitxor",
          ["var_x"; "var_y"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_userDefinedValueType_Int"],
                Some (M.call (|
                  "zero_value_for_split_userDefinedValueType_Int",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_userDefinedValueType_Int" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_x" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_y" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.call (|
                  "xor",
                  [
                    M.get (| "expr_1" |);
                    M.get (| "expr_3" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_5" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_bitnot",
          ["var_x"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_userDefinedValueType_Int"],
                Some (M.call (|
                  "zero_value_for_split_userDefinedValueType_Int",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_userDefinedValueType_Int" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_x" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.call (|
                  "cleanup_int8",
                  [
                    M.call (|
                      "not",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "convert_int8_to_int8",
                  [
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_3" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a2646970667358221220491f1c63e9b966087f9279a032f30e3310e1c53b76264783420064ebd73b2ba364736f6c634300081b0033".
  End C_785_deployed.
End C_785.
