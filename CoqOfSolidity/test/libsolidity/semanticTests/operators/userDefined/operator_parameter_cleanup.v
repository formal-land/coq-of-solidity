(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

Axiom user_type_U8 : Ty.path "U8" = Ty.path "uint8".
(* Beginning of a node! *)
id: 7
src: 18:39:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 6
src: 47:2:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 5
src: 47:2:0
nodeType: IdentifierPath
name: U8
nameLocations: [47:2:0, ]
referencedDeclaration: 2

referencedDeclaration: 2
typeDescriptions: typeString U8typeIdentifier st_userDefinedValueType$_U8_$2

functionList: [{definition: (* Beginning of a node! *)
id: 3
src: 25:1:0
nodeType: IdentifierPath
name: f
nameLocations: [25:1:0, ]
referencedDeclaration: 18
, operator: ~, }, {definition: (* Beginning of a node! *)
id: 4
src: 33:3:0
nodeType: IdentifierPath
name: add
nameLocations: [33:3:0, ]
referencedDeclaration: 32
, operator: +, }, ]
global: 1

Definition f (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      (* Beginning of a node! *)
id: 16
src: 102:118:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 207:1:0declaration: 10isSlot: isOffset: alueSize: src: 198:1:0declaration: 14isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
Definition add (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      (* Beginning of a node! *)
id: 30
src: 275:59:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 307:1:0declaration: 21isSlot: isOffset: alueSize: src: 320:1:0declaration: 21isSlot: isOffset: alueSize: src: 294:1:0declaration: 28isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
(* Contract *)
Module C.
  Definition testUnary (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "a" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 45
src: 431:44:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 454:1:0declaration: 43isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.un_op (|
              true,
              "~",
              M.get_name (| "a" |)
            |),
            M.call (|
              M.get_name (| "f" |),
              [
                M.get_name (| "a" |)
              ]
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testBinary (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "a" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "b" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 71
src: 666:68:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 689:1:0declaration: 65isSlot: isOffset: alueSize: src: 713:1:0declaration: 69isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.bin_op (|
              "+",
              M.get_name (| "a" |),
              M.get_name (| "b" |)
            |),
            M.call (|
              M.get_name (| "add" |),
              [
                M.get_name (| "a" |),
                M.get_name (| "b" |)
              ]
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
