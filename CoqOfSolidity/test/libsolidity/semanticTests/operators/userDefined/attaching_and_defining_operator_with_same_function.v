(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

Axiom user_type_Int : Ty.path "Int" = Ty.path "int16".
(* Beginning of a node! *)
id: 7
src: 20:37:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 6
src: 46:3:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 5
src: 46:3:0
nodeType: IdentifierPath
name: Int
nameLocations: [46:3:0, ]
referencedDeclaration: 2

referencedDeclaration: 2
typeDescriptions: typeString InttypeIdentifier st_userDefinedValueType$_Int_$2

functionList: [{definition: (* Beginning of a node! *)
id: 3
src: 27:3:0
nodeType: IdentifierPath
name: add
nameLocations: [27:3:0, ]
referencedDeclaration: 33
, operator: +, }, {function: (* Beginning of a node! *)
id: 4
src: 37:3:0
nodeType: IdentifierPath
name: add
nameLocations: [37:3:0, ]
referencedDeclaration: 33
, }, ]
global: 1

Definition add (α : list Value.t) : M :=
  match α with
  | [_a, _b] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "+",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "_a" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "_b" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.call (|
              M.member_access (|
                M.get_name (| "Int" |),
                "wrap"
              |),
              [
                Value.Integer 5
              ]
            |),
            M.call (|
              M.member_access (|
                M.get_name (| "Int" |),
                "wrap"
              |),
              [
                Value.Integer 5
              ]
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "wrap"
                |),
                [
                  Value.Integer 7
                ]
              |),
              "add"
            |),
            [
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "wrap"
                |),
                [
                  Value.Integer 6
                ]
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
