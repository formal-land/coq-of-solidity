(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

Axiom user_type_U8 : Ty.path "U8" = Ty.path "uint8".
Definition checkedAdd (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "U8" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "+",
              M.call (|
                M.member_access (|
                  M.get_name (| "U8" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "U8" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
(* Beginning of a node! *)
id: 32
src: 123:38:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 31
src: 151:2:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 30
src: 151:2:0
nodeType: IdentifierPath
name: U8
nameLocations: [151:2:0, ]
referencedDeclaration: 2

referencedDeclaration: 2
typeDescriptions: typeString U8typeIdentifier st_userDefinedValueType$_U8_$2

functionList: [{definition: (* Beginning of a node! *)
id: 29
src: 130:10:0
nodeType: IdentifierPath
name: checkedAdd
nameLocations: [130:10:0, ]
referencedDeclaration: 28
, operator: +, }, ]
global: 1

(* Contract *)
Module C.
  Definition testCheckedOperator (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.call (|
              M.member_access (|
                M.get_name (| "U8" |),
                "wrap"
              |),
              [
                Value.Integer 250
              ]
            |),
            M.call (|
              M.member_access (|
                M.get_name (| "U8" |),
                "wrap"
              |),
              [
                Value.Integer 10
              ]
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testCheckedOperatorInUncheckedBlock (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        let _ :=
          M.return_ (|
            M.bin_op (|
              "+",
              M.call (|
                M.member_access (|
                  M.get_name (| "U8" |),
                  "wrap"
                |),
                [
                  Value.Integer 250
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "U8" |),
                  "wrap"
                |),
                [
                  Value.Integer 10
                ]
              |)
            |)
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
