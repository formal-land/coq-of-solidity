(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

Definition longdata (α : list Value.t) : M :=
  match α with
  | [] =>
    let _ :=
      M.return_ (|
        Value.String "xasopca.pngaibngidak.jbtnudak.cAP.BRRSMCPJAGPD KIAJDOMHUKR,SCPIDxasopca.pngaibngidak.jbtnudak.cAP.BRRSMCPJAGPD KIAJDOMHUKR,SCPIDM,SEYBDXCNTKIMNJGO;DUIAQBQUEHAKMPGIDSAJCOUKANJBCUEBKNA.GIAKMV.TIAJMO<KXBANJCPGUD ABKCJIDHA NKIMAJU,EKAMHSO;PYCAKUM,L.UCA MR;KITAM,SEYBDXCNTKIMNJGO;DUIAQBQUEHAKMPGIDSAJCOUKANJBCUEBKNA.GIAKMV.TIAJMO<KXBANJCPGUD ABKCJIDHA NKIMAJU,EKAMHSO;PYCAKUM,L.UCA MR;KITA .RPOKIDAS,.CKUMT.,ORKAD ,NOKIDHA .CGKIAD OVHAMS CUAOGT DAKN OITxasopca.pngaibngidak.jbtnudak.cAP.BRRSMCPJAGPD KIAJDOMHUKR,SCPIDM,SEYBDXCNTKIMNJGO;DUIAQBQUEHAKMPGIDSAJCOUKANJBCUEBKNA.GIAKMV.TIAJMO<KXBANJCPGUD ABKCJIDHA NKIMAJU,EKAMHSO;PYCAKUM,L.UCA MR;KITAapibakrpidbacnidkacjadtnpdkylca.,jda,r.kuadc,jdlkjd',c'dj, ncg danosumantkudkc,djntudkantuadnc,ui,c.ud,.nujdncud,j.rsch'pkl.'pih"
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.
(* Struct S *)
(* Beginning of a node! *)
id: 18
src: 999:25:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 17
src: 1022:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 16
src: 1022:1:0
nodeType: IdentifierPath
name: S
nameLocations: [1022:1:0, ]
referencedDeclaration: 14

referencedDeclaration: 14
typeDescriptions: typeString struct StypeIdentifier st_struct$_S_$14_storage_ptr

functionList: [{function: (* Beginning of a node! *)
id: 15
src: 1007:8:0
nodeType: IdentifierPath
name: longdata
nameLocations: [1007:8:0, ]
referencedDeclaration: 11
, }, ]
global: 0

(* Contract *)
Module C.
  Definition data : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "data" |),
          M.call (|
            M.member_access (|
              M.get_name (| "x" |),
              "longdata"
            |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 42
src: 1295:48:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 1318:1:0declaration: 40isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          M.bin_op (|
            "<",
            M.get_name (| "x" |),
            M.member_access (|
              M.get_name (| "data" |),
              "length"
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
