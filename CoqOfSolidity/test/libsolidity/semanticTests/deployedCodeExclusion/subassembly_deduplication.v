(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module A.
  Definition longdata (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.String "xasopca.pngaibngidak.jbtnudak.cAP.BRRSMCPJAGPD KIAJDOMHUKR,SCPIDxasopca.pngaibngidak.jbtnudak.cAP.BRRSMCPJAGPD KIAJDOMHUKR,SCPIDM,SEYBDXCNTKIMNJGO;DUIAQBQUEHAKMPGIDSAJCOUKANJBCUEBKNA.GIAKMV.TIAJMO<KXBANJCPGUD ABKCJIDHA NKIMAJU,EKAMHSO;PYCAKUM,L.UCA MR;KITAM,SEYBDXCNTKIMNJGO;DUIAQBQUEHAKMPGIDSAJCOUKANJBCUEBKNA.GIAKMV.TIAJMO<KXBANJCPGUD ABKCJIDHA NKIMAJU,EKAMHSO;PYCAKUM,L.UCA MR;KITA .RPOKIDAS,.CKUMT.,ORKAD ,NOKIDHA .CGKIAD OVHAMS CUAOGT DAKN OITxasopca.pngaibngidak.jbtnudak.cAP.BRRSMCPJAGPD KIAJDOMHUKR,SCPIDM,SEYBDXCNTKIMNJGO;DUIAQBQUEHAKMPGIDSAJCOUKANJBCUEBKNA.GIAKMV.TIAJMO<KXBANJCPGUD ABKCJIDHA NKIMAJU,EKAMHSO;PYCAKUM,L.UCA MR;KITAapibakrpidbacnidkacjadtnpdkylca.,jda,r.kuadc,jdlkjd',c'dj, ncg danosumantkudkc,djntudkantuadnc,ui,c.ud,.nujdncud,j.rsch'pkl.'pih"
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End A.

(* Contract *)
Module C.
  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition a (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                M.get_name (| "A" |)
              ]
            |),
            "creationCode"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition b (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 31
src: 1195:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 30
src: 1195:1:0
nodeType: IdentifierPath
name: A
nameLocations: [1195:1:0, ]
referencedDeclaration: 9

referencedDeclaration: 9
typeDescriptions: typeString contract AtypeIdentifier st_contract$_A_$9

,
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 44
src: 1280:48:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 1303:1:0declaration: 42isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          M.bin_op (|
            "&&",
            M.bin_op (|
              "<",
              M.member_access (|
                M.member_access (|
                  M.call (|
                    M.get_name (| "type" |),
                    [
                      M.get_name (| "A" |)
                    ]
                  |),
                  "creationCode"
                |),
                "length"
              |),
              M.get_name (| "x" |)
            |),
            M.bin_op (|
              "<",
              M.get_name (| "x" |),
              M.bin_op (|
                "*",
                Value.Integer 2,
                M.member_access (|
                  M.member_access (|
                    M.call (|
                      M.get_name (| "type" |),
                      [
                        M.get_name (| "A" |)
                      ]
                    |),
                    "creationCode"
                  |),
                  "length"
                |)
              |)
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
