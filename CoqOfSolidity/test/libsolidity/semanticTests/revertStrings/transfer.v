(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module A.
  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "revert" |),
          [
            Value.String "no_receive"
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End A.

(* Contract *)
Module C.
  Definition a : Value.t :=
    M.call (|
      NewExpression (* Beginning of a node! *)
id: 13
src: 97:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 12
src: 97:1:0
nodeType: IdentifierPath
name: A
nameLocations: [97:1:0, ]
referencedDeclaration: 9

referencedDeclaration: 9
typeDescriptions: typeString contract AtypeIdentifier st_contract$_A_$9

,
      []
    |).

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.call (|
              Ty.path "address",
              [
                M.get_name (| "a" |)
              ]
            |),
            "transfer"
          |),
          [
            Value.Integer 1
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.call (|
              Ty.path "address",
              [
                M.get_name (| "a" |)
              ]
            |),
            "transfer"
          |),
          [
            Value.Integer 100
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.call (|
              Ty.path "address",
              [
                M.get_name (| "this" |)
              ]
            |),
            "balance"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
