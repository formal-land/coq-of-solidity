(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module Flow_99.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            [

            ]
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                [

                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.call (|
          "constructor_Flow",
          [

          ]
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          M.call (|
            "allocate_unbounded",
            [

            ]
          |)
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "466c6f775f39395f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "466c6f775f39395f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "466c6f775f39395f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_uint16",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.call (|
                "and",
                [
                  M.get (| "value" |);
                  [Literal.number 0xffff]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "identity",
        ["value"],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_by_to_uint16",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint16",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "panic_error_0x32",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    [Literal.number 0x4e487b71]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 4];
                [Literal.number 0x32]
              ]
            |) in
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0x24]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_length_array_struct_S_storage",
        ["value"],
        ["length"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["length"],
              [Literal.number 0x02]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_dataslot_array_struct_S_storage",
        ["ptr"],
        ["data"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["data"],
              M.get (| "ptr" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "storage_array_index_access_struct_S",
        ["array"; "index"],
        ["slot";
    "offset"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["arrayLength"],
              M.call (|
                "array_length_array_struct_S_storage",
                [
                  M.get (| "array" |)
                ]
              |)
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "lt",
                    [
                      M.get (| "index" |);
                      M.get (| "arrayLength" |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x32",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["dataArea"],
              M.call (|
                "array_dataslot_array_struct_S_storage",
                [
                  M.get (| "array" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["slot"],
              M.call (|
                "add",
                [
                  M.get (| "dataArea" |);
                  M.call (|
                    "mul",
                    [
                      M.get (| "index" |);
                      [Literal.number 1]
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["offset"],
              [Literal.number 0]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_left",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shl",
                [
                  [Literal.number 0];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_byte_slice_shift",
        ["value"; "toInsert"],
        ["result"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["mask"],
              [Literal.number 65535]
            |) in
          let _ :=
            M.declare (|
              ["toInsert"],
              M.call (|
                "shift_left",
                [
                  M.get (| "toInsert" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "and",
                [
                  M.get (| "value" |);
                  M.call (|
                    "not",
                    [
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["result"],
              M.call (|
                "or",
                [
                  M.get (| "value" |);
                  M.call (|
                    "and",
                    [
                      M.get (| "toInsert" |);
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_uint16_to_uint16",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint16",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_uint16",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "prepare_store_uint16",
        ["value"],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_storage_value_offsett_uint16_to_uint16",
        ["slot"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["convertedValue"],
              M.call (|
                "convert_uint16_to_uint16",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "sstore",
              [
                M.get (| "slot" |);
                M.call (|
                  "update_byte_slice_shift",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |);
                    M.call (|
                      "prepare_store_uint16",
                      [
                        M.get (| "convertedValue" |)
                      ]
                    |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_left_80",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shl",
                [
                  [Literal.number 80];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_byte_slice_shift_10",
        ["value"; "toInsert"],
        ["result"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["mask"],
              [Literal.number 0xffff00000000000000000000]
            |) in
          let _ :=
            M.declare (|
              ["toInsert"],
              M.call (|
                "shift_left_80",
                [
                  M.get (| "toInsert" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "and",
                [
                  M.get (| "value" |);
                  M.call (|
                    "not",
                    [
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["result"],
              M.call (|
                "or",
                [
                  M.get (| "value" |);
                  M.call (|
                    "and",
                    [
                      M.get (| "toInsert" |);
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_storage_value_offsett_uint16_to_t_uint16",
        ["slot"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["convertedValue"],
              M.call (|
                "convert_uint16_to_uint16",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "sstore",
              [
                M.get (| "slot" |);
                M.call (|
                  "update_byte_slice_shift_10",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |);
                    M.call (|
                      "prepare_store_uint16",
                      [
                        M.get (| "convertedValue" |)
                      ]
                    |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_function_internal_pure_returns_uint256_to_function_internal_nonpayable_returns_uint",
        ["functionId"],
        ["outFunctionId"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["outFunctionId"],
              M.get (| "functionId" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_left_16",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shl",
                [
                  [Literal.number 16];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_byte_slice_shift_2",
        ["value"; "toInsert"],
        ["result"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["mask"],
              M.call (|
                "sub",
                [
                  M.call (|
                    "shl",
                    [
                      [Literal.number 80];
                      [Literal.number 1]
                    ]
                  |);
                  [Literal.number 65536]
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["toInsert"],
              M.call (|
                "shift_left_16",
                [
                  M.get (| "toInsert" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "and",
                [
                  M.get (| "value" |);
                  M.call (|
                    "not",
                    [
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["result"],
              M.call (|
                "or",
                [
                  M.get (| "value" |);
                  M.call (|
                    "and",
                    [
                      M.get (| "toInsert" |);
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_function_internal_nonpayable_returns_uint256_to_function_internal_nonpayable_returns_uint",
        ["functionId"],
        ["outFunctionId"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["outFunctionId"],
              M.get (| "functionId" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "prepare_store_function_internal_nonpayable_returns_uint",
        ["value"],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_storage_value_offsett_function_internal_nonpayable_returns_uint256_to_function_internal_nonpayable_returns_uint",
        ["slot"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["convertedValue"],
              M.call (|
                "convert_function_internal_nonpayable_returns_uint256_to_function_internal_nonpayable_returns_uint",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "sstore",
              [
                M.get (| "slot" |);
                M.call (|
                  "update_byte_slice_shift_2",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |);
                    M.call (|
                      "prepare_store_function_internal_nonpayable_returns_uint",
                      [
                        M.get (| "convertedValue" |)
                      ]
                    |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "constructor_Flow",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["expr"],
              [Literal.number 0xff07]
            |) in
          let _ :=
            M.assign (|
              ["_1"],
              M.call (|
                "convert_rational_by_to_uint16",
                [
                  M.get (| "expr" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_slot"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["expr_35_slot"],
              M.get (| "_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_1"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["_2"; "_3"],
              M.call (|
                "storage_array_index_access_struct_S",
                [
                  M.get (| "expr_35_slot" |);
                  M.get (| "expr_1" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_6_slot"],
              M.get (| "_2" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_37_slot"],
              M.get (| "_6_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["_4"],
              M.call (|
                "add",
                [
                  M.get (| "expr_37_slot" |);
                  [Literal.number 0]
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_uint16_to_uint16",
              [
                M.get (| "_4" |);
                M.get (| "_1" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_2"],
              [Literal.number 0xff07]
            |) in
          let _ :=
            M.assign (|
              ["_5"],
              M.call (|
                "convert_rational_by_to_uint16",
                [
                  M.get (| "expr_2" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_9_slot"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["expr_42_slot"],
              M.get (| "_9_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_3"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["_6"; "_7"],
              M.call (|
                "storage_array_index_access_struct_S",
                [
                  M.get (| "expr_42_slot" |);
                  M.get (| "expr_3" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_12_slot"],
              M.get (| "_6" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_44_slot"],
              M.get (| "_12_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["_8"],
              M.call (|
                "add",
                [
                  M.get (| "expr_44_slot" |);
                  [Literal.number 0]
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_uint16_to_t_uint16",
              [
                M.get (| "_8" |);
                M.get (| "_5" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_functionIdentifier"],
              [Literal.number 2]
            |) in
          let _ :=
            M.assign (|
              ["_functionIdentifier"],
              M.call (|
                "convert_function_internal_pure_returns_uint256_to_function_internal_nonpayable_returns_uint",
                [
                  M.get (| "expr_functionIdentifier" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_15_slot"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["expr_49_slot"],
              M.get (| "_15_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_4"],
              [Literal.number 0x01]
            |) in
          let _ :=
            M.assign (|
              ["_9"; "_10"],
              M.call (|
                "storage_array_index_access_struct_S",
                [
                  M.get (| "expr_49_slot" |);
                  M.get (| "expr_4" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_18_slot"],
              M.get (| "_9" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_51_slot"],
              M.get (| "_18_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["_11"],
              M.call (|
                "add",
                [
                  M.get (| "expr_51_slot" |);
                  [Literal.number 0]
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_function_internal_nonpayable_returns_uint256_to_function_internal_nonpayable_returns_uint",
              [
                M.get (| "_11" |);
                M.get (| "_functionIdentifier" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_5"],
              [Literal.number 0xff07]
            |) in
          let _ :=
            M.assign (|
              ["_12"],
              M.call (|
                "convert_rational_by_to_uint16",
                [
                  M.get (| "expr_5" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_21_slot"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["expr_slot"],
              M.get (| "_21_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_6"],
              [Literal.number 0x01]
            |) in
          let _ :=
            M.assign (|
              ["_13"; "_14"],
              M.call (|
                "storage_array_index_access_struct_S",
                [
                  M.get (| "expr_slot" |);
                  M.get (| "expr_6" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_24_slot"],
              M.get (| "_13" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_58_slot"],
              M.get (| "_24_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["_15"],
              M.call (|
                "add",
                [
                  M.get (| "expr_58_slot" |);
                  [Literal.number 0]
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_uint16_to_uint16",
              [
                M.get (| "_15" |);
                M.get (| "_12" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_7"],
              [Literal.number 0xff07]
            |) in
          let _ :=
            M.assign (|
              ["_16"],
              M.call (|
                "convert_rational_by_to_uint16",
                [
                  M.get (| "expr_7" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_27_slot"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["expr_63_slot"],
              M.get (| "_27_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_8"],
              [Literal.number 0x01]
            |) in
          let _ :=
            M.assign (|
              ["_17"; "_18"],
              M.call (|
                "storage_array_index_access_struct_S",
                [
                  M.get (| "expr_63_slot" |);
                  M.get (| "expr_8" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_30_slot"],
              M.get (| "_17" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_65_slot"],
              M.get (| "_30_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["_19"],
              M.call (|
                "add",
                [
                  M.get (| "expr_65_slot" |);
                  [Literal.number 0]
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_uint16_to_t_uint16",
              [
                M.get (| "_19" |);
                M.get (| "_16" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_74_functionIdentifier"],
              [Literal.number 1]
            |) in
          let _ :=
            M.assign (|
              ["_32_functionIdentifier"],
              M.call (|
                "convert_function_internal_pure_returns_uint256_to_function_internal_nonpayable_returns_uint",
                [
                  M.get (| "expr_74_functionIdentifier" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_33_slot"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["expr_70_slot"],
              M.get (| "_33_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_9"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["_20"; "_21"],
              M.call (|
                "storage_array_index_access_struct_S",
                [
                  M.get (| "expr_70_slot" |);
                  M.get (| "expr_9" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_36_slot"],
              M.get (| "_20" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_72_slot"],
              M.get (| "_36_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["_22"],
              M.call (|
                "add",
                [
                  M.get (| "expr_72_slot" |);
                  [Literal.number 0]
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_function_internal_nonpayable_returns_uint256_to_function_internal_nonpayable_returns_uint",
              [
                M.get (| "_22" |);
                M.get (| "_32_functionIdentifier" |)
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module Flow_99_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  M.call (|
                    "shift_right_224_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x26121ff0),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_f",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            [

            ]
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_224_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_uint256",
          ["headStart"; "value0"; "value1"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_f",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"],
                M.call (|
                  "fun_f",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_uint256_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_Y",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_t_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_t_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.call (|
                  "convert_t_rational_by_to_t_uint256",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_X",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.call (|
                  "convert_rational_by_to_uint256",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x32",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x32]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_struct_S_storage",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x02]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_struct_S_storage",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_struct_S",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                M.call (|
                  "array_length_array_struct_S_storage",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                M.call (|
                  "array_dataslot_array_struct_S_storage",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 16];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_function_internal_nonpayable_returns_uint",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_function_internal_nonpayable_returns_uint",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_function_internal_nonpayable_returns_uint",
                  [
                    M.call (|
                      "shift_right_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_function_internal_nonpayable_returns_uint",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offsett_function_internal_nonpayable_returns_uint",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_f",
          [],
          ["var_";
      "var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_1"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_uint256_1" |)
              |) in
            let _ :=
              M.assign (|
                ["_5_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_85_slot"],
                M.get (| "_5_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_1"; "_2"],
                M.call (|
                  "storage_array_index_access_struct_S",
                  [
                    M.get (| "expr_85_slot" |);
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_8_slot"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_87_slot"],
                M.get (| "_8_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_87_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_10_functionIdentifier"],
                M.call (|
                  "read_from_storage_split_offset_function_internal_nonpayable_returns_uint",
                  [
                    M.get (| "_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_functionIdentifier"],
                M.get (| "_10_functionIdentifier" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "dispatch_internal_in_out",
                  [
                    M.get (| "expr_functionIdentifier" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_component"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.assign (|
                ["_11_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_90_slot"],
                M.get (| "_11_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_4"; "_5"],
                M.call (|
                  "storage_array_index_access_struct_S",
                  [
                    M.get (| "expr_90_slot" |);
                    M.get (| "expr_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_slot"],
                M.get (| "_4" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_slot"],
                M.get (| "_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_functionIdentifier"],
                M.call (|
                  "read_from_storage_split_offset_function_internal_nonpayable_returns_uint",
                  [
                    M.get (| "_6" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_93_functionIdentifier"],
                M.get (| "_functionIdentifier" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.call (|
                  "dispatch_internal_in_out",
                  [
                    M.get (| "expr_93_functionIdentifier" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_component_1"],
                M.get (| "expr_3" |)
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "expr_component" |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_component_1" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x51",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x51]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "dispatch_internal_in_out",
          ["fun"],
          ["out"],
          ltac:(M.monadic (
            let _ :=
              M.switch (|
                M.get (| "fun" |),
                [
                  (
                    Some (Literal.number 2),
                    ltac:(M.monadic (
                      let _ :=
                        M.declare (|
                          ["out"],
                          M.call (|
                            "fun_Y",
                            [

                            ]
                          |)
                        |) in
                      tt
                    ))            );
                  (
                    Some (Literal.number 1),
                    ltac:(M.monadic (
                      let _ :=
                        M.declare (|
                          ["out"],
                          M.call (|
                            "fun_X",
                            [

                            ]
                          |)
                        |) in
                      tt
                    ))            );
                  (
                    None,
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "panic_error_0x51",
                          [

                          ]
                        |) in
                      tt
                    ))            )          ]
              |) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a26469706673582212204e744b419361036dd7bb72e7021f51bd54259acdf65149ce329234909294f7c964736f6c634300081b0033".
  End Flow_99_deployed.
End Flow_99.
