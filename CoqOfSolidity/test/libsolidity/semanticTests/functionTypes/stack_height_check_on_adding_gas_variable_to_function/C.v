(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_101.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            [

            ]
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                [

                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          M.call (|
            "allocate_unbounded",
            [

            ]
          |)
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f3130315f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3130315f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3130315f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_101_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x4eaf8b7c),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_test_function",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xb8c9d365),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_h",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xe2179b8e),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_g",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            [

            ]
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bool",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "iszero",
                      [
                        M.get (| "value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bool_to_bool",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_bool",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bool",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_bool_to_bool",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_test_function",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_test_function",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple",
          ["headStart"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_h",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_tuple",
                  [
                    M.get (| "memPos" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_g",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_tuple",
                  [
                    M.get (| "memPos" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_bool",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint160",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "shl",
                          [
                            [Literal.number 160];
                            [Literal.number 1]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint160_to_uint160",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint160",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint160",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint160_to_address",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_uint160",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_contract_C_to_address",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_address",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_address",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "cleanup_uint160",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint32",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bytes4",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "shl",
                      [
                        [Literal.number 224];
                        [Literal.number 0xffffffff]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint32_to_bytes4",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes4",
                  [
                    M.call (|
                      "shift_left",
                      [
                        M.call (|
                          "cleanup_uint32",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x01",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x01]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "assert_helper",
          ["condition"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "condition" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x01",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_test_function",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                M.call (|
                  "zero_value_for_split_bool",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_14_address"],
                M.call (|
                  "address",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_15_address"],
                M.call (|
                  "convert_contract_C_to_address",
                  [
                    M.get (| "expr_14_address" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "expr_15_address" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_17_address"],
                M.call (|
                  "address",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_address"],
                M.call (|
                  "convert_contract_C_to_address",
                  [
                    M.get (| "expr_17_address" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.get (| "expr_address" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_address",
                      [
                        M.get (| "expr" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_address",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.get (| "expr_2" |)
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_3" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["expr_21_address"],
                      M.call (|
                        "address",
                        [

                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_22_address"],
                      M.call (|
                        "convert_contract_C_to_address",
                        [
                          M.get (| "expr_21_address" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_24_address"],
                      M.get (| "expr_22_address" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_4"],
                      M.get (| "expr_24_address" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_26_address"],
                      M.call (|
                        "address",
                        [

                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_27_address"],
                      M.call (|
                        "convert_contract_C_to_address",
                        [
                          M.get (| "expr_26_address" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_5"],
                      M.get (| "expr_27_address" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_6"],
                      M.call (|
                        "eq",
                        [
                          M.call (|
                            "cleanup_address",
                            [
                              M.get (| "expr_4" |)
                            ]
                          |);
                          M.call (|
                            "cleanup_address",
                            [
                              M.get (| "expr_5" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_3"],
                      M.get (| "expr_6" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                M.get (| "expr_3" |)
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_7" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["expr_32_functionSelector"],
                      [Literal.number 0xe2179b8e]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_functionSelector"],
                      M.get (| "expr_32_functionSelector" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_8"],
                      M.call (|
                        "convert_uint32_to_bytes4",
                        [
                          M.get (| "expr_functionSelector" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_37_functionSelector"],
                      [Literal.number 0xe2179b8e]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_9"],
                      M.call (|
                        "convert_uint32_to_bytes4",
                        [
                          M.get (| "expr_37_functionSelector" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_10"],
                      M.call (|
                        "eq",
                        [
                          M.call (|
                            "cleanup_bytes4",
                            [
                              M.get (| "expr_8" |)
                            ]
                          |);
                          M.call (|
                            "cleanup_bytes4",
                            [
                              M.get (| "expr_9" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_7"],
                      M.get (| "expr_10" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_7" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_44_address"],
                M.call (|
                  "address",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_45_address"],
                M.call (|
                  "convert_contract_C_to_address",
                  [
                    M.get (| "expr_44_address" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                M.get (| "expr_45_address" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_47_address"],
                M.call (|
                  "address",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_48_address"],
                M.call (|
                  "convert_contract_C_to_address",
                  [
                    M.get (| "expr_47_address" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                M.get (| "expr_48_address" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_address",
                      [
                        M.get (| "expr_11" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_address",
                      [
                        M.get (| "expr_12" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                M.get (| "expr_13" |)
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_14" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["expr_51_address"],
                      M.call (|
                        "address",
                        [

                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_52_address"],
                      M.call (|
                        "convert_contract_C_to_address",
                        [
                          M.get (| "expr_51_address" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_54_address"],
                      M.get (| "expr_52_address" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_15"],
                      M.get (| "expr_54_address" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_56_address"],
                      M.call (|
                        "address",
                        [

                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_57_address"],
                      M.call (|
                        "convert_contract_C_to_address",
                        [
                          M.get (| "expr_56_address" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_16"],
                      M.get (| "expr_57_address" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_17"],
                      M.call (|
                        "eq",
                        [
                          M.call (|
                            "cleanup_address",
                            [
                              M.get (| "expr_15" |)
                            ]
                          |);
                          M.call (|
                            "cleanup_address",
                            [
                              M.get (| "expr_16" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_14"],
                      M.get (| "expr_17" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                M.get (| "expr_14" |)
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_18" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["expr_62_functionSelector"],
                      [Literal.number 0xb8c9d365]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_64_functionSelector"],
                      M.get (| "expr_62_functionSelector" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_19"],
                      M.call (|
                        "convert_uint32_to_bytes4",
                        [
                          M.get (| "expr_64_functionSelector" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_67_functionSelector"],
                      [Literal.number 0xb8c9d365]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_20"],
                      M.call (|
                        "convert_uint32_to_bytes4",
                        [
                          M.get (| "expr_67_functionSelector" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_21"],
                      M.call (|
                        "eq",
                        [
                          M.call (|
                            "cleanup_bytes4",
                            [
                              M.get (| "expr_19" |)
                            ]
                          |);
                          M.call (|
                            "cleanup_bytes4",
                            [
                              M.get (| "expr_20" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_18"],
                      M.get (| "expr_21" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_18" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_74_address"],
                M.call (|
                  "address",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_75_address"],
                M.call (|
                  "convert_contract_C_to_address",
                  [
                    M.get (| "expr_74_address" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_78_address"],
                M.get (| "expr_75_address" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                M.get (| "expr_78_address" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_80_address"],
                M.call (|
                  "address",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_81_address"],
                M.call (|
                  "convert_contract_C_to_address",
                  [
                    M.get (| "expr_80_address" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                M.get (| "expr_81_address" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_address",
                      [
                        M.get (| "expr_22" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_address",
                      [
                        M.get (| "expr_23" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                M.get (| "expr_24" |)
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_25" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["expr_85_functionSelector"],
                      [Literal.number 0xb8c9d365]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_88_functionSelector"],
                      M.get (| "expr_85_functionSelector" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_26"],
                      M.call (|
                        "convert_uint32_to_bytes4",
                        [
                          M.get (| "expr_88_functionSelector" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_91_functionSelector"],
                      [Literal.number 0xb8c9d365]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_27"],
                      M.call (|
                        "convert_uint32_to_bytes4",
                        [
                          M.get (| "expr_91_functionSelector" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_28"],
                      M.call (|
                        "eq",
                        [
                          M.call (|
                            "cleanup_bytes4",
                            [
                              M.get (| "expr_26" |)
                            ]
                          |);
                          M.call (|
                            "cleanup_bytes4",
                            [
                              M.get (| "expr_27" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_25"],
                      M.get (| "expr_28" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_25" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_29" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a264697066735822122029b7ba36049f438360af5242d31bea89f94ef8f6500359ef311081ac29d7fd2f64736f6c634300081b0033".
  End C_101_deployed.
End C_101.
