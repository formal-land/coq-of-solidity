(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Library *)
Module Utils.
  Definition reduce (α : list Value.t) : M :=
    match α with
    | [array, f, init] =>
      let _ :=
        (* Beginning of a node! *)
id: 41
src: 189:92:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          M.member_access (|
            M.get_name (| "array" |),
            "length"
          |)
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "i" |)
        |)
body: let _ :=
          M.assign (|
            "=",
            M.get_name (| "init" |),
            M.call (|
              M.get_name (| "f" |),
              [
                M.index_access (|
                  M.get_name (| "array" |),
                  Some (M.get_name (| "i" |))
                |),
                M.get_name (| "init" |)
              ]
            |)
          |) in
        Value.Tuple []
isSimpleCounterLoop: 1
 in
      let _ :=
        M.return_ (|
          M.get_name (| "init" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition sum (α : list Value.t) : M :=
    match α with
    | [a, b] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.get_name (| "a" |),
            M.get_name (| "b" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Utils.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "Utils" |),
              "reduce"
            |),
            [
              M.get_name (| "x" |),
              M.member_access (|
                M.get_name (| "Utils" |),
                "sum"
              |),
              Value.Integer 0
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
