(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Beginning of a node! *)
id: 4
src: 0:14:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 3
src: 12:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 2
src: 12:1:0
nodeType: IdentifierPath
name: I
nameLocations: [12:1:0, ]
referencedDeclaration: 10

referencedDeclaration: 10
typeDescriptions: typeString contract ItypeIdentifier st_contract$_I_$10

libraryName: (* Beginning of a node! *)
id: 1
src: 6:1:0
nodeType: IdentifierPath
name: L
nameLocations: [6:1:0, ]
referencedDeclaration: 24

global: 0

(* Interface *)
Module I.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.
End I.

(* Library *)
Module L.
  Definition execute (α : list Value.t) : M :=
    match α with
    | [i] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "i" |),
              "f"
            |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End L.

(* Contract *)
Module C.
  Definition x (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "i" ],
          M.get_name (| "this" |)
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "i" |),
              "execute"
            |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Integer 7
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
