(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Library *)
Module L.
  Definition f (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.get_name (| "a" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.get_name (| "a" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End L.

(* Contract *)
Module C.
  (* Beginning of a node! *)
id: 24
src: 225:19:0
nodeType: UsingForDirective
typeName: Ty.path "string"
libraryName: (* Beginning of a node! *)
id: 22
src: 231:1:0
nodeType: IdentifierPath
name: L
nameLocations: [231:1:0, ]
referencedDeclaration: 21

global: 0


  Definition s : Value.t :=
    undefined.

  Definition test (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "s" |),
          M.get_name (| "x" |)
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.call (|
              M.member_access (|
                M.get_name (| "s" |),
                "f"
              |),
              []
            |),
            M.call (|
              M.member_access (|
                M.get_name (| "s" |),
                "g"
              |),
              []
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
