(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module E.
  
End E.

(* Library *)
Module L.
  Definition foo (α : list Value.t) : M :=
    match α with
    | [e] =>
      let _ :=
        M.return_ (|
          Value.Integer 42
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End L.

(* Contract *)
Module C.
  (* Beginning of a node! *)
id: 17
src: 125:14:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 16
src: 137:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 15
src: 137:1:0
nodeType: IdentifierPath
name: E
nameLocations: [137:1:0, ]
referencedDeclaration: 1

referencedDeclaration: 1
typeDescriptions: typeString contract EtypeIdentifier st_contract$_E_$1

libraryName: (* Beginning of a node! *)
id: 14
src: 131:1:0
nodeType: IdentifierPath
name: L
nameLocations: [131:1:0, ]
referencedDeclaration: 13

global: 0


  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "e" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 26
src: 203:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 25
src: 203:1:0
nodeType: IdentifierPath
name: E
nameLocations: [203:1:0, ]
referencedDeclaration: 1

referencedDeclaration: 1
typeDescriptions: typeString contract EtypeIdentifier st_contract$_E_$1

,
            []
          |)
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "e" |),
              "foo"
            |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
