(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Library *)
Module L.
  Definition f (α : list Value.t) : M :=
    match α with
    | [_data] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "_data" |),
            Some (Value.Integer 3)
          |),
          Value.Integer 2
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End L.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 25
src: 404:9:0
nodeType: ArrayTypeName
baseType: Ty.path "uint256"
length: 
typeDescriptions: typeString uint256[]typeIdentifier st_array$_t_uint256_$dyn_storage_ptr

,
            [
              Value.Integer 7
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 3)
          |),
          Value.Integer 8
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "L" |),
            "f"
          |),
          [
            M.get_name (| "x" |)
          ]
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 3)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
