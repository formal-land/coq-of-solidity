(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module Test_120.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            []
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                []
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          Some (M.call (|
            "allocate_unbounded",
            []
          |))
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "546573745f3132305f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "546573745f3132305f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "546573745f3132305f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module Test_120_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      []
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  Some (M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x26121ff0),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_f",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            []
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_uint256_uint256_uint256_uint256_uint256",
          ["headStart"; "value0"; "value1"; "value2"; "value3"; "value4"; "value5"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 192]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value2" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 64]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value3" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 96]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value4" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 128]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value5" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 160]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_f",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"; "ret_2"; "ret_3"; "ret_4"; "ret_5"],
                Some (M.call (|
                  "fun_f",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_uint256_uint256_uint256_uint256_uint256_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |);
                    M.get (| "ret_2" |);
                    M.get (| "ret_3" |);
                    M.get (| "ret_4" |);
                    M.get (| "ret_5" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_1_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_type_contract_Lib_to_address",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "round_up_to_mul_of",
          ["value"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "and",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 31]
                      ]
                    |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 31]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "finalize_allocation",
          ["memPtr"; "size"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["newFreePtr"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "memPtr" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "size" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "newFreePtr" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "newFreePtr" |);
                        M.get (| "memPtr" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 64];
                  M.get (| "newFreePtr" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_224",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_mapping_uint256_uint",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_mapping_uint256_uint",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_mapping_uint256_uint",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_mapping_uint256__uint256__fromMemory",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "mload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_mapping_uint256_uint",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_mapping_uint256_uint256_fromMemory",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_mapping_uint256__uint256__fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_mapping_uint256_mapping_uint256_uint",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_0_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_rational_by_to_uint256_library",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "convert_rational_0_by_1_to_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_mapping_uint256_mapping_uint256_uint256__rational_by",
          ["headStart"; "value0"; "value1"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_mapping_uint256_mapping_uint256_uint",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_rational_by_to_uint256_library",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_forward",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["pos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.call (|
                "returndatacopy",
                [
                  M.get (| "pos" |);
                  [Literal.number 0];
                  M.call (|
                    "returndatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "returndatasize",
                    []
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "mapping_index_access_mapping_uint256__uint256__of_rational_by",
          ["slot"; "key"],
          ["dataSlot"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "convert_rational_0_by_1_to_uint256",
                    [
                      M.get (| "key" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0x20];
                  M.get (| "slot" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["dataSlot"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x40]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_shift",
          ["value"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left",
                  [
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint256_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_uint256",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_uint256_to_uint256",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                Some (M.call (|
                  "convert_uint256_to_uint256",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_shift",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.call (|
                        "prepare_store_uint256",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_2_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_2_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_2_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "mapping_index_access_mapping_uint256_uint256_of_rational_by",
          ["slot"; "key"],
          ["dataSlot"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "convert_rational_2_by_1_to_uint256",
                    [
                      M.get (| "key" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0x20];
                  M.get (| "slot" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["dataSlot"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x40]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_23_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_rational_by",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "convert_rational_1_by_1_to_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_mapping_uint256_mapping_uint256_uint256_rational_by",
          ["headStart"; "value0"; "value1"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_mapping_uint256_mapping_uint256_uint",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_rational_by",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_99_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_99_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "mapping_index_access_mapping_uint256__mapping_uint256__uint256___of_rational_by",
          ["slot"; "key"],
          ["dataSlot"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "convert_rational_0_by_1_to_uint256",
                    [
                      M.get (| "key" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0x20];
                  M.get (| "slot" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["dataSlot"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x40]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_0_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_uint256",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint256",
                  [
                    M.call (|
                      "shift_right_0_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_uint256",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offsett_uint256",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "mapping_index_access_t_mapping_t_uint256_t_uint256_of_t_rational_by",
          ["slot"; "key"],
          ["dataSlot"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "convert_rational_1_by_1_to_uint256",
                    [
                      M.get (| "key" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0x20];
                  M.get (| "slot" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["dataSlot"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x40]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "mapping_index_access_mapping_uint256_mapping_uint256_uint256_of_rational_by",
          ["slot"; "key"],
          ["dataSlot"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "convert_rational_1_by_1_to_uint256",
                    [
                      M.get (| "key" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0x20];
                  M.get (| "slot" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["dataSlot"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x40]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_f",
          [],
          ["var";
      "var_";
      "var_1";
      "var_2";
      "var_3";
      "var_4"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_1"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "zero_uint256_1" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_2"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_1"],
                M.get (| "zero_uint256_2" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_t_uint256"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_2"],
                M.get (| "zero_t_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_3"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_3"],
                M.get (| "zero_uint256_3" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_4"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_4"],
                M.get (| "zero_uint256_4" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.call (|
                  "convert_rational_1_by_1_to_uint256",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_42_address"],
                Some (M.call (|
                  "linkersymbol",
                  [
                    [Literal.string "2f686f6d652f6775696c6c61756d652f4465736b746f702f536f6c69646974792f736f6c69646974792f746573742f6c6962736f6c69646974792f73656d616e74696354657374732f6c69627261726965732f7573696e675f6c6962726172795f6d617070696e67735f72657475726e2e736f6c3a4c6962"]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_44_address"],
                Some (M.call (|
                  "convert_type_contract_Lib_to_address",
                  [
                    M.get (| "expr_42_address" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_44_functionSelector"],
                Some ([Literal.number 0x33fc8ce6])
              |) in
            let _ :=
              M.assign (|
                ["_8_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_45_slot"],
                Some (M.get (| "_8_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "_2" |);
                  M.call (|
                    "shift_left_224",
                    [
                      M.get (| "expr_44_functionSelector" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.call (|
                  "abi_encode_mapping_uint256_mapping_uint256_uint256__rational_by",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "_2" |);
                        [Literal.number 4]
                      ]
                    |);
                    M.get (| "expr_45_slot" |);
                    M.get (| "expr_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.call (|
                  "delegatecall",
                  [
                    M.call (|
                      "gas",
                      []
                    |);
                    M.get (| "expr_44_address" |);
                    M.get (| "_2" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_3" |);
                        M.get (| "_2" |)
                      ]
                    |);
                    M.get (| "_2" |);
                    [Literal.number 32]
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "_4" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_forward",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_47_slot"],
                None
              |) in
            let _ :=
              M.if_ (|
                M.get (| "_4" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_5"],
                      Some ([Literal.number 32])
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "gt",
                        [
                          M.get (| "_5" |);
                          M.call (|
                            "returndatasize",
                            []
                          |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["_5"],
                            M.call (|
                              "returndatasize",
                              []
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "finalize_allocation",
                      [
                        M.get (| "_2" |);
                        M.get (| "_5" |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_47_slot"],
                      M.call (|
                        "abi_decode_mapping_uint256_uint256_fromMemory",
                        [
                          M.get (| "_2" |);
                          M.call (|
                            "add",
                            [
                              M.get (| "_2" |);
                              M.get (| "_5" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.call (|
                  "mapping_index_access_mapping_uint256__uint256__of_rational_by",
                  [
                    M.get (| "expr_47_slot" |);
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_uint256_to_uint256",
                [
                  M.get (| "_6" |);
                  M.get (| "_1" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some ([Literal.number 0x2a])
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                Some (M.call (|
                  "convert_rational_by_to_uint256",
                  [
                    M.get (| "expr_3" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_53_address"],
                Some (M.call (|
                  "linkersymbol",
                  [
                    [Literal.string "2f686f6d652f6775696c6c61756d652f4465736b746f702f536f6c69646974792f736f6c69646974792f746573742f6c6962736f6c69646974792f73656d616e74696354657374732f6c69627261726965732f7573696e675f6c6962726172795f6d617070696e67735f72657475726e2e736f6c3a4c6962"]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_address"],
                Some (M.call (|
                  "convert_type_contract_Lib_to_address",
                  [
                    M.get (| "expr_53_address" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_55_functionSelector"],
                Some ([Literal.number 0x33fc8ce6])
              |) in
            let _ :=
              M.assign (|
                ["_15_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_56_slot"],
                Some (M.get (| "_15_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "_8" |);
                  M.call (|
                    "shift_left_224",
                    [
                      M.get (| "expr_55_functionSelector" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                Some (M.call (|
                  "abi_encode_mapping_uint256_mapping_uint256_uint256__rational_by",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "_8" |);
                        [Literal.number 4]
                      ]
                    |);
                    M.get (| "expr_56_slot" |);
                    M.get (| "expr_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_10"],
                Some (M.call (|
                  "delegatecall",
                  [
                    M.call (|
                      "gas",
                      []
                    |);
                    M.get (| "expr_address" |);
                    M.get (| "_8" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_9" |);
                        M.get (| "_8" |)
                      ]
                    |);
                    M.get (| "_8" |);
                    [Literal.number 32]
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "_10" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_forward",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_58_slot"],
                None
              |) in
            let _ :=
              M.if_ (|
                M.get (| "_10" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_11"],
                      Some ([Literal.number 32])
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "gt",
                        [
                          M.get (| "_11" |);
                          M.call (|
                            "returndatasize",
                            []
                          |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["_11"],
                            M.call (|
                              "returndatasize",
                              []
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "finalize_allocation",
                      [
                        M.get (| "_8" |);
                        M.get (| "_11" |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_58_slot"],
                      M.call (|
                        "abi_decode_mapping_uint256_uint256_fromMemory",
                        [
                          M.get (| "_8" |);
                          M.call (|
                            "add",
                            [
                              M.get (| "_8" |);
                              M.get (| "_11" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["_12"],
                Some (M.call (|
                  "mapping_index_access_mapping_uint256_uint256_of_rational_by",
                  [
                    M.get (| "expr_58_slot" |);
                    M.get (| "expr_5" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_uint256_to_uint256",
                [
                  M.get (| "_12" |);
                  M.get (| "_7" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some ([Literal.number 0x17])
              |) in
            let _ :=
              M.assign (|
                ["_13"],
                Some (M.call (|
                  "convert_rational_23_by_1_to_uint256",
                  [
                    M.get (| "expr_6" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_64_address"],
                Some (M.call (|
                  "linkersymbol",
                  [
                    [Literal.string "2f686f6d652f6775696c6c61756d652f4465736b746f702f536f6c69646974792f736f6c69646974792f746573742f6c6962736f6c69646974792f73656d616e74696354657374732f6c69627261726965732f7573696e675f6c6962726172795f6d617070696e67735f72657475726e2e736f6c3a4c6962"]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_66_address"],
                Some (M.call (|
                  "convert_type_contract_Lib_to_address",
                  [
                    M.get (| "expr_64_address" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_66_functionSelector"],
                Some ([Literal.number 0x33fc8ce6])
              |) in
            let _ :=
              M.assign (|
                ["_22_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_67_slot"],
                Some (M.get (| "_22_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_14"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "_14" |);
                  M.call (|
                    "shift_left_224",
                    [
                      M.get (| "expr_66_functionSelector" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_15"],
                Some (M.call (|
                  "abi_encode_mapping_uint256_mapping_uint256_uint256_rational_by",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "_14" |);
                        [Literal.number 4]
                      ]
                    |);
                    M.get (| "expr_67_slot" |);
                    M.get (| "expr_7" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_16"],
                Some (M.call (|
                  "delegatecall",
                  [
                    M.call (|
                      "gas",
                      []
                    |);
                    M.get (| "expr_66_address" |);
                    M.get (| "_14" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_15" |);
                        M.get (| "_14" |)
                      ]
                    |);
                    M.get (| "_14" |);
                    [Literal.number 32]
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "_16" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_forward",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_69_slot"],
                None
              |) in
            let _ :=
              M.if_ (|
                M.get (| "_16" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_17"],
                      Some ([Literal.number 32])
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "gt",
                        [
                          M.get (| "_17" |);
                          M.call (|
                            "returndatasize",
                            []
                          |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["_17"],
                            M.call (|
                              "returndatasize",
                              []
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "finalize_allocation",
                      [
                        M.get (| "_14" |);
                        M.get (| "_17" |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_69_slot"],
                      M.call (|
                        "abi_decode_mapping_uint256_uint256_fromMemory",
                        [
                          M.get (| "_14" |);
                          M.call (|
                            "add",
                            [
                              M.get (| "_14" |);
                              M.get (| "_17" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_18"],
                Some (M.call (|
                  "mapping_index_access_mapping_uint256__uint256__of_rational_by",
                  [
                    M.get (| "expr_69_slot" |);
                    M.get (| "expr_8" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_uint256_to_uint256",
                [
                  M.get (| "_18" |);
                  M.get (| "_13" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some ([Literal.number 0x63])
              |) in
            let _ :=
              M.assign (|
                ["_19"],
                Some (M.call (|
                  "convert_t_rational_by_to_t_uint256",
                  [
                    M.get (| "expr_9" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_75_address"],
                Some (M.call (|
                  "linkersymbol",
                  [
                    [Literal.string "2f686f6d652f6775696c6c61756d652f4465736b746f702f536f6c69646974792f736f6c69646974792f746573742f6c6962736f6c69646974792f73656d616e74696354657374732f6c69627261726965732f7573696e675f6c6962726172795f6d617070696e67735f72657475726e2e736f6c3a4c6962"]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_77_address"],
                Some (M.call (|
                  "convert_type_contract_Lib_to_address",
                  [
                    M.get (| "expr_75_address" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_functionSelector"],
                Some ([Literal.number 0x33fc8ce6])
              |) in
            let _ :=
              M.assign (|
                ["_29_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_78_slot"],
                Some (M.get (| "_29_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_20"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "_20" |);
                  M.call (|
                    "shift_left_224",
                    [
                      M.get (| "expr_functionSelector" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_21"],
                Some (M.call (|
                  "abi_encode_mapping_uint256_mapping_uint256_uint256_rational_by",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "_20" |);
                        [Literal.number 4]
                      ]
                    |);
                    M.get (| "expr_78_slot" |);
                    M.get (| "expr_10" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_22"],
                Some (M.call (|
                  "delegatecall",
                  [
                    M.call (|
                      "gas",
                      []
                    |);
                    M.get (| "expr_77_address" |);
                    M.get (| "_20" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_21" |);
                        M.get (| "_20" |)
                      ]
                    |);
                    M.get (| "_20" |);
                    [Literal.number 32]
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "_22" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_forward",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_80_slot"],
                None
              |) in
            let _ :=
              M.if_ (|
                M.get (| "_22" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_23"],
                      Some ([Literal.number 32])
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "gt",
                        [
                          M.get (| "_23" |);
                          M.call (|
                            "returndatasize",
                            []
                          |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["_23"],
                            M.call (|
                              "returndatasize",
                              []
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "finalize_allocation",
                      [
                        M.get (| "_20" |);
                        M.get (| "_23" |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_80_slot"],
                      M.call (|
                        "abi_decode_mapping_uint256_uint256_fromMemory",
                        [
                          M.get (| "_20" |);
                          M.call (|
                            "add",
                            [
                              M.get (| "_20" |);
                              M.get (| "_23" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["_24"],
                Some (M.call (|
                  "mapping_index_access_mapping_uint256_uint256_of_rational_by",
                  [
                    M.get (| "expr_80_slot" |);
                    M.get (| "expr_11" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_uint256_to_uint256",
                [
                  M.get (| "_24" |);
                  M.get (| "_19" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_35_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_86_slot"],
                Some (M.get (| "_35_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_25"],
                Some (M.call (|
                  "mapping_index_access_mapping_uint256__mapping_uint256__uint256___of_rational_by",
                  [
                    M.get (| "expr_86_slot" |);
                    M.get (| "expr_12" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_37_slot"],
                Some (M.get (| "_25" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_88_slot"],
                Some (M.get (| "_37_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_26"],
                Some (M.call (|
                  "mapping_index_access_mapping_uint256__uint256__of_rational_by",
                  [
                    M.get (| "expr_88_slot" |);
                    M.get (| "expr_13" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_27"],
                Some (M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    M.get (| "_26" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some (M.get (| "_27" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component"],
                Some (M.get (| "expr_14" |))
              |) in
            let _ :=
              M.assign (|
                ["_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_slot"],
                Some (M.get (| "_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_28"],
                Some (M.call (|
                  "mapping_index_access_mapping_uint256__mapping_uint256__uint256___of_rational_by",
                  [
                    M.get (| "expr_slot" |);
                    M.get (| "expr_15" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_42_slot"],
                Some (M.get (| "_28" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_93_slot"],
                Some (M.get (| "_42_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_29"],
                Some (M.call (|
                  "mapping_index_access_t_mapping_t_uint256_t_uint256_of_t_rational_by",
                  [
                    M.get (| "expr_93_slot" |);
                    M.get (| "expr_16" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_30"],
                Some (M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    M.get (| "_29" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some (M.get (| "_30" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component_1"],
                Some (M.get (| "expr_17" |))
              |) in
            let _ :=
              M.assign (|
                ["_45_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_96_slot"],
                Some (M.get (| "_45_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_31"],
                Some (M.call (|
                  "mapping_index_access_mapping_uint256__mapping_uint256__uint256___of_rational_by",
                  [
                    M.get (| "expr_96_slot" |);
                    M.get (| "expr_18" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_47_slot"],
                Some (M.get (| "_31" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_98_slot"],
                Some (M.get (| "_47_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["_32"],
                Some (M.call (|
                  "mapping_index_access_mapping_uint256_uint256_of_rational_by",
                  [
                    M.get (| "expr_98_slot" |);
                    M.get (| "expr_19" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_33"],
                Some (M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    M.get (| "_32" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some (M.get (| "_33" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component_2"],
                Some (M.get (| "expr_20" |))
              |) in
            let _ :=
              M.assign (|
                ["_50_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_101_slot"],
                Some (M.get (| "_50_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_34"],
                Some (M.call (|
                  "mapping_index_access_mapping_uint256_mapping_uint256_uint256_of_rational_by",
                  [
                    M.get (| "expr_101_slot" |);
                    M.get (| "expr_21" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_52_slot"],
                Some (M.get (| "_34" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_103_slot"],
                Some (M.get (| "_52_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_35"],
                Some (M.call (|
                  "mapping_index_access_mapping_uint256__uint256__of_rational_by",
                  [
                    M.get (| "expr_103_slot" |);
                    M.get (| "expr_22" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_36"],
                Some (M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    M.get (| "_35" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                Some (M.get (| "_36" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component_3"],
                Some (M.get (| "expr_23" |))
              |) in
            let _ :=
              M.assign (|
                ["_55_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_106_slot"],
                Some (M.get (| "_55_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_37"],
                Some (M.call (|
                  "mapping_index_access_mapping_uint256_mapping_uint256_uint256_of_rational_by",
                  [
                    M.get (| "expr_106_slot" |);
                    M.get (| "expr_24" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_57_slot"],
                Some (M.get (| "_37" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_108_slot"],
                Some (M.get (| "_57_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_38"],
                Some (M.call (|
                  "mapping_index_access_t_mapping_t_uint256_t_uint256_of_t_rational_by",
                  [
                    M.get (| "expr_108_slot" |);
                    M.get (| "expr_25" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_39"],
                Some (M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    M.get (| "_38" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                Some (M.get (| "_39" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component_4"],
                Some (M.get (| "expr_26" |))
              |) in
            let _ :=
              M.assign (|
                ["_60_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_111_slot"],
                Some (M.get (| "_60_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_40"],
                Some (M.call (|
                  "mapping_index_access_mapping_uint256_mapping_uint256_uint256_of_rational_by",
                  [
                    M.get (| "expr_111_slot" |);
                    M.get (| "expr_27" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_62_slot"],
                Some (M.get (| "_40" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_113_slot"],
                Some (M.get (| "_62_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["_41"],
                Some (M.call (|
                  "mapping_index_access_mapping_uint256_uint256_of_rational_by",
                  [
                    M.get (| "expr_113_slot" |);
                    M.get (| "expr_28" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_42"],
                Some (M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    M.get (| "_41" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                Some (M.get (| "_42" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component_5"],
                Some (M.get (| "expr_29" |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_component" |)
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "expr_component_1" |)
              |) in
            let _ :=
              M.declare (|
                ["var_1"],
                M.get (| "expr_component_2" |)
              |) in
            let _ :=
              M.declare (|
                ["var_2"],
                M.get (| "expr_component_3" |)
              |) in
            let _ :=
              M.declare (|
                ["var_3"],
                M.get (| "expr_component_4" |)
              |) in
            let _ :=
              M.declare (|
                ["var_4"],
                M.get (| "expr_component_5" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a26469706673582212201e1dc719cba001ba602e6a43ecd949a0f24c6386aa9555e297932d060ce5241664736f6c634300081b0033".
  End Test_120_deployed.
End Test_120.
