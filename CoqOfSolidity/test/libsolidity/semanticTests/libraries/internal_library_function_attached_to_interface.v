(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Interface *)
Module I.
  
End I.

(* Contract *)
Module E.
  
End E.

(* Library *)
Module L.
  Definition foo (α : list Value.t) : M :=
    match α with
    | [i] =>
      let _ :=
        M.return_ (|
          Value.Integer 42
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End L.

(* Contract *)
Module C.
  (* Beginning of a node! *)
id: 20
src: 145:14:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 19
src: 157:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 18
src: 157:1:0
nodeType: IdentifierPath
name: I
nameLocations: [157:1:0, ]
referencedDeclaration: 1

referencedDeclaration: 1
typeDescriptions: typeString contract ItypeIdentifier st_contract$_I_$1

libraryName: (* Beginning of a node! *)
id: 17
src: 151:1:0
nodeType: IdentifierPath
name: L
nameLocations: [151:1:0, ]
referencedDeclaration: 16

global: 0


  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "e" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 29
src: 223:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 28
src: 223:1:0
nodeType: IdentifierPath
name: E
nameLocations: [223:1:0, ]
referencedDeclaration: 4

referencedDeclaration: 4
typeDescriptions: typeString contract EtypeIdentifier st_contract$_E_$4

,
            []
          |)
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.call (|
                M.get_name (| "I" |),
                [
                  M.get_name (| "e" |)
                ]
              |),
              "foo"
            |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
