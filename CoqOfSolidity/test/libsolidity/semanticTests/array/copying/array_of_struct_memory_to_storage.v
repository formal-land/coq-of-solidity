(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  (* Struct S *)

  Definition unused : Value.t :=
    undefined.

  Definition s : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "m" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 31
src: 214:3:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 30
src: 214:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 29
src: 214:1:0
nodeType: IdentifierPath
name: S
nameLocations: [214:1:0, ]
referencedDeclaration: 7

referencedDeclaration: 7
typeDescriptions: typeString struct C.StypeIdentifier st_struct$_S_$7_storage_ptr

length: 
typeDescriptions: typeString struct C.S[]typeIdentifier st_array$_t_struct$_S_$7_storage_$dyn_storage_ptr

,
            [
              Value.Integer 3
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 2)
            |),
            "a"
          |),
          Value.Integer 10
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 1)
            |),
            "b"
          |),
          Value.Integer 11
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |),
            "c"
          |),
          Value.Integer 12
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "s" |),
          M.get_name (| "m" |)
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.member_access (|
              M.index_access (|
                M.get_name (| "s" |),
                Some (Value.Integer 2)
              |),
              "a"
            |),
            M.member_access (|
              M.index_access (|
                M.get_name (| "s" |),
                Some (Value.Integer 1)
              |),
              "b"
            |),
            M.member_access (|
              M.index_access (|
                M.get_name (| "s" |),
                Some (Value.Integer 0)
              |),
              "c"
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
