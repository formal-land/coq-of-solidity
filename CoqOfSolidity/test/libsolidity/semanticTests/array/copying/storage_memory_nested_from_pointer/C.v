(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_151.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            []
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                []
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          Some (M.call (|
            "allocate_unbounded",
            []
          |))
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f3135315f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3135315f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3135315f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_151_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      []
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  Some (M.call (|
                    "shift_right_224_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x26121ff0),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_f",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            []
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_224_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint72",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffffffffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint72_to_uint72",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint72",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint72_uint72_uint72_uint72_uint72_uint72_uint72",
          ["headStart"; "value0"; "value1"; "value2"; "value3"; "value4"; "value5"; "value6"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 224]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint72_to_uint72",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint72_to_uint72",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint72_to_uint72",
                [
                  M.get (| "value2" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 64]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint72_to_uint72",
                [
                  M.get (| "value3" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 96]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint72_to_uint72",
                [
                  M.get (| "value4" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 128]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint72_to_uint72",
                [
                  M.get (| "value5" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 160]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint72_to_uint72",
                [
                  M.get (| "value6" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 192]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_f",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"; "ret_2"; "ret_3"; "ret_4"; "ret_5"; "ret_6"],
                Some (M.call (|
                  "fun_f",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_uint72_uint72_uint72_uint72_uint72_uint72_uint72",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |);
                    M.get (| "ret_2" |);
                    M.get (| "ret_3" |);
                    M.get (| "ret_4" |);
                    M.get (| "ret_5" |);
                    M.get (| "ret_6" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint72",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_0_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_0_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "increment_wrapping_uint256",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_array_array_array_uint72_storage_dyn_storage_to_array_array_uint72__dyn_ptr",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_array_uint72_storage_dyn_ptr",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x32",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x32]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_array_uint72_storage_dyn_ptr",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.get (| "ptr" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_uint72__dyn_ptr",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                Some (M.call (|
                  "array_length_array_array_uint72_storage_dyn_ptr",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                Some (M.call (|
                  "array_dataslot_array_array_uint72_storage_dyn_ptr",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 2]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_push_zero_array_array_uint72_storage_dyn_ptr",
          ["array"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["oldLen"],
                Some (M.call (|
                  "array_length_array_array_uint72_storage_dyn_ptr",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "oldLen" |);
                        [Literal.number 18446744073709551616]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "array" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "oldLen" |);
                      [Literal.number 1]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["slot"; "offset"],
                M.call (|
                  "storage_array_index_access_uint72__dyn_ptr",
                  [
                    M.get (| "array" |);
                    M.get (| "oldLen" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint72",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint72",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_array_uint72_storage_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_array_uint72_storage_dyn",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.get (| "ptr" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_uint72__dyn",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                Some (M.call (|
                  "array_length_array_array_uint72_storage_dyn",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                Some (M.call (|
                  "array_dataslot_array_array_uint72_storage_dyn",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 2]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint72_storage",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x05]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint72_storage",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_uint",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                Some (M.call (|
                  "array_length_array_uint72_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                Some (M.call (|
                  "array_dataslot_array_uint72_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "div",
                      [
                        M.get (| "index" |);
                        [Literal.number 3]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "mul",
                  [
                    M.call (|
                      "mod",
                      [
                        M.get (| "index" |);
                        [Literal.number 3]
                      ]
                    |);
                    [Literal.number 9]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_dynamic",
          ["bits"; "value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    M.get (| "bits" |);
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_dynamic9",
          ["value"; "shiftBytes"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["shiftBits"],
                Some (M.call (|
                  "mul",
                  [
                    M.get (| "shiftBytes" |);
                    [Literal.number 8]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["mask"],
                Some (M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    [Literal.number 0xffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint72_to_uint72",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint72",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint72",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_uint72",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_uint72_to_uint72",
          ["slot"; "offset"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                Some (M.call (|
                  "convert_uint72_to_uint72",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_dynamic9",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.get (| "offset" |);
                      M.call (|
                        "prepare_store_uint72",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_2_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_2_by_1_to_uint72",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint72",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_2_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_3_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_3_by_1_to_uint72",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint72",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_3_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint72",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint72",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_5_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_5_by_1_to_uint72",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint72",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_5_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_6_by_1_to_uint72",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint72",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_7_by_1_to_uint72",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint72",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "round_up_to_mul_of",
          ["value"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "and",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 31]
                      ]
                    |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 31]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "finalize_allocation",
          ["memPtr"; "size"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["newFreePtr"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "memPtr" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "size" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "newFreePtr" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "newFreePtr" |);
                        M.get (| "memPtr" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 64];
                  M.get (| "newFreePtr" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory",
          ["size"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_unbounded",
                  []
                |)
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "memPtr" |);
                  M.get (| "size" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_array_array_uint72_dyn",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "mul",
                  [
                    M.get (| "length" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "add",
                  [
                    M.get (| "size" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_array_array_array_uint72_dyn",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["allocSize"],
                Some (M.call (|
                  "array_allocation_size_array_array_uint72_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    M.get (| "allocSize" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.get (| "length" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_array_uint72",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint72",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint72",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_0_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_uint72",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffffffffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_0t_uint72",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint72",
                  [
                    M.call (|
                      "shift_right_0_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_72_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 72];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_uint72",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint72",
                  [
                    M.call (|
                      "shift_right_72_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 144];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_18t_uint72",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint72",
                  [
                    M.call (|
                      "shift_right_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_uint72_storage",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_uint72_storage",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_uint72",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.call (|
                  "array_dataslot_array_uint72_storage",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["itemCounter"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.if_ (|
                [Literal.number 1],
                ltac:(M.monadic (
                  let _ :=
                    let _ :=
                      tt in
                    M.for_ (|
                      M.call (|
                        "lt",
                        [
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              M.call (|
                                "sub",
                                [
                                  [Literal.number 3];
                                  [Literal.number 1]
                                ]
                              |)
                            ]
                          |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 3]
                              ]
                            |)
                          |) in
                        tt
                      )),
                      ltac:(M.monadic (
                        let _ :=
                          M.assign (|
                            ["data"],
                            Some (M.call (|
                              "sload",
                              [
                                M.get (| "srcPtr" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint72",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_0t_uint72",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint72",
                            [
                              M.call (|
                                "extract_from_storage_value_offsett_uint72",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint72",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_18t_uint72",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["srcPtr"],
                            M.call (|
                              "add",
                              [
                                M.get (| "srcPtr" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.if_ (|
                [Literal.number 1],
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["data_1"],
                      Some (M.call (|
                        "sload",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 1],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint72",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_0t_uint72",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 1],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint72",
                            [
                              M.call (|
                                "extract_from_storage_value_offsett_uint72",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint72",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_18t_uint72",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encodeUpdatedPos_array_uint72_storage",
          ["value0"; "pos"],
          ["updatedPos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "abi_encode_array_uint72_storage",
                [
                  M.get (| "value0" |);
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updatedPos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0xa0]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_from_storage_to_memory_array_uint",
          ["slot"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_unbounded",
                  []
                |)
              |) in
            let _ :=
              M.assign (|
                ["end"],
                Some (M.call (|
                  "abi_encodeUpdatedPos_array_uint72_storage",
                  [
                    M.get (| "slot" |);
                    M.get (| "memPtr" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "end" |);
                      M.get (| "memPtr" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_array_array_uint72_storage_to_array_uint72",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "copy_array_from_storage_to_memory_array_uint",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_from_storage_to_memory_array_array_uint72__dyn_ptr",
          ["slot"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_array_uint72_storage_dyn_ptr",
                  [
                    M.get (| "slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_array_array_array_uint72_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["mpos"],
                Some (M.get (| "memPtr" |))
              |) in
            let _ :=
              M.declare (|
                ["mpos"],
                M.call (|
                  "add",
                  [
                    M.get (| "mpos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["spos"],
                Some (M.call (|
                  "array_dataslot_array_array_uint72_storage_dyn_ptr",
                  [
                    M.get (| "slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.get (| "mpos" |);
                        M.call (|
                          "convert_array_array_uint72_storage_to_array_uint72",
                          [
                            M.get (| "spos" |)
                          ]
                        |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["mpos"],
                      M.call (|
                        "add",
                        [
                          M.get (| "mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["spos"],
                      M.call (|
                        "add",
                        [
                          M.get (| "spos" |);
                          [Literal.number 2]
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_array_array_array_uint72_storage_dyn_ptr_to_array_array_uint72_dyn",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "copy_array_from_storage_to_memory_array_array_uint72__dyn_ptr",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_array_uint72_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "memory_array_index_access_uint72_dyn",
          ["baseRef"; "index"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.call (|
                          "array_length_array_array_uint72_dyn",
                          [
                            M.get (| "baseRef" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some (M.call (|
                  "mul",
                  [
                    M.get (| "index" |);
                    [Literal.number 32]
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "baseRef" |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint72",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x05]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "memory_array_index_access_uint72",
          ["baseRef"; "index"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.call (|
                          "array_length_array_uint72",
                          [
                            M.get (| "baseRef" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some (M.call (|
                  "mul",
                  [
                    M.get (| "index" |);
                    [Literal.number 32]
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "baseRef" |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_memoryt_uint72",
          ["ptr"],
          ["returnValue"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["value"],
                Some (M.call (|
                  "cleanup_uint72",
                  [
                    M.call (|
                      "mload",
                      [
                        M.get (| "ptr" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["returnValue"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_3_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_1_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_2_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_2_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_f",
          [],
          ["var";
      "var_1";
      "var_2";
      "var_3";
      "var_4";
      "var_5";
      "var_"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint72"],
                Some (M.call (|
                  "zero_value_for_split_uint72",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_uint72" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_t_uint72"],
                Some (M.call (|
                  "zero_value_for_split_uint72",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_1"],
                M.get (| "zero_t_uint72" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint72_1"],
                Some (M.call (|
                  "zero_value_for_split_uint72",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_2"],
                M.get (| "zero_uint72_1" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint72_2"],
                Some (M.call (|
                  "zero_value_for_split_uint72",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_3"],
                M.get (| "zero_uint72_2" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint72_3"],
                Some (M.call (|
                  "zero_value_for_split_uint72",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_4"],
                M.get (| "zero_uint72_3" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint72_4"],
                Some (M.call (|
                  "zero_value_for_split_uint72",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_5"],
                M.get (| "zero_uint72_4" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint72_5"],
                Some (M.call (|
                  "zero_value_for_split_uint72",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "zero_uint72_5" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["var_i"],
                Some (M.call (|
                  "convert_rational_0_by_1_to_uint256",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                [Literal.number 1],
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_1"],
                      Some (M.get (| "var_i" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_2"],
                      Some (M.call (|
                        "increment_wrapping_uint256",
                        [
                          M.get (| "_1" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["var_i"],
                      M.get (| "_2" |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_3"],
                      Some (M.get (| "var_i" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_1"],
                      Some (M.get (| "_3" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_2"],
                      Some ([Literal.number 0x04])
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_3"],
                      Some (M.call (|
                        "lt",
                        [
                          M.call (|
                            "cleanup_uint256",
                            [
                              M.get (| "expr_1" |)
                            ]
                          |);
                          M.call (|
                            "convert_rational_by_to_uint256",
                            [
                              M.get (| "expr_2" |)
                            ]
                          |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "iszero",
                        [
                          M.get (| "expr_3" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.break (||) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_11_slot"],
                      Some ([Literal.number 0x00])
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_32_slot"],
                      Some (M.get (| "_11_slot" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_self_slot"],
                      Some (M.call (|
                        "convert_array_array_array_uint72_storage_dyn_storage_to_array_array_uint72__dyn_ptr",
                        [
                          M.get (| "expr_32_slot" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_4"; "_5"],
                      Some (M.call (|
                        "array_push_zero_array_array_uint72_storage_dyn_ptr",
                        [
                          M.get (| "expr_self_slot" |)
                        ]
                      |))
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.call (|
                  "convert_rational_by_to_uint72",
                  [
                    M.get (| "expr_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_16_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_38_slot"],
                Some (M.get (| "_16_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_7"; "_8"],
                Some (M.call (|
                  "storage_array_index_access_uint72__dyn",
                  [
                    M.get (| "expr_38_slot" |);
                    M.get (| "expr_5" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_19_slot"],
                Some (M.get (| "_7" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_41_slot"],
                Some (M.get (| "_19_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_9"; "_10"],
                Some (M.call (|
                  "storage_array_index_access_uint",
                  [
                    M.get (| "expr_41_slot" |);
                    M.get (| "expr_6" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_uint72_to_uint72",
                [
                  M.get (| "_9" |);
                  M.get (| "_10" |);
                  M.get (| "_6" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["_11"],
                Some (M.call (|
                  "convert_rational_2_by_1_to_uint72",
                  [
                    M.get (| "expr_7" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_23_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_46_slot"],
                Some (M.get (| "_23_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_12"; "_13"],
                Some (M.call (|
                  "storage_array_index_access_uint72__dyn",
                  [
                    M.get (| "expr_46_slot" |);
                    M.get (| "expr_8" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_26_slot"],
                Some (M.get (| "_12" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_49_slot"],
                Some (M.get (| "_26_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some ([Literal.number 0x03])
              |) in
            let _ :=
              M.assign (|
                ["_14"; "_15"],
                Some (M.call (|
                  "storage_array_index_access_uint",
                  [
                    M.get (| "expr_49_slot" |);
                    M.get (| "expr_9" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_uint72_to_uint72",
                [
                  M.get (| "_14" |);
                  M.get (| "_15" |);
                  M.get (| "_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some ([Literal.number 0x03])
              |) in
            let _ :=
              M.assign (|
                ["_16"],
                Some (M.call (|
                  "convert_rational_3_by_1_to_uint72",
                  [
                    M.get (| "expr_10" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_30_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_54_slot"],
                Some (M.get (| "_30_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_17"; "_18"],
                Some (M.call (|
                  "storage_array_index_access_uint72__dyn",
                  [
                    M.get (| "expr_54_slot" |);
                    M.get (| "expr_11" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_33_slot"],
                Some (M.get (| "_17" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_57_slot"],
                Some (M.get (| "_33_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_19"; "_20"],
                Some (M.call (|
                  "storage_array_index_access_uint",
                  [
                    M.get (| "expr_57_slot" |);
                    M.get (| "expr_12" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_uint72_to_uint72",
                [
                  M.get (| "_19" |);
                  M.get (| "_20" |);
                  M.get (| "_16" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some ([Literal.number 0x04])
              |) in
            let _ :=
              M.assign (|
                ["_21"],
                Some (M.call (|
                  "convert_t_rational_by_to_t_uint72",
                  [
                    M.get (| "expr_13" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_37_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_62_slot"],
                Some (M.get (| "_37_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_22"; "_23"],
                Some (M.call (|
                  "storage_array_index_access_uint72__dyn",
                  [
                    M.get (| "expr_62_slot" |);
                    M.get (| "expr_14" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_40_slot"],
                Some (M.get (| "_22" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_65_slot"],
                Some (M.get (| "_40_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some ([Literal.number 0x04])
              |) in
            let _ :=
              M.assign (|
                ["_24"; "_25"],
                Some (M.call (|
                  "storage_array_index_access_uint",
                  [
                    M.get (| "expr_65_slot" |);
                    M.get (| "expr_15" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_uint72_to_uint72",
                [
                  M.get (| "_24" |);
                  M.get (| "_25" |);
                  M.get (| "_21" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some ([Literal.number 0x05])
              |) in
            let _ :=
              M.assign (|
                ["_26"],
                Some (M.call (|
                  "convert_rational_5_by_1_to_uint72",
                  [
                    M.get (| "expr_16" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_70_slot"],
                Some (M.get (| "_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["_27"; "_28"],
                Some (M.call (|
                  "storage_array_index_access_uint72__dyn",
                  [
                    M.get (| "expr_70_slot" |);
                    M.get (| "expr_17" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_47_slot"],
                Some (M.get (| "_27" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_73_slot"],
                Some (M.get (| "_47_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_29"; "_30"],
                Some (M.call (|
                  "storage_array_index_access_uint",
                  [
                    M.get (| "expr_73_slot" |);
                    M.get (| "expr_18" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_uint72_to_uint72",
                [
                  M.get (| "_29" |);
                  M.get (| "_30" |);
                  M.get (| "_26" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some ([Literal.number 0x06])
              |) in
            let _ :=
              M.assign (|
                ["_31"],
                Some (M.call (|
                  "convert_rational_6_by_1_to_uint72",
                  [
                    M.get (| "expr_19" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_51_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_78_slot"],
                Some (M.get (| "_51_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some ([Literal.number 0x03])
              |) in
            let _ :=
              M.assign (|
                ["_32"; "_33"],
                Some (M.call (|
                  "storage_array_index_access_uint72__dyn",
                  [
                    M.get (| "expr_78_slot" |);
                    M.get (| "expr_20" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_54_slot"],
                Some (M.get (| "_32" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_slot"],
                Some (M.get (| "_54_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["_34"; "_35"],
                Some (M.call (|
                  "storage_array_index_access_uint",
                  [
                    M.get (| "expr_slot" |);
                    M.get (| "expr_21" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_uint72_to_uint72",
                [
                  M.get (| "_34" |);
                  M.get (| "_35" |);
                  M.get (| "_31" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                Some ([Literal.number 0x07])
              |) in
            let _ :=
              M.assign (|
                ["_36"],
                Some (M.call (|
                  "convert_rational_7_by_1_to_uint72",
                  [
                    M.get (| "expr_22" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_58_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_86_slot"],
                Some (M.get (| "_58_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                Some ([Literal.number 0x03])
              |) in
            let _ :=
              M.assign (|
                ["_37"; "_38"],
                Some (M.call (|
                  "storage_array_index_access_uint72__dyn",
                  [
                    M.get (| "expr_86_slot" |);
                    M.get (| "expr_23" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_61_slot"],
                Some (M.get (| "_37" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_89_slot"],
                Some (M.get (| "_61_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                Some ([Literal.number 0x03])
              |) in
            let _ :=
              M.assign (|
                ["_39"; "_40"],
                Some (M.call (|
                  "storage_array_index_access_uint",
                  [
                    M.get (| "expr_89_slot" |);
                    M.get (| "expr_24" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_uint72_to_uint72",
                [
                  M.get (| "_39" |);
                  M.get (| "_40" |);
                  M.get (| "_36" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_64_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_101_slot"],
                Some (M.get (| "_64_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["var_a_slot"],
                Some (M.call (|
                  "convert_array_array_array_uint72_storage_dyn_storage_to_array_array_uint72__dyn_ptr",
                  [
                    M.get (| "expr_101_slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_65_slot"],
                Some (M.get (| "var_a_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_110_slot"],
                Some (M.get (| "_65_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["var_m_mpos"],
                Some (M.call (|
                  "convert_array_array_array_uint72_storage_dyn_ptr_to_array_array_uint72_dyn",
                  [
                    M.get (| "expr_110_slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_66_mpos"],
                Some (M.get (| "var_m_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_112_mpos"],
                Some (M.get (| "_66_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_67_mpos"],
                Some (M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_uint72_dyn",
                      [
                        M.get (| "expr_112_mpos" |);
                        M.call (|
                          "convert_rational_0_by_1_to_uint256",
                          [
                            M.get (| "expr_25" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_114_mpos"],
                Some (M.get (| "_67_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_41"],
                Some (M.call (|
                  "read_from_memoryt_uint72",
                  [
                    M.call (|
                      "memory_array_index_access_uint72",
                      [
                        M.get (| "expr_114_mpos" |);
                        M.call (|
                          "convert_rational_0_by_1_to_uint256",
                          [
                            M.get (| "expr_26" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                Some (M.get (| "_41" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component"],
                Some (M.get (| "expr_27" |))
              |) in
            let _ :=
              M.assign (|
                ["_69_mpos"],
                Some (M.get (| "var_m_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_117_mpos"],
                Some (M.get (| "_69_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_70_mpos"],
                Some (M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_uint72_dyn",
                      [
                        M.get (| "expr_117_mpos" |);
                        M.call (|
                          "convert_rational_0_by_1_to_uint256",
                          [
                            M.get (| "expr_28" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_119_mpos"],
                Some (M.get (| "_70_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                Some ([Literal.number 0x03])
              |) in
            let _ :=
              M.assign (|
                ["_42"],
                Some (M.call (|
                  "read_from_memoryt_uint72",
                  [
                    M.call (|
                      "memory_array_index_access_uint72",
                      [
                        M.get (| "expr_119_mpos" |);
                        M.call (|
                          "convert_t_rational_by_to_t_uint256",
                          [
                            M.get (| "expr_29" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                Some (M.get (| "_42" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component_1"],
                Some (M.get (| "expr_30" |))
              |) in
            let _ :=
              M.assign (|
                ["_mpos"],
                Some (M.get (| "var_m_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_122_mpos"],
                Some (M.get (| "_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_73_mpos"],
                Some (M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_uint72_dyn",
                      [
                        M.get (| "expr_122_mpos" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_31" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_124_mpos"],
                Some (M.get (| "_73_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_43"],
                Some (M.call (|
                  "read_from_memoryt_uint72",
                  [
                    M.call (|
                      "memory_array_index_access_uint72",
                      [
                        M.get (| "expr_124_mpos" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_32" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_33"],
                Some (M.get (| "_43" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component_2"],
                Some (M.get (| "expr_33" |))
              |) in
            let _ :=
              M.assign (|
                ["_75_mpos"],
                Some (M.get (| "var_m_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_127_mpos"],
                Some (M.get (| "_75_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_34"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_76_mpos"],
                Some (M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_uint72_dyn",
                      [
                        M.get (| "expr_127_mpos" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_34" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_129_mpos"],
                Some (M.get (| "_76_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_35"],
                Some ([Literal.number 0x04])
              |) in
            let _ :=
              M.assign (|
                ["_44"],
                Some (M.call (|
                  "read_from_memoryt_uint72",
                  [
                    M.call (|
                      "memory_array_index_access_uint72",
                      [
                        M.get (| "expr_129_mpos" |);
                        M.call (|
                          "convert_rational_by_to_uint256",
                          [
                            M.get (| "expr_35" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_36"],
                Some (M.get (| "_44" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component_3"],
                Some (M.get (| "expr_36" |))
              |) in
            let _ :=
              M.assign (|
                ["_78_mpos"],
                Some (M.get (| "var_m_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_132_mpos"],
                Some (M.get (| "_78_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_37"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["_79_mpos"],
                Some (M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_uint72_dyn",
                      [
                        M.get (| "expr_132_mpos" |);
                        M.call (|
                          "convert_rational_2_by_1_to_uint256",
                          [
                            M.get (| "expr_37" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_mpos"],
                Some (M.get (| "_79_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_38"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_45"],
                Some (M.call (|
                  "read_from_memoryt_uint72",
                  [
                    M.call (|
                      "memory_array_index_access_uint72",
                      [
                        M.get (| "expr_mpos" |);
                        M.call (|
                          "convert_rational_0_by_1_to_uint256",
                          [
                            M.get (| "expr_38" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_39"],
                Some (M.get (| "_45" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component_4"],
                Some (M.get (| "expr_39" |))
              |) in
            let _ :=
              M.assign (|
                ["_81_mpos"],
                Some (M.get (| "var_m_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_137_mpos"],
                Some (M.get (| "_81_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_40"],
                Some ([Literal.number 0x03])
              |) in
            let _ :=
              M.assign (|
                ["_82_mpos"],
                Some (M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_uint72_dyn",
                      [
                        M.get (| "expr_137_mpos" |);
                        M.call (|
                          "convert_t_rational_by_to_t_uint256",
                          [
                            M.get (| "expr_40" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_139_mpos"],
                Some (M.get (| "_82_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_41"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["_46"],
                Some (M.call (|
                  "read_from_memoryt_uint72",
                  [
                    M.call (|
                      "memory_array_index_access_uint72",
                      [
                        M.get (| "expr_139_mpos" |);
                        M.call (|
                          "convert_rational_2_by_1_to_uint256",
                          [
                            M.get (| "expr_41" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_42"],
                Some (M.get (| "_46" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component_5"],
                Some (M.get (| "expr_42" |))
              |) in
            let _ :=
              M.assign (|
                ["_84_mpos"],
                Some (M.get (| "var_m_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_142_mpos"],
                Some (M.get (| "_84_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_43"],
                Some ([Literal.number 0x03])
              |) in
            let _ :=
              M.assign (|
                ["_85_mpos"],
                Some (M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_uint72_dyn",
                      [
                        M.get (| "expr_142_mpos" |);
                        M.call (|
                          "convert_t_rational_by_to_t_uint256",
                          [
                            M.get (| "expr_43" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_144_mpos"],
                Some (M.get (| "_85_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_44"],
                Some ([Literal.number 0x03])
              |) in
            let _ :=
              M.assign (|
                ["_47"],
                Some (M.call (|
                  "read_from_memoryt_uint72",
                  [
                    M.call (|
                      "memory_array_index_access_uint72",
                      [
                        M.get (| "expr_144_mpos" |);
                        M.call (|
                          "convert_t_rational_by_to_t_uint256",
                          [
                            M.get (| "expr_44" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_45"],
                Some (M.get (| "_47" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component_6"],
                Some (M.get (| "expr_45" |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_component" |)
              |) in
            let _ :=
              M.declare (|
                ["var_1"],
                M.get (| "expr_component_1" |)
              |) in
            let _ :=
              M.declare (|
                ["var_2"],
                M.get (| "expr_component_2" |)
              |) in
            let _ :=
              M.declare (|
                ["var_3"],
                M.get (| "expr_component_3" |)
              |) in
            let _ :=
              M.declare (|
                ["var_4"],
                M.get (| "expr_component_4" |)
              |) in
            let _ :=
              M.declare (|
                ["var_5"],
                M.get (| "expr_component_5" |)
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "expr_component_6" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a264697066735822122099f4bc68514f08d5efc51c46553c89444de6c1796c3388e1589977dbe1e314e264736f6c634300081b0033".
  End C_151_deployed.
End C_151.
