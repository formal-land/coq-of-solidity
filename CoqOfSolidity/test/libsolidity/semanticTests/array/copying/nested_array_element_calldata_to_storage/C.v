(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_185.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            []
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                []
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          Some (M.call (|
            "allocate_unbounded",
            []
          |))
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f3138355f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3138355f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3138355f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_185_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      []
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  Some (M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x3fc8671b),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_test2",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x55aeb383),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_test",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            []
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_array_uint8_calldata_calldata",
          ["offset"; "end"],
          ["arrayPos"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["arrayPos"],
                M.get (| "offset" |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "arrayPos" |);
                        M.call (|
                          "mul",
                          [
                            [Literal.number 0x02];
                            [Literal.number 0x40]
                          ]
                        |)
                      ]
                    |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_array_uint8_calldata_ptr_calldata_ptr",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 128]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_array_array_uint8_calldata_calldata",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple",
          ["headStart"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_test2",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"],
                Some (M.call (|
                  "abi_decode_array_array_uint8_calldata_ptr_calldata_ptr",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "fun_test2",
                [
                  M.get (| "param" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_tuple",
                  [
                    M.get (| "memPos" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_array_array_uint8_calldata_calldata_calldata",
          ["offset"; "end"],
          ["arrayPos"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["arrayPos"],
                M.get (| "offset" |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "arrayPos" |);
                        M.call (|
                          "mul",
                          [
                            [Literal.number 0x02];
                            [Literal.number 0x80]
                          ]
                        |)
                      ]
                    |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_array_array_uint8_calldata_ptr_calldata_ptr_calldata_ptr",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 256]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_array_array_array_uint8_calldata_calldata_calldata",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_test",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"],
                Some (M.call (|
                  "abi_decode_array_array_array_uint8_calldata_ptr_calldata_ptr_calldata_ptr",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "fun_test",
                [
                  M.get (| "param" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_tuple",
                  [
                    M.get (| "memPos" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x32",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x32]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_array_array_uint8_storage",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x02]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_array_array_uint8_storage",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_array_uint",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                Some (M.call (|
                  "array_length_array_array_array_uint8_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                Some (M.call (|
                  "array_dataslot_array_array_array_uint8_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 2]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x00",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x00]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_array_uint8_calldata_calldata",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_array_uint8_storage",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x02]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_convert_length_to_size_array_array_uint8_storage",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["size"],
                M.get (| "length" |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "div",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "length" |);
                        M.call (|
                          "sub",
                          [
                            [Literal.number 1];
                            [Literal.number 1]
                          ]
                        |)
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_array_uint8_storage",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_dynamic",
          ["bits"; "value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    M.get (| "bits" |);
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_dynamic32",
          ["value"; "shiftBytes"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["shiftBits"],
                Some (M.call (|
                  "mul",
                  [
                    M.get (| "shiftBytes" |);
                    [Literal.number 8]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["mask"],
                Some (M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint256_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_uint256",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_uint256_to_uint256",
          ["slot"; "offset"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                Some (M.call (|
                  "convert_uint256_to_uint256",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_dynamic32",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.get (| "offset" |);
                      M.call (|
                        "prepare_store_uint256",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_set_to_zero_uint256",
          ["slot"; "offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_uint256_to_uint256",
                [
                  M.get (| "slot" |);
                  M.get (| "offset" |);
                  M.get (| "zero" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_storage_range_uint256",
          ["start"; "end"],
          [],
          ltac:(M.monadic (
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "start" |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["start"],
                      M.call (|
                        "add",
                        [
                          M.get (| "start" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "storage_set_to_zero_uint256",
                      [
                        M.get (| "start" |);
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_convert_length_to_size_array_uint8_storage",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["size"],
                M.get (| "length" |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "div",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "length" |);
                        M.call (|
                          "sub",
                          [
                            [Literal.number 32];
                            [Literal.number 1]
                          ]
                        |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_storage_array_array_uint",
          ["slot"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "clear_storage_range_uint256",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "slot" |);
                      M.call (|
                        "array_convert_length_to_size_array_uint8_storage",
                        [
                          [Literal.number 2]
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_set_to_zero_array_uint",
          ["slot"; "offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "offset" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x00",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "clear_storage_array_array_uint",
                [
                  M.get (| "slot" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_storage_range_array_uint",
          ["start"; "end"],
          [],
          ltac:(M.monadic (
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "start" |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["start"],
                      M.call (|
                        "add",
                        [
                          M.get (| "start" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "storage_set_to_zero_array_uint",
                      [
                        M.get (| "start" |);
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_unsigned_dynamic",
          ["bits"; "value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    M.get (| "bits" |);
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "partial_clear_storage_slot",
          ["slot"; "offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                Some (M.call (|
                  "shift_right_unsigned_dynamic",
                  [
                    M.call (|
                      "mul",
                      [
                        [Literal.number 8];
                        M.call (|
                          "sub",
                          [
                            [Literal.number 32];
                            M.get (| "offset" |)
                          ]
                        |)
                      ]
                    |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "and",
                    [
                      M.get (| "mask" |);
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_storage_array_end_array_array_uint",
          ["array"; "len"; "startIndex"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "startIndex" |);
                    M.get (| "len" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["oldSlotCount"],
                      Some (M.call (|
                        "array_convert_length_to_size_array_array_uint8_storage",
                        [
                          M.get (| "len" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["newSlotCount"],
                      Some (M.call (|
                        "array_convert_length_to_size_array_array_uint8_storage",
                        [
                          M.get (| "startIndex" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["arrayDataStart"],
                      Some (M.call (|
                        "array_dataslot_array_array_uint8_storage",
                        [
                          M.get (| "array" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteStart"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "newSlotCount" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteEnd"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "oldSlotCount" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.call (|
                      "clear_storage_range_array_uint",
                      [
                        M.get (| "deleteStart" |);
                        M.get (| "deleteEnd" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "resize_array_array_array_uint8_storage",
          ["array"; "newLen"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "newLen" |);
                    [Literal.number 18446744073709551616]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["oldLen"],
                Some (M.call (|
                  "array_length_array_array_uint8_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "cleanup_storage_array_end_array_array_uint",
                [
                  M.get (| "array" |);
                  M.get (| "oldLen" |);
                  M.get (| "newLen" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_array_uint8_calldata_calldata",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x02]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint8_storage",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x02]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint8_storage",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_storage_range_uint8",
          ["start"; "end"],
          [],
          ltac:(M.monadic (
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "start" |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["start"],
                      M.call (|
                        "add",
                        [
                          M.get (| "start" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "storage_set_to_zero_uint256",
                      [
                        M.get (| "start" |);
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_storage_array_end_array_uint",
          ["array"; "len"; "startIndex"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "startIndex" |);
                    M.get (| "len" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["oldSlotCount"],
                      Some (M.call (|
                        "array_convert_length_to_size_array_uint8_storage",
                        [
                          M.get (| "len" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["newSlotCount"],
                      Some (M.call (|
                        "array_convert_length_to_size_array_uint8_storage",
                        [
                          M.get (| "startIndex" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["arrayDataStart"],
                      Some (M.call (|
                        "array_dataslot_array_uint8_storage",
                        [
                          M.get (| "array" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteStart"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "newSlotCount" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteEnd"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "oldSlotCount" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["offset"],
                      Some (M.call (|
                        "mul",
                        [
                          M.call (|
                            "mod",
                            [
                              M.get (| "startIndex" |);
                              [Literal.number 32]
                            ]
                          |);
                          [Literal.number 1]
                        ]
                      |))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "gt",
                        [
                          M.get (| "offset" |);
                          [Literal.number 0]
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "partial_clear_storage_slot",
                            [
                              M.call (|
                                "sub",
                                [
                                  M.get (| "deleteStart" |);
                                  [Literal.number 1]
                                ]
                              |);
                              M.get (| "offset" |)
                            ]
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "clear_storage_range_uint8",
                      [
                        M.get (| "deleteStart" |);
                        M.get (| "deleteEnd" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "resize_array_array_uint8_storage",
          ["array"; "newLen"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "newLen" |);
                    [Literal.number 18446744073709551616]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["oldLen"],
                Some (M.call (|
                  "array_length_array_uint8_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "cleanup_storage_array_end_array_uint",
                [
                  M.get (| "array" |);
                  M.get (| "oldLen" |);
                  M.get (| "newLen" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint8_calldata",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x02]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint8",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_uint8",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_uint8",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_calldatat_uint8",
          ["ptr"],
          ["returnValue"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["value"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.get (| "ptr" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "validator_revert_uint8",
                [
                  M.get (| "value" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["returnValue"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint8_calldata",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_uint8",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_dynamict_uint8",
          ["slot_value"; "offset"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_unsigned_dynamic",
                      [
                        M.call (|
                          "mul",
                          [
                            M.get (| "offset" |);
                            [Literal.number 8]
                          ]
                        |);
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_dynamic1",
          ["value"; "shiftBytes"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["shiftBits"],
                Some (M.call (|
                  "mul",
                  [
                    M.get (| "shiftBytes" |);
                    [Literal.number 8]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["mask"],
                Some (M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    [Literal.number 255]
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_uint8",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_to_storage_from_array_uint8_calldata_to_array_uint",
          ["dst"; "src"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_uint8_calldata",
                  [
                    M.get (| "src" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "resize_array_array_uint8_storage",
                [
                  M.get (| "dst" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.call (|
                  "array_dataslot_array_uint8_calldata",
                  [
                    M.get (| "src" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["dstSlot"],
                Some (M.call (|
                  "array_dataslot_array_uint8_storage",
                  [
                    M.get (| "dst" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["fullSlots"],
                Some (M.call (|
                  "div",
                  [
                    M.get (| "length" |);
                    [Literal.number 32]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "fullSlots" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["dstSlotValue"],
                      Some ([Literal.number 0])
                    |) in
                  let _ :=
                    M.assign (|
                      ["j"],
                      Some ([Literal.number 0])
                    |) in
                  let _ :=
                    let _ :=
                      tt in
                    M.for_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "j" |);
                          [Literal.number 32]
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["j"],
                            M.call (|
                              "add",
                              [
                                M.get (| "j" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      )),
                      ltac:(M.monadic (
                        let _ :=
                          M.assign (|
                            ["stackItem"],
                            Some (M.call (|
                              "read_from_calldatat_uint8",
                              [
                                M.get (| "srcPtr" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["itemValue"],
                            Some (M.call (|
                              "prepare_store_uint8",
                              [
                                M.get (| "stackItem" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.declare (|
                            ["dstSlotValue"],
                            M.call (|
                              "update_byte_slice_dynamic1",
                              [
                                M.get (| "dstSlotValue" |);
                                M.call (|
                                  "mul",
                                  [
                                    [Literal.number 1];
                                    M.get (| "j" |)
                                  ]
                                |);
                                M.get (| "itemValue" |)
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["srcPtr"],
                            M.call (|
                              "add",
                              [
                                M.get (| "srcPtr" |);
                                [Literal.number 32]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "sstore",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "dstSlot" |);
                            M.get (| "i" |)
                          ]
                        |);
                        M.get (| "dstSlotValue" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["spill"],
                Some (M.call (|
                  "sub",
                  [
                    M.get (| "length" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "fullSlots" |);
                        [Literal.number 32]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "spill" |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["dstSlotValue_1"],
                      Some ([Literal.number 0])
                    |) in
                  let _ :=
                    M.assign (|
                      ["j_1"],
                      Some ([Literal.number 0])
                    |) in
                  let _ :=
                    let _ :=
                      tt in
                    M.for_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "j_1" |);
                          M.get (| "spill" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["j_1"],
                            M.call (|
                              "add",
                              [
                                M.get (| "j_1" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      )),
                      ltac:(M.monadic (
                        let _ :=
                          M.assign (|
                            ["stackItem_1"],
                            Some (M.call (|
                              "read_from_calldatat_uint8",
                              [
                                M.get (| "srcPtr" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["itemValue_1"],
                            Some (M.call (|
                              "prepare_store_uint8",
                              [
                                M.get (| "stackItem_1" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.declare (|
                            ["dstSlotValue_1"],
                            M.call (|
                              "update_byte_slice_dynamic1",
                              [
                                M.get (| "dstSlotValue_1" |);
                                M.call (|
                                  "mul",
                                  [
                                    [Literal.number 1];
                                    M.get (| "j_1" |)
                                  ]
                                |);
                                M.get (| "itemValue_1" |)
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["srcPtr"],
                            M.call (|
                              "add",
                              [
                                M.get (| "srcPtr" |);
                                [Literal.number 32]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "sstore",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "dstSlot" |);
                            M.get (| "fullSlots" |)
                          ]
                        |);
                        M.get (| "dstSlotValue_1" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_array_uint8_calldata_to_array_uint",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "copy_array_to_storage_from_array_uint8_calldata_to_array_uint",
                [
                  M.get (| "slot" |);
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_to_storage_from_array_array_uint8_calldata_calldata_to_array_array_uint",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_array_uint8_calldata_calldata",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "resize_array_array_array_uint8_storage",
                [
                  M.get (| "slot" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.call (|
                  "array_dataslot_array_array_uint8_calldata_calldata",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["elementSlot"],
                Some (M.call (|
                  "array_dataslot_array_array_uint8_storage",
                  [
                    M.get (| "slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["stackItem"],
                      Some (M.get (| "srcPtr" |))
                    |) in
                  let _ :=
                    M.call (|
                      "update_storage_value_offsett_array_uint8_calldata_to_array_uint",
                      [
                        M.get (| "elementSlot" |);
                        M.get (| "stackItem" |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["srcPtr"],
                      M.call (|
                        "add",
                        [
                          M.get (| "srcPtr" |);
                          [Literal.number 64]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["elementSlot"],
                      M.call (|
                        "add",
                        [
                          M.get (| "elementSlot" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_array_array_uint8_calldata_calldata_to_array_array_uint",
          ["slot"; "offset"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.get (| "offset" |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x00",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "copy_array_to_storage_from_array_array_uint8_calldata_calldata_to_array_array_uint",
                [
                  M.get (| "slot" |);
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_uint8_",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                Some (M.call (|
                  "array_length_array_array_uint8_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                Some (M.call (|
                  "array_dataslot_array_array_uint8_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_uint",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                Some (M.call (|
                  "array_length_array_uint8_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                Some (M.call (|
                  "array_dataslot_array_uint8_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "div",
                      [
                        M.get (| "index" |);
                        [Literal.number 32]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "mul",
                  [
                    M.call (|
                      "mod",
                      [
                        M.get (| "index" |);
                        [Literal.number 32]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_dynamic_uint8",
          ["slot"; "offset"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_dynamict_uint8",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_1_by_1_to_uint8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "require_helper",
          ["condition"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "condition" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_2_by_1_to_uint8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_3_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_3_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_0_by_1_to_uint8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_test2",
          ["var__a_offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["_1_offset"],
                Some (M.get (| "var__a_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_84_offset"],
                Some (M.get (| "_1_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["_2_slot"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["expr_81_slot"],
                Some (M.get (| "_2_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_1"; "_2"],
                Some (M.call (|
                  "storage_array_index_access_array_uint",
                  [
                    M.get (| "expr_81_slot" |);
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_array_array_uint8_calldata_calldata_to_array_array_uint",
                [
                  M.get (| "_1" |);
                  M.get (| "_2" |);
                  M.get (| "expr_84_offset" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_6_slot"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["expr_88_slot"],
                Some (M.get (| "_6_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_3"; "_4"],
                Some (M.call (|
                  "storage_array_index_access_array_uint",
                  [
                    M.get (| "expr_88_slot" |);
                    M.get (| "expr_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_9_slot"],
                Some (M.get (| "_3" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_90_slot"],
                Some (M.get (| "_9_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_5"; "_6"],
                Some (M.call (|
                  "storage_array_index_access_uint8_",
                  [
                    M.get (| "expr_90_slot" |);
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_slot"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_92_slot"],
                Some (M.get (| "_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_7"; "_8"],
                Some (M.call (|
                  "storage_array_index_access_uint",
                  [
                    M.get (| "expr_92_slot" |);
                    M.get (| "expr_3" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                Some (M.call (|
                  "read_from_storage_split_dynamic_uint8",
                  [
                    M.get (| "_7" |);
                    M.get (| "_8" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.get (| "_9" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint8",
                      [
                        M.get (| "expr_4" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_1_by_1_to_uint8",
                      [
                        M.get (| "expr_5" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_6" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_16_slot"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["expr_100_slot"],
                Some (M.get (| "_16_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_10"; "_11"],
                Some (M.call (|
                  "storage_array_index_access_array_uint",
                  [
                    M.get (| "expr_100_slot" |);
                    M.get (| "expr_7" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_19_slot"],
                Some (M.get (| "_10" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_102_slot"],
                Some (M.get (| "_19_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_12"; "_13"],
                Some (M.call (|
                  "storage_array_index_access_uint8_",
                  [
                    M.get (| "expr_102_slot" |);
                    M.get (| "expr_8" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_22_slot"],
                Some (M.get (| "_12" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_104_slot"],
                Some (M.get (| "_22_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_14"; "_15"],
                Some (M.call (|
                  "storage_array_index_access_uint",
                  [
                    M.get (| "expr_104_slot" |);
                    M.get (| "expr_9" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_16"],
                Some (M.call (|
                  "read_from_storage_split_dynamic_uint8",
                  [
                    M.get (| "_14" |);
                    M.get (| "_15" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some (M.get (| "_16" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint8",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_2_by_1_to_uint8",
                      [
                        M.get (| "expr_11" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_12" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_26_slot"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["expr_112_slot"],
                Some (M.get (| "_26_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_17"; "_18"],
                Some (M.call (|
                  "storage_array_index_access_array_uint",
                  [
                    M.get (| "expr_112_slot" |);
                    M.get (| "expr_13" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_29_slot"],
                Some (M.get (| "_17" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_114_slot"],
                Some (M.get (| "_29_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_19"; "_20"],
                Some (M.call (|
                  "storage_array_index_access_uint8_",
                  [
                    M.get (| "expr_114_slot" |);
                    M.get (| "expr_14" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_32_slot"],
                Some (M.get (| "_19" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_116_slot"],
                Some (M.get (| "_32_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_21"; "_22"],
                Some (M.call (|
                  "storage_array_index_access_uint",
                  [
                    M.get (| "expr_116_slot" |);
                    M.get (| "expr_15" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_23"],
                Some (M.call (|
                  "read_from_storage_split_dynamic_uint8",
                  [
                    M.get (| "_21" |);
                    M.get (| "_22" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some (M.get (| "_23" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some ([Literal.number 0x03])
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint8",
                      [
                        M.get (| "expr_16" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint8",
                      [
                        M.get (| "expr_17" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_18" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_36_slot"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["expr_124_slot"],
                Some (M.get (| "_36_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_24"; "_25"],
                Some (M.call (|
                  "storage_array_index_access_array_uint",
                  [
                    M.get (| "expr_124_slot" |);
                    M.get (| "expr_19" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_39_slot"],
                Some (M.get (| "_24" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_126_slot"],
                Some (M.get (| "_39_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_26"; "_27"],
                Some (M.call (|
                  "storage_array_index_access_uint8_",
                  [
                    M.get (| "expr_126_slot" |);
                    M.get (| "expr_20" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_42_slot"],
                Some (M.get (| "_26" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_128_slot"],
                Some (M.get (| "_42_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_28"; "_29"],
                Some (M.call (|
                  "storage_array_index_access_uint",
                  [
                    M.get (| "expr_128_slot" |);
                    M.get (| "expr_21" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_30"],
                Some (M.call (|
                  "read_from_storage_split_dynamic_uint8",
                  [
                    M.get (| "_28" |);
                    M.get (| "_29" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                Some (M.get (| "_30" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                Some ([Literal.number 0x04])
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint8",
                      [
                        M.get (| "expr_22" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint8",
                      [
                        M.get (| "expr_23" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_24" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_46_slot"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["expr_136_slot"],
                Some (M.get (| "_46_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_31"; "_32"],
                Some (M.call (|
                  "storage_array_index_access_array_uint",
                  [
                    M.get (| "expr_136_slot" |);
                    M.get (| "expr_25" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_49_slot"],
                Some (M.get (| "_31" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_138_slot"],
                Some (M.get (| "_49_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_33"; "_34"],
                Some (M.call (|
                  "storage_array_index_access_uint8_",
                  [
                    M.get (| "expr_138_slot" |);
                    M.get (| "expr_26" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_52_slot"],
                Some (M.get (| "_33" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_140_slot"],
                Some (M.get (| "_52_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_35"; "_36"],
                Some (M.call (|
                  "storage_array_index_access_uint",
                  [
                    M.get (| "expr_140_slot" |);
                    M.get (| "expr_27" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_37"],
                Some (M.call (|
                  "read_from_storage_split_dynamic_uint8",
                  [
                    M.get (| "_35" |);
                    M.get (| "_36" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                Some (M.get (| "_37" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint8",
                      [
                        M.get (| "expr_28" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_0_by_1_to_uint8",
                      [
                        M.get (| "expr_29" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_30" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_56_slot"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["expr_148_slot"],
                Some (M.get (| "_56_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_38"; "_39"],
                Some (M.call (|
                  "storage_array_index_access_array_uint",
                  [
                    M.get (| "expr_148_slot" |);
                    M.get (| "expr_31" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_59_slot"],
                Some (M.get (| "_38" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_150_slot"],
                Some (M.get (| "_59_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_40"; "_41"],
                Some (M.call (|
                  "storage_array_index_access_uint8_",
                  [
                    M.get (| "expr_150_slot" |);
                    M.get (| "expr_32" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_62_slot"],
                Some (M.get (| "_40" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_152_slot"],
                Some (M.get (| "_62_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_33"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_42"; "_43"],
                Some (M.call (|
                  "storage_array_index_access_uint",
                  [
                    M.get (| "expr_152_slot" |);
                    M.get (| "expr_33" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_44"],
                Some (M.call (|
                  "read_from_storage_split_dynamic_uint8",
                  [
                    M.get (| "_42" |);
                    M.get (| "_43" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_34"],
                Some (M.get (| "_44" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_35"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_36"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint8",
                      [
                        M.get (| "expr_34" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_0_by_1_to_uint8",
                      [
                        M.get (| "expr_35" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_36" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_66_slot"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["expr_160_slot"],
                Some (M.get (| "_66_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_37"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_45"; "_46"],
                Some (M.call (|
                  "storage_array_index_access_array_uint",
                  [
                    M.get (| "expr_160_slot" |);
                    M.get (| "expr_37" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_69_slot"],
                Some (M.get (| "_45" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_162_slot"],
                Some (M.get (| "_69_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_38"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_47"; "_48"],
                Some (M.call (|
                  "storage_array_index_access_uint8_",
                  [
                    M.get (| "expr_162_slot" |);
                    M.get (| "expr_38" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_72_slot"],
                Some (M.get (| "_47" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_164_slot"],
                Some (M.get (| "_72_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_39"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_49"; "_50"],
                Some (M.call (|
                  "storage_array_index_access_uint",
                  [
                    M.get (| "expr_164_slot" |);
                    M.get (| "expr_39" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_51"],
                Some (M.call (|
                  "read_from_storage_split_dynamic_uint8",
                  [
                    M.get (| "_49" |);
                    M.get (| "_50" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_40"],
                Some (M.get (| "_51" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_41"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_42"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint8",
                      [
                        M.get (| "expr_40" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_0_by_1_to_uint8",
                      [
                        M.get (| "expr_41" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_42" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_76_slot"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["expr_172_slot"],
                Some (M.get (| "_76_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_43"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_52"; "_53"],
                Some (M.call (|
                  "storage_array_index_access_array_uint",
                  [
                    M.get (| "expr_172_slot" |);
                    M.get (| "expr_43" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_79_slot"],
                Some (M.get (| "_52" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_174_slot"],
                Some (M.get (| "_79_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_44"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_54"; "_55"],
                Some (M.call (|
                  "storage_array_index_access_uint8_",
                  [
                    M.get (| "expr_174_slot" |);
                    M.get (| "expr_44" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_82_slot"],
                Some (M.get (| "_54" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_176_slot"],
                Some (M.get (| "_82_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_45"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_56"; "_57"],
                Some (M.call (|
                  "storage_array_index_access_uint",
                  [
                    M.get (| "expr_176_slot" |);
                    M.get (| "expr_45" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_58"],
                Some (M.call (|
                  "read_from_storage_split_dynamic_uint8",
                  [
                    M.get (| "_56" |);
                    M.get (| "_57" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_46"],
                Some (M.get (| "_58" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_47"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_48"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint8",
                      [
                        M.get (| "expr_46" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_0_by_1_to_uint8",
                      [
                        M.get (| "expr_47" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_48" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "calldata_array_index_access_array_uint8_calldata_calldata_calldata",
          ["base_ref"; "index"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        [Literal.number 0x02]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "base_ref" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 128]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_array_array_uint8_calldata_calldata_to_array_array_uint",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "copy_array_to_storage_from_array_array_uint8_calldata_calldata_to_array_array_uint",
                [
                  M.get (| "slot" |);
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_test",
          ["var_a_offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["_offset"],
                Some (M.get (| "var_a_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_26_offset"],
                Some (M.get (| "_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_offset"],
                Some (M.call (|
                  "calldata_array_index_access_array_uint8_calldata_calldata_calldata",
                  [
                    M.get (| "expr_26_offset" |);
                    M.call (|
                      "convert_rational_by_to_uint256",
                      [
                        M.get (| "expr" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_array_array_uint8_calldata_calldata_to_array_array_uint",
                [
                  [Literal.number 0x00];
                  M.get (| "expr_offset" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_88_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_32_slot"],
                Some (M.get (| "_88_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_1"; "_2"],
                Some (M.call (|
                  "storage_array_index_access_uint8_",
                  [
                    M.get (| "expr_32_slot" |);
                    M.get (| "expr_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_91_slot"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_slot"],
                Some (M.get (| "_91_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_3"; "_4"],
                Some (M.call (|
                  "storage_array_index_access_uint",
                  [
                    M.get (| "expr_slot" |);
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.call (|
                  "read_from_storage_split_dynamic_uint8",
                  [
                    M.get (| "_3" |);
                    M.get (| "_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint8",
                      [
                        M.get (| "expr_3" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_1_by_1_to_uint8",
                      [
                        M.get (| "expr_4" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_5" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_95_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_42_slot"],
                Some (M.get (| "_95_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_6"; "_7"],
                Some (M.call (|
                  "storage_array_index_access_uint8_",
                  [
                    M.get (| "expr_42_slot" |);
                    M.get (| "expr_6" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_98_slot"],
                Some (M.get (| "_6" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_44_slot"],
                Some (M.get (| "_98_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_8"; "_9"],
                Some (M.call (|
                  "storage_array_index_access_uint",
                  [
                    M.get (| "expr_44_slot" |);
                    M.get (| "expr_7" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_10"],
                Some (M.call (|
                  "read_from_storage_split_dynamic_uint8",
                  [
                    M.get (| "_8" |);
                    M.get (| "_9" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some (M.get (| "_10" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint8",
                      [
                        M.get (| "expr_8" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_2_by_1_to_uint8",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_10" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_102_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_52_slot"],
                Some (M.get (| "_102_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_11"; "_12"],
                Some (M.call (|
                  "storage_array_index_access_uint8_",
                  [
                    M.get (| "expr_52_slot" |);
                    M.get (| "expr_11" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_105_slot"],
                Some (M.get (| "_11" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_54_slot"],
                Some (M.get (| "_105_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_13"; "_14"],
                Some (M.call (|
                  "storage_array_index_access_uint",
                  [
                    M.get (| "expr_54_slot" |);
                    M.get (| "expr_12" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_15"],
                Some (M.call (|
                  "read_from_storage_split_dynamic_uint8",
                  [
                    M.get (| "_13" |);
                    M.get (| "_14" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some (M.get (| "_15" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some ([Literal.number 0x03])
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint8",
                      [
                        M.get (| "expr_13" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint8",
                      [
                        M.get (| "expr_14" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_15" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_109_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_62_slot"],
                Some (M.get (| "_109_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_16"; "_17"],
                Some (M.call (|
                  "storage_array_index_access_uint8_",
                  [
                    M.get (| "expr_62_slot" |);
                    M.get (| "expr_16" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_112_slot"],
                Some (M.get (| "_16" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_64_slot"],
                Some (M.get (| "_112_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_18"; "_19"],
                Some (M.call (|
                  "storage_array_index_access_uint",
                  [
                    M.get (| "expr_64_slot" |);
                    M.get (| "expr_17" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_20"],
                Some (M.call (|
                  "read_from_storage_split_dynamic_uint8",
                  [
                    M.get (| "_18" |);
                    M.get (| "_19" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some (M.get (| "_20" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some ([Literal.number 0x04])
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint8",
                      [
                        M.get (| "expr_18" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint8",
                      [
                        M.get (| "expr_19" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_20" |)
                ]
              |) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a264697066735822122050862cd128dd1f6f9799183ae574f3c628a5bdc3449edf1114987b23557bc2c364736f6c634300081b0033".
  End C_185_deployed.
End C_185.
