(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module c.
  Definition large : Value.t :=
    undefined.

  Definition small : Value.t :=
    undefined.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        (* Beginning of a node! *)
id: 40
src: 116:92:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          Value.Integer 7
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "i" |)
        |)
body: let _ :=
          M.call (|
            M.member_access (|
              M.get_name (| "large" |),
              "push"
            |),
            []
          |) in
        let _ :=
          M.call (|
            M.member_access (|
              M.get_name (| "small" |),
              "push"
            |),
            []
          |) in
        Value.Tuple []
isSimpleCounterLoop: 1
 in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.index_access (|
                M.get_name (| "large" |),
                Some (Value.Integer 3)
              |),
              Some (Value.Integer 2)
            |),
            Some (Value.Integer 0)
          |),
          Value.Integer 2
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "large" |),
            Some (Value.Integer 1)
          |),
          M.index_access (|
            M.get_name (| "large" |),
            Some (Value.Integer 3)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.index_access (|
                M.get_name (| "small" |),
                Some (Value.Integer 3)
              |),
              Some (Value.Integer 2)
            |),
            Some (Value.Integer 0)
          |),
          Value.Integer 2
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "small" |),
            Some (Value.Integer 1)
          |),
          M.index_access (|
            M.get_name (| "small" |),
            Some (Value.Integer 2)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "r" |),
          M.bin_op (|
            "|",
            M.bin_op (|
              "*",
              Value.Tuple [
                M.bin_op (|
                  "|",
                  M.bin_op (|
                    "*",
                    Value.Tuple [
                      M.bin_op (|
                        "|",
                        M.bin_op (|
                          "*",
                          M.index_access (|
                            M.index_access (|
                              M.index_access (|
                                M.get_name (| "small" |),
                                Some (Value.Integer 3)
                              |),
                              Some (Value.Integer 2)
                            |),
                            Some (Value.Integer 0)
                          |),
                          Value.Integer 0x100
                        |),
                        M.index_access (|
                          M.index_access (|
                            M.index_access (|
                              M.get_name (| "small" |),
                              Some (Value.Integer 1)
                            |),
                            Some (Value.Integer 2)
                          |),
                          Some (Value.Integer 0)
                        |)
                      |)
                    ],
                    Value.Integer 0x100
                  |),
                  M.index_access (|
                    M.index_access (|
                      M.index_access (|
                        M.get_name (| "large" |),
                        Some (Value.Integer 3)
                      |),
                      Some (Value.Integer 2)
                    |),
                    Some (Value.Integer 0)
                  |)
                |)
              ],
              Value.Integer 0x100
            |),
            M.index_access (|
              M.index_access (|
                M.index_access (|
                  M.get_name (| "large" |),
                  Some (Value.Integer 1)
                |),
                Some (Value.Integer 2)
              |),
              Some (Value.Integer 0)
            |)
          |)
        |) in
      let _ :=
        M.un_op (|
          true,
          "delete",
          M.get_name (| "small" |)
        |) in
      let _ :=
        M.un_op (|
          true,
          "delete",
          M.get_name (| "large" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition clear (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        (* Beginning of a node! *)
id: 154
src: 589:92:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          Value.Integer 7
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "i" |)
        |)
body: let _ :=
          M.call (|
            M.member_access (|
              M.get_name (| "large" |),
              "push"
            |),
            []
          |) in
        let _ :=
          M.call (|
            M.member_access (|
              M.get_name (| "small" |),
              "push"
            |),
            []
          |) in
        Value.Tuple []
isSimpleCounterLoop: 1
 in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.index_access (|
                M.get_name (| "small" |),
                Some (Value.Integer 3)
              |),
              Some (Value.Integer 2)
            |),
            Some (Value.Integer 0)
          |),
          Value.Integer 0
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.index_access (|
                M.get_name (| "large" |),
                Some (Value.Integer 3)
              |),
              Some (Value.Integer 2)
            |),
            Some (Value.Integer 0)
          |),
          Value.Integer 0
        |) in
      let _ :=
        M.while (|
          WhileKind.While,
          M.bin_op (|
            ">",
            M.member_access (|
              M.get_name (| "small" |),
              "length"
            |),
            Value.Integer 0
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "small" |),
              "pop"
            |),
            []
          |)
        |) in
      let _ :=
        M.while (|
          WhileKind.While,
          M.bin_op (|
            ">",
            M.member_access (|
              M.get_name (| "large" |),
              "length"
            |),
            Value.Integer 0
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "large" |),
              "pop"
            |),
            []
          |)
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.member_access (|
              M.get_name (| "small" |),
              "length"
            |),
            M.member_access (|
              M.get_name (| "large" |),
              "length"
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End c.
