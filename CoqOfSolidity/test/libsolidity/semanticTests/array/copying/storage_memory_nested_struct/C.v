(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_188.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            [

            ]
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                [

                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          M.call (|
            "allocate_unbounded",
            [

            ]
          |)
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f3138385f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3138385f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3138385f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_188_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x26121ff0),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_f",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            [

            ]
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint8",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint8",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint8",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_to_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint8_uint8_uint256_uint8_uint8_uint256",
          ["headStart"; "value0"; "value1"; "value2"; "value3"; "value4"; "value5"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 192]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint8",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint8",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value2" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 64]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint8",
                [
                  M.get (| "value3" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 96]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint8",
                [
                  M.get (| "value4" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 128]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value5" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 160]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_f",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"; "ret_2"; "ret_3"; "ret_4"; "ret_5"],
                M.call (|
                  "fun_f",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_uint8_uint8_uint256_uint8_uint8_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |);
                    M.get (| "ret_2" |);
                    M.get (| "ret_3" |);
                    M.get (| "ret_4" |);
                    M.get (| "ret_5" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint8",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_array_array_array_struct_T_storage_dyn_storage_to_array_array_struct_T__dyn_ptr",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_array_struct_T_storage_dyn_ptr",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x32",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x32]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_array_struct_T_storage_dyn_ptr",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.get (| "ptr" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_struct_T__dyn_ptr",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                M.call (|
                  "array_length_array_array_struct_T_storage_dyn_ptr",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                M.call (|
                  "array_dataslot_array_array_struct_T_storage_dyn_ptr",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 6]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_push_zero_array_array_struct_T_storage_dyn_ptr",
          ["array"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["oldLen"],
                M.call (|
                  "array_length_array_array_struct_T_storage_dyn_ptr",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "oldLen" |);
                        [Literal.number 18446744073709551616]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "array" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "oldLen" |);
                      [Literal.number 1]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["slot"; "offset"],
                M.call (|
                  "storage_array_index_access_struct_T__dyn_ptr",
                  [
                    M.get (| "array" |);
                    M.get (| "oldLen" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_array_struct_T_storage_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_array_struct_T_storage_dyn",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.get (| "ptr" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_struct_T__dyn",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                M.call (|
                  "array_length_array_array_struct_T_storage_dyn",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                M.call (|
                  "array_dataslot_array_array_struct_T_storage_dyn",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 6]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_struct_T_storage",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x03]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_struct_T_storage",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_struct_T",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                M.call (|
                  "array_length_array_struct_T_storage",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                M.call (|
                  "array_dataslot_array_struct_T_storage",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 2]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_0",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_shift",
          ["value"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                [Literal.number 255]
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_0",
                  [
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint8_to_uint8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint8",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_uint8",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_uint8_to_t_uint8",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                M.call (|
                  "convert_uint8_to_uint8",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_shift",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.call (|
                        "prepare_store_uint8",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_12_by_1_to_uint8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 8];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_shift_1",
          ["value"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                [Literal.number 65280]
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left",
                  [
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_uint8_to_uint8",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                M.call (|
                  "convert_uint8_to_uint8",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_shift_1",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.call (|
                        "prepare_store_uint8",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_array_array_uint256_dyn_storage_to_array_uint256_dyn_ptr",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_1_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_1_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_1_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint256_dyn_storage_ptr",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.get (| "ptr" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint256_dyn_storage_ptr",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_uint256_dyn_ptr",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                M.call (|
                  "array_length_array_uint256_dyn_storage_ptr",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                M.call (|
                  "array_dataslot_array_uint256_dyn_storage_ptr",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_dynamic",
          ["bits"; "value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    M.get (| "bits" |);
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_dynamic32",
          ["value"; "shiftBytes"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["shiftBits"],
                M.call (|
                  "mul",
                  [
                    M.get (| "shiftBytes" |);
                    [Literal.number 8]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["mask"],
                M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint256_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_uint256",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_uint256_to_uint256",
          ["slot"; "offset"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                M.call (|
                  "convert_uint256_to_uint256",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_dynamic32",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.get (| "offset" |);
                      M.call (|
                        "prepare_store_uint256",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_push_from_uint256_to_array_uint256_dyn_storage_ptr",
          ["array"; "value0"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["oldLen"],
                M.call (|
                  "sload",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "oldLen" |);
                        [Literal.number 18446744073709551616]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "array" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "oldLen" |);
                      [Literal.number 1]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["slot"; "offset"],
                M.call (|
                  "storage_array_index_access_uint256_dyn_ptr",
                  [
                    M.get (| "array" |);
                    M.get (| "oldLen" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_uint256_to_uint256",
                [
                  M.get (| "slot" |);
                  M.get (| "offset" |);
                  M.get (| "value0" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_2_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_2_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_2_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_3_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_3_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_3_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_21_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_21_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_22_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_22_by_1_to_uint8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_22_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_5_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_5_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_5_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "round_up_to_mul_of",
          ["value"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "and",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 31]
                      ]
                    |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 31]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "finalize_allocation",
          ["memPtr"; "size"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["newFreePtr"],
                M.call (|
                  "add",
                  [
                    M.get (| "memPtr" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "size" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "newFreePtr" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "newFreePtr" |);
                        M.get (| "memPtr" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 64];
                  M.get (| "newFreePtr" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory",
          ["size"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "memPtr" |);
                  M.get (| "size" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_array_array_struct_T_dyn",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "mul",
                  [
                    M.get (| "length" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "add",
                  [
                    M.get (| "size" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_array_array_array_struct_T_dyn",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["allocSize"],
                M.call (|
                  "array_allocation_size_array_array_struct_T_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    M.get (| "allocSize" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.get (| "length" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_array_struct_T",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "mul",
                  [
                    M.get (| "length" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_array_array_struct_T",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["allocSize"],
                M.call (|
                  "array_allocation_size_array_struct_T",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    M.get (| "allocSize" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_0_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_uint8",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_0_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_uint8",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offsett_uint8",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "write_to_memory_uint8",
          ["memPtr"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "cleanup_uint8",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_8_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 8];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_1t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_8_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_t_uint8",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offset_1t_uint8",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint256_dyn_storage",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_array_uint256_dyn",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint256_dyn_storage",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.get (| "ptr" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encodeUpdatedPos_uint256",
          ["value0"; "pos"],
          ["updatedPos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value0" |);
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updatedPos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_uint256",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint256",
                  [
                    M.call (|
                      "shift_right_0_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_offset_uint256",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offsett_uint256",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_nextElement_array_uint256_dyn_storage",
          ["ptr"],
          ["next"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["next"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x01]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_uint256_dyn_storage",
          ["value"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                M.call (|
                  "array_length_array_uint256_dyn_storage",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_uint256_dyn",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["baseRef"],
                M.call (|
                  "array_dataslot_array_uint256_dyn_storage",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                M.get (| "baseRef" |)
              |) in
            let _ :=
              M.assign (|
                ["i"],
                [Literal.number 0]
              |) in
            let _ :=
              M.for (|
                tt,
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                let _ :=
                  M.declare (|
                    ["i"],
                    M.call (|
                      "add",
                      [
                        M.get (| "i" |);
                        [Literal.number 1]
                      ]
                    |)
                  |) in
                tt,
                let _ :=
                  M.assign (|
                    ["elementValue0"],
                    M.call (|
                      "read_from_storage_offset_uint256",
                      [
                        M.get (| "srcPtr" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["pos"],
                    M.call (|
                      "abi_encodeUpdatedPos_uint256",
                      [
                        M.get (| "elementValue0" |);
                        M.get (| "pos" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["srcPtr"],
                    M.call (|
                      "array_nextElement_array_uint256_dyn_storage",
                      [
                        M.get (| "srcPtr" |)
                      ]
                    |)
                  |) in
                tt
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encodeUpdatedPos_array_uint256_dyn_storage",
          ["value0"; "pos"],
          ["updatedPos"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["updatedPos"],
                M.call (|
                  "abi_encode_array_uint256_dyn_storage",
                  [
                    M.get (| "value0" |);
                    M.get (| "pos" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_from_storage_to_memory_array_uint256_dyn",
          ["slot"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["end"],
                M.call (|
                  "abi_encodeUpdatedPos_array_uint256_dyn_storage",
                  [
                    M.get (| "slot" |);
                    M.get (| "memPtr" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "end" |);
                      M.get (| "memPtr" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "write_to_memory_array_uint256_dyn",
          ["memPtr"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_struct_struct_T",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    [Literal.number 96]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_reference_type_struct_T",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "allocate_memory_struct_struct_T",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memberValue"],
                M.call (|
                  "read_from_storage_split_offset_uint8",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "slot" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint8",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.get (| "memberValue" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["memberValue_1"],
                M.call (|
                  "read_from_storage_split_offset_t_uint8",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "slot" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint8",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 32]
                    ]
                  |);
                  M.get (| "memberValue_1" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["memberValue_2"],
                M.call (|
                  "copy_array_from_storage_to_memory_array_uint256_dyn",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "slot" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "write_to_memory_array_uint256_dyn",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 64]
                    ]
                  |);
                  M.get (| "memberValue_2" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_struct_T_storage_to_struct_T",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "read_from_storage_reference_type_struct_T",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_from_storage_to_memory_array_struct_T",
          ["slot"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                M.call (|
                  "array_length_array_struct_T_storage",
                  [
                    M.get (| "slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_array_array_struct_T",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["mpos"],
                M.get (| "memPtr" |)
              |) in
            let _ :=
              M.assign (|
                ["spos"],
                M.call (|
                  "array_dataslot_array_struct_T_storage",
                  [
                    M.get (| "slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["i"],
                [Literal.number 0]
              |) in
            let _ :=
              M.for (|
                tt,
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                let _ :=
                  M.declare (|
                    ["i"],
                    M.call (|
                      "add",
                      [
                        M.get (| "i" |);
                        [Literal.number 1]
                      ]
                    |)
                  |) in
                tt,
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.get (| "mpos" |);
                      M.call (|
                        "convert_struct_T_storage_to_struct_T",
                        [
                          M.get (| "spos" |)
                        ]
                      |)
                    ]
                  |) in
                let _ :=
                  M.declare (|
                    ["mpos"],
                    M.call (|
                      "add",
                      [
                        M.get (| "mpos" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["spos"],
                    M.call (|
                      "add",
                      [
                        M.get (| "spos" |);
                        [Literal.number 2]
                      ]
                    |)
                  |) in
                tt
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_array_array_struct_T_storage_to_array_struct_T",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "copy_array_from_storage_to_memory_array_struct_T",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_from_storage_to_memory_array_array_struct_T__dyn",
          ["slot"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                M.call (|
                  "array_length_array_array_struct_T_storage_dyn",
                  [
                    M.get (| "slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_array_array_array_struct_T_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["mpos"],
                M.get (| "memPtr" |)
              |) in
            let _ :=
              M.declare (|
                ["mpos"],
                M.call (|
                  "add",
                  [
                    M.get (| "mpos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["spos"],
                M.call (|
                  "array_dataslot_array_array_struct_T_storage_dyn",
                  [
                    M.get (| "slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["i"],
                [Literal.number 0]
              |) in
            let _ :=
              M.for (|
                tt,
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                let _ :=
                  M.declare (|
                    ["i"],
                    M.call (|
                      "add",
                      [
                        M.get (| "i" |);
                        [Literal.number 1]
                      ]
                    |)
                  |) in
                tt,
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.get (| "mpos" |);
                      M.call (|
                        "convert_array_array_struct_T_storage_to_array_struct_T",
                        [
                          M.get (| "spos" |)
                        ]
                      |)
                    ]
                  |) in
                let _ :=
                  M.declare (|
                    ["mpos"],
                    M.call (|
                      "add",
                      [
                        M.get (| "mpos" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["spos"],
                    M.call (|
                      "add",
                      [
                        M.get (| "spos" |);
                        [Literal.number 6]
                      ]
                    |)
                  |) in
                tt
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_array_array_array_struct_T_storage_dyn_to_array_array_struct_T_dyn",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "copy_array_from_storage_to_memory_array_array_struct_T__dyn",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_array_struct_T_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "memory_array_index_access_struct_T_dyn",
          ["baseRef"; "index"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.call (|
                          "array_length_array_array_struct_T_dyn",
                          [
                            M.get (| "baseRef" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                M.call (|
                  "mul",
                  [
                    M.get (| "index" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "baseRef" |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_0_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_0_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_struct_T",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x03]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "memory_array_index_access_struct_T",
          ["baseRef"; "index"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.call (|
                          "array_length_array_struct_T",
                          [
                            M.get (| "baseRef" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                M.call (|
                  "mul",
                  [
                    M.get (| "index" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "baseRef" |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_memoryt_uint8",
          ["ptr"],
          ["returnValue"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["value"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "mload",
                      [
                        M.get (| "ptr" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["returnValue"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint256_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "memory_array_index_access_uint256_dyn",
          ["baseRef"; "index"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.call (|
                          "array_length_array_uint256_dyn",
                          [
                            M.get (| "baseRef" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                M.call (|
                  "mul",
                  [
                    M.get (| "index" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "baseRef" |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_memoryt_uint256",
          ["ptr"],
          ["returnValue"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["value"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "mload",
                      [
                        M.get (| "ptr" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["returnValue"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_f",
          [],
          ["var";
      "var_1";
      "var_2";
      "var_";
      "var_3";
      "var_4"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint8"],
                M.call (|
                  "zero_value_for_split_uint8",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_uint8" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint8_1"],
                M.call (|
                  "zero_value_for_split_uint8",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_1"],
                M.get (| "zero_uint8_1" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_t_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_2"],
                M.get (| "zero_t_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint8_2"],
                M.call (|
                  "zero_value_for_split_uint8",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "zero_uint8_2" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_t_uint8"],
                M.call (|
                  "zero_value_for_split_uint8",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_3"],
                M.get (| "zero_t_uint8" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_4"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["_7_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_29_slot"],
                M.get (| "_7_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_self_slot"],
                M.call (|
                  "convert_array_array_array_struct_T_storage_dyn_storage_to_array_array_struct_T__dyn_ptr",
                  [
                    M.get (| "expr_29_slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_1"; "_2"],
                M.call (|
                  "array_push_zero_array_array_struct_T_storage_dyn_ptr",
                  [
                    M.get (| "expr_self_slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_slot"],
                M.get (| "_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_36_self_slot"],
                M.call (|
                  "convert_array_array_array_struct_T_storage_dyn_storage_to_array_array_struct_T__dyn_ptr",
                  [
                    M.get (| "expr_slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_3"; "_4"],
                M.call (|
                  "array_push_zero_array_array_struct_T_storage_dyn_ptr",
                  [
                    M.get (| "expr_36_self_slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x0b]
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.call (|
                  "convert_rational_by_to_uint8",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_16_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_39_slot"],
                M.get (| "_16_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_6"; "_7"],
                M.call (|
                  "storage_array_index_access_struct_T__dyn",
                  [
                    M.get (| "expr_39_slot" |);
                    M.get (| "expr_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_19_slot"],
                M.get (| "_6" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_42_slot"],
                M.get (| "_19_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_8"; "_9"],
                M.call (|
                  "storage_array_index_access_struct_T",
                  [
                    M.get (| "expr_42_slot" |);
                    M.get (| "expr_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_22_slot"],
                M.get (| "_8" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_43_slot"],
                M.get (| "_22_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_10"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_43_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_uint8_to_t_uint8",
                [
                  M.get (| "_10" |);
                  M.get (| "_5" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                [Literal.number 0x0c]
              |) in
            let _ :=
              M.assign (|
                ["_11"],
                M.call (|
                  "convert_rational_12_by_1_to_uint8",
                  [
                    M.get (| "expr_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_25_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_48_slot"],
                M.get (| "_25_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_12"; "_13"],
                M.call (|
                  "storage_array_index_access_struct_T__dyn",
                  [
                    M.get (| "expr_48_slot" |);
                    M.get (| "expr_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_28_slot"],
                M.get (| "_12" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_51_slot"],
                M.get (| "_28_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_14"; "_15"],
                M.call (|
                  "storage_array_index_access_struct_T",
                  [
                    M.get (| "expr_51_slot" |);
                    M.get (| "expr_5" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_31_slot"],
                M.get (| "_14" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_52_slot"],
                M.get (| "_31_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_16"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_52_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_uint8_to_uint8",
                [
                  M.get (| "_16" |);
                  M.get (| "_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_33_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_57_slot"],
                M.get (| "_33_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_17"; "_18"],
                M.call (|
                  "storage_array_index_access_struct_T__dyn",
                  [
                    M.get (| "expr_57_slot" |);
                    M.get (| "expr_6" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_36_slot"],
                M.get (| "_17" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_60_slot"],
                M.get (| "_36_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_19"; "_20"],
                M.call (|
                  "storage_array_index_access_struct_T",
                  [
                    M.get (| "expr_60_slot" |);
                    M.get (| "expr_7" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_39_slot"],
                M.get (| "_19" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_61_slot"],
                M.get (| "_39_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_21"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_61_slot" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_41_slot"],
                M.get (| "_21" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_62_slot"],
                M.get (| "_41_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_63_self_slot"],
                M.call (|
                  "convert_array_array_uint256_dyn_storage_to_array_uint256_dyn_ptr",
                  [
                    M.get (| "expr_62_slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_22"],
                M.call (|
                  "convert_rational_1_by_1_to_uint256",
                  [
                    M.get (| "expr_8" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "array_push_from_uint256_to_array_uint256_dyn_storage_ptr",
                [
                  M.get (| "expr_63_self_slot" |);
                  M.get (| "_22" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_43_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_67_slot"],
                M.get (| "_43_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_23"; "_24"],
                M.call (|
                  "storage_array_index_access_struct_T__dyn",
                  [
                    M.get (| "expr_67_slot" |);
                    M.get (| "expr_9" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_46_slot"],
                M.get (| "_23" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_70_slot"],
                M.get (| "_46_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_25"; "_26"],
                M.call (|
                  "storage_array_index_access_struct_T",
                  [
                    M.get (| "expr_70_slot" |);
                    M.get (| "expr_10" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_49_slot"],
                M.get (| "_25" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_71_slot"],
                M.get (| "_49_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_27"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_71_slot" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_51_slot"],
                M.get (| "_27" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_72_slot"],
                M.get (| "_51_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_73_self_slot"],
                M.call (|
                  "convert_array_array_uint256_dyn_storage_to_array_uint256_dyn_ptr",
                  [
                    M.get (| "expr_72_slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_28"],
                M.call (|
                  "convert_rational_2_by_1_to_uint256",
                  [
                    M.get (| "expr_11" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "array_push_from_uint256_to_array_uint256_dyn_storage_ptr",
                [
                  M.get (| "expr_73_self_slot" |);
                  M.get (| "_28" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_53_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_77_slot"],
                M.get (| "_53_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_29"; "_30"],
                M.call (|
                  "storage_array_index_access_struct_T__dyn",
                  [
                    M.get (| "expr_77_slot" |);
                    M.get (| "expr_12" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_56_slot"],
                M.get (| "_29" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_80_slot"],
                M.get (| "_56_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_31"; "_32"],
                M.call (|
                  "storage_array_index_access_struct_T",
                  [
                    M.get (| "expr_80_slot" |);
                    M.get (| "expr_13" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_59_slot"],
                M.get (| "_31" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_81_slot"],
                M.get (| "_59_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_33"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_81_slot" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_61_slot"],
                M.get (| "_33" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_82_slot"],
                M.get (| "_61_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_83_self_slot"],
                M.call (|
                  "convert_array_array_uint256_dyn_storage_to_array_uint256_dyn_ptr",
                  [
                    M.get (| "expr_82_slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["_34"],
                M.call (|
                  "convert_rational_3_by_1_to_uint256",
                  [
                    M.get (| "expr_14" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "array_push_from_uint256_to_array_uint256_dyn_storage_ptr",
                [
                  M.get (| "expr_83_self_slot" |);
                  M.get (| "_34" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                [Literal.number 0x15]
              |) in
            let _ :=
              M.assign (|
                ["_35"],
                M.call (|
                  "convert_t_rational_by_to_t_uint8",
                  [
                    M.get (| "expr_15" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_64_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_87_slot"],
                M.get (| "_64_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_36"; "_37"],
                M.call (|
                  "storage_array_index_access_struct_T__dyn",
                  [
                    M.get (| "expr_87_slot" |);
                    M.get (| "expr_16" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_67_slot"],
                M.get (| "_36" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_90_slot"],
                M.get (| "_67_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_38"; "_39"],
                M.call (|
                  "storage_array_index_access_struct_T",
                  [
                    M.get (| "expr_90_slot" |);
                    M.get (| "expr_17" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_70_slot"],
                M.get (| "_38" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_91_slot"],
                M.get (| "_70_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_40"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_91_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_uint8_to_t_uint8",
                [
                  M.get (| "_40" |);
                  M.get (| "_35" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                [Literal.number 0x16]
              |) in
            let _ :=
              M.assign (|
                ["_41"],
                M.call (|
                  "convert_rational_22_by_1_to_uint8",
                  [
                    M.get (| "expr_18" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_73_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_96_slot"],
                M.get (| "_73_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_42"; "_43"],
                M.call (|
                  "storage_array_index_access_struct_T__dyn",
                  [
                    M.get (| "expr_96_slot" |);
                    M.get (| "expr_19" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_76_slot"],
                M.get (| "_42" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_99_slot"],
                M.get (| "_76_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_44"; "_45"],
                M.call (|
                  "storage_array_index_access_struct_T",
                  [
                    M.get (| "expr_99_slot" |);
                    M.get (| "expr_20" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_79_slot"],
                M.get (| "_44" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_100_slot"],
                M.get (| "_79_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_46"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_100_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_uint8_to_uint8",
                [
                  M.get (| "_46" |);
                  M.get (| "_41" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_81_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_105_slot"],
                M.get (| "_81_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_47"; "_48"],
                M.call (|
                  "storage_array_index_access_struct_T__dyn",
                  [
                    M.get (| "expr_105_slot" |);
                    M.get (| "expr_21" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_84_slot"],
                M.get (| "_47" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_108_slot"],
                M.get (| "_84_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_49"; "_50"],
                M.call (|
                  "storage_array_index_access_struct_T",
                  [
                    M.get (| "expr_108_slot" |);
                    M.get (| "expr_22" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_87_slot"],
                M.get (| "_49" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_109_slot"],
                M.get (| "_87_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_51"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_109_slot" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_89_slot"],
                M.get (| "_51" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_110_slot"],
                M.get (| "_89_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_111_self_slot"],
                M.call (|
                  "convert_array_array_uint256_dyn_storage_to_array_uint256_dyn_ptr",
                  [
                    M.get (| "expr_110_slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                [Literal.number 0x04]
              |) in
            let _ :=
              M.assign (|
                ["_52"],
                M.call (|
                  "convert_t_rational_by_to_t_uint256",
                  [
                    M.get (| "expr_23" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "array_push_from_uint256_to_array_uint256_dyn_storage_ptr",
                [
                  M.get (| "expr_111_self_slot" |);
                  M.get (| "_52" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_91_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_115_slot"],
                M.get (| "_91_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_53"; "_54"],
                M.call (|
                  "storage_array_index_access_struct_T__dyn",
                  [
                    M.get (| "expr_115_slot" |);
                    M.get (| "expr_24" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_94_slot"],
                M.get (| "_53" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_118_slot"],
                M.get (| "_94_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_55"; "_56"],
                M.call (|
                  "storage_array_index_access_struct_T",
                  [
                    M.get (| "expr_118_slot" |);
                    M.get (| "expr_25" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_97_slot"],
                M.get (| "_55" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_119_slot"],
                M.get (| "_97_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_57"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_119_slot" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_99_slot"],
                M.get (| "_57" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_120_slot"],
                M.get (| "_99_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_121_self_slot"],
                M.call (|
                  "convert_array_array_uint256_dyn_storage_to_array_uint256_dyn_ptr",
                  [
                    M.get (| "expr_120_slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                [Literal.number 0x05]
              |) in
            let _ :=
              M.assign (|
                ["_58"],
                M.call (|
                  "convert_rational_5_by_1_to_uint256",
                  [
                    M.get (| "expr_26" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "array_push_from_uint256_to_array_uint256_dyn_storage_ptr",
                [
                  M.get (| "expr_121_self_slot" |);
                  M.get (| "_58" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_101_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_125_slot"],
                M.get (| "_101_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_59"; "_60"],
                M.call (|
                  "storage_array_index_access_struct_T__dyn",
                  [
                    M.get (| "expr_125_slot" |);
                    M.get (| "expr_27" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_104_slot"],
                M.get (| "_59" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_128_slot"],
                M.get (| "_104_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_61"; "_62"],
                M.call (|
                  "storage_array_index_access_struct_T",
                  [
                    M.get (| "expr_128_slot" |);
                    M.get (| "expr_28" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_107_slot"],
                M.get (| "_61" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_129_slot"],
                M.get (| "_107_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_63"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_129_slot" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_109_slot"],
                M.get (| "_63" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_130_slot"],
                M.get (| "_109_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_131_self_slot"],
                M.call (|
                  "convert_array_array_uint256_dyn_storage_to_array_uint256_dyn_ptr",
                  [
                    M.get (| "expr_130_slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                [Literal.number 0x06]
              |) in
            let _ :=
              M.assign (|
                ["_64"],
                M.call (|
                  "convert_rational_by_to_uint256",
                  [
                    M.get (| "expr_29" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "array_push_from_uint256_to_array_uint256_dyn_storage_ptr",
                [
                  M.get (| "expr_131_self_slot" |);
                  M.get (| "_64" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_111_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_142_slot"],
                M.get (| "_111_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["var_m_mpos"],
                M.call (|
                  "convert_array_array_array_struct_T_storage_dyn_to_array_array_struct_T_dyn",
                  [
                    M.get (| "expr_142_slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_112_mpos"],
                M.get (| "var_m_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_144_mpos"],
                M.get (| "_112_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_113_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_T_dyn",
                      [
                        M.get (| "expr_144_mpos" |);
                        M.call (|
                          "convert_rational_0_by_1_to_uint256",
                          [
                            M.get (| "expr_30" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_146_mpos"],
                M.get (| "_113_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_114_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_T",
                      [
                        M.get (| "expr_146_mpos" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_31" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_148_mpos"],
                M.get (| "_114_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_65"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_148_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_66"],
                M.call (|
                  "read_from_memoryt_uint8",
                  [
                    M.get (| "_65" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                M.get (| "_66" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_component"],
                M.get (| "expr_32" |)
              |) in
            let _ :=
              M.assign (|
                ["_117_mpos"],
                M.get (| "var_m_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_150_mpos"],
                M.get (| "_117_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_33"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_118_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_T_dyn",
                      [
                        M.get (| "expr_150_mpos" |);
                        M.call (|
                          "convert_rational_0_by_1_to_uint256",
                          [
                            M.get (| "expr_33" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_152_mpos"],
                M.get (| "_118_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_34"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_119_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_T",
                      [
                        M.get (| "expr_152_mpos" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_34" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_154_mpos"],
                M.get (| "_119_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_67"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_154_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_68"],
                M.call (|
                  "read_from_memoryt_uint8",
                  [
                    M.get (| "_67" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_35"],
                M.get (| "_68" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_component_1"],
                M.get (| "expr_35" |)
              |) in
            let _ :=
              M.assign (|
                ["_122_mpos"],
                M.get (| "var_m_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_156_mpos"],
                M.get (| "_122_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_36"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_T_dyn",
                      [
                        M.get (| "expr_156_mpos" |);
                        M.call (|
                          "convert_rational_0_by_1_to_uint256",
                          [
                            M.get (| "expr_36" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_158_mpos"],
                M.get (| "_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_37"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_124_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_T",
                      [
                        M.get (| "expr_158_mpos" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_37" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_160_mpos"],
                M.get (| "_124_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_69"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_160_mpos" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_126_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_69" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_161_mpos"],
                M.get (| "_126_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_38"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_70"],
                M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.call (|
                      "memory_array_index_access_uint256_dyn",
                      [
                        M.get (| "expr_161_mpos" |);
                        M.call (|
                          "convert_rational_0_by_1_to_uint256",
                          [
                            M.get (| "expr_38" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_39"],
                M.get (| "_70" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_component_2"],
                M.get (| "expr_39" |)
              |) in
            let _ :=
              M.assign (|
                ["_128_mpos"],
                M.get (| "var_m_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_164_mpos"],
                M.get (| "_128_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_40"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_129_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_T_dyn",
                      [
                        M.get (| "expr_164_mpos" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_40" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_166_mpos"],
                M.get (| "_129_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_41"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_130_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_T",
                      [
                        M.get (| "expr_166_mpos" |);
                        M.call (|
                          "convert_rational_2_by_1_to_uint256",
                          [
                            M.get (| "expr_41" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_mpos"],
                M.get (| "_130_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_71"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_72"],
                M.call (|
                  "read_from_memoryt_uint8",
                  [
                    M.get (| "_71" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_42"],
                M.get (| "_72" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_component_3"],
                M.get (| "expr_42" |)
              |) in
            let _ :=
              M.assign (|
                ["_133_mpos"],
                M.get (| "var_m_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_170_mpos"],
                M.get (| "_133_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_43"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_134_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_T_dyn",
                      [
                        M.get (| "expr_170_mpos" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_43" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_172_mpos"],
                M.get (| "_134_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_44"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_135_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_T",
                      [
                        M.get (| "expr_172_mpos" |);
                        M.call (|
                          "convert_rational_2_by_1_to_uint256",
                          [
                            M.get (| "expr_44" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_174_mpos"],
                M.get (| "_135_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_73"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_174_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_74"],
                M.call (|
                  "read_from_memoryt_uint8",
                  [
                    M.get (| "_73" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_45"],
                M.get (| "_74" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_component_4"],
                M.get (| "expr_45" |)
              |) in
            let _ :=
              M.assign (|
                ["_138_mpos"],
                M.get (| "var_m_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_176_mpos"],
                M.get (| "_138_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_46"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_139_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_T_dyn",
                      [
                        M.get (| "expr_176_mpos" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_46" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_178_mpos"],
                M.get (| "_139_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_47"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_140_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_T",
                      [
                        M.get (| "expr_178_mpos" |);
                        M.call (|
                          "convert_rational_2_by_1_to_uint256",
                          [
                            M.get (| "expr_47" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_180_mpos"],
                M.get (| "_140_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_75"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_180_mpos" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_142_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_75" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_181_mpos"],
                M.get (| "_142_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_48"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_76"],
                M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.call (|
                      "memory_array_index_access_uint256_dyn",
                      [
                        M.get (| "expr_181_mpos" |);
                        M.call (|
                          "convert_rational_0_by_1_to_uint256",
                          [
                            M.get (| "expr_48" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_49"],
                M.get (| "_76" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_component_5"],
                M.get (| "expr_49" |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_component" |)
              |) in
            let _ :=
              M.declare (|
                ["var_1"],
                M.get (| "expr_component_1" |)
              |) in
            let _ :=
              M.declare (|
                ["var_2"],
                M.get (| "expr_component_2" |)
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "expr_component_3" |)
              |) in
            let _ :=
              M.declare (|
                ["var_3"],
                M.get (| "expr_component_4" |)
              |) in
            let _ :=
              M.declare (|
                ["var_4"],
                M.get (| "expr_component_5" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a2646970667358221220a34989dcac7c82b35d81bc4b1ed4866b70f69f80f46909a05e311e0e5fbd1b3a64736f6c634300081b0033".
  End C_188_deployed.
End C_188.
