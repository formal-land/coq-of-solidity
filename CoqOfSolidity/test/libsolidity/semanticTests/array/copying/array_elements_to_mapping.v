(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  Definition m : Value.t :=
    undefined.

  Definition s : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "s" |),
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 17
src: 124:9:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 16
src: 124:7:0
nodeType: ArrayTypeName
baseType: Ty.path "uint8"
length: 
typeDescriptions: typeString uint8[]typeIdentifier st_array$_t_uint8_$dyn_storage_ptr

length: 
typeDescriptions: typeString uint8[][]typeIdentifier st_array$_t_array$_t_uint8_$dyn_storage_$dyn_storage_ptr

,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "s" |),
            Some (Value.Integer 0)
          |),
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 27
src: 158:7:0
nodeType: ArrayTypeName
baseType: Ty.path "uint8"
length: 
typeDescriptions: typeString uint8[]typeIdentifier st_array$_t_uint8_$dyn_storage_ptr

,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "s" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          Value.Integer 10
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "s" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 1)
          |),
          Value.Integer 11
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "s" |),
            Some (Value.Integer 1)
          |),
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 53
src: 234:7:0
nodeType: ArrayTypeName
baseType: Ty.path "uint8"
length: 
typeDescriptions: typeString uint8[]typeIdentifier st_array$_t_uint8_$dyn_storage_ptr

,
            [
              Value.Integer 3
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "s" |),
              Some (Value.Integer 1)
            |),
            Some (Value.Integer 0)
          |),
          Value.Integer 12
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "s" |),
              Some (Value.Integer 1)
            |),
            Some (Value.Integer 1)
          |),
          Value.Integer 13
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "s" |),
              Some (Value.Integer 1)
            |),
            Some (Value.Integer 2)
          |),
          Value.Integer 14
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition from_storage (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "m" |),
            Some (Value.Integer 0)
          |),
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 96
src: 402:9:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 95
src: 402:7:0
nodeType: ArrayTypeName
baseType: Ty.path "uint8"
length: 
typeDescriptions: typeString uint8[]typeIdentifier st_array$_t_uint8_$dyn_storage_ptr

length: 
typeDescriptions: typeString uint8[][]typeIdentifier st_array$_t_array$_t_uint8_$dyn_storage_$dyn_storage_ptr

,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          M.index_access (|
            M.get_name (| "s" |),
            Some (Value.Integer 0)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 1)
          |),
          M.index_access (|
            M.get_name (| "s" |),
            Some (Value.Integer 1)
          |)
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "m" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition from_storage_ptr (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "sPtr" ],
          M.get_name (| "s" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "m" |),
            Some (Value.Integer 0)
          |),
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 147
src: 616:9:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 146
src: 616:7:0
nodeType: ArrayTypeName
baseType: Ty.path "uint8"
length: 
typeDescriptions: typeString uint8[]typeIdentifier st_array$_t_uint8_$dyn_storage_ptr

length: 
typeDescriptions: typeString uint8[][]typeIdentifier st_array$_t_array$_t_uint8_$dyn_storage_$dyn_storage_ptr

,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          M.index_access (|
            M.get_name (| "sPtr" |),
            Some (Value.Integer 0)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 1)
          |),
          M.index_access (|
            M.get_name (| "sPtr" |),
            Some (Value.Integer 1)
          |)
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "m" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition from_memory (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "a" ],
          M.get_name (| "s" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "m" |),
            Some (Value.Integer 0)
          |),
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 198
src: 827:9:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 197
src: 827:7:0
nodeType: ArrayTypeName
baseType: Ty.path "uint8"
length: 
typeDescriptions: typeString uint8[]typeIdentifier st_array$_t_uint8_$dyn_storage_ptr

length: 
typeDescriptions: typeString uint8[][]typeIdentifier st_array$_t_array$_t_uint8_$dyn_storage_$dyn_storage_ptr

,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          M.index_access (|
            M.get_name (| "a" |),
            Some (Value.Integer 0)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 1)
          |),
          M.index_access (|
            M.get_name (| "a" |),
            Some (Value.Integer 1)
          |)
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "m" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition from_calldata (α : list Value.t) : M :=
    match α with
    | [_a] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "m" |),
            Some (Value.Integer 0)
          |),
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 245
src: 1022:9:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 244
src: 1022:7:0
nodeType: ArrayTypeName
baseType: Ty.path "uint8"
length: 
typeDescriptions: typeString uint8[]typeIdentifier st_array$_t_uint8_$dyn_storage_ptr

length: 
typeDescriptions: typeString uint8[][]typeIdentifier st_array$_t_array$_t_uint8_$dyn_storage_$dyn_storage_ptr

,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          M.index_access (|
            M.get_name (| "_a" |),
            Some (Value.Integer 0)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 1)
          |),
          M.index_access (|
            M.get_name (| "_a" |),
            Some (Value.Integer 1)
          |)
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "m" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
