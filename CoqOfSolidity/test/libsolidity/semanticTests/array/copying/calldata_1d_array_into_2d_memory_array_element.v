(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.define (|
          [ "m" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 19
src: 202:8:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 18
src: 202:6:0
nodeType: ArrayTypeName
baseType: Ty.path "uint"
length: 
typeDescriptions: typeString uint256[]typeIdentifier st_array$_t_uint256_$dyn_storage_ptr

length: 
typeDescriptions: typeString uint256[][]typeIdentifier st_array$_t_array$_t_uint256_$dyn_storage_$dyn_storage_ptr

,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "m" |),
            Some (Value.Integer 0)
          |),
          M.get_name (| "a" |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "m" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.

(* Contract *)
Module Test.
  Definition c : Value.t :=
    M.call (|
      NewExpression (* Beginning of a node! *)
id: 38
src: 300:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 37
src: 300:1:0
nodeType: IdentifierPath
name: C
nameLocations: [300:1:0, ]
referencedDeclaration: 34

referencedDeclaration: 34
typeDescriptions: typeString contract CtypeIdentifier st_contract$_C_$34

,
      []
    |).

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "arr" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 52
src: 384:6:0
nodeType: ArrayTypeName
baseType: Ty.path "uint"
length: 
typeDescriptions: typeString uint256[]typeIdentifier st_array$_t_uint256_$dyn_storage_ptr

,
            [
              Value.Integer 4
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "arr" |),
            Some (Value.Integer 0)
          |),
          Value.Integer 13
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "arr" |),
            Some (Value.Integer 1)
          |),
          Value.Integer 14
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "arr" |),
            Some (Value.Integer 2)
          |),
          Value.Integer 15
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "arr" |),
            Some (Value.Integer 3)
          |),
          Value.Integer 16
        |) in
      let _ :=
        M.define (|
          [ "ret" ],
          M.call (|
            M.member_access (|
              M.get_name (| "c" |),
              "f"
            |),
            [
              M.get_name (| "arr" |)
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.get_name (| "ret" |),
                "length"
              |),
              Value.Integer 2
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.get_name (| "ret" |),
                  Some (Value.Integer 0)
                |),
                "length"
              |),
              Value.Integer 4
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.index_access (|
                  M.get_name (| "ret" |),
                  Some (Value.Integer 0)
                |),
                Some (Value.Integer 0)
              |),
              Value.Integer 13
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.index_access (|
                  M.get_name (| "ret" |),
                  Some (Value.Integer 0)
                |),
                Some (Value.Integer 1)
              |),
              Value.Integer 14
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.index_access (|
                  M.get_name (| "ret" |),
                  Some (Value.Integer 0)
                |),
                Some (Value.Integer 2)
              |),
              Value.Integer 15
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.index_access (|
                  M.get_name (| "ret" |),
                  Some (Value.Integer 0)
                |),
                Some (Value.Integer 3)
              |),
              Value.Integer 16
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.get_name (| "ret" |),
                  Some (Value.Integer 1)
                |),
                "length"
              |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Test.
