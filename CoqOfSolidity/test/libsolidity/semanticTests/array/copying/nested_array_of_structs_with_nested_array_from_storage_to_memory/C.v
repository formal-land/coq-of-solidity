(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_162.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            [

            ]
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                [

                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.call (|
          "constructor_C",
          [

          ]
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          M.call (|
            "allocate_unbounded",
            [

            ]
          |)
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f3136325f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3136325f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3136325f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_array_array_uint8_dyn_storage_to_array_uint8_dyn_ptr",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_23_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_uint8",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.call (|
                "and",
                [
                  M.get (| "value" |);
                  [Literal.number 0xff]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "identity",
        ["value"],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_23_by_1_to_uint8",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint8",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_23_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "panic_error_0x41",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    [Literal.number 0x4e487b71]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 4];
                [Literal.number 0x41]
              ]
            |) in
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0x24]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_dataslot_array_uint8_dyn_storage_ptr",
        ["ptr"],
        ["data"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["data"],
              M.get (| "ptr" |)
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.get (| "ptr" |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["data"],
              M.call (|
                "keccak256",
                [
                  [Literal.number 0];
                  [Literal.number 0x20]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "panic_error_0x32",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    [Literal.number 0x4e487b71]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 4];
                [Literal.number 0x32]
              ]
            |) in
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0x24]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_length_array_uint8_dyn_storage_ptr",
        ["value"],
        ["length"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["length"],
              M.call (|
                "sload",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "storage_array_index_access_uint8_dyn_ptr",
        ["array"; "index"],
        ["slot";
    "offset"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["arrayLength"],
              M.call (|
                "array_length_array_uint8_dyn_storage_ptr",
                [
                  M.get (| "array" |)
                ]
              |)
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "lt",
                    [
                      M.get (| "index" |);
                      M.get (| "arrayLength" |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x32",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["dataArea"],
              M.call (|
                "array_dataslot_array_uint8_dyn_storage_ptr",
                [
                  M.get (| "array" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["slot"],
              M.call (|
                "add",
                [
                  M.get (| "dataArea" |);
                  M.call (|
                    "div",
                    [
                      M.get (| "index" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["offset"],
              M.call (|
                "mul",
                [
                  M.call (|
                    "mod",
                    [
                      M.get (| "index" |);
                      [Literal.number 32]
                    ]
                  |);
                  [Literal.number 1]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_left_dynamic",
        ["bits"; "value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shl",
                [
                  M.get (| "bits" |);
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_byte_slice_dynamic1",
        ["value"; "shiftBytes"; "toInsert"],
        ["result"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["shiftBits"],
              M.call (|
                "mul",
                [
                  M.get (| "shiftBytes" |);
                  [Literal.number 8]
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["mask"],
              M.call (|
                "shift_left_dynamic",
                [
                  M.get (| "shiftBits" |);
                  [Literal.number 255]
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["toInsert"],
              M.call (|
                "shift_left_dynamic",
                [
                  M.get (| "shiftBits" |);
                  M.get (| "toInsert" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "and",
                [
                  M.get (| "value" |);
                  M.call (|
                    "not",
                    [
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["result"],
              M.call (|
                "or",
                [
                  M.get (| "value" |);
                  M.call (|
                    "and",
                    [
                      M.get (| "toInsert" |);
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_uint8_to_uint8",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint8",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_uint8",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "prepare_store_uint8",
        ["value"],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_storage_value_uint8_to_uint8",
        ["slot"; "offset"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["convertedValue"],
              M.call (|
                "convert_uint8_to_uint8",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "sstore",
              [
                M.get (| "slot" |);
                M.call (|
                  "update_byte_slice_dynamic1",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |);
                    M.get (| "offset" |);
                    M.call (|
                      "prepare_store_uint8",
                      [
                        M.get (| "convertedValue" |)
                      ]
                    |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_push_from_uint8_to_array_uint8_dyn_storage_ptr",
        ["array"; "value0"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["oldLen"],
              M.call (|
                "sload",
                [
                  M.get (| "array" |)
                ]
              |)
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "lt",
                    [
                      M.get (| "oldLen" |);
                      [Literal.number 18446744073709551616]
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x41",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.call (|
              "sstore",
              [
                M.get (| "array" |);
                M.call (|
                  "add",
                  [
                    M.get (| "oldLen" |);
                    [Literal.number 1]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["slot"; "offset"],
              M.call (|
                "storage_array_index_access_uint8_dyn_ptr",
                [
                  M.get (| "array" |);
                  M.get (| "oldLen" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "update_storage_value_uint8_to_uint8",
              [
                M.get (| "slot" |);
                M.get (| "offset" |);
                M.get (| "value0" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_29_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_29_by_1_to_uint8",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint8",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_29_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_31_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_31_by_1_to_uint8",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint8",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_31_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_2_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_uint256",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_t_rational_by_to_t_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_2_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "round_up_to_mul_of",
        ["value"],
        ["result"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["result"],
              M.call (|
                "and",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 31]
                    ]
                  |);
                  M.call (|
                    "not",
                    [
                      [Literal.number 31]
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "finalize_allocation",
        ["memPtr"; "size"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["newFreePtr"],
              M.call (|
                "add",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "round_up_to_mul_of",
                    [
                      M.get (| "size" |)
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "or",
                [
                  M.call (|
                    "gt",
                    [
                      M.get (| "newFreePtr" |);
                      M.call (|
                        "sub",
                        [
                          M.call (|
                            "shl",
                            [
                              [Literal.number 64];
                              [Literal.number 1]
                            ]
                          |);
                          [Literal.number 1]
                        ]
                      |)
                    ]
                  |);
                  M.call (|
                    "lt",
                    [
                      M.get (| "newFreePtr" |);
                      M.get (| "memPtr" |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x41",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 64];
                M.get (| "newFreePtr" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "allocate_memory",
        ["size"],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "allocate_unbounded",
                [

                ]
              |)
            |) in
          let _ :=
            M.call (|
              "finalize_allocation",
              [
                M.get (| "memPtr" |);
                M.get (| "size" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_allocation_size_array_array_struct_S_dyn_dyn",
        ["length"],
        ["size"],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "gt",
                [
                  M.get (| "length" |);
                  M.call (|
                    "sub",
                    [
                      M.call (|
                        "shl",
                        [
                          [Literal.number 64];
                          [Literal.number 1]
                        ]
                      |);
                      [Literal.number 1]
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x41",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.declare (|
              ["size"],
              M.call (|
                "mul",
                [
                  M.get (| "length" |);
                  [Literal.number 0x20]
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["size"],
              M.call (|
                "add",
                [
                  M.get (| "size" |);
                  [Literal.number 0x20]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "allocate_memory_array_array_array_struct_S_dyn_dyn",
        ["length"],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["allocSize"],
              M.call (|
                "array_allocation_size_array_array_struct_S_dyn_dyn",
                [
                  M.get (| "length" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "allocate_memory",
                [
                  M.get (| "allocSize" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                M.get (| "memPtr" |);
                M.get (| "length" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "zero_value_for_array_struct_S_dyn",
        [],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              [Literal.number 96]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "zero_complex_memory_array_array_array_struct_S_dyn_dyn",
        ["dataStart"; "dataSizeInBytes"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["i"],
              [Literal.number 0]
            |) in
          let _ :=
            M.for (|
              tt,
              M.call (|
                "lt",
                [
                  M.get (| "i" |);
                  M.get (| "dataSizeInBytes" |)
                ]
              |),
              let _ :=
                M.declare (|
                  ["i"],
                  M.call (|
                    "add",
                    [
                      M.get (| "i" |);
                      [Literal.number 32]
                    ]
                  |)
                |) in
              tt,
              let _ :=
                M.call (|
                  "mstore",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "dataStart" |);
                        M.get (| "i" |)
                      ]
                    |);
                    M.call (|
                      "zero_value_for_array_struct_S_dyn",
                      [

                      ]
                    |)
                  ]
                |) in
              tt
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "allocate_and_zero_memory_array_array_array_struct_S_dyn_dyn",
        ["length"],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "allocate_memory_array_array_array_struct_S_dyn_dyn",
                [
                  M.get (| "length" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["dataStart"],
              M.get (| "memPtr" |)
            |) in
          let _ :=
            M.assign (|
              ["dataSize"],
              M.call (|
                "array_allocation_size_array_array_struct_S_dyn_dyn",
                [
                  M.get (| "length" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["dataStart"],
              M.call (|
                "add",
                [
                  M.get (| "dataStart" |);
                  [Literal.number 32]
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["dataSize"],
              M.call (|
                "sub",
                [
                  M.get (| "dataSize" |);
                  [Literal.number 32]
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "zero_complex_memory_array_array_array_struct_S_dyn_dyn",
              [
                M.get (| "dataStart" |);
                M.get (| "dataSize" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "panic_error_0x00",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    [Literal.number 0x4e487b71]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 4];
                [Literal.number 0x00]
              ]
            |) in
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0x24]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_dataslot_array_array_struct_S_dyn_dyn",
        ["ptr"],
        ["data"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["data"],
              M.get (| "ptr" |)
            |) in
          let _ :=
            M.declare (|
              ["data"],
              M.call (|
                "add",
                [
                  M.get (| "ptr" |);
                  [Literal.number 0x20]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_length_array_array_struct_S_storage_dyn__dyn",
        ["value"],
        ["length"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["length"],
              M.call (|
                "sload",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "panic_error_0x11",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    [Literal.number 0x4e487b71]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 4];
                [Literal.number 0x11]
              ]
            |) in
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0x24]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "checked_mul_uint256",
        ["x"; "y"],
        ["product"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["x"],
              M.call (|
                "cleanup_uint256",
                [
                  M.get (| "x" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["y"],
              M.call (|
                "cleanup_uint256",
                [
                  M.get (| "y" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["product_raw"],
              M.call (|
                "mul",
                [
                  M.get (| "x" |);
                  M.get (| "y" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["product"],
              M.call (|
                "cleanup_uint256",
                [
                  M.get (| "product_raw" |)
                ]
              |)
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "or",
                    [
                      M.call (|
                        "iszero",
                        [
                          M.get (| "x" |)
                        ]
                      |);
                      M.call (|
                        "eq",
                        [
                          M.get (| "y" |);
                          M.call (|
                            "div",
                            [
                              M.get (| "product" |);
                              M.get (| "x" |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x11",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_convert_length_to_size_array_array_struct_S_storage_dyn__dyn",
        ["length"],
        ["size"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["size"],
              M.get (| "length" |)
            |) in
          let _ :=
            M.declare (|
              ["size"],
              M.call (|
                "div",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "length" |);
                      M.call (|
                        "sub",
                        [
                          [Literal.number 1];
                          [Literal.number 1]
                        ]
                      |)
                    ]
                  |);
                  [Literal.number 1]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_dataslot_array_array_struct_S_storage_dyn__dyn",
        ["ptr"],
        ["data"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["data"],
              M.get (| "ptr" |)
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.get (| "ptr" |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["data"],
              M.call (|
                "keccak256",
                [
                  [Literal.number 0];
                  [Literal.number 0x20]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_length_array_struct_S_storage_dyn",
        ["value"],
        ["length"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["length"],
              M.call (|
                "sload",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_convert_length_to_size_array_struct_S_storage_dyn",
        ["length"],
        ["size"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["size"],
              M.get (| "length" |)
            |) in
          let _ :=
            M.declare (|
              ["size"],
              M.call (|
                "checked_mul_uint256",
                [
                  [Literal.number 2];
                  M.get (| "length" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_dataslot_array_struct_S_storage_dyn",
        ["ptr"],
        ["data"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["data"],
              M.get (| "ptr" |)
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.get (| "ptr" |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["data"],
              M.call (|
                "keccak256",
                [
                  [Literal.number 0];
                  [Literal.number 0x20]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_length_array_uint8_dyn_storage",
        ["value"],
        ["length"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["length"],
              M.call (|
                "sload",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_convert_length_to_size_array_uint8_dyn_storage",
        ["length"],
        ["size"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["size"],
              M.get (| "length" |)
            |) in
          let _ :=
            M.declare (|
              ["size"],
              M.call (|
                "div",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "length" |);
                      M.call (|
                        "sub",
                        [
                          [Literal.number 32];
                          [Literal.number 1]
                        ]
                      |)
                    ]
                  |);
                  [Literal.number 32]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_dataslot_array_uint8_dyn_storage",
        ["ptr"],
        ["data"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["data"],
              M.get (| "ptr" |)
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.get (| "ptr" |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["data"],
              M.call (|
                "keccak256",
                [
                  [Literal.number 0];
                  [Literal.number 0x20]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_byte_slice_dynamic32",
        ["value"; "shiftBytes"; "toInsert"],
        ["result"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["shiftBits"],
              M.call (|
                "mul",
                [
                  M.get (| "shiftBytes" |);
                  [Literal.number 8]
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["mask"],
              M.call (|
                "shift_left_dynamic",
                [
                  M.get (| "shiftBits" |);
                  M.call (|
                    "not",
                    [
                      [Literal.number 0]
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["toInsert"],
              M.call (|
                "shift_left_dynamic",
                [
                  M.get (| "shiftBits" |);
                  M.get (| "toInsert" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "and",
                [
                  M.get (| "value" |);
                  M.call (|
                    "not",
                    [
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["result"],
              M.call (|
                "or",
                [
                  M.get (| "value" |);
                  M.call (|
                    "and",
                    [
                      M.get (| "toInsert" |);
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_uint256_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_uint256",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "prepare_store_uint256",
        ["value"],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_storage_value_uint256_to_uint256",
        ["slot"; "offset"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["convertedValue"],
              M.call (|
                "convert_uint256_to_uint256",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "sstore",
              [
                M.get (| "slot" |);
                M.call (|
                  "update_byte_slice_dynamic32",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |);
                    M.get (| "offset" |);
                    M.call (|
                      "prepare_store_uint256",
                      [
                        M.get (| "convertedValue" |)
                      ]
                    |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "zero_value_for_split_uint256",
        [],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              [Literal.number 0]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "storage_set_to_zero_uint256",
        ["slot"; "offset"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["zero"],
              M.call (|
                "zero_value_for_split_uint256",
                [

                ]
              |)
            |) in
          let _ :=
            M.call (|
              "update_storage_value_uint256_to_uint256",
              [
                M.get (| "slot" |);
                M.get (| "offset" |);
                M.get (| "zero" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "clear_storage_range_uint8",
        ["start"; "end"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.for (|
              tt,
              M.call (|
                "lt",
                [
                  M.get (| "start" |);
                  M.get (| "end" |)
                ]
              |),
              let _ :=
                M.declare (|
                  ["start"],
                  M.call (|
                    "add",
                    [
                      M.get (| "start" |);
                      [Literal.number 1]
                    ]
                  |)
                |) in
              tt,
              let _ :=
                M.call (|
                  "storage_set_to_zero_uint256",
                  [
                    M.get (| "start" |);
                    [Literal.number 0]
                  ]
                |) in
              tt
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_unsigned_dynamic",
        ["bits"; "value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  M.get (| "bits" |);
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "partial_clear_storage_slot",
        ["slot"; "offset"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["mask"],
              M.call (|
                "shift_right_unsigned_dynamic",
                [
                  M.call (|
                    "mul",
                    [
                      [Literal.number 8];
                      M.call (|
                        "sub",
                        [
                          [Literal.number 32];
                          M.get (| "offset" |)
                        ]
                      |)
                    ]
                  |);
                  M.call (|
                    "not",
                    [
                      [Literal.number 0]
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "sstore",
              [
                M.get (| "slot" |);
                M.call (|
                  "and",
                  [
                    M.get (| "mask" |);
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_storage_array_end_array_uint8_dyn",
        ["array"; "len"; "startIndex"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "lt",
                [
                  M.get (| "startIndex" |);
                  M.get (| "len" |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["oldSlotCount"],
                    M.call (|
                      "array_convert_length_to_size_array_uint8_dyn_storage",
                      [
                        M.get (| "len" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["newSlotCount"],
                    M.call (|
                      "array_convert_length_to_size_array_uint8_dyn_storage",
                      [
                        M.get (| "startIndex" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["arrayDataStart"],
                    M.call (|
                      "array_dataslot_array_uint8_dyn_storage",
                      [
                        M.get (| "array" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["deleteStart"],
                    M.call (|
                      "add",
                      [
                        M.get (| "arrayDataStart" |);
                        M.get (| "newSlotCount" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["deleteEnd"],
                    M.call (|
                      "add",
                      [
                        M.get (| "arrayDataStart" |);
                        M.get (| "oldSlotCount" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["offset"],
                    M.call (|
                      "mul",
                      [
                        M.call (|
                          "mod",
                          [
                            M.get (| "startIndex" |);
                            [Literal.number 32]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "gt",
                      [
                        M.get (| "offset" |);
                        [Literal.number 0]
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "partial_clear_storage_slot",
                          [
                            M.call (|
                              "sub",
                              [
                                M.get (| "deleteStart" |);
                                [Literal.number 1]
                              ]
                            |);
                            M.get (| "offset" |)
                          ]
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.call (|
                    "clear_storage_range_uint8",
                    [
                      M.get (| "deleteStart" |);
                      M.get (| "deleteEnd" |)
                    ]
                  |) in
                tt
              ))
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "resize_array_array_uint8_dyn_storage",
        ["array"; "newLen"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "gt",
                [
                  M.get (| "newLen" |);
                  [Literal.number 18446744073709551616]
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x41",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["oldLen"],
              M.call (|
                "array_length_array_uint8_dyn_storage",
                [
                  M.get (| "array" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "sstore",
              [
                M.get (| "array" |);
                M.get (| "newLen" |)
              ]
            |) in
          let _ :=
            M.call (|
              "cleanup_storage_array_end_array_uint8_dyn",
              [
                M.get (| "array" |);
                M.get (| "oldLen" |);
                M.get (| "newLen" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "clear_storage_range_uint256",
        ["start"; "end"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.for (|
              tt,
              M.call (|
                "lt",
                [
                  M.get (| "start" |);
                  M.get (| "end" |)
                ]
              |),
              let _ :=
                M.declare (|
                  ["start"],
                  M.call (|
                    "add",
                    [
                      M.get (| "start" |);
                      [Literal.number 1]
                    ]
                  |)
                |) in
              tt,
              let _ :=
                M.call (|
                  "storage_set_to_zero_uint256",
                  [
                    M.get (| "start" |);
                    [Literal.number 0]
                  ]
                |) in
              tt
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "clear_storage_array_array_uint8_dyn",
        ["slot"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "resize_array_array_uint8_dyn_storage",
              [
                M.get (| "slot" |);
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "storage_set_to_zero_array_uint8_dyn",
        ["slot"; "offset"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "eq",
                    [
                      M.get (| "offset" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x00",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.call (|
              "clear_storage_array_array_uint8_dyn",
              [
                M.get (| "slot" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_convert_length_to_size_array_uint8_storage",
        ["length"],
        ["size"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["size"],
              M.get (| "length" |)
            |) in
          let _ :=
            M.declare (|
              ["size"],
              M.call (|
                "div",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "length" |);
                      M.call (|
                        "sub",
                        [
                          [Literal.number 32];
                          [Literal.number 1]
                        ]
                      |)
                    ]
                  |);
                  [Literal.number 32]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "clear_storage_array_array_uint",
        ["slot"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "clear_storage_range_uint256",
              [
                M.get (| "slot" |);
                M.call (|
                  "add",
                  [
                    M.get (| "slot" |);
                    M.call (|
                      "array_convert_length_to_size_array_uint8_storage",
                      [
                        [Literal.number 2]
                      ]
                    |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "storage_set_to_zero_array_uint",
        ["slot"; "offset"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "eq",
                    [
                      M.get (| "offset" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x00",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.call (|
              "clear_storage_array_array_uint",
              [
                M.get (| "slot" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "clear_struct_storage_struct_S",
        ["slot"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "storage_set_to_zero_array_uint8_dyn",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "slot" |);
                    [Literal.number 0]
                  ]
                |);
                [Literal.number 0]
              ]
            |) in
          let _ :=
            M.call (|
              "storage_set_to_zero_array_uint",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "slot" |);
                    [Literal.number 1]
                  ]
                |);
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "storage_set_to_zero_struct_S",
        ["slot"; "offset"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "eq",
                    [
                      M.get (| "offset" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x00",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.call (|
              "clear_struct_storage_struct_S",
              [
                M.get (| "slot" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "clear_storage_range_struct_S",
        ["start"; "end"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.for (|
              tt,
              M.call (|
                "lt",
                [
                  M.get (| "start" |);
                  M.get (| "end" |)
                ]
              |),
              let _ :=
                M.declare (|
                  ["start"],
                  M.call (|
                    "add",
                    [
                      M.get (| "start" |);
                      [Literal.number 2]
                    ]
                  |)
                |) in
              tt,
              let _ :=
                M.call (|
                  "storage_set_to_zero_struct_S",
                  [
                    M.get (| "start" |);
                    [Literal.number 0]
                  ]
                |) in
              tt
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_storage_array_end_array_struct_S__dyn",
        ["array"; "len"; "startIndex"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "lt",
                [
                  M.get (| "startIndex" |);
                  M.get (| "len" |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["oldSlotCount"],
                    M.call (|
                      "array_convert_length_to_size_array_struct_S_storage_dyn",
                      [
                        M.get (| "len" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["newSlotCount"],
                    M.call (|
                      "array_convert_length_to_size_array_struct_S_storage_dyn",
                      [
                        M.get (| "startIndex" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["arrayDataStart"],
                    M.call (|
                      "array_dataslot_array_struct_S_storage_dyn",
                      [
                        M.get (| "array" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["deleteStart"],
                    M.call (|
                      "add",
                      [
                        M.get (| "arrayDataStart" |);
                        M.get (| "newSlotCount" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["deleteEnd"],
                    M.call (|
                      "add",
                      [
                        M.get (| "arrayDataStart" |);
                        M.get (| "oldSlotCount" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "clear_storage_range_struct_S",
                    [
                      M.get (| "deleteStart" |);
                      M.get (| "deleteEnd" |)
                    ]
                  |) in
                tt
              ))
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "resize_array_array_struct_S_storage_dyn",
        ["array"; "newLen"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "gt",
                [
                  M.get (| "newLen" |);
                  [Literal.number 18446744073709551616]
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x41",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["oldLen"],
              M.call (|
                "array_length_array_struct_S_storage_dyn",
                [
                  M.get (| "array" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "sstore",
              [
                M.get (| "array" |);
                M.get (| "newLen" |)
              ]
            |) in
          let _ :=
            M.call (|
              "cleanup_storage_array_end_array_struct_S__dyn",
              [
                M.get (| "array" |);
                M.get (| "oldLen" |);
                M.get (| "newLen" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "clear_storage_array_array_struct_S__dyn",
        ["slot"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "resize_array_array_struct_S_storage_dyn",
              [
                M.get (| "slot" |);
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "storage_set_to_zero_array_struct_S__dyn",
        ["slot"; "offset"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "eq",
                    [
                      M.get (| "offset" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x00",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.call (|
              "clear_storage_array_array_struct_S__dyn",
              [
                M.get (| "slot" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "clear_storage_range_array_struct_S__dyn",
        ["start"; "end"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.for (|
              tt,
              M.call (|
                "lt",
                [
                  M.get (| "start" |);
                  M.get (| "end" |)
                ]
              |),
              let _ :=
                M.declare (|
                  ["start"],
                  M.call (|
                    "add",
                    [
                      M.get (| "start" |);
                      [Literal.number 1]
                    ]
                  |)
                |) in
              tt,
              let _ :=
                M.call (|
                  "storage_set_to_zero_array_struct_S__dyn",
                  [
                    M.get (| "start" |);
                    [Literal.number 0]
                  ]
                |) in
              tt
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_storage_array_end_array_array_struct_S_storage_dyn__dyn",
        ["array"; "len"; "startIndex"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "lt",
                [
                  M.get (| "startIndex" |);
                  M.get (| "len" |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["oldSlotCount"],
                    M.call (|
                      "array_convert_length_to_size_array_array_struct_S_storage_dyn__dyn",
                      [
                        M.get (| "len" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["newSlotCount"],
                    M.call (|
                      "array_convert_length_to_size_array_array_struct_S_storage_dyn__dyn",
                      [
                        M.get (| "startIndex" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["arrayDataStart"],
                    M.call (|
                      "array_dataslot_array_array_struct_S_storage_dyn__dyn",
                      [
                        M.get (| "array" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["deleteStart"],
                    M.call (|
                      "add",
                      [
                        M.get (| "arrayDataStart" |);
                        M.get (| "newSlotCount" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["deleteEnd"],
                    M.call (|
                      "add",
                      [
                        M.get (| "arrayDataStart" |);
                        M.get (| "oldSlotCount" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "clear_storage_range_array_struct_S__dyn",
                    [
                      M.get (| "deleteStart" |);
                      M.get (| "deleteEnd" |)
                    ]
                  |) in
                tt
              ))
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "resize_array_array_array_struct_S_storage_dyn__dyn",
        ["array"; "newLen"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "gt",
                [
                  M.get (| "newLen" |);
                  [Literal.number 18446744073709551616]
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x41",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["oldLen"],
              M.call (|
                "array_length_array_array_struct_S_storage_dyn__dyn",
                [
                  M.get (| "array" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "sstore",
              [
                M.get (| "array" |);
                M.get (| "newLen" |)
              ]
            |) in
          let _ :=
            M.call (|
              "cleanup_storage_array_end_array_array_struct_S_storage_dyn__dyn",
              [
                M.get (| "array" |);
                M.get (| "oldLen" |);
                M.get (| "newLen" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_length_array_array_struct_S_dyn_dyn",
        ["value"],
        ["length"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["length"],
              M.call (|
                "mload",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "read_from_memoryt_array_struct_S_dyn",
        ["memPtr"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "mload",
                [
                  M.get (| "memPtr" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_dataslot_array_struct_S_dyn",
        ["ptr"],
        ["data"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["data"],
              M.get (| "ptr" |)
            |) in
          let _ :=
            M.declare (|
              ["data"],
              M.call (|
                "add",
                [
                  M.get (| "ptr" |);
                  [Literal.number 0x20]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_length_array_struct_S_dyn",
        ["value"],
        ["length"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["length"],
              M.call (|
                "mload",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "read_from_memoryt_struct_S",
        ["memPtr"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "mload",
                [
                  M.get (| "memPtr" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "read_from_memoryt_array_uint8_dyn",
        ["memPtr"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "mload",
                [
                  M.get (| "memPtr" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_length_array_uint8_dyn",
        ["value"],
        ["length"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["length"],
              M.call (|
                "mload",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "read_from_memoryt_uint8",
        ["ptr"],
        ["returnValue"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["value"],
              M.call (|
                "cleanup_uint8",
                [
                  M.call (|
                    "mload",
                    [
                      M.get (| "ptr" |)
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["returnValue"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_dataslot_array_uint8_dyn",
        ["ptr"],
        ["data"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["data"],
              M.get (| "ptr" |)
            |) in
          let _ :=
            M.declare (|
              ["data"],
              M.call (|
                "add",
                [
                  M.get (| "ptr" |);
                  [Literal.number 0x20]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_from_storage_uint8",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.call (|
                "and",
                [
                  M.get (| "value" |);
                  [Literal.number 0xff]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "copy_array_to_storage_from_array_uint8_dyn_to_array_uint8_dyn",
        ["dst"; "src"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["length"],
              M.call (|
                "array_length_array_uint8_dyn",
                [
                  M.get (| "src" |)
                ]
              |)
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "gt",
                [
                  M.get (| "length" |);
                  M.call (|
                    "sub",
                    [
                      M.call (|
                        "shl",
                        [
                          [Literal.number 64];
                          [Literal.number 1]
                        ]
                      |);
                      [Literal.number 1]
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x41",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.call (|
              "resize_array_array_uint8_dyn_storage",
              [
                M.get (| "dst" |);
                M.get (| "length" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["srcPtr"],
              M.call (|
                "array_dataslot_array_uint8_dyn",
                [
                  M.get (| "src" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["dstSlot"],
              M.call (|
                "array_dataslot_array_uint8_dyn_storage",
                [
                  M.get (| "dst" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["fullSlots"],
              M.call (|
                "div",
                [
                  M.get (| "length" |);
                  [Literal.number 32]
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["i"],
              [Literal.number 0]
            |) in
          let _ :=
            M.for (|
              tt,
              M.call (|
                "lt",
                [
                  M.get (| "i" |);
                  M.get (| "fullSlots" |)
                ]
              |),
              let _ :=
                M.declare (|
                  ["i"],
                  M.call (|
                    "add",
                    [
                      M.get (| "i" |);
                      [Literal.number 1]
                    ]
                  |)
                |) in
              tt,
              let _ :=
                M.assign (|
                  ["dstSlotValue"],
                  [Literal.number 0]
                |) in
              let _ :=
                M.assign (|
                  ["j"],
                  [Literal.number 0]
                |) in
              let _ :=
                M.for (|
                  tt,
                  M.call (|
                    "lt",
                    [
                      M.get (| "j" |);
                      [Literal.number 32]
                    ]
                  |),
                  let _ :=
                    M.declare (|
                      ["j"],
                      M.call (|
                        "add",
                        [
                          M.get (| "j" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt,
                  let _ :=
                    M.assign (|
                      ["stackItem"],
                      M.call (|
                        "read_from_memoryt_uint8",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["itemValue"],
                      M.call (|
                        "prepare_store_uint8",
                        [
                          M.get (| "stackItem" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["dstSlotValue"],
                      M.call (|
                        "update_byte_slice_dynamic1",
                        [
                          M.get (| "dstSlotValue" |);
                          M.call (|
                            "mul",
                            [
                              [Literal.number 1];
                              M.get (| "j" |)
                            ]
                          |);
                          M.get (| "itemValue" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["srcPtr"],
                      M.call (|
                        "add",
                        [
                          M.get (| "srcPtr" |);
                          [Literal.number 32]
                        ]
                      |)
                    |) in
                  tt
                |) in
              let _ :=
                M.call (|
                  "sstore",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "dstSlot" |);
                        M.get (| "i" |)
                      ]
                    |);
                    M.get (| "dstSlotValue" |)
                  ]
                |) in
              tt
            |) in
          let _ :=
            M.assign (|
              ["spill"],
              M.call (|
                "sub",
                [
                  M.get (| "length" |);
                  M.call (|
                    "mul",
                    [
                      M.get (| "fullSlots" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "gt",
                [
                  M.get (| "spill" |);
                  [Literal.number 0]
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["dstSlotValue_1"],
                    [Literal.number 0]
                  |) in
                let _ :=
                  M.assign (|
                    ["j_1"],
                    [Literal.number 0]
                  |) in
                let _ :=
                  M.for (|
                    tt,
                    M.call (|
                      "lt",
                      [
                        M.get (| "j_1" |);
                        M.get (| "spill" |)
                      ]
                    |),
                    let _ :=
                      M.declare (|
                        ["j_1"],
                        M.call (|
                          "add",
                          [
                            M.get (| "j_1" |);
                            [Literal.number 1]
                          ]
                        |)
                      |) in
                    tt,
                    let _ :=
                      M.assign (|
                        ["stackItem_1"],
                        M.call (|
                          "read_from_memoryt_uint8",
                          [
                            M.get (| "srcPtr" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["itemValue_1"],
                        M.call (|
                          "prepare_store_uint8",
                          [
                            M.get (| "stackItem_1" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.declare (|
                        ["dstSlotValue_1"],
                        M.call (|
                          "update_byte_slice_dynamic1",
                          [
                            M.get (| "dstSlotValue_1" |);
                            M.call (|
                              "mul",
                              [
                                [Literal.number 1];
                                M.get (| "j_1" |)
                              ]
                            |);
                            M.get (| "itemValue_1" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.declare (|
                        ["srcPtr"],
                        M.call (|
                          "add",
                          [
                            M.get (| "srcPtr" |);
                            [Literal.number 32]
                          ]
                        |)
                      |) in
                    tt
                  |) in
                let _ :=
                  M.call (|
                    "sstore",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "dstSlot" |);
                          M.get (| "fullSlots" |)
                        ]
                      |);
                      M.get (| "dstSlotValue_1" |)
                    ]
                  |) in
                tt
              ))
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_storage_value_offsett_array_uint8_dyn_to_array_uint8_dyn",
        ["slot"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "copy_array_to_storage_from_array_uint8_dyn_to_array_uint8_dyn",
              [
                M.get (| "slot" |);
                M.get (| "value" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "read_from_memoryt_array_uint8",
        ["memPtr"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "mload",
                [
                  M.get (| "memPtr" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_length_array_uint8_storage",
        ["value"],
        ["length"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["length"],
              [Literal.number 0x02]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_dataslot_array_uint8_storage",
        ["ptr"],
        ["data"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["data"],
              M.get (| "ptr" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_storage_array_end_array_uint",
        ["array"; "len"; "startIndex"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "lt",
                [
                  M.get (| "startIndex" |);
                  M.get (| "len" |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["oldSlotCount"],
                    M.call (|
                      "array_convert_length_to_size_array_uint8_storage",
                      [
                        M.get (| "len" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["newSlotCount"],
                    M.call (|
                      "array_convert_length_to_size_array_uint8_storage",
                      [
                        M.get (| "startIndex" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["arrayDataStart"],
                    M.call (|
                      "array_dataslot_array_uint8_storage",
                      [
                        M.get (| "array" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["deleteStart"],
                    M.call (|
                      "add",
                      [
                        M.get (| "arrayDataStart" |);
                        M.get (| "newSlotCount" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["deleteEnd"],
                    M.call (|
                      "add",
                      [
                        M.get (| "arrayDataStart" |);
                        M.get (| "oldSlotCount" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["offset"],
                    M.call (|
                      "mul",
                      [
                        M.call (|
                          "mod",
                          [
                            M.get (| "startIndex" |);
                            [Literal.number 32]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "gt",
                      [
                        M.get (| "offset" |);
                        [Literal.number 0]
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "partial_clear_storage_slot",
                          [
                            M.call (|
                              "sub",
                              [
                                M.get (| "deleteStart" |);
                                [Literal.number 1]
                              ]
                            |);
                            M.get (| "offset" |)
                          ]
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.call (|
                    "clear_storage_range_uint8",
                    [
                      M.get (| "deleteStart" |);
                      M.get (| "deleteEnd" |)
                    ]
                  |) in
                tt
              ))
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "resize_array_array_uint8_storage",
        ["array"; "newLen"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "gt",
                [
                  M.get (| "newLen" |);
                  [Literal.number 18446744073709551616]
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x41",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["oldLen"],
              M.call (|
                "array_length_array_uint8_storage",
                [
                  M.get (| "array" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "cleanup_storage_array_end_array_uint",
              [
                M.get (| "array" |);
                M.get (| "oldLen" |);
                M.get (| "newLen" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_length_array_uint8",
        ["value"],
        ["length"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["length"],
              [Literal.number 0x02]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_dataslot_array_uint8",
        ["ptr"],
        ["data"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["data"],
              M.get (| "ptr" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "copy_array_to_storage_from_array_uint8_to_array_uint",
        ["dst"; "src"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["length"],
              M.call (|
                "array_length_array_uint8",
                [
                  M.get (| "src" |)
                ]
              |)
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "gt",
                [
                  M.get (| "length" |);
                  M.call (|
                    "sub",
                    [
                      M.call (|
                        "shl",
                        [
                          [Literal.number 64];
                          [Literal.number 1]
                        ]
                      |);
                      [Literal.number 1]
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x41",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.call (|
              "resize_array_array_uint8_storage",
              [
                M.get (| "dst" |);
                M.get (| "length" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["srcPtr"],
              M.call (|
                "array_dataslot_array_uint8",
                [
                  M.get (| "src" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["dstSlot"],
              M.call (|
                "array_dataslot_array_uint8_storage",
                [
                  M.get (| "dst" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["fullSlots"],
              M.call (|
                "div",
                [
                  M.get (| "length" |);
                  [Literal.number 32]
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["i"],
              [Literal.number 0]
            |) in
          let _ :=
            M.for (|
              tt,
              M.call (|
                "lt",
                [
                  M.get (| "i" |);
                  M.get (| "fullSlots" |)
                ]
              |),
              let _ :=
                M.declare (|
                  ["i"],
                  M.call (|
                    "add",
                    [
                      M.get (| "i" |);
                      [Literal.number 1]
                    ]
                  |)
                |) in
              tt,
              let _ :=
                M.assign (|
                  ["dstSlotValue"],
                  [Literal.number 0]
                |) in
              let _ :=
                M.assign (|
                  ["j"],
                  [Literal.number 0]
                |) in
              let _ :=
                M.for (|
                  tt,
                  M.call (|
                    "lt",
                    [
                      M.get (| "j" |);
                      [Literal.number 32]
                    ]
                  |),
                  let _ :=
                    M.declare (|
                      ["j"],
                      M.call (|
                        "add",
                        [
                          M.get (| "j" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt,
                  let _ :=
                    M.assign (|
                      ["stackItem"],
                      M.call (|
                        "read_from_memoryt_uint8",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["itemValue"],
                      M.call (|
                        "prepare_store_uint8",
                        [
                          M.get (| "stackItem" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["dstSlotValue"],
                      M.call (|
                        "update_byte_slice_dynamic1",
                        [
                          M.get (| "dstSlotValue" |);
                          M.call (|
                            "mul",
                            [
                              [Literal.number 1];
                              M.get (| "j" |)
                            ]
                          |);
                          M.get (| "itemValue" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["srcPtr"],
                      M.call (|
                        "add",
                        [
                          M.get (| "srcPtr" |);
                          [Literal.number 32]
                        ]
                      |)
                    |) in
                  tt
                |) in
              let _ :=
                M.call (|
                  "sstore",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "dstSlot" |);
                        M.get (| "i" |)
                      ]
                    |);
                    M.get (| "dstSlotValue" |)
                  ]
                |) in
              tt
            |) in
          let _ :=
            M.assign (|
              ["spill"],
              M.call (|
                "sub",
                [
                  M.get (| "length" |);
                  M.call (|
                    "mul",
                    [
                      M.get (| "fullSlots" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "gt",
                [
                  M.get (| "spill" |);
                  [Literal.number 0]
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["dstSlotValue_1"],
                    [Literal.number 0]
                  |) in
                let _ :=
                  M.assign (|
                    ["j_1"],
                    [Literal.number 0]
                  |) in
                let _ :=
                  M.for (|
                    tt,
                    M.call (|
                      "lt",
                      [
                        M.get (| "j_1" |);
                        M.get (| "spill" |)
                      ]
                    |),
                    let _ :=
                      M.declare (|
                        ["j_1"],
                        M.call (|
                          "add",
                          [
                            M.get (| "j_1" |);
                            [Literal.number 1]
                          ]
                        |)
                      |) in
                    tt,
                    let _ :=
                      M.assign (|
                        ["stackItem_1"],
                        M.call (|
                          "read_from_memoryt_uint8",
                          [
                            M.get (| "srcPtr" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["itemValue_1"],
                        M.call (|
                          "prepare_store_uint8",
                          [
                            M.get (| "stackItem_1" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.declare (|
                        ["dstSlotValue_1"],
                        M.call (|
                          "update_byte_slice_dynamic1",
                          [
                            M.get (| "dstSlotValue_1" |);
                            M.call (|
                              "mul",
                              [
                                [Literal.number 1];
                                M.get (| "j_1" |)
                              ]
                            |);
                            M.get (| "itemValue_1" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.declare (|
                        ["srcPtr"],
                        M.call (|
                          "add",
                          [
                            M.get (| "srcPtr" |);
                            [Literal.number 32]
                          ]
                        |)
                      |) in
                    tt
                  |) in
                let _ :=
                  M.call (|
                    "sstore",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "dstSlot" |);
                          M.get (| "fullSlots" |)
                        ]
                      |);
                      M.get (| "dstSlotValue_1" |)
                    ]
                  |) in
                tt
              ))
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_storage_value_offsett_array_uint8_to_array_uint",
        ["slot"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "copy_array_to_storage_from_array_uint8_to_array_uint",
              [
                M.get (| "slot" |);
                M.get (| "value" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "copy_struct_to_storage_from_struct_S_to_struct_S",
        ["slot"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["memberSlot"],
              M.call (|
                "add",
                [
                  M.get (| "slot" |);
                  [Literal.number 0]
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["memberSrcPtr"],
              M.call (|
                "add",
                [
                  M.get (| "value" |);
                  [Literal.number 0]
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["memberValue"],
              M.call (|
                "read_from_memoryt_array_uint8_dyn",
                [
                  M.get (| "memberSrcPtr" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_array_uint8_dyn_to_array_uint8_dyn",
              [
                M.get (| "memberSlot" |);
                M.get (| "memberValue" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["memberSlot_1"],
              M.call (|
                "add",
                [
                  M.get (| "slot" |);
                  [Literal.number 1]
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["memberSrcPtr_1"],
              M.call (|
                "add",
                [
                  M.get (| "value" |);
                  [Literal.number 32]
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["memberValue_1"],
              M.call (|
                "read_from_memoryt_array_uint8",
                [
                  M.get (| "memberSrcPtr_1" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_array_uint8_to_array_uint",
              [
                M.get (| "memberSlot_1" |);
                M.get (| "memberValue_1" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_storage_value_offsett_struct_S_to_struct_S",
        ["slot"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "copy_struct_to_storage_from_struct_S_to_struct_S",
              [
                M.get (| "slot" |);
                M.get (| "value" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "copy_array_to_storage_from_array_struct_S_dyn_to_array_struct_S__dyn",
        ["slot"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["length"],
              M.call (|
                "array_length_array_struct_S_dyn",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "resize_array_array_struct_S_storage_dyn",
              [
                M.get (| "slot" |);
                M.get (| "length" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["srcPtr"],
              M.call (|
                "array_dataslot_array_struct_S_dyn",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["elementSlot"],
              M.call (|
                "array_dataslot_array_struct_S_storage_dyn",
                [
                  M.get (| "slot" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["i"],
              [Literal.number 0]
            |) in
          let _ :=
            M.for (|
              tt,
              M.call (|
                "lt",
                [
                  M.get (| "i" |);
                  M.get (| "length" |)
                ]
              |),
              let _ :=
                M.declare (|
                  ["i"],
                  M.call (|
                    "add",
                    [
                      M.get (| "i" |);
                      [Literal.number 1]
                    ]
                  |)
                |) in
              tt,
              let _ :=
                M.assign (|
                  ["stackItem"],
                  M.call (|
                    "read_from_memoryt_struct_S",
                    [
                      M.get (| "srcPtr" |)
                    ]
                  |)
                |) in
              let _ :=
                M.call (|
                  "update_storage_value_offsett_struct_S_to_struct_S",
                  [
                    M.get (| "elementSlot" |);
                    M.get (| "stackItem" |)
                  ]
                |) in
              let _ :=
                M.declare (|
                  ["srcPtr"],
                  M.call (|
                    "add",
                    [
                      M.get (| "srcPtr" |);
                      [Literal.number 32]
                    ]
                  |)
                |) in
              let _ :=
                M.declare (|
                  ["elementSlot"],
                  M.call (|
                    "add",
                    [
                      M.get (| "elementSlot" |);
                      [Literal.number 2]
                    ]
                  |)
                |) in
              tt
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_storage_value_offsett_array_struct_S_dyn_to_array_struct_S__dyn",
        ["slot"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "copy_array_to_storage_from_array_struct_S_dyn_to_array_struct_S__dyn",
              [
                M.get (| "slot" |);
                M.get (| "value" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "copy_array_to_storage_from_array_array_struct_S_dyn_dyn_to_array_array_struct_S_storage_dyn__dyn",
        ["slot"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["length"],
              M.call (|
                "array_length_array_array_struct_S_dyn_dyn",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "resize_array_array_array_struct_S_storage_dyn__dyn",
              [
                M.get (| "slot" |);
                M.get (| "length" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["srcPtr"],
              M.call (|
                "array_dataslot_array_array_struct_S_dyn_dyn",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["elementSlot"],
              M.call (|
                "array_dataslot_array_array_struct_S_storage_dyn__dyn",
                [
                  M.get (| "slot" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["i"],
              [Literal.number 0]
            |) in
          let _ :=
            M.for (|
              tt,
              M.call (|
                "lt",
                [
                  M.get (| "i" |);
                  M.get (| "length" |)
                ]
              |),
              let _ :=
                M.declare (|
                  ["i"],
                  M.call (|
                    "add",
                    [
                      M.get (| "i" |);
                      [Literal.number 1]
                    ]
                  |)
                |) in
              tt,
              let _ :=
                M.assign (|
                  ["stackItem"],
                  M.call (|
                    "read_from_memoryt_array_struct_S_dyn",
                    [
                      M.get (| "srcPtr" |)
                    ]
                  |)
                |) in
              let _ :=
                M.call (|
                  "update_storage_value_offsett_array_struct_S_dyn_to_array_struct_S__dyn",
                  [
                    M.get (| "elementSlot" |);
                    M.get (| "stackItem" |)
                  ]
                |) in
              let _ :=
                M.declare (|
                  ["srcPtr"],
                  M.call (|
                    "add",
                    [
                      M.get (| "srcPtr" |);
                      [Literal.number 32]
                    ]
                  |)
                |) in
              let _ :=
                M.declare (|
                  ["elementSlot"],
                  M.call (|
                    "add",
                    [
                      M.get (| "elementSlot" |);
                      [Literal.number 1]
                    ]
                  |)
                |) in
              tt
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_storage_value_offsett_array_array_struct_S_dyn_dyn_to_array_array_struct_S_storage_dyn__dyn",
        ["slot"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "copy_array_to_storage_from_array_array_struct_S_dyn_dyn_to_array_array_struct_S_storage_dyn__dyn",
              [
                M.get (| "slot" |);
                M.get (| "value" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_allocation_size_array_struct_S_dyn",
        ["length"],
        ["size"],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "gt",
                [
                  M.get (| "length" |);
                  M.call (|
                    "sub",
                    [
                      M.call (|
                        "shl",
                        [
                          [Literal.number 64];
                          [Literal.number 1]
                        ]
                      |);
                      [Literal.number 1]
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x41",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.declare (|
              ["size"],
              M.call (|
                "mul",
                [
                  M.get (| "length" |);
                  [Literal.number 0x20]
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["size"],
              M.call (|
                "add",
                [
                  M.get (| "size" |);
                  [Literal.number 0x20]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "allocate_memory_array_array_struct_S_dyn",
        ["length"],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["allocSize"],
              M.call (|
                "array_allocation_size_array_struct_S_dyn",
                [
                  M.get (| "length" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "allocate_memory",
                [
                  M.get (| "allocSize" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                M.get (| "memPtr" |);
                M.get (| "length" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "allocate_memory_struct_struct_S",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "allocate_memory",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "zero_value_for_array_uint8_dyn",
        [],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              [Literal.number 96]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_allocation_size_array_uint8",
        ["length"],
        ["size"],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "gt",
                [
                  M.get (| "length" |);
                  M.call (|
                    "sub",
                    [
                      M.call (|
                        "shl",
                        [
                          [Literal.number 64];
                          [Literal.number 1]
                        ]
                      |);
                      [Literal.number 1]
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x41",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.declare (|
              ["size"],
              M.call (|
                "mul",
                [
                  M.get (| "length" |);
                  [Literal.number 0x20]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "allocate_memory_array_array_uint8",
        ["length"],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["allocSize"],
              M.call (|
                "array_allocation_size_array_uint8",
                [
                  M.get (| "length" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "allocate_memory",
                [
                  M.get (| "allocSize" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "zero_memory_chunk_uint8",
        ["dataStart"; "dataSizeInBytes"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "calldatacopy",
              [
                M.get (| "dataStart" |);
                M.call (|
                  "calldatasize",
                  [

                  ]
                |);
                M.get (| "dataSizeInBytes" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "allocate_and_zero_memory_array_array_uint8",
        ["length"],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "allocate_memory_array_array_uint8",
                [
                  M.get (| "length" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["dataStart"],
              M.get (| "memPtr" |)
            |) in
          let _ :=
            M.assign (|
              ["dataSize"],
              M.call (|
                "array_allocation_size_array_uint8",
                [
                  M.get (| "length" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "zero_memory_chunk_uint8",
              [
                M.get (| "dataStart" |);
                M.get (| "dataSize" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "zero_value_for_array_uint8",
        [],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.call (|
                "allocate_and_zero_memory_array_array_uint8",
                [
                  [Literal.number 2]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "allocate_and_zero_memory_struct_struct_S",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "allocate_memory_struct_struct_S",
                [

                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["offset"],
              M.get (| "memPtr" |)
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                M.get (| "offset" |);
                M.call (|
                  "zero_value_for_array_uint8_dyn",
                  [

                  ]
                |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["offset"],
              M.call (|
                "add",
                [
                  M.get (| "offset" |);
                  [Literal.number 32]
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                M.get (| "offset" |);
                M.call (|
                  "zero_value_for_array_uint8",
                  [

                  ]
                |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["offset"],
              M.call (|
                "add",
                [
                  M.get (| "offset" |);
                  [Literal.number 32]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "zero_value_for_struct_S",
        [],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.call (|
                "allocate_and_zero_memory_struct_struct_S",
                [

                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "zero_complex_memory_array_array_struct_S_dyn",
        ["dataStart"; "dataSizeInBytes"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["i"],
              [Literal.number 0]
            |) in
          let _ :=
            M.for (|
              tt,
              M.call (|
                "lt",
                [
                  M.get (| "i" |);
                  M.get (| "dataSizeInBytes" |)
                ]
              |),
              let _ :=
                M.declare (|
                  ["i"],
                  M.call (|
                    "add",
                    [
                      M.get (| "i" |);
                      [Literal.number 32]
                    ]
                  |)
                |) in
              tt,
              let _ :=
                M.call (|
                  "mstore",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "dataStart" |);
                        M.get (| "i" |)
                      ]
                    |);
                    M.call (|
                      "zero_value_for_struct_S",
                      [

                      ]
                    |)
                  ]
                |) in
              tt
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "allocate_and_zero_memory_array_array_struct_S_dyn",
        ["length"],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "allocate_memory_array_array_struct_S_dyn",
                [
                  M.get (| "length" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["dataStart"],
              M.get (| "memPtr" |)
            |) in
          let _ :=
            M.assign (|
              ["dataSize"],
              M.call (|
                "array_allocation_size_array_struct_S_dyn",
                [
                  M.get (| "length" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["dataStart"],
              M.call (|
                "add",
                [
                  M.get (| "dataStart" |);
                  [Literal.number 32]
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["dataSize"],
              M.call (|
                "sub",
                [
                  M.get (| "dataSize" |);
                  [Literal.number 32]
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "zero_complex_memory_array_array_struct_S_dyn",
              [
                M.get (| "dataStart" |);
                M.get (| "dataSize" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "storage_array_index_access_struct_S_storage_dyn__dyn",
        ["array"; "index"],
        ["slot";
    "offset"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["arrayLength"],
              M.call (|
                "array_length_array_array_struct_S_storage_dyn__dyn",
                [
                  M.get (| "array" |)
                ]
              |)
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "lt",
                    [
                      M.get (| "index" |);
                      M.get (| "arrayLength" |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x32",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["dataArea"],
              M.call (|
                "array_dataslot_array_array_struct_S_storage_dyn__dyn",
                [
                  M.get (| "array" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["slot"],
              M.call (|
                "add",
                [
                  M.get (| "dataArea" |);
                  M.call (|
                    "mul",
                    [
                      M.get (| "index" |);
                      [Literal.number 1]
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["offset"],
              [Literal.number 0]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_storage_value_array_struct_S_dyn_to_array_struct_S__dyn",
        ["slot"; "offset"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.get (| "offset" |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x00",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.call (|
              "copy_array_to_storage_from_array_struct_S_dyn_to_array_struct_S__dyn",
              [
                M.get (| "slot" |);
                M.get (| "value" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_t_rational_by_1",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_7_by_1_to_uint8",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint8",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_t_rational_by_1",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "write_to_memory_uint8",
        ["memPtr"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                M.get (| "memPtr" |);
                M.call (|
                  "cleanup_uint8",
                  [
                    M.get (| "value" |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_by_1",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_t_rational_by_to_t_uint8",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint8",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_by_1",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "allocate_memory_struct_struct_S_storage_ptr",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "allocate_memory",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_storeLengthForEncoding_array_uint8_dyn",
        ["pos"; "length"],
        ["updated_pos"],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                M.get (| "pos" |);
                M.get (| "length" |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["updated_pos"],
              M.call (|
                "add",
                [
                  M.get (| "pos" |);
                  [Literal.number 0x20]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_encode_uint8",
        ["value"; "pos"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                M.get (| "pos" |);
                M.call (|
                  "cleanup_uint8",
                  [
                    M.get (| "value" |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_0_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 0];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_0t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_0_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_8_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 8];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_1t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_8_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_16_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 16];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_2t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_16_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_24_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 24];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offsett_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_24_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_32_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 32];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_4t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_32_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_40_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 40];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_5t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_40_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_48_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 48];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_6t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_48_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_56_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 56];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_7t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_56_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_64_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 64];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_8t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_64_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_72_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 72];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_9t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_72_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_80_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 80];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_10t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_80_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_88_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 88];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_11t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_88_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_96_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 96];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_12t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_96_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_104_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 104];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_13t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_104_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_112_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 112];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_14t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_112_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_120_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 120];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_15t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_120_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_128_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 128];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_16t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_128_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_136_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 136];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_17t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_136_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 144];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_18t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_152_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 152];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_19t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_152_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_160_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 160];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_20t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_160_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_168_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 168];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_21t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_168_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_176_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 176];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_22t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_176_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_184_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 184];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_23t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_184_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_192_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 192];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_24t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_192_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_200_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 200];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_25t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_200_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_208_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 208];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_26t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_208_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_216_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 216];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_27t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_216_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_224_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 224];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_28t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_224_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_232_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 232];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_29t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_232_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_240_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 240];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_30t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_240_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_248_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 248];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offset_31t_uint8",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint8",
                [
                  M.call (|
                    "shift_right_248_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_encode_array_uint8_dyn_storage",
        ["value"; "pos"],
        ["end"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["length"],
              M.call (|
                "array_length_array_uint8_dyn_storage",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["pos"],
              M.call (|
                "array_storeLengthForEncoding_array_uint8_dyn",
                [
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["srcPtr"],
              M.call (|
                "array_dataslot_array_uint8_dyn_storage",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["itemCounter"],
              [Literal.number 0]
            |) in
          let _ :=
            M.if_ (|
              [Literal.number 1],
              ltac:(M.monadic (
                let _ :=
                  M.for (|
                    tt,
                    M.call (|
                      "lt",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "itemCounter" |);
                            M.call (|
                              "sub",
                              [
                                [Literal.number 32];
                                [Literal.number 1]
                              ]
                            |)
                          ]
                        |);
                        M.get (| "length" |)
                      ]
                    |),
                    let _ :=
                      M.declare (|
                        ["itemCounter"],
                        M.call (|
                          "add",
                          [
                            M.get (| "itemCounter" |);
                            [Literal.number 32]
                          ]
                        |)
                      |) in
                    tt,
                    let _ :=
                      M.assign (|
                        ["data"],
                        M.call (|
                          "sload",
                          [
                            M.get (| "srcPtr" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_0t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_1t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_2t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offsett_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_4t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_5t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_6t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_7t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_8t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_9t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_10t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_11t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_12t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_13t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_14t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_15t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_16t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_17t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_18t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_19t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_20t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_21t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_22t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_23t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_24t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_25t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_26t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_27t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_28t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_29t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_30t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "abi_encode_uint8",
                        [
                          M.call (|
                            "extract_from_storage_value_offset_31t_uint8",
                            [
                              M.get (| "data" |)
                            ]
                          |);
                          M.get (| "pos" |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "add",
                          [
                            M.get (| "pos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.declare (|
                        ["srcPtr"],
                        M.call (|
                          "add",
                          [
                            M.get (| "srcPtr" |);
                            [Literal.number 1]
                          ]
                        |)
                      |) in
                    tt
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.if_ (|
              [Literal.number 1],
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["data_1"],
                    M.call (|
                      "sload",
                      [
                        M.get (| "srcPtr" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_0t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_1t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_2t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offsett_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_4t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_5t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_6t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_7t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_8t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_9t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_10t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_11t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_12t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_13t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_14t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_15t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_16t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_17t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_18t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_19t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_20t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_21t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_22t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_23t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_24t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_25t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_26t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_27t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_28t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_29t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_30t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "itemCounter" |);
                        M.get (| "length" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_31t_uint8",
                              [
                                M.get (| "data_1" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.declare (|
              ["end"],
              M.get (| "pos" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_encodeUpdatedPos_array_uint8_dyn_storage",
        ["value0"; "pos"],
        ["updatedPos"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["updatedPos"],
              M.call (|
                "abi_encode_array_uint8_dyn_storage",
                [
                  M.get (| "value0" |);
                  M.get (| "pos" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "copy_array_from_storage_to_memory_array_uint8_dyn",
        ["slot"],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "allocate_unbounded",
                [

                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["end"],
              M.call (|
                "abi_encodeUpdatedPos_array_uint8_dyn_storage",
                [
                  M.get (| "slot" |);
                  M.get (| "memPtr" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "finalize_allocation",
              [
                M.get (| "memPtr" |);
                M.call (|
                  "sub",
                  [
                    M.get (| "end" |);
                    M.get (| "memPtr" |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_array_array_uint8_dyn_storage_to_array_uint8_dyn",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "copy_array_from_storage_to_memory_array_uint8_dyn",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "write_to_memory_array_uint8_dyn",
        ["memPtr"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                M.get (| "memPtr" |);
                M.get (| "value" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "write_to_memory_array_uint8",
        ["memPtr"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                M.get (| "memPtr" |);
                M.get (| "value" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "storage_array_index_access_struct_S__dyn",
        ["array"; "index"],
        ["slot";
    "offset"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["arrayLength"],
              M.call (|
                "array_length_array_struct_S_storage_dyn",
                [
                  M.get (| "array" |)
                ]
              |)
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "lt",
                    [
                      M.get (| "index" |);
                      M.get (| "arrayLength" |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x32",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["dataArea"],
              M.call (|
                "array_dataslot_array_struct_S_storage_dyn",
                [
                  M.get (| "array" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["slot"],
              M.call (|
                "add",
                [
                  M.get (| "dataArea" |);
                  M.call (|
                    "mul",
                    [
                      M.get (| "index" |);
                      [Literal.number 2]
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["offset"],
              [Literal.number 0]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_storage_value_struct_S_to_struct_S",
        ["slot"; "offset"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.get (| "offset" |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x00",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.call (|
              "copy_struct_to_storage_from_struct_S_to_struct_S",
              [
                M.get (| "slot" |);
                M.get (| "value" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_17_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_17_by_1_to_uint8",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint8",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_17_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_19_by_1_to_uint8",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint8",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_1_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_by_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_1_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_37_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_37_by_1_to_uint8",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint8",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_37_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_t_rational_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_by_to_uint8",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint8",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_t_rational_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_43_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_43_by_1_to_uint8",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint8",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_43_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_47_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_47_by_1_to_uint8",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint8",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_47_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_length_array_array_struct_S_storage",
        ["value"],
        ["length"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["length"],
              [Literal.number 0x01]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_dataslot_array_array_struct_S_storage",
        ["ptr"],
        ["data"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["data"],
              M.get (| "ptr" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "storage_array_index_access_struct_S_",
        ["array"; "index"],
        ["slot";
    "offset"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["arrayLength"],
              M.call (|
                "array_length_array_array_struct_S_storage",
                [
                  M.get (| "array" |)
                ]
              |)
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "lt",
                    [
                      M.get (| "index" |);
                      M.get (| "arrayLength" |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x32",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["dataArea"],
              M.call (|
                "array_dataslot_array_array_struct_S_storage",
                [
                  M.get (| "array" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["slot"],
              M.call (|
                "add",
                [
                  M.get (| "dataArea" |);
                  M.call (|
                    "mul",
                    [
                      M.get (| "index" |);
                      [Literal.number 2]
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["offset"],
              [Literal.number 0]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_length_array_struct_S_storage",
        ["value"],
        ["length"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["length"],
              [Literal.number 0x01]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_dataslot_array_struct_S_storage",
        ["ptr"],
        ["data"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["data"],
              M.get (| "ptr" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "storage_array_index_access_struct_S",
        ["array"; "index"],
        ["slot";
    "offset"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["arrayLength"],
              M.call (|
                "array_length_array_struct_S_storage",
                [
                  M.get (| "array" |)
                ]
              |)
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "lt",
                    [
                      M.get (| "index" |);
                      M.get (| "arrayLength" |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x32",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["dataArea"],
              M.call (|
                "array_dataslot_array_struct_S_storage",
                [
                  M.get (| "array" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["slot"],
              M.call (|
                "add",
                [
                  M.get (| "dataArea" |);
                  M.call (|
                    "mul",
                    [
                      M.get (| "index" |);
                      [Literal.number 2]
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["offset"],
              [Literal.number 0]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "constructor_C",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["_2_slot"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["expr_33_slot"],
              M.get (| "_2_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_35_self_slot"],
              M.call (|
                "convert_array_array_uint8_dyn_storage_to_array_uint8_dyn_ptr",
                [
                  M.get (| "expr_33_slot" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["expr"],
              [Literal.number 0x17]
            |) in
          let _ :=
            M.assign (|
              ["_1"],
              M.call (|
                "convert_rational_23_by_1_to_uint8",
                [
                  M.get (| "expr" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "array_push_from_uint8_to_array_uint8_dyn_storage_ptr",
              [
                M.get (| "expr_35_self_slot" |);
                M.get (| "_1" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["_4_slot"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["expr_39_slot"],
              M.get (| "_4_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_41_self_slot"],
              M.call (|
                "convert_array_array_uint8_dyn_storage_to_array_uint8_dyn_ptr",
                [
                  M.get (| "expr_39_slot" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["expr_1"],
              [Literal.number 0x1d]
            |) in
          let _ :=
            M.assign (|
              ["_2"],
              M.call (|
                "convert_rational_29_by_1_to_uint8",
                [
                  M.get (| "expr_1" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "array_push_from_uint8_to_array_uint8_dyn_storage_ptr",
              [
                M.get (| "expr_41_self_slot" |);
                M.get (| "_2" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["_6_slot"],
              [Literal.number 0x01]
            |) in
          let _ :=
            M.assign (|
              ["expr_45_slot"],
              M.get (| "_6_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_self_slot"],
              M.call (|
                "convert_array_array_uint8_dyn_storage_to_array_uint8_dyn_ptr",
                [
                  M.get (| "expr_45_slot" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["expr_2"],
              [Literal.number 0x1f]
            |) in
          let _ :=
            M.assign (|
              ["_3"],
              M.call (|
                "convert_rational_31_by_1_to_uint8",
                [
                  M.get (| "expr_2" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "array_push_from_uint8_to_array_uint8_dyn_storage_ptr",
              [
                M.get (| "expr_self_slot" |);
                M.get (| "_3" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_3"],
              [Literal.number 0x02]
            |) in
          let _ :=
            M.assign (|
              ["_4"],
              M.call (|
                "convert_t_rational_by_to_t_uint256",
                [
                  M.get (| "expr_3" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["expr_58_mpos"],
              M.call (|
                "allocate_and_zero_memory_array_array_array_struct_S_dyn_dyn",
                [
                  M.get (| "_4" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_array_array_struct_S_dyn_dyn_to_array_array_struct_S_storage_dyn__dyn",
              [
                [Literal.number 0x03];
                M.get (| "expr_58_mpos" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_4"],
              [Literal.number 0x02]
            |) in
          let _ :=
            M.assign (|
              ["_5"],
              M.call (|
                "convert_t_rational_by_to_t_uint256",
                [
                  M.get (| "expr_4" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["expr_mpos"],
              M.call (|
                "allocate_and_zero_memory_array_array_struct_S_dyn",
                [
                  M.get (| "_5" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_slot"],
              [Literal.number 0x03]
            |) in
          let _ :=
            M.assign (|
              ["expr_61_slot"],
              M.get (| "_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_5"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["_6"; "_7"],
              M.call (|
                "storage_array_index_access_struct_S_storage_dyn__dyn",
                [
                  M.get (| "expr_61_slot" |);
                  M.get (| "expr_5" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "update_storage_value_array_struct_S_dyn_to_array_struct_S__dyn",
              [
                M.get (| "_6" |);
                M.get (| "_7" |);
                M.get (| "expr_mpos" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["_15_slot"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["expr_78_slot"],
              M.get (| "_15_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_81_mpos"],
              M.call (|
                "allocate_memory_array_array_uint8",
                [
                  [Literal.number 2]
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["expr_6"],
              [Literal.number 0x07]
            |) in
          let _ :=
            M.assign (|
              ["_8"],
              M.call (|
                "convert_rational_7_by_1_to_uint8",
                [
                  M.get (| "expr_6" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "write_to_memory_uint8",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "expr_81_mpos" |);
                    [Literal.number 0]
                  ]
                |);
                M.get (| "_8" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_7"],
              [Literal.number 0x0b]
            |) in
          let _ :=
            M.assign (|
              ["_9"],
              M.call (|
                "convert_t_rational_by_to_t_uint8",
                [
                  M.get (| "expr_7" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "write_to_memory_uint8",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "expr_81_mpos" |);
                    [Literal.number 32]
                  ]
                |);
                M.get (| "_9" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_82_mpos"],
              M.call (|
                "allocate_memory_struct_struct_S_storage_ptr",
                [

                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_18_mpos"],
              M.call (|
                "convert_array_array_uint8_dyn_storage_to_array_uint8_dyn",
                [
                  M.get (| "expr_78_slot" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "write_to_memory_array_uint8_dyn",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "expr_82_mpos" |);
                    [Literal.number 0]
                  ]
                |);
                M.get (| "_18_mpos" |)
              ]
            |) in
          let _ :=
            M.call (|
              "write_to_memory_array_uint8",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "expr_82_mpos" |);
                    [Literal.number 32]
                  ]
                |);
                M.get (| "expr_81_mpos" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["_19_slot"],
              [Literal.number 0x03]
            |) in
          let _ :=
            M.assign (|
              ["expr_72_slot"],
              M.get (| "_19_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_8"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["_10"; "_11"],
              M.call (|
                "storage_array_index_access_struct_S_storage_dyn__dyn",
                [
                  M.get (| "expr_72_slot" |);
                  M.get (| "expr_8" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_22_slot"],
              M.get (| "_10" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_75_slot"],
              M.get (| "_22_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_9"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["_12"; "_13"],
              M.call (|
                "storage_array_index_access_struct_S__dyn",
                [
                  M.get (| "expr_75_slot" |);
                  M.get (| "expr_9" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "update_storage_value_struct_S_to_struct_S",
              [
                M.get (| "_12" |);
                M.get (| "_13" |);
                M.get (| "expr_82_mpos" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["_26_slot"],
              [Literal.number 0x01]
            |) in
          let _ :=
            M.assign (|
              ["expr_slot"],
              M.get (| "_26_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_94_mpos"],
              M.call (|
                "allocate_memory_array_array_uint8",
                [
                  [Literal.number 2]
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["expr_10"],
              [Literal.number 0x11]
            |) in
          let _ :=
            M.assign (|
              ["_14"],
              M.call (|
                "convert_rational_17_by_1_to_uint8",
                [
                  M.get (| "expr_10" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "write_to_memory_uint8",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "expr_94_mpos" |);
                    [Literal.number 0]
                  ]
                |);
                M.get (| "_14" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_11"],
              [Literal.number 0x13]
            |) in
          let _ :=
            M.assign (|
              ["_15"],
              M.call (|
                "convert_rational_19_by_1_to_uint8",
                [
                  M.get (| "expr_11" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "write_to_memory_uint8",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "expr_94_mpos" |);
                    [Literal.number 32]
                  ]
                |);
                M.get (| "_15" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_95_mpos"],
              M.call (|
                "allocate_memory_struct_struct_S_storage_ptr",
                [

                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_29_mpos"],
              M.call (|
                "convert_array_array_uint8_dyn_storage_to_array_uint8_dyn",
                [
                  M.get (| "expr_slot" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "write_to_memory_array_uint8_dyn",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "expr_95_mpos" |);
                    [Literal.number 0]
                  ]
                |);
                M.get (| "_29_mpos" |)
              ]
            |) in
          let _ :=
            M.call (|
              "write_to_memory_array_uint8",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "expr_95_mpos" |);
                    [Literal.number 32]
                  ]
                |);
                M.get (| "expr_94_mpos" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["_30_slot"],
              [Literal.number 0x03]
            |) in
          let _ :=
            M.assign (|
              ["expr_85_slot"],
              M.get (| "_30_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_12"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["_16"; "_17"],
              M.call (|
                "storage_array_index_access_struct_S_storage_dyn__dyn",
                [
                  M.get (| "expr_85_slot" |);
                  M.get (| "expr_12" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_33_slot"],
              M.get (| "_16" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_88_slot"],
              M.get (| "_33_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_13"],
              [Literal.number 0x01]
            |) in
          let _ :=
            M.assign (|
              ["_18"; "_19"],
              M.call (|
                "storage_array_index_access_struct_S__dyn",
                [
                  M.get (| "expr_88_slot" |);
                  M.get (| "expr_13" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "update_storage_value_struct_S_to_struct_S",
              [
                M.get (| "_18" |);
                M.get (| "_19" |);
                M.get (| "expr_95_mpos" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_14"],
              [Literal.number 0x01]
            |) in
          let _ :=
            M.assign (|
              ["_20"],
              M.call (|
                "convert_rational_by_to_uint256",
                [
                  M.get (| "expr_14" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["expr_106_mpos"],
              M.call (|
                "allocate_and_zero_memory_array_array_struct_S_dyn",
                [
                  M.get (| "_20" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_38_slot"],
              [Literal.number 0x03]
            |) in
          let _ :=
            M.assign (|
              ["expr_98_slot"],
              M.get (| "_38_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_15"],
              [Literal.number 0x01]
            |) in
          let _ :=
            M.assign (|
              ["_21"; "_22"],
              M.call (|
                "storage_array_index_access_struct_S_storage_dyn__dyn",
                [
                  M.get (| "expr_98_slot" |);
                  M.get (| "expr_15" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "update_storage_value_array_struct_S_dyn_to_array_struct_S__dyn",
              [
                M.get (| "_21" |);
                M.get (| "_22" |);
                M.get (| "expr_106_mpos" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["_42_slot"],
              [Literal.number 0x02]
            |) in
          let _ :=
            M.assign (|
              ["expr_115_slot"],
              M.get (| "_42_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_118_mpos"],
              M.call (|
                "allocate_memory_array_array_uint8",
                [
                  [Literal.number 2]
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["expr_16"],
              [Literal.number 0x25]
            |) in
          let _ :=
            M.assign (|
              ["_23"],
              M.call (|
                "convert_rational_37_by_1_to_uint8",
                [
                  M.get (| "expr_16" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "write_to_memory_uint8",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "expr_118_mpos" |);
                    [Literal.number 0]
                  ]
                |);
                M.get (| "_23" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_17"],
              [Literal.number 0x29]
            |) in
          let _ :=
            M.assign (|
              ["_24"],
              M.call (|
                "convert_rational_by_to_uint8",
                [
                  M.get (| "expr_17" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "write_to_memory_uint8",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "expr_118_mpos" |);
                    [Literal.number 32]
                  ]
                |);
                M.get (| "_24" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_119_mpos"],
              M.call (|
                "allocate_memory_struct_struct_S_storage_ptr",
                [

                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_mpos"],
              M.call (|
                "convert_array_array_uint8_dyn_storage_to_array_uint8_dyn",
                [
                  M.get (| "expr_115_slot" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "write_to_memory_array_uint8_dyn",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "expr_119_mpos" |);
                    [Literal.number 0]
                  ]
                |);
                M.get (| "_mpos" |)
              ]
            |) in
          let _ :=
            M.call (|
              "write_to_memory_array_uint8",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "expr_119_mpos" |);
                    [Literal.number 32]
                  ]
                |);
                M.get (| "expr_118_mpos" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["_46_slot"],
              [Literal.number 0x03]
            |) in
          let _ :=
            M.assign (|
              ["expr_109_slot"],
              M.get (| "_46_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_18"],
              [Literal.number 0x01]
            |) in
          let _ :=
            M.assign (|
              ["_25"; "_26"],
              M.call (|
                "storage_array_index_access_struct_S_storage_dyn__dyn",
                [
                  M.get (| "expr_109_slot" |);
                  M.get (| "expr_18" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_49_slot"],
              M.get (| "_25" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_112_slot"],
              M.get (| "_49_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_19"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["_27"; "_28"],
              M.call (|
                "storage_array_index_access_struct_S__dyn",
                [
                  M.get (| "expr_112_slot" |);
                  M.get (| "expr_19" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "update_storage_value_struct_S_to_struct_S",
              [
                M.get (| "_27" |);
                M.get (| "_28" |);
                M.get (| "expr_119_mpos" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["_53_slot"],
              [Literal.number 0x02]
            |) in
          let _ :=
            M.assign (|
              ["expr_128_slot"],
              M.get (| "_53_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_131_mpos"],
              M.call (|
                "allocate_memory_array_array_uint8",
                [
                  [Literal.number 2]
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["expr_20"],
              [Literal.number 0x2b]
            |) in
          let _ :=
            M.assign (|
              ["_29"],
              M.call (|
                "convert_rational_43_by_1_to_uint8",
                [
                  M.get (| "expr_20" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "write_to_memory_uint8",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "expr_131_mpos" |);
                    [Literal.number 0]
                  ]
                |);
                M.get (| "_29" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_21"],
              [Literal.number 0x2f]
            |) in
          let _ :=
            M.assign (|
              ["_30"],
              M.call (|
                "convert_rational_47_by_1_to_uint8",
                [
                  M.get (| "expr_21" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "write_to_memory_uint8",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "expr_131_mpos" |);
                    [Literal.number 32]
                  ]
                |);
                M.get (| "_30" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_132_mpos"],
              M.call (|
                "allocate_memory_struct_struct_S_storage_ptr",
                [

                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_56_mpos"],
              M.call (|
                "convert_array_array_uint8_dyn_storage_to_array_uint8_dyn",
                [
                  M.get (| "expr_128_slot" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "write_to_memory_array_uint8_dyn",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "expr_132_mpos" |);
                    [Literal.number 0]
                  ]
                |);
                M.get (| "_56_mpos" |)
              ]
            |) in
          let _ :=
            M.call (|
              "write_to_memory_array_uint8",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "expr_132_mpos" |);
                    [Literal.number 32]
                  ]
                |);
                M.get (| "expr_131_mpos" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["_57_slot"],
              [Literal.number 0x04]
            |) in
          let _ :=
            M.assign (|
              ["expr_122_slot"],
              M.get (| "_57_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_22"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["_31"; "_32"],
              M.call (|
                "storage_array_index_access_struct_S_",
                [
                  M.get (| "expr_122_slot" |);
                  M.get (| "expr_22" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_60_slot"],
              M.get (| "_31" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_125_slot"],
              M.get (| "_60_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_23"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["_33"; "_34"],
              M.call (|
                "storage_array_index_access_struct_S",
                [
                  M.get (| "expr_125_slot" |);
                  M.get (| "expr_23" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "update_storage_value_struct_S_to_struct_S",
              [
                M.get (| "_33" |);
                M.get (| "_34" |);
                M.get (| "expr_132_mpos" |)
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_162_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  M.call (|
                    "shift_right_224_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x66e41cb7),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_test2",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x6b59084d),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_test1",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            [

            ]
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_224_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_struct_S",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x01]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_array_struct_S",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_struct_S",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint8_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_array_uint8_dyn",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint8_dyn",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint8",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint8",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint8",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encodeUpdatedPos_uint8",
          ["value0"; "pos"],
          ["updatedPos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "abi_encode_uint8",
                [
                  M.get (| "value0" |);
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updatedPos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_nextElement_array_uint8_dyn",
          ["ptr"],
          ["next"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["next"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_uint8_dyn",
          ["value"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                M.call (|
                  "array_length_array_uint8_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_uint8_dyn",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["baseRef"],
                M.call (|
                  "array_dataslot_array_uint8_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                M.get (| "baseRef" |)
              |) in
            let _ :=
              M.assign (|
                ["i"],
                [Literal.number 0]
              |) in
            let _ :=
              M.for (|
                tt,
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                let _ :=
                  M.declare (|
                    ["i"],
                    M.call (|
                      "add",
                      [
                        M.get (| "i" |);
                        [Literal.number 1]
                      ]
                    |)
                  |) in
                tt,
                let _ :=
                  M.assign (|
                    ["elementValue0"],
                    M.call (|
                      "mload",
                      [
                        M.get (| "srcPtr" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["pos"],
                    M.call (|
                      "abi_encodeUpdatedPos_uint8",
                      [
                        M.get (| "elementValue0" |);
                        M.get (| "pos" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["srcPtr"],
                    M.call (|
                      "array_nextElement_array_uint8_dyn",
                      [
                        M.get (| "srcPtr" |)
                      ]
                    |)
                  |) in
                tt
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint8",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x02]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_array_uint8",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint8",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_nextElement_array_uint8",
          ["ptr"],
          ["next"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["next"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_uint8",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                M.call (|
                  "array_length_array_uint8",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_uint8",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["baseRef"],
                M.call (|
                  "array_dataslot_array_uint8",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                M.get (| "baseRef" |)
              |) in
            let _ :=
              M.assign (|
                ["i"],
                [Literal.number 0]
              |) in
            let _ :=
              M.for (|
                tt,
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                let _ :=
                  M.declare (|
                    ["i"],
                    M.call (|
                      "add",
                      [
                        M.get (| "i" |);
                        [Literal.number 1]
                      ]
                    |)
                  |) in
                tt,
                let _ :=
                  M.assign (|
                    ["elementValue0"],
                    M.call (|
                      "mload",
                      [
                        M.get (| "srcPtr" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["pos"],
                    M.call (|
                      "abi_encodeUpdatedPos_uint8",
                      [
                        M.get (| "elementValue0" |);
                        M.get (| "pos" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["srcPtr"],
                    M.call (|
                      "array_nextElement_array_uint8",
                      [
                        M.get (| "srcPtr" |)
                      ]
                    |)
                  |) in
                tt
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_struct_S",
          ["value"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x60]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memberValue0"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 0x00]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "pos" |);
                      [Literal.number 0x00]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "pos" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_array_uint8_dyn",
                  [
                    M.get (| "memberValue0" |);
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memberValue0_1"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_array_uint8",
                [
                  M.get (| "memberValue0_1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "pos" |);
                      [Literal.number 0x20]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "tail" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encodeUpdatedPos_struct_S",
          ["value0"; "pos"],
          ["updatedPos"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["updatedPos"],
                M.call (|
                  "abi_encode_struct_S",
                  [
                    M.get (| "value0" |);
                    M.get (| "pos" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_nextElement_array_struct_S",
          ["ptr"],
          ["next"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["next"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_struct_S_memory_ptr_memory_ptr",
          ["value"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                M.call (|
                  "array_length_array_struct_S",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_struct_S",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["headStart"],
                M.get (| "pos" |)
              |) in
            let _ :=
              M.assign (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "length" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["baseRef"],
                M.call (|
                  "array_dataslot_array_struct_S",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                M.get (| "baseRef" |)
              |) in
            let _ :=
              M.assign (|
                ["i"],
                [Literal.number 0]
              |) in
            let _ :=
              M.for (|
                tt,
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                let _ :=
                  M.declare (|
                    ["i"],
                    M.call (|
                      "add",
                      [
                        M.get (| "i" |);
                        [Literal.number 1]
                      ]
                    |)
                  |) in
                tt,
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.get (| "pos" |);
                      M.call (|
                        "sub",
                        [
                          M.get (| "tail" |);
                          M.get (| "headStart" |)
                        ]
                      |)
                    ]
                  |) in
                let _ :=
                  M.assign (|
                    ["elementValue0"],
                    M.call (|
                      "mload",
                      [
                        M.get (| "srcPtr" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["tail"],
                    M.call (|
                      "abi_encodeUpdatedPos_struct_S",
                      [
                        M.get (| "elementValue0" |);
                        M.get (| "tail" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["srcPtr"],
                    M.call (|
                      "array_nextElement_array_struct_S",
                      [
                        M.get (| "srcPtr" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["pos"],
                    M.call (|
                      "add",
                      [
                        M.get (| "pos" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                tt
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.get (| "tail" |)
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_struct_S",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_array_struct_S_memory_ptr_memory_ptr",
                  [
                    M.get (| "value0" |);
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_test2",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_test2",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_array_struct_S",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_struct_S_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_array_struct_S_dyn",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_struct_S_dyn",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_nextElement_array_struct_S_dyn",
          ["ptr"],
          ["next"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["next"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_struct_S_memory_ptr_dyn_memory_ptr",
          ["value"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                M.call (|
                  "array_length_array_struct_S_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_struct_S_dyn",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["headStart"],
                M.get (| "pos" |)
              |) in
            let _ :=
              M.assign (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "length" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["baseRef"],
                M.call (|
                  "array_dataslot_array_struct_S_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                M.get (| "baseRef" |)
              |) in
            let _ :=
              M.assign (|
                ["i"],
                [Literal.number 0]
              |) in
            let _ :=
              M.for (|
                tt,
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                let _ :=
                  M.declare (|
                    ["i"],
                    M.call (|
                      "add",
                      [
                        M.get (| "i" |);
                        [Literal.number 1]
                      ]
                    |)
                  |) in
                tt,
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.get (| "pos" |);
                      M.call (|
                        "sub",
                        [
                          M.get (| "tail" |);
                          M.get (| "headStart" |)
                        ]
                      |)
                    ]
                  |) in
                let _ :=
                  M.assign (|
                    ["elementValue0"],
                    M.call (|
                      "mload",
                      [
                        M.get (| "srcPtr" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["tail"],
                    M.call (|
                      "abi_encodeUpdatedPos_struct_S",
                      [
                        M.get (| "elementValue0" |);
                        M.get (| "tail" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["srcPtr"],
                    M.call (|
                      "array_nextElement_array_struct_S_dyn",
                      [
                        M.get (| "srcPtr" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["pos"],
                    M.call (|
                      "add",
                      [
                        M.get (| "pos" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                tt
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.get (| "tail" |)
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_struct_S_dyn",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_array_struct_S_memory_ptr_dyn_memory_ptr",
                  [
                    M.get (| "value0" |);
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_test1",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_test1",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_array_struct_S_dyn",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "round_up_to_mul_of",
          ["value"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "and",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 31]
                      ]
                    |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 31]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "finalize_allocation",
          ["memPtr"; "size"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["newFreePtr"],
                M.call (|
                  "add",
                  [
                    M.get (| "memPtr" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "size" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "newFreePtr" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "newFreePtr" |);
                        M.get (| "memPtr" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 64];
                  M.get (| "newFreePtr" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory",
          ["size"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "memPtr" |);
                  M.get (| "size" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_array_struct_S",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "mul",
                  [
                    M.get (| "length" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_array_array_struct_S",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["allocSize"],
                M.call (|
                  "array_allocation_size_array_struct_S",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    M.get (| "allocSize" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_struct_struct_S",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_array_uint8_dyn",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 96]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_array_uint8",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "mul",
                  [
                    M.get (| "length" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_array_array_uint8",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["allocSize"],
                M.call (|
                  "array_allocation_size_array_uint8",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    M.get (| "allocSize" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_memory_chunk_uint8",
          ["dataStart"; "dataSizeInBytes"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "calldatacopy",
                [
                  M.get (| "dataStart" |);
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |);
                  M.get (| "dataSizeInBytes" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_and_zero_memory_array_array_uint8",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_array_array_uint8",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["dataStart"],
                M.get (| "memPtr" |)
              |) in
            let _ :=
              M.assign (|
                ["dataSize"],
                M.call (|
                  "array_allocation_size_array_uint8",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "zero_memory_chunk_uint8",
                [
                  M.get (| "dataStart" |);
                  M.get (| "dataSize" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_array_uint8",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "allocate_and_zero_memory_array_array_uint8",
                  [
                    [Literal.number 2]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_and_zero_memory_struct_struct_S",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_struct_struct_S",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                M.get (| "memPtr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "offset" |);
                  M.call (|
                    "zero_value_for_array_uint8_dyn",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "offset" |);
                  M.call (|
                    "zero_value_for_array_uint8",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_struct_S",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "allocate_and_zero_memory_struct_struct_S",
                  [

                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_complex_memory_array_array_struct_S",
          ["dataStart"; "dataSizeInBytes"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["i"],
                [Literal.number 0]
              |) in
            let _ :=
              M.for (|
                tt,
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "dataSizeInBytes" |)
                  ]
                |),
                let _ :=
                  M.declare (|
                    ["i"],
                    M.call (|
                      "add",
                      [
                        M.get (| "i" |);
                        [Literal.number 32]
                      ]
                    |)
                  |) in
                tt,
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "dataStart" |);
                          M.get (| "i" |)
                        ]
                      |);
                      M.call (|
                        "zero_value_for_struct_S",
                        [

                        ]
                      |)
                    ]
                  |) in
                tt
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_and_zero_memory_array_array_struct_S",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_array_array_struct_S",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["dataStart"],
                M.get (| "memPtr" |)
              |) in
            let _ :=
              M.assign (|
                ["dataSize"],
                M.call (|
                  "array_allocation_size_array_struct_S",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "zero_complex_memory_array_array_struct_S",
                [
                  M.get (| "dataStart" |);
                  M.get (| "dataSize" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_array_struct_S",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "allocate_and_zero_memory_array_array_struct_S",
                  [
                    [Literal.number 1]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x32",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x32]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_array_struct_S_storage",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x01]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_array_struct_S_storage",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_struct_S",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                M.call (|
                  "array_length_array_array_struct_S_storage",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                M.call (|
                  "array_dataslot_array_array_struct_S_storage",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 2]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_struct_S_storage",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x01]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_struct_S_storage",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint8_dyn_storage",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint8_dyn_storage",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.get (| "ptr" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_0_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_uint8",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_0t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_0_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_8_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 8];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_1t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_8_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_16_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 16];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_2t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_16_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_24_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 24];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_24_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_32_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 32];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_4t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_32_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_40_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 40];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_5t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_40_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_48_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 48];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_6t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_48_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_56_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 56];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_7t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_56_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_64_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 64];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_8t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_64_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_72_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 72];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_9t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_72_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_80_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 80];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_10t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_80_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_88_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 88];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_11t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_88_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_96_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 96];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_12t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_96_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_104_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 104];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_13t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_104_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_112_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 112];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_14t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_112_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_120_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 120];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_15t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_120_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_128_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 128];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_16t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_128_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_136_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 136];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_17t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_136_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 144];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_18t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_152_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 152];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_19t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_152_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_160_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 160];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_20t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_160_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_168_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 168];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_21t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_168_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_176_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 176];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_22t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_176_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_184_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 184];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_23t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_184_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_192_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 192];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_24t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_192_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_200_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 200];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_25t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_200_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_208_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 208];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_26t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_208_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_216_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 216];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_27t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_216_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_28t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_224_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_232_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 232];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_29t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_232_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_240_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 240];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_30t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_240_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_248_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 248];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_31t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_248_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_uint8_dyn_storage",
          ["value"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                M.call (|
                  "array_length_array_uint8_dyn_storage",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_uint8_dyn",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                M.call (|
                  "array_dataslot_array_uint8_dyn_storage",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["itemCounter"],
                [Literal.number 0]
              |) in
            let _ :=
              M.if_ (|
                [Literal.number 1],
                ltac:(M.monadic (
                  let _ :=
                    M.for (|
                      tt,
                      M.call (|
                        "lt",
                        [
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              M.call (|
                                "sub",
                                [
                                  [Literal.number 32];
                                  [Literal.number 1]
                                ]
                              |)
                            ]
                          |);
                          M.get (| "length" |)
                        ]
                      |),
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 32]
                            ]
                          |)
                        |) in
                      tt,
                      let _ :=
                        M.assign (|
                          ["data"],
                          M.call (|
                            "sload",
                            [
                              M.get (| "srcPtr" |)
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_0t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_1t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_2t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offsett_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_4t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_5t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_6t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_7t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_8t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_9t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_10t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_11t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_12t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_13t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_14t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_15t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_16t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_17t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_18t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_19t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_20t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_21t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_22t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_23t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_24t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_25t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_26t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_27t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_28t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_29t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_30t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_31t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["srcPtr"],
                          M.call (|
                            "add",
                            [
                              M.get (| "srcPtr" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.if_ (|
                [Literal.number 1],
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["data_1"],
                      M.call (|
                        "sload",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_0t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_1t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_2t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offsett_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_4t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_5t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_6t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_7t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_8t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_9t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_10t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_11t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_12t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_13t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_14t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_15t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_16t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_17t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_18t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_19t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_20t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_21t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_22t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_23t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_24t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_25t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_26t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_27t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_28t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_29t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_30t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_31t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encodeUpdatedPos_array_uint8_dyn_storage",
          ["value0"; "pos"],
          ["updatedPos"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["updatedPos"],
                M.call (|
                  "abi_encode_array_uint8_dyn_storage",
                  [
                    M.get (| "value0" |);
                    M.get (| "pos" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_from_storage_to_memory_array_uint8_dyn",
          ["slot"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["end"],
                M.call (|
                  "abi_encodeUpdatedPos_array_uint8_dyn_storage",
                  [
                    M.get (| "slot" |);
                    M.get (| "memPtr" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "end" |);
                      M.get (| "memPtr" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "write_to_memory_array_uint8_dyn",
          ["memPtr"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint8_storage",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x02]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint8_storage",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_uint8_storage",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                M.call (|
                  "array_length_array_uint8_storage",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_uint8",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                M.call (|
                  "array_dataslot_array_uint8_storage",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["itemCounter"],
                [Literal.number 0]
              |) in
            let _ :=
              M.if_ (|
                [Literal.number 0],
                ltac:(M.monadic (
                  let _ :=
                    M.for (|
                      tt,
                      M.call (|
                        "lt",
                        [
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              M.call (|
                                "sub",
                                [
                                  [Literal.number 32];
                                  [Literal.number 1]
                                ]
                              |)
                            ]
                          |);
                          M.get (| "length" |)
                        ]
                      |),
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 32]
                            ]
                          |)
                        |) in
                      tt,
                      let _ :=
                        M.assign (|
                          ["data"],
                          M.call (|
                            "sload",
                            [
                              M.get (| "srcPtr" |)
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_0t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_1t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_2t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offsett_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_4t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_5t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_6t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_7t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_8t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_9t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_10t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_11t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_12t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_13t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_14t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_15t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_16t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_17t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_18t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_19t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_20t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_21t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_22t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_23t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_24t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_25t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_26t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_27t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_28t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_29t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_30t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_31t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["srcPtr"],
                          M.call (|
                            "add",
                            [
                              M.get (| "srcPtr" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.if_ (|
                [Literal.number 1],
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["data_1"],
                      M.call (|
                        "sload",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 1],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_0t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 1],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_1t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_2t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offsett_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_4t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_5t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_6t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_7t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_8t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_9t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_10t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_11t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_12t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_13t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_14t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_15t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_16t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_17t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_18t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_19t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_20t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_21t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_22t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_23t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_24t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_25t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_26t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_27t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_28t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_29t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_30t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_31t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encodeUpdatedPos_array_uint8_storage",
          ["value0"; "pos"],
          ["updatedPos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "abi_encode_array_uint8_storage",
                [
                  M.get (| "value0" |);
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updatedPos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x40]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_from_storage_to_memory_array_uint",
          ["slot"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["end"],
                M.call (|
                  "abi_encodeUpdatedPos_array_uint8_storage",
                  [
                    M.get (| "slot" |);
                    M.get (| "memPtr" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "end" |);
                      M.get (| "memPtr" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "write_to_memory_array_uint8",
          ["memPtr"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_reference_type_struct_S",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "allocate_memory_struct_struct_S",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memberValue"],
                M.call (|
                  "copy_array_from_storage_to_memory_array_uint8_dyn",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "slot" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "write_to_memory_array_uint8_dyn",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.get (| "memberValue" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["memberValue_1"],
                M.call (|
                  "copy_array_from_storage_to_memory_array_uint",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "slot" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "write_to_memory_array_uint8",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 32]
                    ]
                  |);
                  M.get (| "memberValue_1" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_struct_S_storage_to_struct_S",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "read_from_storage_reference_type_struct_S",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_from_storage_to_memory_array_struct_S",
          ["slot"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                M.call (|
                  "array_length_array_struct_S_storage",
                  [
                    M.get (| "slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_array_array_struct_S",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["mpos"],
                M.get (| "memPtr" |)
              |) in
            let _ :=
              M.assign (|
                ["spos"],
                M.call (|
                  "array_dataslot_array_struct_S_storage",
                  [
                    M.get (| "slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["i"],
                [Literal.number 0]
              |) in
            let _ :=
              M.for (|
                tt,
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                let _ :=
                  M.declare (|
                    ["i"],
                    M.call (|
                      "add",
                      [
                        M.get (| "i" |);
                        [Literal.number 1]
                      ]
                    |)
                  |) in
                tt,
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.get (| "mpos" |);
                      M.call (|
                        "convert_struct_S_storage_to_struct_S",
                        [
                          M.get (| "spos" |)
                        ]
                      |)
                    ]
                  |) in
                let _ :=
                  M.declare (|
                    ["mpos"],
                    M.call (|
                      "add",
                      [
                        M.get (| "mpos" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["spos"],
                    M.call (|
                      "add",
                      [
                        M.get (| "spos" |);
                        [Literal.number 2]
                      ]
                    |)
                  |) in
                tt
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_array_array_struct_S_storage_to_array_struct_S",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "copy_array_from_storage_to_memory_array_struct_S",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_test2",
          [],
          ["var_mpos"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_array_struct_S_mpos"],
                M.call (|
                  "zero_value_for_split_array_struct_S",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_mpos"],
                M.get (| "zero_array_struct_S_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_2_slot"],
                [Literal.number 0x04]
              |) in
            let _ :=
              M.assign (|
                ["expr_156_slot"],
                M.get (| "_2_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_1"; "_2"],
                M.call (|
                  "storage_array_index_access_struct_S",
                  [
                    M.get (| "expr_156_slot" |);
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_slot"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_158_slot"],
                M.get (| "_slot" |)
              |) in
            let _ :=
              M.declare (|
                ["var_mpos"],
                M.call (|
                  "convert_array_array_struct_S_storage_to_array_struct_S",
                  [
                    M.get (| "expr_158_slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_array_struct_S_dyn",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 96]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_array_struct_S_storage_dyn__dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_array_struct_S_storage_dyn__dyn",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.get (| "ptr" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_struct_S_storage_dyn__dyn",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                M.call (|
                  "array_length_array_array_struct_S_storage_dyn__dyn",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                M.call (|
                  "array_dataslot_array_array_struct_S_storage_dyn__dyn",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_struct_S_storage_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_array_struct_S_dyn",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "mul",
                  [
                    M.get (| "length" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "add",
                  [
                    M.get (| "size" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_array_array_struct_S_dyn",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["allocSize"],
                M.call (|
                  "array_allocation_size_array_struct_S_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    M.get (| "allocSize" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.get (| "length" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_struct_S_storage_dyn",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.get (| "ptr" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_from_storage_to_memory_array_struct_S__dyn",
          ["slot"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                M.call (|
                  "array_length_array_struct_S_storage_dyn",
                  [
                    M.get (| "slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_array_array_struct_S_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["mpos"],
                M.get (| "memPtr" |)
              |) in
            let _ :=
              M.declare (|
                ["mpos"],
                M.call (|
                  "add",
                  [
                    M.get (| "mpos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["spos"],
                M.call (|
                  "array_dataslot_array_struct_S_storage_dyn",
                  [
                    M.get (| "slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["i"],
                [Literal.number 0]
              |) in
            let _ :=
              M.for (|
                tt,
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                let _ :=
                  M.declare (|
                    ["i"],
                    M.call (|
                      "add",
                      [
                        M.get (| "i" |);
                        [Literal.number 1]
                      ]
                    |)
                  |) in
                tt,
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.get (| "mpos" |);
                      M.call (|
                        "convert_struct_S_storage_to_struct_S",
                        [
                          M.get (| "spos" |)
                        ]
                      |)
                    ]
                  |) in
                let _ :=
                  M.declare (|
                    ["mpos"],
                    M.call (|
                      "add",
                      [
                        M.get (| "mpos" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["spos"],
                    M.call (|
                      "add",
                      [
                        M.get (| "spos" |);
                        [Literal.number 2]
                      ]
                    |)
                  |) in
                tt
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_array_array_struct_S_storage_dyn_to_array_struct_S_dyn",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "copy_array_from_storage_to_memory_array_struct_S__dyn",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_test1",
          [],
          ["var__mpos"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_array_struct_S_dyn_mpos"],
                M.call (|
                  "zero_value_for_split_array_struct_S_dyn",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var__mpos"],
                M.get (| "zero_array_struct_S_dyn_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_7_slot"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["expr_143_slot"],
                M.get (| "_7_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_1"; "_2"],
                M.call (|
                  "storage_array_index_access_struct_S_storage_dyn__dyn",
                  [
                    M.get (| "expr_143_slot" |);
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_10_slot"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_slot"],
                M.get (| "_10_slot" |)
              |) in
            let _ :=
              M.declare (|
                ["var__mpos"],
                M.call (|
                  "convert_array_array_struct_S_storage_dyn_to_array_struct_S_dyn",
                  [
                    M.get (| "expr_slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a2646970667358221220447dad9aa6531456f5a978fdaa422d6d7e64f0271233b70627975a00165c72be64736f6c634300081b0033".
  End C_162_deployed.
End C_162.
