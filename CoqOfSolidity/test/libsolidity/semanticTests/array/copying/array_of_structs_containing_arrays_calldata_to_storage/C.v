(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_106.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            []
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                []
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          Some (M.call (|
            "allocate_unbounded",
            []
          |))
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f3130365f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3130365f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3130365f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_106_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      []
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  Some (M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x922fff58),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_f",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            []
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_struct_S_calldata_ptr_dyn_calldata_ptr",
          ["offset"; "end"],
          ["arrayPos";
      "length"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "offset" |);
                            [Literal.number 0x1f]
                          ]
                        |);
                        M.get (| "end" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["arrayPos"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "arrayPos" |);
                        M.call (|
                          "mul",
                          [
                            M.get (| "length" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      ]
                    |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_struct_S_calldata_dyn_calldata",
          ["headStart"; "dataEnd"],
          ["value0";
      "value1"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value0"; "value1"],
                M.call (|
                  "abi_decode_array_struct_S_calldata_ptr_dyn_calldata_ptr",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_uint256",
          ["headStart"; "value0"; "value1"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_f",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"],
                Some (M.call (|
                  "abi_decode_array_struct_S_calldata_dyn_calldata",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"],
                Some (M.call (|
                  "fun_f",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_uint256_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x00",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x00]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_struct_S_calldata_dyn_calldata",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_356d538aaf70fba12156cc466564b792649f8f3befb07b071c91142253e175ad",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_1e55d03107e9c4f1b5e21c76a16fba166a461117ab153bcce65e6a4ea8e5fc8a",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_977805620ff29572292dee35f70b0f3f3f73d3fdd0e9f4d7a901c2e43ab18a2e",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "access_calldata_tail_struct_S_calldata",
          ["base_ref"; "ptr_to_tail"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["rel_offset_of_tail"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.get (| "ptr_to_tail" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.get (| "rel_offset_of_tail" |);
                        M.call (|
                          "sub",
                          [
                            M.call (|
                              "sub",
                              [
                                M.call (|
                                  "calldatasize",
                                  []
                                |);
                                M.get (| "base_ref" |)
                              ]
                            |);
                            M.call (|
                              "sub",
                              [
                                [Literal.number 0x20];
                                [Literal.number 1]
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_356d538aaf70fba12156cc466564b792649f8f3befb07b071c91142253e175ad",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "base_ref" |);
                    M.get (| "rel_offset_of_tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_struct_S_storage_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_convert_length_to_size_array_struct_S_storage_dyn",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["size"],
                M.get (| "length" |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "div",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "length" |);
                        M.call (|
                          "sub",
                          [
                            [Literal.number 1];
                            [Literal.number 1]
                          ]
                        |)
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_struct_S_storage_dyn",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.get (| "ptr" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint256_dyn_storage",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_convert_length_to_size_array_uint256_dyn_storage",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["size"],
                M.get (| "length" |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "div",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "length" |);
                        M.call (|
                          "sub",
                          [
                            [Literal.number 1];
                            [Literal.number 1]
                          ]
                        |)
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint256_dyn_storage",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.get (| "ptr" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_dynamic",
          ["bits"; "value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    M.get (| "bits" |);
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_dynamic32",
          ["value"; "shiftBytes"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["shiftBits"],
                Some (M.call (|
                  "mul",
                  [
                    M.get (| "shiftBytes" |);
                    [Literal.number 8]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["mask"],
                Some (M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint256_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_uint256",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_uint256_to_uint256",
          ["slot"; "offset"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                Some (M.call (|
                  "convert_uint256_to_uint256",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_dynamic32",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.get (| "offset" |);
                      M.call (|
                        "prepare_store_uint256",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_set_to_zero_uint256",
          ["slot"; "offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_uint256_to_uint256",
                [
                  M.get (| "slot" |);
                  M.get (| "offset" |);
                  M.get (| "zero" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_storage_range_uint256",
          ["start"; "end"],
          [],
          ltac:(M.monadic (
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "start" |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["start"],
                      M.call (|
                        "add",
                        [
                          M.get (| "start" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "storage_set_to_zero_uint256",
                      [
                        M.get (| "start" |);
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_unsigned_dynamic",
          ["bits"; "value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    M.get (| "bits" |);
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_storage_array_end_array_uint256_dyn",
          ["array"; "len"; "startIndex"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "startIndex" |);
                    M.get (| "len" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["oldSlotCount"],
                      Some (M.call (|
                        "array_convert_length_to_size_array_uint256_dyn_storage",
                        [
                          M.get (| "len" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["newSlotCount"],
                      Some (M.call (|
                        "array_convert_length_to_size_array_uint256_dyn_storage",
                        [
                          M.get (| "startIndex" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["arrayDataStart"],
                      Some (M.call (|
                        "array_dataslot_array_uint256_dyn_storage",
                        [
                          M.get (| "array" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteStart"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "newSlotCount" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteEnd"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "oldSlotCount" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.call (|
                      "clear_storage_range_uint256",
                      [
                        M.get (| "deleteStart" |);
                        M.get (| "deleteEnd" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "resize_array_array_uint256_dyn_storage",
          ["array"; "newLen"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "newLen" |);
                    [Literal.number 18446744073709551616]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["oldLen"],
                Some (M.call (|
                  "array_length_array_uint256_dyn_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "array" |);
                  M.get (| "newLen" |)
                ]
              |) in
            let _ :=
              M.call (|
                "cleanup_storage_array_end_array_uint256_dyn",
                [
                  M.get (| "array" |);
                  M.get (| "oldLen" |);
                  M.get (| "newLen" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_storage_array_array_uint256_dyn",
          ["slot"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "resize_array_array_uint256_dyn_storage",
                [
                  M.get (| "slot" |);
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_set_to_zero_array_uint256_dyn",
          ["slot"; "offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "offset" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x00",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "clear_storage_array_array_uint256_dyn",
                [
                  M.get (| "slot" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_struct_storage_struct_S",
          ["slot"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "storage_set_to_zero_array_uint256_dyn",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "slot" |);
                      [Literal.number 0]
                    ]
                  |);
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_set_to_zero_struct_S",
          ["slot"; "offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "offset" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x00",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "clear_struct_storage_struct_S",
                [
                  M.get (| "slot" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_storage_range_struct_S",
          ["start"; "end"],
          [],
          ltac:(M.monadic (
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "start" |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["start"],
                      M.call (|
                        "add",
                        [
                          M.get (| "start" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "storage_set_to_zero_struct_S",
                      [
                        M.get (| "start" |);
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_storage_array_end_array_struct_S__dyn",
          ["array"; "len"; "startIndex"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "startIndex" |);
                    M.get (| "len" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["oldSlotCount"],
                      Some (M.call (|
                        "array_convert_length_to_size_array_struct_S_storage_dyn",
                        [
                          M.get (| "len" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["newSlotCount"],
                      Some (M.call (|
                        "array_convert_length_to_size_array_struct_S_storage_dyn",
                        [
                          M.get (| "startIndex" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["arrayDataStart"],
                      Some (M.call (|
                        "array_dataslot_array_struct_S_storage_dyn",
                        [
                          M.get (| "array" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteStart"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "newSlotCount" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteEnd"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "oldSlotCount" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.call (|
                      "clear_storage_range_struct_S",
                      [
                        M.get (| "deleteStart" |);
                        M.get (| "deleteEnd" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "resize_array_array_struct_S_storage_dyn",
          ["array"; "newLen"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "newLen" |);
                    [Literal.number 18446744073709551616]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["oldLen"],
                Some (M.call (|
                  "array_length_array_struct_S_storage_dyn",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "array" |);
                  M.get (| "newLen" |)
                ]
              |) in
            let _ :=
              M.call (|
                "cleanup_storage_array_end_array_struct_S__dyn",
                [
                  M.get (| "array" |);
                  M.get (| "oldLen" |);
                  M.get (| "newLen" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_struct_S_calldata_dyn_calldata",
          ["value"; "len"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.get (| "len" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "access_calldata_tail_array_uint256_dyn_calldata",
          ["base_ref"; "ptr_to_tail"],
          ["addr";
      "length"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["rel_offset_of_tail"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.get (| "ptr_to_tail" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.get (| "rel_offset_of_tail" |);
                        M.call (|
                          "sub",
                          [
                            M.call (|
                              "sub",
                              [
                                M.call (|
                                  "calldatasize",
                                  []
                                |);
                                M.get (| "base_ref" |)
                              ]
                            |);
                            M.call (|
                              "sub",
                              [
                                [Literal.number 0x20];
                                [Literal.number 1]
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_356d538aaf70fba12156cc466564b792649f8f3befb07b071c91142253e175ad",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "base_ref" |);
                    M.get (| "rel_offset_of_tail" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "addr" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_1e55d03107e9c4f1b5e21c76a16fba166a461117ab153bcce65e6a4ea8e5fc8a",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "addr" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "sgt",
                  [
                    M.get (| "addr" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "calldatasize",
                          []
                        |);
                        M.call (|
                          "mul",
                          [
                            M.get (| "length" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_977805620ff29572292dee35f70b0f3f3f73d3fdd0e9f4d7a901c2e43ab18a2e",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint256_dyn_calldata",
          ["value"; "len"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.get (| "len" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_uint256",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_calldatat_uint256",
          ["ptr"],
          ["returnValue"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["value"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.get (| "ptr" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "validator_revert_uint256",
                [
                  M.get (| "value" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["returnValue"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint256_dyn_calldata",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_dynamict_uint256",
          ["slot_value"; "offset"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint256",
                  [
                    M.call (|
                      "shift_right_unsigned_dynamic",
                      [
                        M.call (|
                          "mul",
                          [
                            M.get (| "offset" |);
                            [Literal.number 8]
                          ]
                        |);
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_to_storage_from_array_uint256_dyn_calldata_to_array_uint256_dyn",
          ["dst"; "src"; "len"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_uint256_dyn_calldata",
                  [
                    M.get (| "src" |);
                    M.get (| "len" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "resize_array_array_uint256_dyn_storage",
                [
                  M.get (| "dst" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.call (|
                  "array_dataslot_array_uint256_dyn_calldata",
                  [
                    M.get (| "src" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["dstSlot"],
                Some (M.call (|
                  "array_dataslot_array_uint256_dyn_storage",
                  [
                    M.get (| "dst" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["fullSlots"],
                Some (M.call (|
                  "div",
                  [
                    M.get (| "length" |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "fullSlots" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["dstSlotValue"],
                      Some ([Literal.number 0])
                    |) in
                  let _ :=
                    M.assign (|
                      ["stackItem"],
                      Some (M.call (|
                        "read_from_calldatat_uint256",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["itemValue"],
                      Some (M.call (|
                        "prepare_store_uint256",
                        [
                          M.get (| "stackItem" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["dstSlotValue"],
                      M.get (| "itemValue" |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["srcPtr"],
                      M.call (|
                        "add",
                        [
                          M.get (| "srcPtr" |);
                          [Literal.number 32]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.call (|
                      "sstore",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "dstSlot" |);
                            M.get (| "i" |)
                          ]
                        |);
                        M.get (| "dstSlotValue" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_array_uint256_dyn_calldata_to_array_uint256_dyn",
          ["slot"; "value"; "value_1"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "copy_array_to_storage_from_array_uint256_dyn_calldata_to_array_uint256_dyn",
                [
                  M.get (| "slot" |);
                  M.get (| "value" |);
                  M.get (| "value_1" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_struct_to_storage_from_struct_S_calldata_to_struct_S",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["memberSlot"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "slot" |);
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memberSrcPtr"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "value" |);
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memberValue"; "memberValue_1"],
                Some (M.call (|
                  "access_calldata_tail_array_uint256_dyn_calldata",
                  [
                    M.get (| "value" |);
                    M.get (| "memberSrcPtr" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_array_uint256_dyn_calldata_to_array_uint256_dyn",
                [
                  M.get (| "memberSlot" |);
                  M.get (| "memberValue" |);
                  M.get (| "memberValue_1" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_struct_S_calldata_to_struct_S",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "copy_struct_to_storage_from_struct_S_calldata_to_struct_S",
                [
                  M.get (| "slot" |);
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_to_storage_from_array_struct_S_calldata_dyn_calldata_to_array_struct_S__dyn",
          ["slot"; "value"; "len"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_struct_S_calldata_dyn_calldata",
                  [
                    M.get (| "value" |);
                    M.get (| "len" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "resize_array_array_struct_S_storage_dyn",
                [
                  M.get (| "slot" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.call (|
                  "array_dataslot_array_struct_S_calldata_dyn_calldata",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["elementSlot"],
                Some (M.call (|
                  "array_dataslot_array_struct_S_storage_dyn",
                  [
                    M.get (| "slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["stackItem"],
                      Some (M.call (|
                        "access_calldata_tail_struct_S_calldata",
                        [
                          M.get (| "value" |);
                          M.get (| "srcPtr" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.call (|
                      "update_storage_value_offsett_struct_S_calldata_to_struct_S",
                      [
                        M.get (| "elementSlot" |);
                        M.get (| "stackItem" |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["srcPtr"],
                      M.call (|
                        "add",
                        [
                          M.get (| "srcPtr" |);
                          [Literal.number 32]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["elementSlot"],
                      M.call (|
                        "add",
                        [
                          M.get (| "elementSlot" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_array_struct_S_calldata_dyn_calldata_to_array_struct_S__dyn",
          ["slot"; "value"; "value_1"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "copy_array_to_storage_from_array_struct_S_calldata_dyn_calldata_to_array_struct_S__dyn",
                [
                  M.get (| "slot" |);
                  M.get (| "value" |);
                  M.get (| "value_1" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x01",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x01]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "assert_helper",
          ["condition"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "condition" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x01",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "increment_wrapping_uint256",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x32",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x32]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_struct_S__dyn",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                Some (M.call (|
                  "array_length_array_struct_S_storage_dyn",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                Some (M.call (|
                  "array_dataslot_array_struct_S_storage_dyn",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "calldata_array_index_access_struct_S_calldata_dyn_calldata",
          ["base_ref"; "length"; "index"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "length" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "base_ref" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 32]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "access_calldata_tail_struct_S_calldata",
                  [
                    M.get (| "base_ref" |);
                    M.get (| "addr" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_uint256_dyn",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                Some (M.call (|
                  "array_length_array_uint256_dyn_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                Some (M.call (|
                  "array_dataslot_array_uint256_dyn_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_dynamic_uint256",
          ["slot"; "offset"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_dynamict_uint256",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "calldata_array_index_access_uint256_dyn_calldata",
          ["base_ref"; "length"; "index"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "length" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "base_ref" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 32]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_f",
          ["var_c_offset"; "var_c_length"],
          ["var";
      "var_"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_t_uint256"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "zero_t_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["_3_offset"],
                Some (M.get (| "var_c_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["_3_length"],
                Some (M.get (| "var_c_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_offset"],
                Some (M.get (| "_3_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21_length"],
                Some (M.get (| "_3_length" |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_array_struct_S_calldata_dyn_calldata_to_array_struct_S__dyn",
                [
                  [Literal.number 0x00];
                  M.get (| "expr_offset" |);
                  M.get (| "expr_21_length" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_5_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_25_slot"],
                Some (M.get (| "_5_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.call (|
                  "array_length_array_struct_S_storage_dyn",
                  [
                    M.get (| "expr_25_slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_offset"],
                Some (M.get (| "var_c_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["_6_length"],
                Some (M.get (| "var_c_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_27_offset"],
                Some (M.get (| "_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_27_length"],
                Some (M.get (| "_6_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "array_length_array_struct_S_calldata_dyn_calldata",
                  [
                    M.get (| "expr_27_offset" |);
                    M.get (| "expr_27_length" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_2" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["var_i"],
                Some (M.call (|
                  "convert_rational_by_to_uint256",
                  [
                    M.get (| "expr_3" |)
                  ]
                |))
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                [Literal.number 1],
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_1"],
                      Some (M.get (| "var_i" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_2"],
                      Some (M.call (|
                        "increment_wrapping_uint256",
                        [
                          M.get (| "_1" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["var_i"],
                      M.get (| "_2" |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_3"],
                      Some (M.get (| "var_i" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_4"],
                      Some (M.get (| "_3" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_10_slot"],
                      Some ([Literal.number 0x00])
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_37_slot"],
                      Some (M.get (| "_10_slot" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_5"],
                      Some (M.call (|
                        "array_length_array_struct_S_storage_dyn",
                        [
                          M.get (| "expr_37_slot" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_6"],
                      Some (M.call (|
                        "lt",
                        [
                          M.call (|
                            "cleanup_uint256",
                            [
                              M.get (| "expr_4" |)
                            ]
                          |);
                          M.call (|
                            "cleanup_uint256",
                            [
                              M.get (| "expr_5" |)
                            ]
                          |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "iszero",
                        [
                          M.get (| "expr_6" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.break (||) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_slot"],
                      Some ([Literal.number 0x00])
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_44_slot"],
                      Some (M.get (| "_slot" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_4"],
                      Some (M.get (| "var_i" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_7"],
                      Some (M.get (| "_4" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_5"; "_6"],
                      Some (M.call (|
                        "storage_array_index_access_struct_S__dyn",
                        [
                          M.get (| "expr_44_slot" |);
                          M.get (| "expr_7" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_15_slot"],
                      Some (M.get (| "_5" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_46_slot"],
                      Some (M.get (| "_15_slot" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_7"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "expr_46_slot" |);
                          [Literal.number 0]
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_17_slot"],
                      Some (M.get (| "_7" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_47_slot"],
                      Some (M.get (| "_17_slot" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_8"],
                      Some (M.call (|
                        "array_length_array_uint256_dyn_storage",
                        [
                          M.get (| "expr_47_slot" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_18_offset"],
                      Some (M.get (| "var_c_offset" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_18_length"],
                      Some (M.get (| "var_c_length" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_49_offset"],
                      Some (M.get (| "_18_offset" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_49_length"],
                      Some (M.get (| "_18_length" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_8"],
                      Some (M.get (| "var_i" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_9"],
                      Some (M.get (| "_8" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_51_offset"],
                      Some (M.call (|
                        "calldata_array_index_access_struct_S_calldata_dyn_calldata",
                        [
                          M.get (| "expr_49_offset" |);
                          M.get (| "expr_49_length" |);
                          M.get (| "expr_9" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_9"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "expr_51_offset" |);
                          [Literal.number 0]
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_52_offset"; "expr_52_length"],
                      Some (M.call (|
                        "access_calldata_tail_array_uint256_dyn_calldata",
                        [
                          M.get (| "expr_51_offset" |);
                          M.get (| "_9" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_10"],
                      Some (M.call (|
                        "array_length_array_uint256_dyn_calldata",
                        [
                          M.get (| "expr_52_offset" |);
                          M.get (| "expr_52_length" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_11"],
                      Some (M.call (|
                        "eq",
                        [
                          M.call (|
                            "cleanup_uint256",
                            [
                              M.get (| "expr_8" |)
                            ]
                          |);
                          M.call (|
                            "cleanup_uint256",
                            [
                              M.get (| "expr_10" |)
                            ]
                          |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.call (|
                      "assert_helper",
                      [
                        M.get (| "expr_11" |)
                      ]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_12"],
                      Some ([Literal.number 0x00])
                    |) in
                  let _ :=
                    M.assign (|
                      ["var_j"],
                      Some (M.call (|
                        "convert_rational_by_to_uint256",
                        [
                          M.get (| "expr_12" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    let _ :=
                      tt in
                    M.for_ (|
                      [Literal.number 1],
                      ltac:(M.monadic (
                        let _ :=
                          M.assign (|
                            ["_10"],
                            Some (M.get (| "var_j" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_11"],
                            Some (M.call (|
                              "increment_wrapping_uint256",
                              [
                                M.get (| "_10" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.declare (|
                            ["var_j"],
                            M.get (| "_11" |)
                          |) in
                        tt
                      )),
                      ltac:(M.monadic (
                        let _ :=
                          M.assign (|
                            ["_12"],
                            Some (M.get (| "var_j" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_13"],
                            Some (M.get (| "_12" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_24_slot"],
                            Some ([Literal.number 0x00])
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_62_slot"],
                            Some (M.get (| "_24_slot" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_13"],
                            Some (M.get (| "var_i" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_14"],
                            Some (M.get (| "_13" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_14"; "_15"],
                            Some (M.call (|
                              "storage_array_index_access_struct_S__dyn",
                              [
                                M.get (| "expr_62_slot" |);
                                M.get (| "expr_14" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_28_slot"],
                            Some (M.get (| "_14" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_64_slot"],
                            Some (M.get (| "_28_slot" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_16"],
                            Some (M.call (|
                              "add",
                              [
                                M.get (| "expr_64_slot" |);
                                [Literal.number 0]
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_30_slot"],
                            Some (M.get (| "_16" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_65_slot"],
                            Some (M.get (| "_30_slot" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_15"],
                            Some (M.call (|
                              "array_length_array_uint256_dyn_storage",
                              [
                                M.get (| "expr_65_slot" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_16"],
                            Some (M.call (|
                              "lt",
                              [
                                M.call (|
                                  "cleanup_uint256",
                                  [
                                    M.get (| "expr_13" |)
                                  ]
                                |);
                                M.call (|
                                  "cleanup_uint256",
                                  [
                                    M.get (| "expr_15" |)
                                  ]
                                |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.if_ (|
                            M.call (|
                              "iszero",
                              [
                                M.get (| "expr_16" |)
                              ]
                            |),
                            ltac:(M.monadic (
                              let _ :=
                                M.break (||) in
                              tt
                            ))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_31_slot"],
                            Some ([Literal.number 0x00])
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_72_slot"],
                            Some (M.get (| "_31_slot" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_17"],
                            Some (M.get (| "var_i" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_17"],
                            Some (M.get (| "_17" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_18"; "_19"],
                            Some (M.call (|
                              "storage_array_index_access_struct_S__dyn",
                              [
                                M.get (| "expr_72_slot" |);
                                M.get (| "expr_17" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_35_slot"],
                            Some (M.get (| "_18" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_74_slot"],
                            Some (M.get (| "_35_slot" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_20"],
                            Some (M.call (|
                              "add",
                              [
                                M.get (| "expr_74_slot" |);
                                [Literal.number 0]
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_37_slot"],
                            Some (M.get (| "_20" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_75_slot"],
                            Some (M.get (| "_37_slot" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_21"],
                            Some (M.get (| "var_j" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_18"],
                            Some (M.get (| "_21" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_22"; "_23"],
                            Some (M.call (|
                              "storage_array_index_access_uint256_dyn",
                              [
                                M.get (| "expr_75_slot" |);
                                M.get (| "expr_18" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_24"],
                            Some (M.call (|
                              "read_from_storage_split_dynamic_uint256",
                              [
                                M.get (| "_22" |);
                                M.get (| "_23" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_19"],
                            Some (M.get (| "_24" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_42_offset"],
                            Some (M.get (| "var_c_offset" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_length"],
                            Some (M.get (| "var_c_length" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_78_offset"],
                            Some (M.get (| "_42_offset" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_length"],
                            Some (M.get (| "_length" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_25"],
                            Some (M.get (| "var_i" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_20"],
                            Some (M.get (| "_25" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_80_offset"],
                            Some (M.call (|
                              "calldata_array_index_access_struct_S_calldata_dyn_calldata",
                              [
                                M.get (| "expr_78_offset" |);
                                M.get (| "expr_length" |);
                                M.get (| "expr_20" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_26"],
                            Some (M.call (|
                              "add",
                              [
                                M.get (| "expr_80_offset" |);
                                [Literal.number 0]
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_81_offset"; "expr_81_length"],
                            Some (M.call (|
                              "access_calldata_tail_array_uint256_dyn_calldata",
                              [
                                M.get (| "expr_80_offset" |);
                                M.get (| "_26" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_27"],
                            Some (M.get (| "var_j" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_21"],
                            Some (M.get (| "_27" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_22"],
                            Some (M.call (|
                              "read_from_calldatat_uint256",
                              [
                                M.call (|
                                  "calldata_array_index_access_uint256_dyn_calldata",
                                  [
                                    M.get (| "expr_81_offset" |);
                                    M.get (| "expr_81_length" |);
                                    M.get (| "expr_21" |)
                                  ]
                                |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_23"],
                            Some (M.call (|
                              "eq",
                              [
                                M.call (|
                                  "cleanup_uint256",
                                  [
                                    M.get (| "expr_19" |)
                                  ]
                                |);
                                M.call (|
                                  "cleanup_uint256",
                                  [
                                    M.get (| "expr_22" |)
                                  ]
                                |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.call (|
                            "assert_helper",
                            [
                              M.get (| "expr_23" |)
                            ]
                          |) in
                        tt
                      ))
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["_46_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_slot"],
                Some (M.get (| "_46_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_28"; "_29"],
                Some (M.call (|
                  "storage_array_index_access_struct_S__dyn",
                  [
                    M.get (| "expr_slot" |);
                    M.get (| "expr_24" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_49_slot"],
                Some (M.get (| "_28" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_93_slot"],
                Some (M.get (| "_49_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_30"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_93_slot" |);
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_51_slot"],
                Some (M.get (| "_30" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_94_slot"],
                Some (M.get (| "_51_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                Some (M.call (|
                  "array_length_array_uint256_dyn_storage",
                  [
                    M.get (| "expr_94_slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component"],
                Some (M.get (| "expr_25" |))
              |) in
            let _ :=
              M.assign (|
                ["_52_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_96_slot"],
                Some (M.get (| "_52_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_31"; "_32"],
                Some (M.call (|
                  "storage_array_index_access_struct_S__dyn",
                  [
                    M.get (| "expr_96_slot" |);
                    M.get (| "expr_26" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_55_slot"],
                Some (M.get (| "_31" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_98_slot"],
                Some (M.get (| "_55_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_33"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_98_slot" |);
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_57_slot"],
                Some (M.get (| "_33" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_99_slot"],
                Some (M.get (| "_57_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_34"; "_35"],
                Some (M.call (|
                  "storage_array_index_access_uint256_dyn",
                  [
                    M.get (| "expr_99_slot" |);
                    M.get (| "expr_27" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_36"],
                Some (M.call (|
                  "read_from_storage_split_dynamic_uint256",
                  [
                    M.get (| "_34" |);
                    M.get (| "_35" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                Some (M.get (| "_36" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component_1"],
                Some (M.get (| "expr_28" |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_component" |)
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "expr_component_1" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a26469706673582212201bfcc5ef730a45c9a08edacd1637c31f9e62822d475fe25d8a9bf037399025b964736f6c634300081b0033".
  End C_106_deployed.
End C_106.
