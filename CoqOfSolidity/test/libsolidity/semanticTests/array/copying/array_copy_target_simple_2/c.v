(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module c_97.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            [

            ]
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                [

                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          M.call (|
            "allocate_unbounded",
            [

            ]
          |)
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "635f39375f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "635f39375f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "635f39375f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module c_97_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  M.call (|
                    "shift_right_224_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0xf8a8fd6d),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_test",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            [

            ]
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_224_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bytes32",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bytes32",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_bytes32",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bytes32_bytes32_bytes32_bytes32_bytes32",
          ["headStart"; "value0"; "value1"; "value2"; "value3"; "value4"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 160]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_bytes32",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_bytes32",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_bytes32",
                [
                  M.get (| "value2" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 64]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_bytes32",
                [
                  M.get (| "value3" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 96]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_bytes32",
                [
                  M.get (| "value4" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 128]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_test",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"; "ret_2"; "ret_3"; "ret_4"],
                M.call (|
                  "fun_test",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_bytes32_bytes32_bytes32_bytes32_bytes32",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |);
                    M.get (| "ret_2" |);
                    M.get (| "ret_3" |);
                    M.get (| "ret_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_bytes32",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "increment_wrapping_uint256",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_bytes9_storage",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x07]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint64",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint256_to_uint64",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint64",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bytes8",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "shl",
                      [
                        [Literal.number 192];
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 192];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint64_to_bytes8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes8",
                  [
                    M.call (|
                      "shift_left",
                      [
                        M.call (|
                          "cleanup_uint64",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_bytes8_to_bytes9",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes8",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x32",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x32]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_bytes9_storage",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_bytes",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                M.call (|
                  "array_length_array_bytes9_storage",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                M.call (|
                  "array_dataslot_array_bytes9_storage",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "div",
                      [
                        M.get (| "index" |);
                        [Literal.number 3]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "mul",
                  [
                    M.call (|
                      "mod",
                      [
                        M.get (| "index" |);
                        [Literal.number 3]
                      ]
                    |);
                    [Literal.number 9]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_dynamic",
          ["bits"; "value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    M.get (| "bits" |);
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_dynamic9",
          ["value"; "shiftBytes"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["shiftBits"],
                M.call (|
                  "mul",
                  [
                    M.get (| "shiftBytes" |);
                    [Literal.number 8]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["mask"],
                M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    [Literal.number 0xffffffffffffffffff]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bytes9",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "shl",
                      [
                        [Literal.number 184];
                        [Literal.number 0xffffffffffffffffff]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_bytes9_to_bytes9",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes9",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 184];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_bytes9",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "shift_right_unsigned",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_bytes9_to_bytes9",
          ["slot"; "offset"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                M.call (|
                  "convert_bytes9_to_bytes9",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_dynamic9",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.get (| "offset" |);
                      M.call (|
                        "prepare_store_bytes9",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint64",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint64",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_bytes8_to_bytes32",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes8",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_bytes32_storage",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x0a]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_bytes32_storage",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_bytes32_",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                M.call (|
                  "array_length_array_bytes32_storage",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                M.call (|
                  "array_dataslot_array_bytes32_storage",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_dynamic32",
          ["value"; "shiftBytes"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["shiftBits"],
                M.call (|
                  "mul",
                  [
                    M.get (| "shiftBytes" |);
                    [Literal.number 8]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["mask"],
                M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_bytes32_to_bytes32",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes32",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_0_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_bytes32",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "shift_right_0_unsigned",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_bytes32_to_bytes32",
          ["slot"; "offset"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                M.call (|
                  "convert_bytes32_to_bytes32",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_dynamic32",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.get (| "offset" |);
                      M.call (|
                        "prepare_store_bytes32",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_convert_length_to_size_array_bytes32_storage",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["size"],
                M.get (| "length" |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "div",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "length" |);
                        M.call (|
                          "sub",
                          [
                            [Literal.number 1];
                            [Literal.number 1]
                          ]
                        |)
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_set_to_zero_bytes32",
          ["slot"; "offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero"],
                M.call (|
                  "zero_value_for_split_bytes32",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_bytes32_to_bytes32",
                [
                  M.get (| "slot" |);
                  M.get (| "offset" |);
                  M.get (| "zero" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_storage_range_bytes32",
          ["start"; "end"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.for (|
                tt,
                M.call (|
                  "lt",
                  [
                    M.get (| "start" |);
                    M.get (| "end" |)
                  ]
                |),
                let _ :=
                  M.declare (|
                    ["start"],
                    M.call (|
                      "add",
                      [
                        M.get (| "start" |);
                        [Literal.number 1]
                      ]
                    |)
                  |) in
                tt,
                let _ :=
                  M.call (|
                    "storage_set_to_zero_bytes32",
                    [
                      M.get (| "start" |);
                      [Literal.number 0]
                    ]
                  |) in
                tt
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_unsigned_dynamic",
          ["bits"; "value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    M.get (| "bits" |);
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_storage_array_end_array_bytes",
          ["array"; "len"; "startIndex"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "startIndex" |);
                    M.get (| "len" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["oldSlotCount"],
                      M.call (|
                        "array_convert_length_to_size_array_bytes32_storage",
                        [
                          M.get (| "len" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["newSlotCount"],
                      M.call (|
                        "array_convert_length_to_size_array_bytes32_storage",
                        [
                          M.get (| "startIndex" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["arrayDataStart"],
                      M.call (|
                        "array_dataslot_array_bytes32_storage",
                        [
                          M.get (| "array" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteStart"],
                      M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "newSlotCount" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteEnd"],
                      M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "oldSlotCount" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.call (|
                      "clear_storage_range_bytes32",
                      [
                        M.get (| "deleteStart" |);
                        M.get (| "deleteEnd" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "resize_array_array_bytes32_storage",
          ["array"; "newLen"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "newLen" |);
                    [Literal.number 18446744073709551616]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["oldLen"],
                M.call (|
                  "array_length_array_bytes32_storage",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "cleanup_storage_array_end_array_bytes",
                [
                  M.get (| "array" |);
                  M.get (| "oldLen" |);
                  M.get (| "newLen" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_184",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 184];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_bytes9",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "shift_left_184",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_dynamict_bytes9",
          ["slot_value"; "offset"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_bytes9",
                  [
                    M.call (|
                      "shift_right_unsigned_dynamic",
                      [
                        M.call (|
                          "mul",
                          [
                            M.get (| "offset" |);
                            [Literal.number 8]
                          ]
                        |);
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_bytes9_to_bytes32",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes9",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_to_storage_from_array_bytes9__to_array_bytes",
          ["dst"; "src"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "eq",
                  [
                    M.get (| "dst" |);
                    M.get (| "src" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.leave (||) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["length"],
                M.call (|
                  "array_length_array_bytes9_storage",
                  [
                    M.get (| "src" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "resize_array_array_bytes32_storage",
                [
                  M.get (| "dst" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                M.call (|
                  "array_dataslot_array_bytes9_storage",
                  [
                    M.get (| "src" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["dstSlot"],
                M.call (|
                  "array_dataslot_array_bytes32_storage",
                  [
                    M.get (| "dst" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["fullSlots"],
                M.call (|
                  "div",
                  [
                    M.get (| "length" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["srcSlotValue"],
                M.call (|
                  "sload",
                  [
                    M.get (| "srcPtr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["srcItemIndexInSlot"],
                [Literal.number 0]
              |) in
            let _ :=
              M.assign (|
                ["i"],
                [Literal.number 0]
              |) in
            let _ :=
              M.for (|
                tt,
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "fullSlots" |)
                  ]
                |),
                let _ :=
                  M.declare (|
                    ["i"],
                    M.call (|
                      "add",
                      [
                        M.get (| "i" |);
                        [Literal.number 1]
                      ]
                    |)
                  |) in
                tt,
                let _ :=
                  M.assign (|
                    ["dstSlotValue"],
                    [Literal.number 0]
                  |) in
                let _ :=
                  M.assign (|
                    ["stackItem"],
                    M.call (|
                      "convert_bytes9_to_bytes32",
                      [
                        M.call (|
                          "extract_from_storage_value_dynamict_bytes9",
                          [
                            M.get (| "srcSlotValue" |);
                            M.call (|
                              "mul",
                              [
                                [Literal.number 9];
                                M.get (| "srcItemIndexInSlot" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["itemValue"],
                    M.call (|
                      "prepare_store_bytes32",
                      [
                        M.get (| "stackItem" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["dstSlotValue"],
                    M.get (| "itemValue" |)
                  |) in
                let _ :=
                  M.declare (|
                    ["srcItemIndexInSlot"],
                    M.call (|
                      "add",
                      [
                        M.get (| "srcItemIndexInSlot" |);
                        [Literal.number 1]
                      ]
                    |)
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "eq",
                      [
                        M.get (| "srcItemIndexInSlot" |);
                        [Literal.number 3]
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.declare (|
                          ["srcPtr"],
                          M.call (|
                            "add",
                            [
                              M.get (| "srcPtr" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["srcSlotValue"],
                          M.call (|
                            "sload",
                            [
                              M.get (| "srcPtr" |)
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["srcItemIndexInSlot"],
                          [Literal.number 0]
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.call (|
                    "sstore",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "dstSlot" |);
                          M.get (| "i" |)
                        ]
                      |);
                      M.get (| "dstSlotValue" |)
                    ]
                  |) in
                tt
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_array_bytes9__to_array_bytes",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "copy_array_to_storage_from_array_bytes9__to_array_bytes",
                [
                  M.get (| "slot" |);
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_bytes32",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_dynamict_bytes32",
          ["slot_value"; "offset"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_bytes32",
                  [
                    M.call (|
                      "shift_right_unsigned_dynamic",
                      [
                        M.call (|
                          "mul",
                          [
                            M.get (| "offset" |);
                            [Literal.number 8]
                          ]
                        |);
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_dynamic_bytes32",
          ["slot"; "offset"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_dynamict_bytes32",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_test",
          [],
          ["var_a";
      "var_b";
      "var_c";
      "var_d";
      "var_e"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bytes32"],
                M.call (|
                  "zero_value_for_split_bytes32",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_a"],
                M.get (| "zero_bytes32" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_bytes32_1"],
                M.call (|
                  "zero_value_for_split_bytes32",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_b"],
                M.get (| "zero_bytes32_1" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_bytes32_2"],
                M.call (|
                  "zero_value_for_split_bytes32",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_c"],
                M.get (| "zero_bytes32_2" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_bytes32_3"],
                M.call (|
                  "zero_value_for_split_bytes32",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_d"],
                M.get (| "zero_bytes32_3" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_t_bytes32"],
                M.call (|
                  "zero_value_for_split_bytes32",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_e"],
                M.get (| "zero_t_bytes32" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["var_i"],
                M.call (|
                  "convert_rational_by_to_uint256",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.for (|
                tt,
                [Literal.number 1],
                let _ :=
                  M.assign (|
                    ["_1"],
                    M.get (| "var_i" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_2"],
                    M.call (|
                      "increment_wrapping_uint256",
                      [
                        M.get (| "_1" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["var_i"],
                    M.get (| "_2" |)
                  |) in
                tt,
                let _ :=
                  M.assign (|
                    ["_3"],
                    M.get (| "var_i" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_1"],
                    M.get (| "_3" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_9_slot"],
                    [Literal.number 0x00]
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_26_slot"],
                    M.get (| "_9_slot" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_2"],
                    M.call (|
                      "array_length_array_bytes9_storage",
                      [
                        M.get (| "expr_26_slot" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_3"],
                    M.call (|
                      "lt",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_1" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_2" |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.get (| "expr_3" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.break (||) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["_4"],
                    M.get (| "var_i" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_4"],
                    M.get (| "_4" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_5"],
                    M.call (|
                      "convert_uint256_to_uint64",
                      [
                        M.get (| "expr_4" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_6"],
                    M.call (|
                      "convert_uint64_to_bytes8",
                      [
                        M.get (| "expr_5" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_5"],
                    M.call (|
                      "convert_bytes8_to_bytes9",
                      [
                        M.get (| "expr_6" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_slot"],
                    [Literal.number 0x00]
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_32_slot"],
                    M.get (| "_slot" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_6"],
                    M.get (| "var_i" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_7"],
                    M.get (| "_6" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_7"; "_8"],
                    M.call (|
                      "storage_array_index_access_bytes",
                      [
                        M.get (| "expr_32_slot" |);
                        M.get (| "expr_7" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "update_storage_value_bytes9_to_bytes9",
                    [
                      M.get (| "_7" |);
                      M.get (| "_8" |);
                      M.get (| "_5" |)
                    ]
                  |) in
                tt
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                M.call (|
                  "convert_rational_by_to_uint64",
                  [
                    M.get (| "expr_8" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                M.call (|
                  "convert_uint64_to_bytes8",
                  [
                    M.get (| "expr_9" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                M.call (|
                  "convert_bytes8_to_bytes32",
                  [
                    M.get (| "expr_10" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_17_slot"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["expr_48_slot"],
                M.get (| "_17_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                [Literal.number 0x09]
              |) in
            let _ :=
              M.assign (|
                ["_10"; "_11"],
                M.call (|
                  "storage_array_index_access_bytes32_",
                  [
                    M.get (| "expr_48_slot" |);
                    M.get (| "expr_11" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_bytes32_to_bytes32",
                [
                  M.get (| "_10" |);
                  M.get (| "_11" |);
                  M.get (| "_9" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                M.get (| "_9" |)
              |) in
            let _ :=
              M.assign (|
                ["_20_slot"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["expr_45_slot"],
                M.get (| "_20_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                [Literal.number 0x08]
              |) in
            let _ :=
              M.assign (|
                ["_12"; "_13"],
                M.call (|
                  "storage_array_index_access_bytes32_",
                  [
                    M.get (| "expr_45_slot" |);
                    M.get (| "expr_13" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_bytes32_to_bytes32",
                [
                  M.get (| "_12" |);
                  M.get (| "_13" |);
                  M.get (| "expr_12" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_23_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_62_slot"],
                M.get (| "_23_slot" |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_array_bytes9__to_array_bytes",
                [
                  [Literal.number 0x03];
                  M.get (| "expr_62_slot" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_25_slot"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["expr_66_slot"],
                M.get (| "_25_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_14"; "_15"],
                M.call (|
                  "storage_array_index_access_bytes32_",
                  [
                    M.get (| "expr_66_slot" |);
                    M.get (| "expr_14" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_16"],
                M.call (|
                  "read_from_storage_split_dynamic_bytes32",
                  [
                    M.get (| "_14" |);
                    M.get (| "_15" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                M.get (| "_16" |)
              |) in
            let _ :=
              M.declare (|
                ["var_a"],
                M.get (| "expr_15" |)
              |) in
            let _ :=
              M.assign (|
                ["_29_slot"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["expr_72_slot"],
                M.get (| "_29_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_17"; "_18"],
                M.call (|
                  "storage_array_index_access_bytes32_",
                  [
                    M.get (| "expr_72_slot" |);
                    M.get (| "expr_16" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_19"],
                M.call (|
                  "read_from_storage_split_dynamic_bytes32",
                  [
                    M.get (| "_17" |);
                    M.get (| "_18" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                M.get (| "_19" |)
              |) in
            let _ :=
              M.declare (|
                ["var_b"],
                M.get (| "expr_17" |)
              |) in
            let _ :=
              M.assign (|
                ["_33_slot"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["expr_78_slot"],
                M.get (| "_33_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["_20"; "_21"],
                M.call (|
                  "storage_array_index_access_bytes32_",
                  [
                    M.get (| "expr_78_slot" |);
                    M.get (| "expr_18" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_22"],
                M.call (|
                  "read_from_storage_split_dynamic_bytes32",
                  [
                    M.get (| "_20" |);
                    M.get (| "_21" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                M.get (| "_22" |)
              |) in
            let _ :=
              M.declare (|
                ["var_c"],
                M.get (| "expr_19" |)
              |) in
            let _ :=
              M.assign (|
                ["_37_slot"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["expr_slot"],
                M.get (| "_37_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                [Literal.number 0x04]
              |) in
            let _ :=
              M.assign (|
                ["_23"; "_24"],
                M.call (|
                  "storage_array_index_access_bytes32_",
                  [
                    M.get (| "expr_slot" |);
                    M.get (| "expr_20" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_25"],
                M.call (|
                  "read_from_storage_split_dynamic_bytes32",
                  [
                    M.get (| "_23" |);
                    M.get (| "_24" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                M.get (| "_25" |)
              |) in
            let _ :=
              M.declare (|
                ["var_d"],
                M.get (| "expr_21" |)
              |) in
            let _ :=
              M.assign (|
                ["_41_slot"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["expr_90_slot"],
                M.get (| "_41_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                [Literal.number 0x09]
              |) in
            let _ :=
              M.assign (|
                ["_26"; "_27"],
                M.call (|
                  "storage_array_index_access_bytes32_",
                  [
                    M.get (| "expr_90_slot" |);
                    M.get (| "expr_22" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_28"],
                M.call (|
                  "read_from_storage_split_dynamic_bytes32",
                  [
                    M.get (| "_26" |);
                    M.get (| "_27" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                M.get (| "_28" |)
              |) in
            let _ :=
              M.declare (|
                ["var_e"],
                M.get (| "expr_23" |)
              |) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a2646970667358221220bed8c98eaea52beb507469e262f554fa2f347ca16480d16a5c7a6f314ebe86b664736f6c634300081b0033".
  End c_97_deployed.
End c_97.
