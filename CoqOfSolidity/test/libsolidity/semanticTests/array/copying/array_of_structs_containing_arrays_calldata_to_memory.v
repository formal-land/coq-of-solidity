(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  (* Struct S *)

  Definition f (α : list Value.t) : M :=
    match α with
    | [c] =>
      let _ :=
        M.define (|
          [ "s" ],
          M.get_name (| "c" |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.get_name (| "s" |),
                "length"
              |),
              M.member_access (|
                M.get_name (| "c" |),
                "length"
              |)
            |)
          ]
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 89
src: 218:216:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          M.member_access (|
            M.get_name (| "s" |),
            "length"
          |)
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "i" |)
        |)
body: let _ :=
          M.call (|
            M.get_name (| "assert" |),
            [
              M.bin_op (|
                "==",
                M.member_access (|
                  M.member_access (|
                    M.index_access (|
                      M.get_name (| "s" |),
                      Some (M.get_name (| "i" |))
                    |),
                    "a"
                  |),
                  "length"
                |),
                M.member_access (|
                  M.member_access (|
                    M.index_access (|
                      M.get_name (| "c" |),
                      Some (M.get_name (| "i" |))
                    |),
                    "a"
                  |),
                  "length"
                |)
              |)
            ]
          |) in
        let _ :=
          (* Beginning of a node! *)
id: 87
src: 320:104:0
nodeType: ForStatement
initializationExpression: M.define (|
            [ "j" ],
            Value.Integer 0
          |)
condition: M.bin_op (|
            "<",
            M.get_name (| "j" |),
            M.member_access (|
              M.member_access (|
                M.index_access (|
                  M.get_name (| "s" |),
                  Some (M.get_name (| "i" |))
                |),
                "a"
              |),
              "length"
            |)
          |)
loopExpression: M.un_op (|
            false,
            "++",
            M.get_name (| "j" |)
          |)
body: let _ :=
            M.call (|
              M.get_name (| "assert" |),
              [
                M.bin_op (|
                  "==",
                  M.index_access (|
                    M.member_access (|
                      M.index_access (|
                        M.get_name (| "s" |),
                        Some (M.get_name (| "i" |))
                      |),
                      "a"
                    |),
                    Some (M.get_name (| "j" |))
                  |),
                  M.index_access (|
                    M.member_access (|
                      M.index_access (|
                        M.get_name (| "c" |),
                        Some (M.get_name (| "i" |))
                      |),
                      "a"
                    |),
                    Some (M.get_name (| "j" |))
                  |)
                |)
              ]
            |) in
          Value.Tuple []
isSimpleCounterLoop: 1
 in
        Value.Tuple []
isSimpleCounterLoop: 1
 in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.member_access (|
              M.member_access (|
                M.index_access (|
                  M.get_name (| "s" |),
                  Some (Value.Integer 1)
                |),
                "a"
              |),
              "length"
            |),
            M.index_access (|
              M.member_access (|
                M.index_access (|
                  M.get_name (| "s" |),
                  Some (Value.Integer 1)
                |),
                "a"
              |),
              Some (Value.Integer 0)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
