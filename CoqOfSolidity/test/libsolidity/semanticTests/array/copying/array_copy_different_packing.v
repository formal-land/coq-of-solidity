(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module c.
  Definition data1 : Value.t :=
    undefined.

  Definition data2 : Value.t :=
    undefined.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "data1" |),
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 21
src: 216:8:0
nodeType: ArrayTypeName
baseType: Ty.path "bytes8"
length: 
typeDescriptions: typeString bytes8[]typeIdentifier st_array$_t_bytes8_$dyn_storage_ptr

,
            [
              Value.Integer 9
            ]
          |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 50
src: 237:71:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          M.member_access (|
            M.get_name (| "data1" |),
            "length"
          |)
        |)
loopExpression: M.un_op (|
          true,
          "++",
          M.get_name (| "i" |)
        |)
body: M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "data1" |),
            Some (M.get_name (| "i" |))
          |),
          M.call (|
            Ty.path "bytes8",
            [
              M.call (|
                Ty.path "uint64",
                [
                  M.get_name (| "i" |)
                ]
              |)
            ]
          |)
        |)
isSimpleCounterLoop: 1
 in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "data2" |),
          M.get_name (| "data1" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "a" |),
          M.index_access (|
            M.get_name (| "data2" |),
            Some (Value.Integer 1)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "b" |),
          M.index_access (|
            M.get_name (| "data2" |),
            Some (Value.Integer 2)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "c" |),
          M.index_access (|
            M.get_name (| "data2" |),
            Some (Value.Integer 3)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "d" |),
          M.index_access (|
            M.get_name (| "data2" |),
            Some (Value.Integer 4)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "e" |),
          M.index_access (|
            M.get_name (| "data2" |),
            Some (Value.Integer 5)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End c.
