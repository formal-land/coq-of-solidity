(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  Definition test1 (α : list Value.t) : M :=
    match α with
    | [_a] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "_a" |),
            Some (Value.Integer 1)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test2 (α : list Value.t) : M :=
    match α with
    | [_a] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "_a" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test3 (α : list Value.t) : M :=
    match α with
    | [_a] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "_a" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test4 (α : list Value.t) : M :=
    match α with
    | [_a] =>
      let _ :=
        M.define (|
          [ "tmp" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 78
src: 484:12:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 77
src: 484:10:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 76
src: 484:8:0
nodeType: ArrayTypeName
baseType: Ty.path "uint16"
length: 
typeDescriptions: typeString uint16[]typeIdentifier st_array$_t_uint16_$dyn_storage_ptr

length: 
typeDescriptions: typeString uint16[][]typeIdentifier st_array$_t_array$_t_uint16_$dyn_storage_$dyn_storage_ptr

length: 
typeDescriptions: typeString uint16[][][]typeIdentifier st_array$_t_array$_t_array$_t_uint16_$dyn_storage_$dyn_storage_$dyn_storage_ptr

,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "tmp" |),
            Some (Value.Integer 1)
          |),
          M.get_name (| "_a" |)
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "tmp" |),
            Some (Value.Integer 1)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test5 (α : list Value.t) : M :=
    match α with
    | [_a] =>
      let _ :=
        M.define (|
          [ "tmp" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 119
src: 673:13:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 118
src: 673:11:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 116
src: 673:8:0
nodeType: ArrayTypeName
baseType: Ty.path "uint32"
length: 
typeDescriptions: typeString uint32[]typeIdentifier st_array$_t_uint32_$dyn_storage_ptr

length: Value.Integer 2
typeDescriptions: typeString uint32[][2]typeIdentifier st_array$_t_array$_t_uint32_$dyn_storage_$2_storage_ptr

length: 
typeDescriptions: typeString uint32[][2][]typeIdentifier st_array$_t_array$_t_array$_t_uint32_$dyn_storage_$2_storage_$dyn_storage_ptr

,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "tmp" |),
            Some (Value.Integer 0)
          |),
          M.get_name (| "_a" |)
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "tmp" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test6 (α : list Value.t) : M :=
    match α with
    | [_a] =>
      let _ :=
        M.define (|
          [ "tmp" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 160
src: 863:13:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 159
src: 863:11:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 158
src: 863:9:0
nodeType: ArrayTypeName
baseType: Ty.path "uint32"
length: Value.Integer 2
typeDescriptions: typeString uint32[2]typeIdentifier st_array$_t_uint32_$2_storage_ptr

length: 
typeDescriptions: typeString uint32[2][]typeIdentifier st_array$_t_array$_t_uint32_$2_storage_$dyn_storage_ptr

length: 
typeDescriptions: typeString uint32[2][][]typeIdentifier st_array$_t_array$_t_array$_t_uint32_$2_storage_$dyn_storage_$dyn_storage_ptr

,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "tmp" |),
            Some (Value.Integer 0)
          |),
          M.get_name (| "_a" |)
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "tmp" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
