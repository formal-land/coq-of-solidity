(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  Definition a1 : Value.t :=
    M.call (|
      NewExpression (* Beginning of a node! *)
id: 9
src: 59:11:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 8
src: 59:9:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 7
src: 59:7:0
nodeType: ArrayTypeName
baseType: Ty.path "uint8"
length: 
typeDescriptions: typeString uint8[]typeIdentifier st_array$_t_uint8_$dyn_storage_ptr

length: 
typeDescriptions: typeString uint8[][]typeIdentifier st_array$_t_array$_t_uint8_$dyn_storage_$dyn_storage_ptr

length: 
typeDescriptions: typeString uint8[][][]typeIdentifier st_array$_t_array$_t_array$_t_uint8_$dyn_storage_$dyn_storage_$dyn_storage_ptr

,
      [
        Value.Integer 2
      ]
    |).

  Definition a2 : Value.t :=
    undefined.

  Definition a3 : Value.t :=
    M.call (|
      NewExpression (* Beginning of a node! *)
id: 29
src: 122:12:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 28
src: 122:10:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 26
src: 122:7:0
nodeType: ArrayTypeName
baseType: Ty.path "uint8"
length: 
typeDescriptions: typeString uint8[]typeIdentifier st_array$_t_uint8_$dyn_storage_ptr

length: Value.Integer 2
typeDescriptions: typeString uint8[][2]typeIdentifier st_array$_t_array$_t_uint8_$dyn_storage_$2_storage_ptr

length: 
typeDescriptions: typeString uint8[][2][]typeIdentifier st_array$_t_array$_t_array$_t_uint8_$dyn_storage_$2_storage_$dyn_storage_ptr

,
      [
        Value.Integer 1
      ]
    |).

  Definition a4 : Value.t :=
    M.call (|
      NewExpression (* Beginning of a node! *)
id: 43
src: 165:12:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 42
src: 165:10:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 41
src: 165:8:0
nodeType: ArrayTypeName
baseType: Ty.path "uint8"
length: Value.Integer 2
typeDescriptions: typeString uint8[2]typeIdentifier st_array$_t_uint8_$2_storage_ptr

length: 
typeDescriptions: typeString uint8[2][]typeIdentifier st_array$_t_array$_t_uint8_$2_storage_$dyn_storage_ptr

length: 
typeDescriptions: typeString uint8[2][][]typeIdentifier st_array$_t_array$_t_array$_t_uint8_$2_storage_$dyn_storage_$dyn_storage_ptr

,
      [
        Value.Integer 2
      ]
    |).

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "a1" |),
            Some (Value.Integer 1)
          |),
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 55
src: 223:9:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 54
src: 223:7:0
nodeType: ArrayTypeName
baseType: Ty.path "uint8"
length: 
typeDescriptions: typeString uint8[]typeIdentifier st_array$_t_uint8_$dyn_storage_ptr

length: 
typeDescriptions: typeString uint8[][]typeIdentifier st_array$_t_array$_t_uint8_$dyn_storage_$dyn_storage_ptr

,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "a1" |),
              Some (Value.Integer 1)
            |),
            Some (Value.Integer 0)
          |),
          Value.Array [
            Value.Integer 3,
            Value.Integer 4
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "a1" |),
              Some (Value.Integer 1)
            |),
            Some (Value.Integer 1)
          |),
          Value.Array [
            Value.Integer 5,
            Value.Integer 6
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "a2" |),
            Some (Value.Integer 0)
          |),
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 86
src: 312:9:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 85
src: 312:7:0
nodeType: ArrayTypeName
baseType: Ty.path "uint8"
length: 
typeDescriptions: typeString uint8[]typeIdentifier st_array$_t_uint8_$dyn_storage_ptr

length: 
typeDescriptions: typeString uint8[][]typeIdentifier st_array$_t_array$_t_uint8_$dyn_storage_$dyn_storage_ptr

,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "a2" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          Value.Array [
            Value.Integer 6,
            Value.Integer 7
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "a2" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 1)
          |),
          Value.Array [
            Value.Integer 8,
            Value.Integer 9
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "a2" |),
            Some (Value.Integer 1)
          |),
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 117
src: 400:9:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 116
src: 400:7:0
nodeType: ArrayTypeName
baseType: Ty.path "uint8"
length: 
typeDescriptions: typeString uint8[]typeIdentifier st_array$_t_uint8_$dyn_storage_ptr

length: 
typeDescriptions: typeString uint8[][]typeIdentifier st_array$_t_array$_t_uint8_$dyn_storage_$dyn_storage_ptr

,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "a2" |),
              Some (Value.Integer 1)
            |),
            Some (Value.Integer 0)
          |),
          Value.Array [
            Value.Integer 10,
            Value.Integer 11
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "a3" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          Value.Array [
            Value.Integer 3,
            Value.Integer 4
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "a3" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 1)
          |),
          Value.Array [
            Value.Integer 5,
            Value.Integer 6
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "a4" |),
            Some (Value.Integer 0)
          |),
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 159
src: 519:10:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 158
src: 519:8:0
nodeType: ArrayTypeName
baseType: Ty.path "uint8"
length: Value.Integer 2
typeDescriptions: typeString uint8[2]typeIdentifier st_array$_t_uint8_$2_storage_ptr

length: 
typeDescriptions: typeString uint8[2][]typeIdentifier st_array$_t_array$_t_uint8_$2_storage_$dyn_storage_ptr

,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "a4" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          Value.Array [
            Value.Integer 17,
            Value.Integer 23
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "a4" |),
            Some (Value.Integer 1)
          |),
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 181
src: 583:10:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 180
src: 583:8:0
nodeType: ArrayTypeName
baseType: Ty.path "uint8"
length: Value.Integer 2
typeDescriptions: typeString uint8[2]typeIdentifier st_array$_t_uint8_$2_storage_ptr

length: 
typeDescriptions: typeString uint8[2][]typeIdentifier st_array$_t_array$_t_uint8_$2_storage_$dyn_storage_ptr

,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "a4" |),
              Some (Value.Integer 1)
            |),
            Some (Value.Integer 0)
          |),
          Value.Array [
            Value.Integer 19,
            Value.Integer 31
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test1 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "a1" |),
            Some (Value.Integer 1)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test2 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "a2" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test3 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "a3" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test4 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "a4" |),
            Some (Value.Integer 1)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test5 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "tmp" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 266
src: 1076:11:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 265
src: 1076:9:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 264
src: 1076:7:0
nodeType: ArrayTypeName
baseType: Ty.path "uint8"
length: 
typeDescriptions: typeString uint8[]typeIdentifier st_array$_t_uint8_$dyn_storage_ptr

length: 
typeDescriptions: typeString uint8[][]typeIdentifier st_array$_t_array$_t_uint8_$dyn_storage_$dyn_storage_ptr

length: 
typeDescriptions: typeString uint8[][][]typeIdentifier st_array$_t_array$_t_array$_t_uint8_$dyn_storage_$dyn_storage_$dyn_storage_ptr

,
            [
              Value.Integer 3
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "tmp" |),
            Some (Value.Integer 1)
          |),
          M.index_access (|
            M.get_name (| "a1" |),
            Some (Value.Integer 1)
          |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "tmp" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test6 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "tmp" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 303
src: 1241:12:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 302
src: 1241:10:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 300
src: 1241:7:0
nodeType: ArrayTypeName
baseType: Ty.path "uint8"
length: 
typeDescriptions: typeString uint8[]typeIdentifier st_array$_t_uint8_$dyn_storage_ptr

length: Value.Integer 2
typeDescriptions: typeString uint8[][2]typeIdentifier st_array$_t_array$_t_uint8_$dyn_storage_$2_storage_ptr

length: 
typeDescriptions: typeString uint8[][2][]typeIdentifier st_array$_t_array$_t_array$_t_uint8_$dyn_storage_$2_storage_$dyn_storage_ptr

,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "tmp" |),
            Some (Value.Integer 0)
          |),
          M.index_access (|
            M.get_name (| "a3" |),
            Some (Value.Integer 0)
          |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "tmp" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test7 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "tmp" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 340
src: 1407:12:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 339
src: 1407:10:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 338
src: 1407:8:0
nodeType: ArrayTypeName
baseType: Ty.path "uint8"
length: Value.Integer 2
typeDescriptions: typeString uint8[2]typeIdentifier st_array$_t_uint8_$2_storage_ptr

length: 
typeDescriptions: typeString uint8[2][]typeIdentifier st_array$_t_array$_t_uint8_$2_storage_$dyn_storage_ptr

length: 
typeDescriptions: typeString uint8[2][][]typeIdentifier st_array$_t_array$_t_array$_t_uint8_$2_storage_$dyn_storage_$dyn_storage_ptr

,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "tmp" |),
            Some (Value.Integer 0)
          |),
          M.index_access (|
            M.get_name (| "a4" |),
            Some (Value.Integer 0)
          |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "tmp" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
