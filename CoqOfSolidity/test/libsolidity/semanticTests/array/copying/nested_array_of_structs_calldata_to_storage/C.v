(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_91.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            []
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                []
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          Some (M.call (|
            "allocate_unbounded",
            []
          |))
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f39315f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f39315f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f39315f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_91_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      []
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  Some (M.call (|
                    "shift_right_224_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x21edf292),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_test1",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x30d6890d),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_test3",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x45cc4f93),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_test2",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            []
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_224_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_array_struct_S_calldata_ptr_dyn_calldata_ptr_dyn_calldata_ptr",
          ["offset"; "end"],
          ["arrayPos";
      "length"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "offset" |);
                            [Literal.number 0x1f]
                          ]
                        |);
                        M.get (| "end" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["arrayPos"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "arrayPos" |);
                        M.call (|
                          "mul",
                          [
                            M.get (| "length" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      ]
                    |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_array_struct_S_calldata_dyn_calldata_dyn_calldata",
          ["headStart"; "dataEnd"],
          ["value0";
      "value1"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value0"; "value1"],
                M.call (|
                  "abi_decode_array_array_struct_S_calldata_ptr_dyn_calldata_ptr_dyn_calldata_ptr",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_array_struct_S_dyn_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_array_array_struct_S_dyn_dyn",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_array_struct_S_dyn_dyn",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_struct_S_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_array_struct_S_dyn",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_struct_S_dyn",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint8_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_array_uint8_dyn",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint8_dyn",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint8",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint8",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint8",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encodeUpdatedPos_uint8",
          ["value0"; "pos"],
          ["updatedPos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "abi_encode_uint8",
                [
                  M.get (| "value0" |);
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updatedPos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_nextElement_array_uint8_dyn",
          ["ptr"],
          ["next"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["next"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_uint8_dyn",
          ["value"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_uint8_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_uint8_dyn",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["baseRef"],
                Some (M.call (|
                  "array_dataslot_array_uint8_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.get (| "baseRef" |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["elementValue0"],
                      Some (M.call (|
                        "mload",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["pos"],
                      M.call (|
                        "abi_encodeUpdatedPos_uint8",
                        [
                          M.get (| "elementValue0" |);
                          M.get (| "pos" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["srcPtr"],
                      M.call (|
                        "array_nextElement_array_uint8_dyn",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint8",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x02]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_array_uint8",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint8",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_nextElement_array_uint8",
          ["ptr"],
          ["next"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["next"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_uint8",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_uint8",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_uint8",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["baseRef"],
                Some (M.call (|
                  "array_dataslot_array_uint8",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.get (| "baseRef" |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["elementValue0"],
                      Some (M.call (|
                        "mload",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["pos"],
                      M.call (|
                        "abi_encodeUpdatedPos_uint8",
                        [
                          M.get (| "elementValue0" |);
                          M.get (| "pos" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["srcPtr"],
                      M.call (|
                        "array_nextElement_array_uint8",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_struct_S",
          ["value"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["tail"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x60]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memberValue0"],
                Some (M.call (|
                  "mload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 0x00]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "pos" |);
                      [Literal.number 0x00]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "pos" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_array_uint8_dyn",
                  [
                    M.get (| "memberValue0" |);
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memberValue0_1"],
                Some (M.call (|
                  "mload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "abi_encode_array_uint8",
                [
                  M.get (| "memberValue0_1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "pos" |);
                      [Literal.number 0x20]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "tail" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encodeUpdatedPos_struct_S",
          ["value0"; "pos"],
          ["updatedPos"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["updatedPos"],
                M.call (|
                  "abi_encode_struct_S",
                  [
                    M.get (| "value0" |);
                    M.get (| "pos" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_nextElement_array_struct_S_dyn",
          ["ptr"],
          ["next"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["next"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_struct_S_dyn",
          ["value"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_struct_S_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_struct_S_dyn",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["headStart"],
                Some (M.get (| "pos" |))
              |) in
            let _ :=
              M.assign (|
                ["tail"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "length" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["baseRef"],
                Some (M.call (|
                  "array_dataslot_array_struct_S_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.get (| "baseRef" |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.get (| "pos" |);
                        M.call (|
                          "sub",
                          [
                            M.get (| "tail" |);
                            M.get (| "headStart" |)
                          ]
                        |)
                      ]
                    |) in
                  let _ :=
                    M.assign (|
                      ["elementValue0"],
                      Some (M.call (|
                        "mload",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["tail"],
                      M.call (|
                        "abi_encodeUpdatedPos_struct_S",
                        [
                          M.get (| "elementValue0" |);
                          M.get (| "tail" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["srcPtr"],
                      M.call (|
                        "array_nextElement_array_struct_S_dyn",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["pos"],
                      M.call (|
                        "add",
                        [
                          M.get (| "pos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.get (| "tail" |)
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encodeUpdatedPos_array_struct_S_dyn",
          ["value0"; "pos"],
          ["updatedPos"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["updatedPos"],
                M.call (|
                  "abi_encode_array_struct_S_dyn",
                  [
                    M.get (| "value0" |);
                    M.get (| "pos" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_nextElement_array_array_struct_S_dyn_dyn",
          ["ptr"],
          ["next"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["next"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_array_struct_S_memory_ptr_dyn_memory_ptr_dyn_memory_ptr",
          ["value"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_array_struct_S_dyn_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_array_struct_S_dyn_dyn",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["headStart"],
                Some (M.get (| "pos" |))
              |) in
            let _ :=
              M.assign (|
                ["tail"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "length" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["baseRef"],
                Some (M.call (|
                  "array_dataslot_array_array_struct_S_dyn_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.get (| "baseRef" |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.get (| "pos" |);
                        M.call (|
                          "sub",
                          [
                            M.get (| "tail" |);
                            M.get (| "headStart" |)
                          ]
                        |)
                      ]
                    |) in
                  let _ :=
                    M.assign (|
                      ["elementValue0"],
                      Some (M.call (|
                        "mload",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["tail"],
                      M.call (|
                        "abi_encodeUpdatedPos_array_struct_S_dyn",
                        [
                          M.get (| "elementValue0" |);
                          M.get (| "tail" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["srcPtr"],
                      M.call (|
                        "array_nextElement_array_array_struct_S_dyn_dyn",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["pos"],
                      M.call (|
                        "add",
                        [
                          M.get (| "pos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.get (| "tail" |)
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_array_struct_S_dyn_dyn",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_array_array_struct_S_memory_ptr_dyn_memory_ptr_dyn_memory_ptr",
                  [
                    M.get (| "value0" |);
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_test1",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"],
                Some (M.call (|
                  "abi_decode_array_array_struct_S_calldata_dyn_calldata_dyn_calldata",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_test1",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_array_array_struct_S_dyn_dyn",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_array_struct_S_calldata_ptr_calldata_ptr_dyn_calldata_ptr",
          ["offset"; "end"],
          ["arrayPos";
      "length"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "offset" |);
                            [Literal.number 0x1f]
                          ]
                        |);
                        M.get (| "end" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["arrayPos"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "arrayPos" |);
                        M.call (|
                          "mul",
                          [
                            M.get (| "length" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      ]
                    |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_array_struct_S_calldata_calldata_dyn_calldata",
          ["headStart"; "dataEnd"],
          ["value0";
      "value1"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value0"; "value1"],
                M.call (|
                  "abi_decode_array_array_struct_S_calldata_ptr_calldata_ptr_dyn_calldata_ptr",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_array_struct_S_memory_ptr_memory_ptr_dyn_memory_ptr",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_array_array_struct_S_dyn",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_array_struct_S_dyn",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_struct_S",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x01]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_array_struct_S",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_struct_S",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_nextElement_array_struct_S",
          ["ptr"],
          ["next"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["next"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_struct_S",
          ["value"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_struct_S",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_struct_S",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["headStart"],
                Some (M.get (| "pos" |))
              |) in
            let _ :=
              M.assign (|
                ["tail"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "length" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["baseRef"],
                Some (M.call (|
                  "array_dataslot_array_struct_S",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.get (| "baseRef" |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.get (| "pos" |);
                        M.call (|
                          "sub",
                          [
                            M.get (| "tail" |);
                            M.get (| "headStart" |)
                          ]
                        |)
                      ]
                    |) in
                  let _ :=
                    M.assign (|
                      ["elementValue0"],
                      Some (M.call (|
                        "mload",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["tail"],
                      M.call (|
                        "abi_encodeUpdatedPos_struct_S",
                        [
                          M.get (| "elementValue0" |);
                          M.get (| "tail" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["srcPtr"],
                      M.call (|
                        "array_nextElement_array_struct_S",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["pos"],
                      M.call (|
                        "add",
                        [
                          M.get (| "pos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.get (| "tail" |)
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encodeUpdatedPos_array_struct_S",
          ["value0"; "pos"],
          ["updatedPos"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["updatedPos"],
                M.call (|
                  "abi_encode_array_struct_S",
                  [
                    M.get (| "value0" |);
                    M.get (| "pos" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_nextElement_array_array_struct_S_dyn",
          ["ptr"],
          ["next"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["next"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_array_struct_S_dyn_to_array_array_struct_S_dyn",
          ["value"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_array_struct_S_memory_ptr_memory_ptr_dyn_memory_ptr",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_array_struct_S_dyn",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["headStart"],
                Some (M.get (| "pos" |))
              |) in
            let _ :=
              M.assign (|
                ["tail"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "length" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["baseRef"],
                Some (M.call (|
                  "array_dataslot_array_array_struct_S_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.get (| "baseRef" |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.get (| "pos" |);
                        M.call (|
                          "sub",
                          [
                            M.get (| "tail" |);
                            M.get (| "headStart" |)
                          ]
                        |)
                      ]
                    |) in
                  let _ :=
                    M.assign (|
                      ["elementValue0"],
                      Some (M.call (|
                        "mload",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["tail"],
                      M.call (|
                        "abi_encodeUpdatedPos_array_struct_S",
                        [
                          M.get (| "elementValue0" |);
                          M.get (| "tail" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["srcPtr"],
                      M.call (|
                        "array_nextElement_array_array_struct_S_dyn",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["pos"],
                      M.call (|
                        "add",
                        [
                          M.get (| "pos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.get (| "tail" |)
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_array_struct_S_memory_ptr_memory_ptr_dyn_memory_ptr",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_array_array_struct_S_dyn_to_array_array_struct_S_dyn",
                  [
                    M.get (| "value0" |);
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_test3",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"],
                Some (M.call (|
                  "abi_decode_array_array_struct_S_calldata_calldata_dyn_calldata",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_test3",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_array_array_struct_S_memory_ptr_memory_ptr_dyn_memory_ptr",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_array_struct_S_calldata_dyn_calldata_calldata",
          ["offset"; "end"],
          ["arrayPos"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["arrayPos"],
                M.get (| "offset" |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "arrayPos" |);
                        M.call (|
                          "mul",
                          [
                            [Literal.number 0x01];
                            [Literal.number 0x20]
                          ]
                        |)
                      ]
                    |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_array_struct_S_calldata_ptr_dyn_calldata_ptr_calldata_ptr",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_array_array_struct_S_calldata_dyn_calldata_calldata",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_array_struct_S_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x01]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_array_array_struct_S_dyn_fromStack",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_array_struct_S_memory_ptr_dyn_memory_ptr_memory_ptr",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_nextElement_array_array_struct_S_memory_ptr_dyn_memory_ptr_memory_ptr",
          ["ptr"],
          ["next"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["next"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_array_struct_S_dyn",
          ["value"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_array_struct_S_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_array_struct_S_dyn_fromStack",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["headStart"],
                Some (M.get (| "pos" |))
              |) in
            let _ :=
              M.assign (|
                ["tail"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "length" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["baseRef"],
                Some (M.call (|
                  "array_dataslot_array_array_struct_S_memory_ptr_dyn_memory_ptr_memory_ptr",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.get (| "baseRef" |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.get (| "pos" |);
                        M.call (|
                          "sub",
                          [
                            M.get (| "tail" |);
                            M.get (| "headStart" |)
                          ]
                        |)
                      ]
                    |) in
                  let _ :=
                    M.assign (|
                      ["elementValue0"],
                      Some (M.call (|
                        "mload",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["tail"],
                      M.call (|
                        "abi_encodeUpdatedPos_array_struct_S_dyn",
                        [
                          M.get (| "elementValue0" |);
                          M.get (| "tail" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["srcPtr"],
                      M.call (|
                        "array_nextElement_array_array_struct_S_memory_ptr_dyn_memory_ptr_memory_ptr",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["pos"],
                      M.call (|
                        "add",
                        [
                          M.get (| "pos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.get (| "tail" |)
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_array_struct_S_memory_ptr_dyn_memory_ptr_memory_ptr",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_array_array_struct_S_dyn",
                  [
                    M.get (| "value0" |);
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_test2",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"],
                Some (M.call (|
                  "abi_decode_array_array_struct_S_calldata_ptr_dyn_calldata_ptr_calldata_ptr",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_test2",
                  [
                    M.get (| "param" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_array_array_struct_S_memory_ptr_dyn_memory_ptr_memory_ptr",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_array_array_struct_S_dyn_dyn",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 96]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x00",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x00]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_array_struct_S_calldata_dyn_calldata_dyn_calldata",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_356d538aaf70fba12156cc466564b792649f8f3befb07b071c91142253e175ad",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_1e55d03107e9c4f1b5e21c76a16fba166a461117ab153bcce65e6a4ea8e5fc8a",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_977805620ff29572292dee35f70b0f3f3f73d3fdd0e9f4d7a901c2e43ab18a2e",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "access_calldata_tail_array_struct_S_calldata_dyn_calldata",
          ["base_ref"; "ptr_to_tail"],
          ["addr";
      "length"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["rel_offset_of_tail"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.get (| "ptr_to_tail" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.get (| "rel_offset_of_tail" |);
                        M.call (|
                          "sub",
                          [
                            M.call (|
                              "sub",
                              [
                                M.call (|
                                  "calldatasize",
                                  []
                                |);
                                M.get (| "base_ref" |)
                              ]
                            |);
                            M.call (|
                              "sub",
                              [
                                [Literal.number 0x20];
                                [Literal.number 1]
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_356d538aaf70fba12156cc466564b792649f8f3befb07b071c91142253e175ad",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "base_ref" |);
                    M.get (| "rel_offset_of_tail" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "addr" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_1e55d03107e9c4f1b5e21c76a16fba166a461117ab153bcce65e6a4ea8e5fc8a",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "addr" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "sgt",
                  [
                    M.get (| "addr" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "calldatasize",
                          []
                        |);
                        M.call (|
                          "mul",
                          [
                            M.get (| "length" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_977805620ff29572292dee35f70b0f3f3f73d3fdd0e9f4d7a901c2e43ab18a2e",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_array_struct_S_storage_dyn__dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x11",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x11]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_mul_uint256",
          ["x"; "y"],
          ["product"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["x"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "x" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["y"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["product_raw"],
                Some (M.call (|
                  "mul",
                  [
                    M.get (| "x" |);
                    M.get (| "y" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["product"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "product_raw" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "or",
                      [
                        M.call (|
                          "iszero",
                          [
                            M.get (| "x" |)
                          ]
                        |);
                        M.call (|
                          "eq",
                          [
                            M.get (| "y" |);
                            M.call (|
                              "div",
                              [
                                M.get (| "product" |);
                                M.get (| "x" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_convert_length_to_size_array_array_struct_S_storage_dyn__dyn",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["size"],
                M.get (| "length" |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "div",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "length" |);
                        M.call (|
                          "sub",
                          [
                            [Literal.number 1];
                            [Literal.number 1]
                          ]
                        |)
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_array_struct_S_storage_dyn__dyn",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.get (| "ptr" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_struct_S_storage_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_convert_length_to_size_array_struct_S_storage_dyn",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["size"],
                M.get (| "length" |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "checked_mul_uint256",
                  [
                    [Literal.number 2];
                    M.get (| "length" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_struct_S_storage_dyn",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.get (| "ptr" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint8_dyn_storage",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_convert_length_to_size_array_uint8_dyn_storage",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["size"],
                M.get (| "length" |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "div",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "length" |);
                        M.call (|
                          "sub",
                          [
                            [Literal.number 32];
                            [Literal.number 1]
                          ]
                        |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint8_dyn_storage",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.get (| "ptr" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_dynamic",
          ["bits"; "value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    M.get (| "bits" |);
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_dynamic32",
          ["value"; "shiftBytes"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["shiftBits"],
                Some (M.call (|
                  "mul",
                  [
                    M.get (| "shiftBytes" |);
                    [Literal.number 8]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["mask"],
                Some (M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint256_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_uint256",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_uint256_to_uint256",
          ["slot"; "offset"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                Some (M.call (|
                  "convert_uint256_to_uint256",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_dynamic32",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.get (| "offset" |);
                      M.call (|
                        "prepare_store_uint256",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_set_to_zero_uint256",
          ["slot"; "offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_uint256_to_uint256",
                [
                  M.get (| "slot" |);
                  M.get (| "offset" |);
                  M.get (| "zero" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_storage_range_uint8",
          ["start"; "end"],
          [],
          ltac:(M.monadic (
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "start" |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["start"],
                      M.call (|
                        "add",
                        [
                          M.get (| "start" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "storage_set_to_zero_uint256",
                      [
                        M.get (| "start" |);
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_unsigned_dynamic",
          ["bits"; "value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    M.get (| "bits" |);
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "partial_clear_storage_slot",
          ["slot"; "offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                Some (M.call (|
                  "shift_right_unsigned_dynamic",
                  [
                    M.call (|
                      "mul",
                      [
                        [Literal.number 8];
                        M.call (|
                          "sub",
                          [
                            [Literal.number 32];
                            M.get (| "offset" |)
                          ]
                        |)
                      ]
                    |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "and",
                    [
                      M.get (| "mask" |);
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_storage_array_end_array_uint8_dyn",
          ["array"; "len"; "startIndex"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "startIndex" |);
                    M.get (| "len" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["oldSlotCount"],
                      Some (M.call (|
                        "array_convert_length_to_size_array_uint8_dyn_storage",
                        [
                          M.get (| "len" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["newSlotCount"],
                      Some (M.call (|
                        "array_convert_length_to_size_array_uint8_dyn_storage",
                        [
                          M.get (| "startIndex" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["arrayDataStart"],
                      Some (M.call (|
                        "array_dataslot_array_uint8_dyn_storage",
                        [
                          M.get (| "array" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteStart"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "newSlotCount" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteEnd"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "oldSlotCount" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["offset"],
                      Some (M.call (|
                        "mul",
                        [
                          M.call (|
                            "mod",
                            [
                              M.get (| "startIndex" |);
                              [Literal.number 32]
                            ]
                          |);
                          [Literal.number 1]
                        ]
                      |))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "gt",
                        [
                          M.get (| "offset" |);
                          [Literal.number 0]
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "partial_clear_storage_slot",
                            [
                              M.call (|
                                "sub",
                                [
                                  M.get (| "deleteStart" |);
                                  [Literal.number 1]
                                ]
                              |);
                              M.get (| "offset" |)
                            ]
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "clear_storage_range_uint8",
                      [
                        M.get (| "deleteStart" |);
                        M.get (| "deleteEnd" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "resize_array_array_uint8_dyn_storage",
          ["array"; "newLen"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "newLen" |);
                    [Literal.number 18446744073709551616]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["oldLen"],
                Some (M.call (|
                  "array_length_array_uint8_dyn_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "array" |);
                  M.get (| "newLen" |)
                ]
              |) in
            let _ :=
              M.call (|
                "cleanup_storage_array_end_array_uint8_dyn",
                [
                  M.get (| "array" |);
                  M.get (| "oldLen" |);
                  M.get (| "newLen" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_storage_range_uint256",
          ["start"; "end"],
          [],
          ltac:(M.monadic (
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "start" |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["start"],
                      M.call (|
                        "add",
                        [
                          M.get (| "start" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "storage_set_to_zero_uint256",
                      [
                        M.get (| "start" |);
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_storage_array_array_uint8_dyn",
          ["slot"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "resize_array_array_uint8_dyn_storage",
                [
                  M.get (| "slot" |);
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_set_to_zero_array_uint8_dyn",
          ["slot"; "offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "offset" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x00",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "clear_storage_array_array_uint8_dyn",
                [
                  M.get (| "slot" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_convert_length_to_size_array_uint8_storage",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["size"],
                M.get (| "length" |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "div",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "length" |);
                        M.call (|
                          "sub",
                          [
                            [Literal.number 32];
                            [Literal.number 1]
                          ]
                        |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_storage_array_array_uint",
          ["slot"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "clear_storage_range_uint256",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "slot" |);
                      M.call (|
                        "array_convert_length_to_size_array_uint8_storage",
                        [
                          [Literal.number 2]
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_set_to_zero_array_uint",
          ["slot"; "offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "offset" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x00",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "clear_storage_array_array_uint",
                [
                  M.get (| "slot" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_struct_storage_struct_S",
          ["slot"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "storage_set_to_zero_array_uint8_dyn",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "slot" |);
                      [Literal.number 0]
                    ]
                  |);
                  [Literal.number 0]
                ]
              |) in
            let _ :=
              M.call (|
                "storage_set_to_zero_array_uint",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "slot" |);
                      [Literal.number 1]
                    ]
                  |);
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_set_to_zero_struct_S",
          ["slot"; "offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "offset" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x00",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "clear_struct_storage_struct_S",
                [
                  M.get (| "slot" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_storage_range_struct_S",
          ["start"; "end"],
          [],
          ltac:(M.monadic (
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "start" |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["start"],
                      M.call (|
                        "add",
                        [
                          M.get (| "start" |);
                          [Literal.number 2]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "storage_set_to_zero_struct_S",
                      [
                        M.get (| "start" |);
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_storage_array_end_array_struct_S__dyn",
          ["array"; "len"; "startIndex"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "startIndex" |);
                    M.get (| "len" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["oldSlotCount"],
                      Some (M.call (|
                        "array_convert_length_to_size_array_struct_S_storage_dyn",
                        [
                          M.get (| "len" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["newSlotCount"],
                      Some (M.call (|
                        "array_convert_length_to_size_array_struct_S_storage_dyn",
                        [
                          M.get (| "startIndex" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["arrayDataStart"],
                      Some (M.call (|
                        "array_dataslot_array_struct_S_storage_dyn",
                        [
                          M.get (| "array" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteStart"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "newSlotCount" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteEnd"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "oldSlotCount" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.call (|
                      "clear_storage_range_struct_S",
                      [
                        M.get (| "deleteStart" |);
                        M.get (| "deleteEnd" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "resize_array_array_struct_S_storage_dyn",
          ["array"; "newLen"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "newLen" |);
                    [Literal.number 18446744073709551616]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["oldLen"],
                Some (M.call (|
                  "array_length_array_struct_S_storage_dyn",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "array" |);
                  M.get (| "newLen" |)
                ]
              |) in
            let _ :=
              M.call (|
                "cleanup_storage_array_end_array_struct_S__dyn",
                [
                  M.get (| "array" |);
                  M.get (| "oldLen" |);
                  M.get (| "newLen" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_storage_array_array_struct_S__dyn",
          ["slot"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "resize_array_array_struct_S_storage_dyn",
                [
                  M.get (| "slot" |);
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_set_to_zero_array_struct_S__dyn",
          ["slot"; "offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "offset" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x00",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "clear_storage_array_array_struct_S__dyn",
                [
                  M.get (| "slot" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_storage_range_array_struct_S__dyn",
          ["start"; "end"],
          [],
          ltac:(M.monadic (
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "start" |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["start"],
                      M.call (|
                        "add",
                        [
                          M.get (| "start" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "storage_set_to_zero_array_struct_S__dyn",
                      [
                        M.get (| "start" |);
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_storage_array_end_array_array_struct_S_storage_dyn__dyn",
          ["array"; "len"; "startIndex"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "startIndex" |);
                    M.get (| "len" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["oldSlotCount"],
                      Some (M.call (|
                        "array_convert_length_to_size_array_array_struct_S_storage_dyn__dyn",
                        [
                          M.get (| "len" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["newSlotCount"],
                      Some (M.call (|
                        "array_convert_length_to_size_array_array_struct_S_storage_dyn__dyn",
                        [
                          M.get (| "startIndex" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["arrayDataStart"],
                      Some (M.call (|
                        "array_dataslot_array_array_struct_S_storage_dyn__dyn",
                        [
                          M.get (| "array" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteStart"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "newSlotCount" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteEnd"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "oldSlotCount" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.call (|
                      "clear_storage_range_array_struct_S__dyn",
                      [
                        M.get (| "deleteStart" |);
                        M.get (| "deleteEnd" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "resize_array_array_array_struct_S_storage_dyn__dyn",
          ["array"; "newLen"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "newLen" |);
                    [Literal.number 18446744073709551616]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["oldLen"],
                Some (M.call (|
                  "array_length_array_array_struct_S_storage_dyn__dyn",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "array" |);
                  M.get (| "newLen" |)
                ]
              |) in
            let _ :=
              M.call (|
                "cleanup_storage_array_end_array_array_struct_S_storage_dyn__dyn",
                [
                  M.get (| "array" |);
                  M.get (| "oldLen" |);
                  M.get (| "newLen" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_array_struct_S_calldata_dyn_calldata_dyn_calldata",
          ["value"; "len"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.get (| "len" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_struct_S_calldata_dyn_calldata",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "access_calldata_tail_struct_S_calldata",
          ["base_ref"; "ptr_to_tail"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["rel_offset_of_tail"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.get (| "ptr_to_tail" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.get (| "rel_offset_of_tail" |);
                        M.call (|
                          "sub",
                          [
                            M.call (|
                              "sub",
                              [
                                M.call (|
                                  "calldatasize",
                                  []
                                |);
                                M.get (| "base_ref" |)
                              ]
                            |);
                            M.call (|
                              "sub",
                              [
                                [Literal.number 0x60];
                                [Literal.number 1]
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_356d538aaf70fba12156cc466564b792649f8f3befb07b071c91142253e175ad",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "base_ref" |);
                    M.get (| "rel_offset_of_tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_struct_S_calldata_dyn_calldata",
          ["value"; "len"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.get (| "len" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "access_calldata_tail_array_uint8_dyn_calldata",
          ["base_ref"; "ptr_to_tail"],
          ["addr";
      "length"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["rel_offset_of_tail"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.get (| "ptr_to_tail" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.get (| "rel_offset_of_tail" |);
                        M.call (|
                          "sub",
                          [
                            M.call (|
                              "sub",
                              [
                                M.call (|
                                  "calldatasize",
                                  []
                                |);
                                M.get (| "base_ref" |)
                              ]
                            |);
                            M.call (|
                              "sub",
                              [
                                [Literal.number 0x20];
                                [Literal.number 1]
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_356d538aaf70fba12156cc466564b792649f8f3befb07b071c91142253e175ad",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "base_ref" |);
                    M.get (| "rel_offset_of_tail" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "addr" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_1e55d03107e9c4f1b5e21c76a16fba166a461117ab153bcce65e6a4ea8e5fc8a",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "addr" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "sgt",
                  [
                    M.get (| "addr" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "calldatasize",
                          []
                        |);
                        M.call (|
                          "mul",
                          [
                            M.get (| "length" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_977805620ff29572292dee35f70b0f3f3f73d3fdd0e9f4d7a901c2e43ab18a2e",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint8_dyn_calldata",
          ["value"; "len"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.get (| "len" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_uint8",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_uint8",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_calldatat_uint8",
          ["ptr"],
          ["returnValue"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["value"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.get (| "ptr" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "validator_revert_uint8",
                [
                  M.get (| "value" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["returnValue"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint8_dyn_calldata",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_uint8",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_dynamic1",
          ["value"; "shiftBytes"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["shiftBits"],
                Some (M.call (|
                  "mul",
                  [
                    M.get (| "shiftBytes" |);
                    [Literal.number 8]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["mask"],
                Some (M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    [Literal.number 255]
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_uint8",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_to_storage_from_array_uint8_dyn_calldata_to_array_uint8_dyn",
          ["dst"; "src"; "len"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_uint8_dyn_calldata",
                  [
                    M.get (| "src" |);
                    M.get (| "len" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "resize_array_array_uint8_dyn_storage",
                [
                  M.get (| "dst" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.call (|
                  "array_dataslot_array_uint8_dyn_calldata",
                  [
                    M.get (| "src" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["dstSlot"],
                Some (M.call (|
                  "array_dataslot_array_uint8_dyn_storage",
                  [
                    M.get (| "dst" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["fullSlots"],
                Some (M.call (|
                  "div",
                  [
                    M.get (| "length" |);
                    [Literal.number 32]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "fullSlots" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["dstSlotValue"],
                      Some ([Literal.number 0])
                    |) in
                  let _ :=
                    M.assign (|
                      ["j"],
                      Some ([Literal.number 0])
                    |) in
                  let _ :=
                    let _ :=
                      tt in
                    M.for_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "j" |);
                          [Literal.number 32]
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["j"],
                            M.call (|
                              "add",
                              [
                                M.get (| "j" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      )),
                      ltac:(M.monadic (
                        let _ :=
                          M.assign (|
                            ["stackItem"],
                            Some (M.call (|
                              "read_from_calldatat_uint8",
                              [
                                M.get (| "srcPtr" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["itemValue"],
                            Some (M.call (|
                              "prepare_store_uint8",
                              [
                                M.get (| "stackItem" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.declare (|
                            ["dstSlotValue"],
                            M.call (|
                              "update_byte_slice_dynamic1",
                              [
                                M.get (| "dstSlotValue" |);
                                M.call (|
                                  "mul",
                                  [
                                    [Literal.number 1];
                                    M.get (| "j" |)
                                  ]
                                |);
                                M.get (| "itemValue" |)
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["srcPtr"],
                            M.call (|
                              "add",
                              [
                                M.get (| "srcPtr" |);
                                [Literal.number 32]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "sstore",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "dstSlot" |);
                            M.get (| "i" |)
                          ]
                        |);
                        M.get (| "dstSlotValue" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["spill"],
                Some (M.call (|
                  "sub",
                  [
                    M.get (| "length" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "fullSlots" |);
                        [Literal.number 32]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "spill" |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["dstSlotValue_1"],
                      Some ([Literal.number 0])
                    |) in
                  let _ :=
                    M.assign (|
                      ["j_1"],
                      Some ([Literal.number 0])
                    |) in
                  let _ :=
                    let _ :=
                      tt in
                    M.for_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "j_1" |);
                          M.get (| "spill" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["j_1"],
                            M.call (|
                              "add",
                              [
                                M.get (| "j_1" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      )),
                      ltac:(M.monadic (
                        let _ :=
                          M.assign (|
                            ["stackItem_1"],
                            Some (M.call (|
                              "read_from_calldatat_uint8",
                              [
                                M.get (| "srcPtr" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["itemValue_1"],
                            Some (M.call (|
                              "prepare_store_uint8",
                              [
                                M.get (| "stackItem_1" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.declare (|
                            ["dstSlotValue_1"],
                            M.call (|
                              "update_byte_slice_dynamic1",
                              [
                                M.get (| "dstSlotValue_1" |);
                                M.call (|
                                  "mul",
                                  [
                                    [Literal.number 1];
                                    M.get (| "j_1" |)
                                  ]
                                |);
                                M.get (| "itemValue_1" |)
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["srcPtr"],
                            M.call (|
                              "add",
                              [
                                M.get (| "srcPtr" |);
                                [Literal.number 32]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "sstore",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "dstSlot" |);
                            M.get (| "fullSlots" |)
                          ]
                        |);
                        M.get (| "dstSlotValue_1" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_array_uint8_dyn_calldata_to_array_uint8_dyn",
          ["slot"; "value"; "value_1"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "copy_array_to_storage_from_array_uint8_dyn_calldata_to_array_uint8_dyn",
                [
                  M.get (| "slot" |);
                  M.get (| "value" |);
                  M.get (| "value_1" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint8_storage",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x02]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint8_storage",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_storage_array_end_array_uint",
          ["array"; "len"; "startIndex"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "startIndex" |);
                    M.get (| "len" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["oldSlotCount"],
                      Some (M.call (|
                        "array_convert_length_to_size_array_uint8_storage",
                        [
                          M.get (| "len" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["newSlotCount"],
                      Some (M.call (|
                        "array_convert_length_to_size_array_uint8_storage",
                        [
                          M.get (| "startIndex" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["arrayDataStart"],
                      Some (M.call (|
                        "array_dataslot_array_uint8_storage",
                        [
                          M.get (| "array" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteStart"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "newSlotCount" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteEnd"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "oldSlotCount" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["offset"],
                      Some (M.call (|
                        "mul",
                        [
                          M.call (|
                            "mod",
                            [
                              M.get (| "startIndex" |);
                              [Literal.number 32]
                            ]
                          |);
                          [Literal.number 1]
                        ]
                      |))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "gt",
                        [
                          M.get (| "offset" |);
                          [Literal.number 0]
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "partial_clear_storage_slot",
                            [
                              M.call (|
                                "sub",
                                [
                                  M.get (| "deleteStart" |);
                                  [Literal.number 1]
                                ]
                              |);
                              M.get (| "offset" |)
                            ]
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "clear_storage_range_uint8",
                      [
                        M.get (| "deleteStart" |);
                        M.get (| "deleteEnd" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "resize_array_array_uint8_storage",
          ["array"; "newLen"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "newLen" |);
                    [Literal.number 18446744073709551616]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["oldLen"],
                Some (M.call (|
                  "array_length_array_uint8_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "cleanup_storage_array_end_array_uint",
                [
                  M.get (| "array" |);
                  M.get (| "oldLen" |);
                  M.get (| "newLen" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint8_calldata",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x02]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint8_calldata",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_to_storage_from_array_uint8_calldata_to_array_uint",
          ["dst"; "src"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_uint8_calldata",
                  [
                    M.get (| "src" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "resize_array_array_uint8_storage",
                [
                  M.get (| "dst" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.call (|
                  "array_dataslot_array_uint8_calldata",
                  [
                    M.get (| "src" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["dstSlot"],
                Some (M.call (|
                  "array_dataslot_array_uint8_storage",
                  [
                    M.get (| "dst" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["fullSlots"],
                Some (M.call (|
                  "div",
                  [
                    M.get (| "length" |);
                    [Literal.number 32]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "fullSlots" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["dstSlotValue"],
                      Some ([Literal.number 0])
                    |) in
                  let _ :=
                    M.assign (|
                      ["j"],
                      Some ([Literal.number 0])
                    |) in
                  let _ :=
                    let _ :=
                      tt in
                    M.for_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "j" |);
                          [Literal.number 32]
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["j"],
                            M.call (|
                              "add",
                              [
                                M.get (| "j" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      )),
                      ltac:(M.monadic (
                        let _ :=
                          M.assign (|
                            ["stackItem"],
                            Some (M.call (|
                              "read_from_calldatat_uint8",
                              [
                                M.get (| "srcPtr" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["itemValue"],
                            Some (M.call (|
                              "prepare_store_uint8",
                              [
                                M.get (| "stackItem" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.declare (|
                            ["dstSlotValue"],
                            M.call (|
                              "update_byte_slice_dynamic1",
                              [
                                M.get (| "dstSlotValue" |);
                                M.call (|
                                  "mul",
                                  [
                                    [Literal.number 1];
                                    M.get (| "j" |)
                                  ]
                                |);
                                M.get (| "itemValue" |)
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["srcPtr"],
                            M.call (|
                              "add",
                              [
                                M.get (| "srcPtr" |);
                                [Literal.number 32]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "sstore",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "dstSlot" |);
                            M.get (| "i" |)
                          ]
                        |);
                        M.get (| "dstSlotValue" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["spill"],
                Some (M.call (|
                  "sub",
                  [
                    M.get (| "length" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "fullSlots" |);
                        [Literal.number 32]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "spill" |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["dstSlotValue_1"],
                      Some ([Literal.number 0])
                    |) in
                  let _ :=
                    M.assign (|
                      ["j_1"],
                      Some ([Literal.number 0])
                    |) in
                  let _ :=
                    let _ :=
                      tt in
                    M.for_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "j_1" |);
                          M.get (| "spill" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["j_1"],
                            M.call (|
                              "add",
                              [
                                M.get (| "j_1" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      )),
                      ltac:(M.monadic (
                        let _ :=
                          M.assign (|
                            ["stackItem_1"],
                            Some (M.call (|
                              "read_from_calldatat_uint8",
                              [
                                M.get (| "srcPtr" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["itemValue_1"],
                            Some (M.call (|
                              "prepare_store_uint8",
                              [
                                M.get (| "stackItem_1" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.declare (|
                            ["dstSlotValue_1"],
                            M.call (|
                              "update_byte_slice_dynamic1",
                              [
                                M.get (| "dstSlotValue_1" |);
                                M.call (|
                                  "mul",
                                  [
                                    [Literal.number 1];
                                    M.get (| "j_1" |)
                                  ]
                                |);
                                M.get (| "itemValue_1" |)
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["srcPtr"],
                            M.call (|
                              "add",
                              [
                                M.get (| "srcPtr" |);
                                [Literal.number 32]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "sstore",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "dstSlot" |);
                            M.get (| "fullSlots" |)
                          ]
                        |);
                        M.get (| "dstSlotValue_1" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_array_uint8_calldata_to_array_uint",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "copy_array_to_storage_from_array_uint8_calldata_to_array_uint",
                [
                  M.get (| "slot" |);
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_struct_to_storage_from_struct_S_calldata_to_struct_S",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["memberSlot"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "slot" |);
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memberSrcPtr"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "value" |);
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memberValue"; "memberValue_1"],
                Some (M.call (|
                  "access_calldata_tail_array_uint8_dyn_calldata",
                  [
                    M.get (| "value" |);
                    M.get (| "memberSrcPtr" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_array_uint8_dyn_calldata_to_array_uint8_dyn",
                [
                  M.get (| "memberSlot" |);
                  M.get (| "memberValue" |);
                  M.get (| "memberValue_1" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["memberSlot_1"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "slot" |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memberSrcPtr_1"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "value" |);
                    [Literal.number 32]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memberValue_2"],
                Some (M.get (| "memberSrcPtr_1" |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_array_uint8_calldata_to_array_uint",
                [
                  M.get (| "memberSlot_1" |);
                  M.get (| "memberValue_2" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_struct_S_calldata_to_struct_S",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "copy_struct_to_storage_from_struct_S_calldata_to_struct_S",
                [
                  M.get (| "slot" |);
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_to_storage_from_array_struct_S_calldata_dyn_calldata_to_array_struct_S__dyn",
          ["slot"; "value"; "len"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_struct_S_calldata_dyn_calldata",
                  [
                    M.get (| "value" |);
                    M.get (| "len" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "resize_array_array_struct_S_storage_dyn",
                [
                  M.get (| "slot" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.call (|
                  "array_dataslot_array_struct_S_calldata_dyn_calldata",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["elementSlot"],
                Some (M.call (|
                  "array_dataslot_array_struct_S_storage_dyn",
                  [
                    M.get (| "slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["stackItem"],
                      Some (M.call (|
                        "access_calldata_tail_struct_S_calldata",
                        [
                          M.get (| "value" |);
                          M.get (| "srcPtr" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.call (|
                      "update_storage_value_offsett_struct_S_calldata_to_struct_S",
                      [
                        M.get (| "elementSlot" |);
                        M.get (| "stackItem" |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["srcPtr"],
                      M.call (|
                        "add",
                        [
                          M.get (| "srcPtr" |);
                          [Literal.number 32]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["elementSlot"],
                      M.call (|
                        "add",
                        [
                          M.get (| "elementSlot" |);
                          [Literal.number 2]
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_array_struct_S_calldata_dyn_calldata_to_array_struct_S__dyn",
          ["slot"; "value"; "value_1"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "copy_array_to_storage_from_array_struct_S_calldata_dyn_calldata_to_array_struct_S__dyn",
                [
                  M.get (| "slot" |);
                  M.get (| "value" |);
                  M.get (| "value_1" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_to_storage_from_array_array_struct_S_calldata_dyn_calldata_dyn_calldata_to_array_array_struct_S_storage_dyn__dyn",
          ["slot"; "value"; "len"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_array_struct_S_calldata_dyn_calldata_dyn_calldata",
                  [
                    M.get (| "value" |);
                    M.get (| "len" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "resize_array_array_array_struct_S_storage_dyn__dyn",
                [
                  M.get (| "slot" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.call (|
                  "array_dataslot_array_array_struct_S_calldata_dyn_calldata_dyn_calldata",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["elementSlot"],
                Some (M.call (|
                  "array_dataslot_array_array_struct_S_storage_dyn__dyn",
                  [
                    M.get (| "slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["stackItem"; "stackItem_1"],
                      Some (M.call (|
                        "access_calldata_tail_array_struct_S_calldata_dyn_calldata",
                        [
                          M.get (| "value" |);
                          M.get (| "srcPtr" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.call (|
                      "update_storage_value_offsett_array_struct_S_calldata_dyn_calldata_to_array_struct_S__dyn",
                      [
                        M.get (| "elementSlot" |);
                        M.get (| "stackItem" |);
                        M.get (| "stackItem_1" |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["srcPtr"],
                      M.call (|
                        "add",
                        [
                          M.get (| "srcPtr" |);
                          [Literal.number 32]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["elementSlot"],
                      M.call (|
                        "add",
                        [
                          M.get (| "elementSlot" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_array_array_struct_S_calldata_dyn_calldata_dyn_calldata_to_array_array_struct_S_storage_dyn__dyn",
          ["slot"; "value"; "value_1"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "copy_array_to_storage_from_array_array_struct_S_calldata_dyn_calldata_dyn_calldata_to_array_array_struct_S_storage_dyn__dyn",
                [
                  M.get (| "slot" |);
                  M.get (| "value" |);
                  M.get (| "value_1" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "round_up_to_mul_of",
          ["value"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "and",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 31]
                      ]
                    |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 31]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "finalize_allocation",
          ["memPtr"; "size"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["newFreePtr"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "memPtr" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "size" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "newFreePtr" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "newFreePtr" |);
                        M.get (| "memPtr" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 64];
                  M.get (| "newFreePtr" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory",
          ["size"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_unbounded",
                  []
                |)
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "memPtr" |);
                  M.get (| "size" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_array_array_struct_S_dyn_dyn",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "mul",
                  [
                    M.get (| "length" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "add",
                  [
                    M.get (| "size" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_array_array_array_struct_S_dyn_dyn",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["allocSize"],
                Some (M.call (|
                  "array_allocation_size_array_array_struct_S_dyn_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    M.get (| "allocSize" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.get (| "length" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_array_struct_S_dyn",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "mul",
                  [
                    M.get (| "length" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "add",
                  [
                    M.get (| "size" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_array_array_struct_S_dyn",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["allocSize"],
                Some (M.call (|
                  "array_allocation_size_array_struct_S_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    M.get (| "allocSize" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.get (| "length" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_0_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_0t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_0_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_8_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 8];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_1t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_8_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_16_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 16];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_2t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_16_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_24_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 24];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_24_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_32_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 32];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_4t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_32_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_40_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 40];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_5t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_40_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_48_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 48];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_6t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_48_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_56_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 56];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_7t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_56_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_64_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 64];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_8t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_64_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_72_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 72];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_9t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_72_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_80_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 80];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_10t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_80_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_88_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 88];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_11t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_88_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_96_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 96];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_12t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_96_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_104_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 104];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_13t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_104_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_112_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 112];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_14t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_112_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_120_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 120];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_15t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_120_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_128_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 128];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_16t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_128_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_136_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 136];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_17t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_136_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 144];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_18t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_152_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 152];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_19t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_152_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_160_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 160];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_20t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_160_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_168_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 168];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_21t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_168_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_176_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 176];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_22t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_176_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_184_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 184];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_23t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_184_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_192_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 192];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_24t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_192_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_200_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 200];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_25t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_200_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_208_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 208];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_26t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_208_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_216_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 216];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_27t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_216_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_28t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_224_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_232_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 232];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_29t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_232_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_240_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 240];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_30t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_240_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_248_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 248];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_31t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_248_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_uint8_dyn_storage",
          ["value"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_uint8_dyn_storage",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_uint8_dyn",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.call (|
                  "array_dataslot_array_uint8_dyn_storage",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["itemCounter"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.if_ (|
                [Literal.number 1],
                ltac:(M.monadic (
                  let _ :=
                    let _ :=
                      tt in
                    M.for_ (|
                      M.call (|
                        "lt",
                        [
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              M.call (|
                                "sub",
                                [
                                  [Literal.number 32];
                                  [Literal.number 1]
                                ]
                              |)
                            ]
                          |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 32]
                              ]
                            |)
                          |) in
                        tt
                      )),
                      ltac:(M.monadic (
                        let _ :=
                          M.assign (|
                            ["data"],
                            Some (M.call (|
                              "sload",
                              [
                                M.get (| "srcPtr" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_0t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_1t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_2t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offsett_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_4t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_5t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_6t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_7t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_8t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_9t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_10t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_11t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_12t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_13t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_14t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_15t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_16t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_17t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_18t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_19t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_20t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_21t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_22t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_23t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_24t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_25t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_26t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_27t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_28t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_29t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_30t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_31t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["srcPtr"],
                            M.call (|
                              "add",
                              [
                                M.get (| "srcPtr" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.if_ (|
                [Literal.number 1],
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["data_1"],
                      Some (M.call (|
                        "sload",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_0t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_1t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_2t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offsett_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_4t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_5t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_6t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_7t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_8t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_9t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_10t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_11t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_12t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_13t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_14t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_15t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_16t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_17t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_18t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_19t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_20t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_21t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_22t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_23t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_24t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_25t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_26t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_27t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_28t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_29t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_30t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_31t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encodeUpdatedPos_array_uint8_dyn_storage",
          ["value0"; "pos"],
          ["updatedPos"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["updatedPos"],
                M.call (|
                  "abi_encode_array_uint8_dyn_storage",
                  [
                    M.get (| "value0" |);
                    M.get (| "pos" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_from_storage_to_memory_array_uint8_dyn",
          ["slot"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_unbounded",
                  []
                |)
              |) in
            let _ :=
              M.assign (|
                ["end"],
                Some (M.call (|
                  "abi_encodeUpdatedPos_array_uint8_dyn_storage",
                  [
                    M.get (| "slot" |);
                    M.get (| "memPtr" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "end" |);
                      M.get (| "memPtr" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "write_to_memory_array_uint8_dyn",
          ["memPtr"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_uint8_storage",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_uint8_storage",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_uint8",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.call (|
                  "array_dataslot_array_uint8_storage",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["itemCounter"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.if_ (|
                [Literal.number 0],
                ltac:(M.monadic (
                  let _ :=
                    let _ :=
                      tt in
                    M.for_ (|
                      M.call (|
                        "lt",
                        [
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              M.call (|
                                "sub",
                                [
                                  [Literal.number 32];
                                  [Literal.number 1]
                                ]
                              |)
                            ]
                          |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 32]
                              ]
                            |)
                          |) in
                        tt
                      )),
                      ltac:(M.monadic (
                        let _ :=
                          M.assign (|
                            ["data"],
                            Some (M.call (|
                              "sload",
                              [
                                M.get (| "srcPtr" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_0t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_1t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_2t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offsett_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_4t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_5t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_6t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_7t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_8t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_9t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_10t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_11t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_12t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_13t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_14t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_15t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_16t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_17t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_18t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_19t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_20t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_21t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_22t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_23t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_24t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_25t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_26t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_27t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_28t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_29t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_30t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_31t_uint8",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["srcPtr"],
                            M.call (|
                              "add",
                              [
                                M.get (| "srcPtr" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.if_ (|
                [Literal.number 1],
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["data_1"],
                      Some (M.call (|
                        "sload",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 1],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_0t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 1],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_1t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_2t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offsett_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_4t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_5t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_6t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_7t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_8t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_9t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_10t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_11t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_12t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_13t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_14t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_15t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_16t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_17t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_18t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_19t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_20t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_21t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_22t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_23t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_24t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_25t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_26t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_27t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_28t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_29t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_30t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_31t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encodeUpdatedPos_array_uint8_storage",
          ["value0"; "pos"],
          ["updatedPos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "abi_encode_array_uint8_storage",
                [
                  M.get (| "value0" |);
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updatedPos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x40]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_from_storage_to_memory_array_uint",
          ["slot"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_unbounded",
                  []
                |)
              |) in
            let _ :=
              M.assign (|
                ["end"],
                Some (M.call (|
                  "abi_encodeUpdatedPos_array_uint8_storage",
                  [
                    M.get (| "slot" |);
                    M.get (| "memPtr" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "end" |);
                      M.get (| "memPtr" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "write_to_memory_array_uint8",
          ["memPtr"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_struct_struct_S",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_reference_type_struct_S",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "allocate_memory_struct_struct_S",
                  []
                |)
              |) in
            let _ :=
              M.assign (|
                ["memberValue"],
                Some (M.call (|
                  "copy_array_from_storage_to_memory_array_uint8_dyn",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "slot" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "write_to_memory_array_uint8_dyn",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.get (| "memberValue" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["memberValue_1"],
                Some (M.call (|
                  "copy_array_from_storage_to_memory_array_uint",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "slot" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "write_to_memory_array_uint8",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 32]
                    ]
                  |);
                  M.get (| "memberValue_1" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_struct_S_storage_to_struct_S",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "read_from_storage_reference_type_struct_S",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_from_storage_to_memory_array_struct_S__dyn",
          ["slot"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_struct_S_storage_dyn",
                  [
                    M.get (| "slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_array_array_struct_S_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["mpos"],
                Some (M.get (| "memPtr" |))
              |) in
            let _ :=
              M.declare (|
                ["mpos"],
                M.call (|
                  "add",
                  [
                    M.get (| "mpos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["spos"],
                Some (M.call (|
                  "array_dataslot_array_struct_S_storage_dyn",
                  [
                    M.get (| "slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.get (| "mpos" |);
                        M.call (|
                          "convert_struct_S_storage_to_struct_S",
                          [
                            M.get (| "spos" |)
                          ]
                        |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["mpos"],
                      M.call (|
                        "add",
                        [
                          M.get (| "mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["spos"],
                      M.call (|
                        "add",
                        [
                          M.get (| "spos" |);
                          [Literal.number 2]
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_array_array_struct_S_storage_dyn_to_array_struct_S_dyn",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "copy_array_from_storage_to_memory_array_struct_S__dyn",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_from_storage_to_memory_array_array_struct_S_storage_dyn__dyn",
          ["slot"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_array_struct_S_storage_dyn__dyn",
                  [
                    M.get (| "slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_array_array_array_struct_S_dyn_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["mpos"],
                Some (M.get (| "memPtr" |))
              |) in
            let _ :=
              M.declare (|
                ["mpos"],
                M.call (|
                  "add",
                  [
                    M.get (| "mpos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["spos"],
                Some (M.call (|
                  "array_dataslot_array_array_struct_S_storage_dyn__dyn",
                  [
                    M.get (| "slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.get (| "mpos" |);
                        M.call (|
                          "convert_array_array_struct_S_storage_dyn_to_array_struct_S_dyn",
                          [
                            M.get (| "spos" |)
                          ]
                        |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["mpos"],
                      M.call (|
                        "add",
                        [
                          M.get (| "mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["spos"],
                      M.call (|
                        "add",
                        [
                          M.get (| "spos" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_array_array_array_struct_S_storage_dyn__dyn_to_array_array_struct_S_dyn_dyn",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "copy_array_from_storage_to_memory_array_array_struct_S_storage_dyn__dyn",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_test1",
          ["var_a_31_offset"; "var_a_length"],
          ["var_mpos"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_array_array_struct_S_dyn_dyn_mpos"],
                Some (M.call (|
                  "zero_value_for_split_array_array_struct_S_dyn_dyn",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_mpos"],
                M.get (| "zero_array_array_struct_S_dyn_dyn_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_2_offset"],
                Some (M.get (| "var_a_31_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["_length"],
                Some (M.get (| "var_a_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_40_offset"],
                Some (M.get (| "_2_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_length"],
                Some (M.get (| "_length" |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_array_array_struct_S_calldata_dyn_calldata_dyn_calldata_to_array_array_struct_S_storage_dyn__dyn",
                [
                  [Literal.number 0x00];
                  M.get (| "expr_40_offset" |);
                  M.get (| "expr_length" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_4_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_slot"],
                Some (M.get (| "_4_slot" |))
              |) in
            let _ :=
              M.declare (|
                ["var_mpos"],
                M.call (|
                  "convert_array_array_array_struct_S_storage_dyn__dyn_to_array_array_struct_S_dyn_dyn",
                  [
                    M.get (| "expr_slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_array_array_struct_S_memory_ptr_memory_ptr_dyn_memory_ptr",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 96]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_array_struct_S_calldata_calldata_dyn_calldata",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "access_calldata_tail_array_struct_S_calldata_calldata",
          ["base_ref"; "ptr_to_tail"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["rel_offset_of_tail"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.get (| "ptr_to_tail" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.get (| "rel_offset_of_tail" |);
                        M.call (|
                          "sub",
                          [
                            M.call (|
                              "sub",
                              [
                                M.call (|
                                  "calldatasize",
                                  []
                                |);
                                M.get (| "base_ref" |)
                              ]
                            |);
                            M.call (|
                              "sub",
                              [
                                [Literal.number 0x20];
                                [Literal.number 1]
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_356d538aaf70fba12156cc466564b792649f8f3befb07b071c91142253e175ad",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "base_ref" |);
                    M.get (| "rel_offset_of_tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_array_struct_S_storage_dyn_",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_convert_length_to_size_array_array_struct_S_storage_dyn",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["size"],
                M.get (| "length" |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "checked_mul_uint256",
                  [
                    [Literal.number 2];
                    M.get (| "length" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_array_struct_S_storage_dyn",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.get (| "ptr" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_convert_length_to_size_array_struct_S_storage",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["size"],
                M.get (| "length" |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "checked_mul_uint256",
                  [
                    [Literal.number 2];
                    M.get (| "length" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_storage_array_array_struct_S",
          ["slot"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "clear_storage_range_struct_S",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "slot" |);
                      M.call (|
                        "array_convert_length_to_size_array_struct_S_storage",
                        [
                          [Literal.number 1]
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_set_to_zero_array_struct_S",
          ["slot"; "offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "offset" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x00",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "clear_storage_array_array_struct_S",
                [
                  M.get (| "slot" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_storage_range_array_struct_S",
          ["start"; "end"],
          [],
          ltac:(M.monadic (
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "start" |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["start"],
                      M.call (|
                        "add",
                        [
                          M.get (| "start" |);
                          [Literal.number 2]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "storage_set_to_zero_array_struct_S",
                      [
                        M.get (| "start" |);
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_storage_array_end_array_array_struct_S_storage_dyn",
          ["array"; "len"; "startIndex"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "startIndex" |);
                    M.get (| "len" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["oldSlotCount"],
                      Some (M.call (|
                        "array_convert_length_to_size_array_array_struct_S_storage_dyn",
                        [
                          M.get (| "len" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["newSlotCount"],
                      Some (M.call (|
                        "array_convert_length_to_size_array_array_struct_S_storage_dyn",
                        [
                          M.get (| "startIndex" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["arrayDataStart"],
                      Some (M.call (|
                        "array_dataslot_array_array_struct_S_storage_dyn",
                        [
                          M.get (| "array" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteStart"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "newSlotCount" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteEnd"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "oldSlotCount" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.call (|
                      "clear_storage_range_array_struct_S",
                      [
                        M.get (| "deleteStart" |);
                        M.get (| "deleteEnd" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "resize_array_array_array_struct_S_storage_dyn_",
          ["array"; "newLen"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "newLen" |);
                    [Literal.number 18446744073709551616]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["oldLen"],
                Some (M.call (|
                  "array_length_array_array_struct_S_storage_dyn_",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "array" |);
                  M.get (| "newLen" |)
                ]
              |) in
            let _ :=
              M.call (|
                "cleanup_storage_array_end_array_array_struct_S_storage_dyn",
                [
                  M.get (| "array" |);
                  M.get (| "oldLen" |);
                  M.get (| "newLen" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_array_struct_S_calldata_calldata_dyn_calldata",
          ["value"; "len"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.get (| "len" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_struct_S_calldata_calldata",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_struct_S_storage",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x01]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_struct_S_storage",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_storage_array_end_array_struct_S",
          ["array"; "len"; "startIndex"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "startIndex" |);
                    M.get (| "len" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["oldSlotCount"],
                      Some (M.call (|
                        "array_convert_length_to_size_array_struct_S_storage",
                        [
                          M.get (| "len" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["newSlotCount"],
                      Some (M.call (|
                        "array_convert_length_to_size_array_struct_S_storage",
                        [
                          M.get (| "startIndex" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["arrayDataStart"],
                      Some (M.call (|
                        "array_dataslot_array_struct_S_storage",
                        [
                          M.get (| "array" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteStart"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "newSlotCount" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteEnd"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "oldSlotCount" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.call (|
                      "clear_storage_range_struct_S",
                      [
                        M.get (| "deleteStart" |);
                        M.get (| "deleteEnd" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "resize_array_array_struct_S_storage",
          ["array"; "newLen"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "newLen" |);
                    [Literal.number 18446744073709551616]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["oldLen"],
                Some (M.call (|
                  "array_length_array_struct_S_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "cleanup_storage_array_end_array_struct_S",
                [
                  M.get (| "array" |);
                  M.get (| "oldLen" |);
                  M.get (| "newLen" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_struct_S_calldata_calldata",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x01]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_to_storage_from_array_struct_S_calldata_calldata_to_array_struct_S",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_struct_S_calldata_calldata",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "resize_array_array_struct_S_storage",
                [
                  M.get (| "slot" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.call (|
                  "array_dataslot_array_struct_S_calldata_calldata",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["elementSlot"],
                Some (M.call (|
                  "array_dataslot_array_struct_S_storage",
                  [
                    M.get (| "slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["stackItem"],
                      Some (M.call (|
                        "access_calldata_tail_struct_S_calldata",
                        [
                          M.get (| "value" |);
                          M.get (| "srcPtr" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.call (|
                      "update_storage_value_offsett_struct_S_calldata_to_struct_S",
                      [
                        M.get (| "elementSlot" |);
                        M.get (| "stackItem" |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["srcPtr"],
                      M.call (|
                        "add",
                        [
                          M.get (| "srcPtr" |);
                          [Literal.number 32]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["elementSlot"],
                      M.call (|
                        "add",
                        [
                          M.get (| "elementSlot" |);
                          [Literal.number 2]
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_array_struct_S_calldata_calldata_to_array_struct_S",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "copy_array_to_storage_from_array_struct_S_calldata_calldata_to_array_struct_S",
                [
                  M.get (| "slot" |);
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_to_storage_from_array_array_struct_S_calldata_calldata_dyn_calldata_to_array_array_struct_S__dyn",
          ["slot"; "value"; "len"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_array_struct_S_calldata_calldata_dyn_calldata",
                  [
                    M.get (| "value" |);
                    M.get (| "len" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "resize_array_array_array_struct_S_storage_dyn_",
                [
                  M.get (| "slot" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.call (|
                  "array_dataslot_array_array_struct_S_calldata_calldata_dyn_calldata",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["elementSlot"],
                Some (M.call (|
                  "array_dataslot_array_array_struct_S_storage_dyn",
                  [
                    M.get (| "slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["stackItem"],
                      Some (M.call (|
                        "access_calldata_tail_array_struct_S_calldata_calldata",
                        [
                          M.get (| "value" |);
                          M.get (| "srcPtr" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.call (|
                      "update_storage_value_offsett_array_struct_S_calldata_calldata_to_array_struct_S",
                      [
                        M.get (| "elementSlot" |);
                        M.get (| "stackItem" |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["srcPtr"],
                      M.call (|
                        "add",
                        [
                          M.get (| "srcPtr" |);
                          [Literal.number 32]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["elementSlot"],
                      M.call (|
                        "add",
                        [
                          M.get (| "elementSlot" |);
                          [Literal.number 2]
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_array_array_struct_S_calldata_calldata_dyn_calldata_to_array_array_struct_S__dyn",
          ["slot"; "value"; "value_1"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "copy_array_to_storage_from_array_array_struct_S_calldata_calldata_dyn_calldata_to_array_array_struct_S__dyn",
                [
                  M.get (| "slot" |);
                  M.get (| "value" |);
                  M.get (| "value_1" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_array_array_struct_S_memory_ptr_memory_ptr_dyn_memory_ptr",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "mul",
                  [
                    M.get (| "length" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "add",
                  [
                    M.get (| "size" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_array_array_array_struct_S_memory_ptr_memory_ptr_dyn_memory_ptr",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["allocSize"],
                Some (M.call (|
                  "array_allocation_size_array_array_struct_S_memory_ptr_memory_ptr_dyn_memory_ptr",
                  [
                    M.get (| "length" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    M.get (| "allocSize" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.get (| "length" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_array_struct_S",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "mul",
                  [
                    M.get (| "length" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_array_array_struct_S",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["allocSize"],
                Some (M.call (|
                  "array_allocation_size_array_struct_S",
                  [
                    M.get (| "length" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    M.get (| "allocSize" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_from_storage_to_memory_array_struct_S",
          ["slot"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_struct_S_storage",
                  [
                    M.get (| "slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_array_array_struct_S",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["mpos"],
                Some (M.get (| "memPtr" |))
              |) in
            let _ :=
              M.assign (|
                ["spos"],
                Some (M.call (|
                  "array_dataslot_array_struct_S_storage",
                  [
                    M.get (| "slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.get (| "mpos" |);
                        M.call (|
                          "convert_struct_S_storage_to_struct_S",
                          [
                            M.get (| "spos" |)
                          ]
                        |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["mpos"],
                      M.call (|
                        "add",
                        [
                          M.get (| "mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["spos"],
                      M.call (|
                        "add",
                        [
                          M.get (| "spos" |);
                          [Literal.number 2]
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_array_array_struct_S_storage_to_array_struct_S",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "copy_array_from_storage_to_memory_array_struct_S",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_from_storage_to_memory_array_array_struct_S_storage_dyn",
          ["slot"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_array_struct_S_storage_dyn_",
                  [
                    M.get (| "slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_array_array_array_struct_S_memory_ptr_memory_ptr_dyn_memory_ptr",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["mpos"],
                Some (M.get (| "memPtr" |))
              |) in
            let _ :=
              M.declare (|
                ["mpos"],
                M.call (|
                  "add",
                  [
                    M.get (| "mpos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["spos"],
                Some (M.call (|
                  "array_dataslot_array_array_struct_S_storage_dyn",
                  [
                    M.get (| "slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.get (| "mpos" |);
                        M.call (|
                          "convert_array_array_struct_S_storage_to_array_struct_S",
                          [
                            M.get (| "spos" |)
                          ]
                        |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["mpos"],
                      M.call (|
                        "add",
                        [
                          M.get (| "mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["spos"],
                      M.call (|
                        "add",
                        [
                          M.get (| "spos" |);
                          [Literal.number 2]
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_array_array_array_struct_S_storage_dyn_storage_to_array_array_struct_S_dyn",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "copy_array_from_storage_to_memory_array_array_struct_S_storage_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_test3",
          ["var_a_offset"; "var__a_length"],
          ["var__mpos"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_array_array_struct_S_dyn_mpos"],
                Some (M.call (|
                  "zero_value_for_split_array_array_struct_S_memory_ptr_memory_ptr_dyn_memory_ptr",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var__mpos"],
                M.get (| "zero_array_array_struct_S_dyn_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_offset"],
                Some (M.get (| "var_a_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["_6_length"],
                Some (M.get (| "var__a_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_84_offset"],
                Some (M.get (| "_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_84_length"],
                Some (M.get (| "_6_length" |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_array_array_struct_S_calldata_calldata_dyn_calldata_to_array_array_struct_S__dyn",
                [
                  [Literal.number 0x02];
                  M.get (| "expr_84_offset" |);
                  M.get (| "expr_84_length" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_8_slot"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["expr_87_slot"],
                Some (M.get (| "_8_slot" |))
              |) in
            let _ :=
              M.declare (|
                ["var__mpos"],
                M.call (|
                  "convert_array_array_array_struct_S_storage_dyn_storage_to_array_array_struct_S_dyn",
                  [
                    M.get (| "expr_87_slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_array_array_struct_S_dyn",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "mul",
                  [
                    M.get (| "length" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_array_array_array_struct_S_dyn",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["allocSize"],
                Some (M.call (|
                  "array_allocation_size_array_array_struct_S_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    M.get (| "allocSize" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_array_struct_S_dyn",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 96]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_complex_memory_array_array_array_struct_S_dyn",
          ["dataStart"; "dataSizeInBytes"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "dataSizeInBytes" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 32]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "dataStart" |);
                            M.get (| "i" |)
                          ]
                        |);
                        M.call (|
                          "zero_value_for_array_struct_S_dyn",
                          []
                        |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_and_zero_memory_array_array_array_struct_S_dyn",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_array_array_array_struct_S_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["dataStart"],
                Some (M.get (| "memPtr" |))
              |) in
            let _ :=
              M.assign (|
                ["dataSize"],
                Some (M.call (|
                  "array_allocation_size_array_array_struct_S_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "zero_complex_memory_array_array_array_struct_S_dyn",
                [
                  M.get (| "dataStart" |);
                  M.get (| "dataSize" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_array_array_struct_S_dyn",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "allocate_and_zero_memory_array_array_array_struct_S_dyn",
                  [
                    [Literal.number 1]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_array_struct_S_calldata_dyn_calldata_calldata",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_array_struct_S_storage_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x01]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_convert_length_to_size_array_array_struct_S_storage_dyn_",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["size"],
                M.get (| "length" |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "div",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "length" |);
                        M.call (|
                          "sub",
                          [
                            [Literal.number 1];
                            [Literal.number 1]
                          ]
                        |)
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_array_struct_S_storage_dyn_",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_storage_array_end_array_array_struct_S__dyn",
          ["array"; "len"; "startIndex"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "startIndex" |);
                    M.get (| "len" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["oldSlotCount"],
                      Some (M.call (|
                        "array_convert_length_to_size_array_array_struct_S_storage_dyn_",
                        [
                          M.get (| "len" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["newSlotCount"],
                      Some (M.call (|
                        "array_convert_length_to_size_array_array_struct_S_storage_dyn_",
                        [
                          M.get (| "startIndex" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["arrayDataStart"],
                      Some (M.call (|
                        "array_dataslot_array_array_struct_S_storage_dyn_",
                        [
                          M.get (| "array" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteStart"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "newSlotCount" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteEnd"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "oldSlotCount" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.call (|
                      "clear_storage_range_array_struct_S__dyn",
                      [
                        M.get (| "deleteStart" |);
                        M.get (| "deleteEnd" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "resize_array_array_array_struct_S_storage_dyn",
          ["array"; "newLen"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "newLen" |);
                    [Literal.number 18446744073709551616]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["oldLen"],
                Some (M.call (|
                  "array_length_array_array_struct_S_storage_dyn",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "cleanup_storage_array_end_array_array_struct_S__dyn",
                [
                  M.get (| "array" |);
                  M.get (| "oldLen" |);
                  M.get (| "newLen" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_array_struct_S_calldata_dyn_calldata_calldata",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x01]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_to_storage_from_array_array_struct_S_calldata_dyn_calldata_calldata_to_array_array_struct_S__dyn",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_array_struct_S_calldata_dyn_calldata_calldata",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "resize_array_array_array_struct_S_storage_dyn",
                [
                  M.get (| "slot" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.call (|
                  "array_dataslot_array_array_struct_S_calldata_dyn_calldata_calldata",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["elementSlot"],
                Some (M.call (|
                  "array_dataslot_array_array_struct_S_storage_dyn_",
                  [
                    M.get (| "slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["stackItem"; "stackItem_1"],
                      Some (M.call (|
                        "access_calldata_tail_array_struct_S_calldata_dyn_calldata",
                        [
                          M.get (| "value" |);
                          M.get (| "srcPtr" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.call (|
                      "update_storage_value_offsett_array_struct_S_calldata_dyn_calldata_to_array_struct_S__dyn",
                      [
                        M.get (| "elementSlot" |);
                        M.get (| "stackItem" |);
                        M.get (| "stackItem_1" |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["srcPtr"],
                      M.call (|
                        "add",
                        [
                          M.get (| "srcPtr" |);
                          [Literal.number 32]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["elementSlot"],
                      M.call (|
                        "add",
                        [
                          M.get (| "elementSlot" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_array_array_struct_S_calldata_dyn_calldata_calldata_to_array_array_struct_S__dyn",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "copy_array_to_storage_from_array_array_struct_S_calldata_dyn_calldata_calldata_to_array_array_struct_S__dyn",
                [
                  M.get (| "slot" |);
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_from_storage_to_memory_array_array_struct_S__dyn",
          ["slot"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_array_struct_S_storage_dyn",
                  [
                    M.get (| "slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_array_array_array_struct_S_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["mpos"],
                Some (M.get (| "memPtr" |))
              |) in
            let _ :=
              M.assign (|
                ["spos"],
                Some (M.call (|
                  "array_dataslot_array_array_struct_S_storage_dyn_",
                  [
                    M.get (| "slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.get (| "mpos" |);
                        M.call (|
                          "convert_array_array_struct_S_storage_dyn_to_array_struct_S_dyn",
                          [
                            M.get (| "spos" |)
                          ]
                        |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["mpos"],
                      M.call (|
                        "add",
                        [
                          M.get (| "mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["spos"],
                      M.call (|
                        "add",
                        [
                          M.get (| "spos" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_array_array_array_struct_S_storage_dyn_to_array_array_struct_S_dyn",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "copy_array_from_storage_to_memory_array_array_struct_S__dyn",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_test2",
          ["var__a_offset"],
          ["var_59_mpos"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_array_array_struct_S_memory_ptr_dyn_memory_ptr_memory_ptr_mpos"],
                Some (M.call (|
                  "zero_value_for_split_array_array_struct_S_dyn",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_59_mpos"],
                M.get (| "zero_array_array_struct_S_memory_ptr_dyn_memory_ptr_memory_ptr_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_10_offset"],
                Some (M.get (| "var__a_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_offset"],
                Some (M.get (| "_10_offset" |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_array_array_struct_S_calldata_dyn_calldata_calldata_to_array_array_struct_S__dyn",
                [
                  [Literal.number 0x01];
                  M.get (| "expr_offset" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_slot"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_65_slot"],
                Some (M.get (| "_slot" |))
              |) in
            let _ :=
              M.declare (|
                ["var_59_mpos"],
                M.call (|
                  "convert_array_array_array_struct_S_storage_dyn_to_array_array_struct_S_dyn",
                  [
                    M.get (| "expr_65_slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a264697066735822122017a448133e5e3480e06bc3916b5e3ab8c1d47274ce78415defa34f0ac224003964736f6c634300081b0033".
  End C_91_deployed.
End C_91.
