(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module c.
  Definition data1 : Value.t :=
    undefined.

  Definition data2 : Value.t :=
    undefined.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "i" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 37
src: 153:64:0
nodeType: ForStatement
initializationExpression: M.assign (|
          "=",
          M.get_name (| "i" |),
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          M.member_access (|
            M.get_name (| "data2" |),
            "length"
          |)
        |)
loopExpression: M.un_op (|
          true,
          "++",
          M.get_name (| "i" |)
        |)
body: M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "data2" |),
            Some (M.get_name (| "i" |))
          |),
          Value.Integer 0xffff
        |)
isSimpleCounterLoop: 1
 in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "check" |),
          M.bin_op (|
            "|",
            M.bin_op (|
              "*",
              M.call (|
                Ty.path "uint",
                [
                  M.call (|
                    Ty.path "uint16",
                    [
                      M.index_access (|
                        M.get_name (| "data2" |),
                        Some (Value.Integer 31)
                      |)
                    ]
                  |)
                ]
              |),
              Value.Integer 0x10000
            |),
            M.call (|
              Ty.path "uint",
              [
                M.call (|
                  Ty.path "uint16",
                  [
                    M.index_access (|
                      M.get_name (| "data2" |),
                      Some (Value.Integer 14)
                    |)
                  ]
                |)
              ]
            |)
          |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 87
src: 304:78:0
nodeType: ForStatement
initializationExpression: M.assign (|
          "=",
          M.get_name (| "i" |),
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          M.member_access (|
            M.get_name (| "data1" |),
            "length"
          |)
        |)
loopExpression: M.un_op (|
          true,
          "++",
          M.get_name (| "i" |)
        |)
body: M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "data1" |),
            Some (M.get_name (| "i" |))
          |),
          M.call (|
            Ty.path "bytes1",
            [
              M.call (|
                Ty.path "uint8",
                [
                  M.bin_op (|
                    "+",
                    Value.Integer 1,
                    M.get_name (| "i" |)
                  |)
                ]
              |)
            ]
          |)
        |)
isSimpleCounterLoop: 1
 in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "data2" |),
          M.get_name (| "data1" |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 118
src: 415:80:0
nodeType: ForStatement
initializationExpression: M.assign (|
          "=",
          M.get_name (| "i" |),
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          Value.Integer 16
        |)
loopExpression: M.un_op (|
          true,
          "++",
          M.get_name (| "i" |)
        |)
body: M.assign (|
          "|=",
          M.get_name (| "res1" |),
          M.bin_op (|
            "*",
            M.call (|
              Ty.path "uint",
              [
                M.call (|
                  Ty.path "uint16",
                  [
                    M.index_access (|
                      M.get_name (| "data2" |),
                      Some (M.get_name (| "i" |))
                    |)
                  ]
                |)
              ]
            |),
            M.bin_op (|
              "**",
              Value.Integer 0x10000,
              M.get_name (| "i" |)
            |)
          |)
        |)
isSimpleCounterLoop: 1
 in
      let _ :=
        (* Beginning of a node! *)
id: 147
src: 505:85:0
nodeType: ForStatement
initializationExpression: M.assign (|
          "=",
          M.get_name (| "i" |),
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          Value.Integer 16
        |)
loopExpression: M.un_op (|
          true,
          "++",
          M.get_name (| "i" |)
        |)
body: M.assign (|
          "|=",
          M.get_name (| "res2" |),
          M.bin_op (|
            "*",
            M.call (|
              Ty.path "uint",
              [
                M.call (|
                  Ty.path "uint16",
                  [
                    M.index_access (|
                      M.get_name (| "data2" |),
                      Some (M.bin_op (|
                        "+",
                        Value.Integer 16,
                        M.get_name (| "i" |)
                      |))
                    |)
                  ]
                |)
              ]
            |),
            M.bin_op (|
              "**",
              Value.Integer 0x10000,
              M.get_name (| "i" |)
            |)
          |)
        |)
isSimpleCounterLoop: 1
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End c.
