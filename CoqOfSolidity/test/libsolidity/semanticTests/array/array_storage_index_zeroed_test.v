(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition storageArray : Value.t :=
    undefined.

  Definition test_zeroed_indicies (α : list Value.t) : M :=
    match α with
    | [len] =>
      let _ :=
        M.while (|
          WhileKind.While,
          M.bin_op (|
            "<",
            M.member_access (|
              M.get_name (| "storageArray" |),
              "length"
            |),
            M.get_name (| "len" |)
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "storageArray" |),
              "push"
            |),
            []
          |)
        |) in
      let _ :=
        M.while (|
          WhileKind.While,
          M.bin_op (|
            ">",
            M.member_access (|
              M.get_name (| "storageArray" |),
              "length"
            |),
            M.get_name (| "len" |)
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "storageArray" |),
              "pop"
            |),
            []
          |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 46
src: 254:66:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          M.get_name (| "len" |)
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "i" |)
        |)
body: M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "storageArray" |),
            Some (M.get_name (| "i" |))
          |),
          M.bin_op (|
            "+",
            M.get_name (| "i" |),
            Value.Integer 1
          |)
        |)
isSimpleCounterLoop: 1
 in
      let _ :=
        if M.bin_op (|
          ">",
          M.get_name (| "len" |),
          Value.Integer 3
        |) then
          let _ :=
            M.while (|
              WhileKind.While,
              M.bin_op (|
                ">",
                M.member_access (|
                  M.get_name (| "storageArray" |),
                  "length"
                |),
                Value.Integer 0
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "storageArray" |),
                  "pop"
                |),
                []
              |)
            |) in
          let _ :=
            M.while (|
              WhileKind.While,
              M.bin_op (|
                "<",
                M.member_access (|
                  M.get_name (| "storageArray" |),
                  "length"
                |),
                Value.Integer 3
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "storageArray" |),
                  "push"
                |),
                []
              |)
            |) in
          let _ :=
            (* Beginning of a node! *)
id: 82
src: 526:321:0
nodeType: ForStatement
initializationExpression: M.define (|
              [ "i" ],
              Value.Integer 3
            |)
condition: M.bin_op (|
              "<",
              M.get_name (| "i" |),
              M.get_name (| "len" |)
            |)
loopExpression: M.un_op (|
              false,
              "++",
              M.get_name (| "i" |)
            |)
body: let _ :=
              (* Beginning of a node! *)
id: 80
src: 587:246:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 702:1:0declaration: 71isSlot: isOffset: alueSize: src: 628:17:0declaration: 3sSlot: isOffset: suffix: slotalueSize: 
evmVersion: cancun
 in
            Value.Tuple []
isSimpleCounterLoop: 1
 in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        M.while (|
          WhileKind.While,
          M.bin_op (|
            ">",
            M.member_access (|
              M.get_name (| "storageArray" |),
              "length"
            |),
            Value.Integer 0
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "storageArray" |),
              "pop"
            |),
            []
          |)
        |) in
      let _ :=
        M.while (|
          WhileKind.While,
          M.bin_op (|
            "<",
            M.member_access (|
              M.get_name (| "storageArray" |),
              "length"
            |),
            M.get_name (| "len" |)
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "storageArray" |),
              "push"
            |),
            []
          |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 140
src: 1014:245:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          M.get_name (| "len" |)
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "i" |)
        |)
body: let _ :=
          M.call (|
            M.get_name (| "require" |),
            [
              M.bin_op (|
                "==",
                M.index_access (|
                  M.get_name (| "storageArray" |),
                  Some (M.get_name (| "i" |))
                |),
                Value.Integer 0
              |)
            ]
          |) in
        let _ :=
          M.define (|
            [ "val" ],
            M.index_access (|
              M.get_name (| "storageArray" |),
              Some (M.get_name (| "i" |))
            |)
          |) in
        let _ :=
          M.define (|
            [ "check" ],
            Value.Default
          |) in
        let _ :=
          (* Beginning of a node! *)
id: 132
src: 1182:33:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 1193:5:0declaration: 130isSlot: isOffset: alueSize: src: 1209:3:0declaration: 124isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
        let _ :=
          M.call (|
            M.get_name (| "require" |),
            [
              M.bin_op (|
                "==",
                M.get_name (| "check" |),
                Value.Integer 1
              |)
            ]
          |) in
        Value.Tuple []
isSimpleCounterLoop: 1
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
