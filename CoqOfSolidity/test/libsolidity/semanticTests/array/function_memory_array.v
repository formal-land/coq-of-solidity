(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition a (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.get_name (| "x" |),
            Value.Integer 1
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition b (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.get_name (| "x" |),
            Value.Integer 2
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition c (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.get_name (| "x" |),
            Value.Integer 3
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition d (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.get_name (| "x" |),
            Value.Integer 5
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition e (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.get_name (| "x" |),
            Value.Integer 8
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test (α : list Value.t) : M :=
    match α with
    | [x, i] =>
      let _ :=
        M.define (|
          [ "arr" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 85
src: 568:40:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 84
src: 568:39:0
nodeType: FunctionTypeName
visibility: internal
stateMutability: nonpayable
parameterTypes: (* Beginning of a node! *)
id: 80
src: 576:6:0
nodeType: ParameterList
parameters: Definition  : Value.t :=
              undefined.

returnParameterTypes: (* Beginning of a node! *)
id: 83
src: 600:6:0
nodeType: ParameterList
parameters: Definition  : Value.t :=
              undefined.

typeDescriptions: typeString function (uint256) returns (uint256)typeIdentifier st_function_internal_nonpayable$_t_uint256_$returns$_t_uint256_$

length: 
typeDescriptions: typeString function (uint256) returns (uint256)[]typeIdentifier st_array$_t_function_internal_nonpayable$_t_uint256_$returns$_t_uint256_$_$dyn_storage_ptr

,
            [
              Value.Integer 10
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "arr" |),
            Some (Value.Integer 0)
          |),
          M.get_name (| "a" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "arr" |),
            Some (Value.Integer 1)
          |),
          M.get_name (| "b" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "arr" |),
            Some (Value.Integer 2)
          |),
          M.get_name (| "c" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "arr" |),
            Some (Value.Integer 3)
          |),
          M.get_name (| "d" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "arr" |),
            Some (Value.Integer 4)
          |),
          M.get_name (| "e" |)
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.index_access (|
              M.get_name (| "arr" |),
              Some (M.get_name (| "i" |))
            |),
            [
              M.get_name (| "x" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
