(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "l" ],
          M.bin_op (|
            "/",
            M.bin_op (|
              "**",
              Value.Integer 2,
              Value.Integer 256
            |),
            Value.Integer 32
          |)
        |) in
      let _ :=
        M.define (|
          [ "x" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 19
src: 178:9:0
nodeType: ArrayTypeName
baseType: Ty.path "uint256"
length: 
typeDescriptions: typeString uint256[]typeIdentifier st_array$_t_uint256_$dyn_storage_ptr

,
            [
              M.get_name (| "l" |)
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 30
src: 225:9:0
nodeType: ArrayTypeName
baseType: Ty.path "uint256"
length: 
typeDescriptions: typeString uint256[]typeIdentifier st_array$_t_uint256_$dyn_storage_ptr

,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 1)
          |),
          Value.Integer 42
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "y" |),
            Some (Value.Integer 0)
          |),
          Value.Integer 23
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 1)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "l" ],
          M.bin_op (|
            "+",
            M.bin_op (|
              "/",
              M.bin_op (|
                "**",
                Value.Integer 2,
                Value.Integer 256
              |),
              Value.Integer 2
            |),
            Value.Integer 1
          |)
        |) in
      let _ :=
        M.define (|
          [ "x" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 73
src: 530:8:0
nodeType: ArrayTypeName
baseType: Ty.path "uint16"
length: 
typeDescriptions: typeString uint16[]typeIdentifier st_array$_t_uint16_$dyn_storage_ptr

,
            [
              M.get_name (| "l" |)
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 84
src: 575:8:0
nodeType: ArrayTypeName
baseType: Ty.path "uint16"
length: 
typeDescriptions: typeString uint16[]typeIdentifier st_array$_t_uint16_$dyn_storage_ptr

,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 2)
          |),
          Value.Integer 42
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "y" |),
            Some (Value.Integer 0)
          |),
          Value.Integer 23
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 2)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
