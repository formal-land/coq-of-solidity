(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_203.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            [

            ]
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                [

                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          M.call (|
            "allocate_unbounded",
            [

            ]
          |)
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f3230335f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3230335f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3230335f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_203_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x26121ff0),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_f",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x573a6b2f),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_htwo",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xb8c9d365),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_h",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xe2179b8e),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_g",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xf8a8fd6d),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_test",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xffae15ba),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_e",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            [

            ]
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_to_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_f",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_f",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_32",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 32];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_64",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 64];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "combine_external_function_id",
          ["addr"; "selector"],
          ["combined"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["combined"],
                M.call (|
                  "shift_left_64",
                  [
                    M.call (|
                      "or",
                      [
                        M.call (|
                          "shift_left_32",
                          [
                            M.get (| "addr" |)
                          ]
                        |);
                        M.call (|
                          "and",
                          [
                            M.get (| "selector" |);
                            [Literal.number 0xffffffff]
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_function_external_nonpayable_returns_uint256_to_function_external_nonpayable_returns_uint",
          ["addr"; "functionId"],
          ["outAddr";
      "outFunctionId"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["outAddr"],
                M.get (| "addr" |)
              |) in
            let _ :=
              M.declare (|
                ["outFunctionId"],
                M.get (| "functionId" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_function_external_nonpayable_returns_uint256",
          ["addr"; "function_id"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["addr"; "function_id"],
                M.call (|
                  "convert_function_external_nonpayable_returns_uint256_to_function_external_nonpayable_returns_uint",
                  [
                    M.get (| "addr" |);
                    M.get (| "function_id" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "combine_external_function_id",
                    [
                      M.get (| "addr" |);
                      M.get (| "function_id" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_function_external_nonpayable_returns_uint",
          ["headStart"; "value0"; "value1"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_function_external_nonpayable_returns_uint256",
                [
                  M.get (| "value0" |);
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_htwo",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"],
                M.call (|
                  "fun_htwo",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_function_external_nonpayable_returns_uint",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_h",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"],
                M.call (|
                  "fun_h",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_function_external_nonpayable_returns_uint",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_g",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_g",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_uint256_uint256",
          ["headStart"; "value0"; "value1"; "value2"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 96]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value2" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 64]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_test",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"; "ret_2"],
                M.call (|
                  "fun_test",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_uint256_uint256_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |);
                    M.get (| "ret_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_e",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_e",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_f",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x06]
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.call (|
                  "convert_rational_by_to_uint256",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_function_external_nonpayable_returns_uint",
          [],
          ["retAddress";
      "retFunction"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["retAddress"],
                [Literal.number 0]
              |) in
            let _ :=
              M.declare (|
                ["retFunction"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint160",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "shl",
                          [
                            [Literal.number 160];
                            [Literal.number 1]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint160_to_uint160",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint160",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint160",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint160_to_address",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_uint160",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_contract_C_to_address",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_address",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_htwo",
          [],
          ["var__address";
      "var_functionSelector"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_function_external_nonpayable__returns_uint256__address"; "zero_function_external_nonpayable_returns_uint256_functionSelector"],
                M.call (|
                  "zero_value_for_split_function_external_nonpayable_returns_uint",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var__address"],
                M.get (| "zero_function_external_nonpayable__returns_uint256__address" |)
              |) in
            let _ :=
              M.declare (|
                ["var_functionSelector"],
                M.get (| "zero_function_external_nonpayable_returns_uint256_functionSelector" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_198_address"],
                M.call (|
                  "address",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_199_address"],
                M.call (|
                  "convert_contract_C_to_address",
                  [
                    M.get (| "expr_198_address" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_199_functionSelector"],
                [Literal.number 0xffae15ba]
              |) in
            let _ :=
              M.declare (|
                ["var__address"],
                M.get (| "expr_199_address" |)
              |) in
            let _ :=
              M.declare (|
                ["var_functionSelector"],
                M.get (| "expr_199_functionSelector" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_0_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_uint256",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint256",
                  [
                    M.call (|
                      "shift_right_0_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_uint256",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offsett_uint256",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x11",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x11]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "increment_uint256",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "eq",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "add",
                  [
                    M.get (| "value" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_shift",
          ["value"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                M.call (|
                  "not",
                  [
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left",
                  [
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint256_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_uint256",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_uint256_to_uint256",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                M.call (|
                  "convert_uint256_to_uint256",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_shift",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.call (|
                        "prepare_store_uint256",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_0_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_0_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_h",
          [],
          ["var_address";
      "var__functionSelector"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_function_external_nonpayable_returns_uint256_address"; "zero_function_external_nonpayable__returns_uint256__functionSelector"],
                M.call (|
                  "zero_value_for_split_function_external_nonpayable_returns_uint",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_address"],
                M.get (| "zero_function_external_nonpayable_returns_uint256_address" |)
              |) in
            let _ :=
              M.declare (|
                ["var__functionSelector"],
                M.get (| "zero_function_external_nonpayable__returns_uint256__functionSelector" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    [Literal.number 0x00]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.call (|
                  "increment_uint256",
                  [
                    M.get (| "_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_uint256_to_uint256",
                [
                  [Literal.number 0x00];
                  M.get (| "_2" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_0_by_1_to_uint256",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_186_address"; "expr_186_functionSelector"],
                Literal.undefined
              |) in
            let _ :=
              M.switch (|
                M.get (| "expr_2" |),
                [
                  (
                    Some (Literal.number 0),
                    ltac:(M.monadic (
                      let _ :=
                        M.assign (|
                          ["expr_184_address"],
                          M.call (|
                            "address",
                            [

                            ]
                          |)
                        |) in
                      let _ :=
                        M.assign (|
                          ["expr_185_address"],
                          M.call (|
                            "convert_contract_C_to_address",
                            [
                              M.get (| "expr_184_address" |)
                            ]
                          |)
                        |) in
                      let _ :=
                        M.assign (|
                          ["expr_185_functionSelector"],
                          [Literal.number 0xe2179b8e]
                        |) in
                      let _ :=
                        M.declare (|
                          ["expr_186_address"],
                          M.get (| "expr_185_address" |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["expr_186_functionSelector"],
                          M.get (| "expr_185_functionSelector" |)
                        |) in
                      tt
                    ))            );
                  (
                    None,
                    ltac:(M.monadic (
                      let _ :=
                        M.assign (|
                          ["expr_182_address"],
                          M.call (|
                            "address",
                            [

                            ]
                          |)
                        |) in
                      let _ :=
                        M.assign (|
                          ["expr_183_address"],
                          M.call (|
                            "convert_contract_C_to_address",
                            [
                              M.get (| "expr_182_address" |)
                            ]
                          |)
                        |) in
                      let _ :=
                        M.assign (|
                          ["expr_183_functionSelector"],
                          [Literal.number 0x26121ff0]
                        |) in
                      let _ :=
                        M.declare (|
                          ["expr_186_address"],
                          M.get (| "expr_183_address" |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["expr_186_functionSelector"],
                          M.get (| "expr_183_functionSelector" |)
                        |) in
                      tt
                    ))            )          ]
              |) in
            let _ :=
              M.declare (|
                ["var_address"],
                M.get (| "expr_186_address" |)
              |) in
            let _ :=
              M.declare (|
                ["var__functionSelector"],
                M.get (| "expr_186_functionSelector" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_7_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_g",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x07]
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.call (|
                  "convert_rational_7_by_1_to_uint256",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_10_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_10_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "round_up_to_mul_of",
          ["value"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "and",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 31]
                      ]
                    |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 31]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "finalize_allocation",
          ["memPtr"; "size"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["newFreePtr"],
                M.call (|
                  "add",
                  [
                    M.get (| "memPtr" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "size" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "newFreePtr" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "newFreePtr" |);
                        M.get (| "memPtr" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 64];
                  M.get (| "newFreePtr" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory",
          ["size"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "memPtr" |);
                  M.get (| "size" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "mul",
                  [
                    M.get (| "length" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "add",
                  [
                    M.get (| "size" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_array_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["allocSize"],
                M.call (|
                  "array_allocation_size_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    M.get (| "allocSize" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.get (| "length" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_function_external_nonpayable_returns_function_external_nonpayable_returns_uint",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_complex_memory_array_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
          ["dataStart"; "dataSizeInBytes"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["i"],
                [Literal.number 0]
              |) in
            let _ :=
              M.for (|
                tt,
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "dataSizeInBytes" |)
                  ]
                |),
                let _ :=
                  M.declare (|
                    ["i"],
                    M.call (|
                      "add",
                      [
                        M.get (| "i" |);
                        [Literal.number 32]
                      ]
                    |)
                  |) in
                tt,
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "dataStart" |);
                          M.get (| "i" |)
                        ]
                      |);
                      M.call (|
                        "zero_value_for_function_external_nonpayable_returns_function_external_nonpayable_returns_uint",
                        [

                        ]
                      |)
                    ]
                  |) in
                tt
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_and_zero_memory_array_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_array_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["dataStart"],
                M.get (| "memPtr" |)
              |) in
            let _ :=
              M.assign (|
                ["dataSize"],
                M.call (|
                  "array_allocation_size_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["dataStart"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["dataSize"],
                M.call (|
                  "sub",
                  [
                    M.get (| "dataSize" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "zero_complex_memory_array_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
                [
                  M.get (| "dataStart" |);
                  M.get (| "dataSize" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "increment_wrapping_uint256",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x32",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x32]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "memory_array_index_access_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
          ["baseRef"; "index"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.call (|
                          "array_length_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
                          [
                            M.get (| "baseRef" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                M.call (|
                  "mul",
                  [
                    M.get (| "index" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "baseRef" |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "write_to_memory_function_external_nonpayable_returns_function_external_nonpayable_returns_uint",
          ["memPtr"; "addr"; "selector"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "combine_external_function_id",
                    [
                      M.get (| "addr" |);
                      M.get (| "selector" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple",
          ["headStart"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_forward",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["pos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "returndatacopy",
                [
                  M.get (| "pos" |);
                  [Literal.number 0];
                  M.call (|
                    "returndatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "returndatasize",
                    [

                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_contract_D_to_address",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_address",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_224",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_array_function_external_nonpayable_returns_uint256",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "mul",
                  [
                    M.get (| "length" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bytes24",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_function_external_nonpayable_returns_uint",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "cleanup_bytes24",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_function_external_nonpayable_returns_uint",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_function_external_nonpayable_returns_uint",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_function_external_nonpayable_returns_uint256_fromMemory",
          ["offset"; "end"],
          ["fun"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["fun"],
                M.call (|
                  "mload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_function_external_nonpayable_returns_uint",
                [
                  M.get (| "fun" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_available_length_array_function_external_nonpayable_returns_uint256_fromMemory",
          ["offset"; "length"; "end"],
          ["array"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["array"],
                M.call (|
                  "allocate_memory",
                  [
                    M.call (|
                      "array_allocation_size_array_function_external_nonpayable_returns_uint256",
                      [
                        M.get (| "length" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["dst"],
                M.get (| "array" |)
              |) in
            let _ :=
              M.assign (|
                ["srcEnd"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "length" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "srcEnd" |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["src"],
                M.get (| "offset" |)
              |) in
            let _ :=
              M.for (|
                tt,
                M.call (|
                  "lt",
                  [
                    M.get (| "src" |);
                    M.get (| "srcEnd" |)
                  ]
                |),
                let _ :=
                  M.declare (|
                    ["src"],
                    M.call (|
                      "add",
                      [
                        M.get (| "src" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                tt,
                let _ :=
                  M.assign (|
                    ["elementPos"],
                    M.get (| "src" |)
                  |) in
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.get (| "dst" |);
                      M.call (|
                        "abi_decode_function_external_nonpayable_returns_uint256_fromMemory",
                        [
                          M.get (| "elementPos" |);
                          M.get (| "end" |)
                        ]
                      |)
                    ]
                  |) in
                let _ :=
                  M.declare (|
                    ["dst"],
                    M.call (|
                      "add",
                      [
                        M.get (| "dst" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                tt
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_function_external_nonpayable_returns_uint256_memory_ptr_fromMemory",
          ["offset"; "end"],
          ["array"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "offset" |);
                            [Literal.number 0x1f]
                          ]
                        |);
                        M.get (| "end" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["length"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.declare (|
                ["array"],
                M.call (|
                  "abi_decode_available_length_array_function_external_nonpayable_returns_uint256_fromMemory",
                  [
                    M.get (| "offset" |);
                    M.get (| "length" |);
                    M.get (| "end" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_function_external_nonpayable_returns_uint256_fromMemory",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 96]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                [Literal.number 0]
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_array_function_external_nonpayable_returns_uint256_memory_ptr_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_function_external_nonpayable_returns_function_external_nonpayable_returns_uint",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "cleanup_bytes24",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_function_external_nonpayable_returns_function_external_nonpayable_returns_uint",
          ["addr_and_function_id"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_function_external_nonpayable_returns_function_external_nonpayable_returns_uint",
                    [
                      M.get (| "addr_and_function_id" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encodeUpdatedPos_function_external_nonpayable_returns_function_external_nonpayable_returns_uint",
          ["value0"; "pos"],
          ["updatedPos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "abi_encode_function_external_nonpayable_returns_function_external_nonpayable_returns_uint",
                [
                  M.get (| "value0" |);
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updatedPos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_nextElement_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
          ["ptr"],
          ["next"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["next"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256__dyn",
          ["value"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                M.call (|
                  "array_length_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["baseRef"],
                M.call (|
                  "array_dataslot_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                M.get (| "baseRef" |)
              |) in
            let _ :=
              M.assign (|
                ["i"],
                [Literal.number 0]
              |) in
            let _ :=
              M.for (|
                tt,
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                let _ :=
                  M.declare (|
                    ["i"],
                    M.call (|
                      "add",
                      [
                        M.get (| "i" |);
                        [Literal.number 1]
                      ]
                    |)
                  |) in
                tt,
                let _ :=
                  M.assign (|
                    ["elementValue0"],
                    M.call (|
                      "mload",
                      [
                        M.get (| "srcPtr" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["pos"],
                    M.call (|
                      "abi_encodeUpdatedPos_function_external_nonpayable_returns_function_external_nonpayable_returns_uint",
                      [
                        M.get (| "elementValue0" |);
                        M.get (| "pos" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["srcPtr"],
                    M.call (|
                      "array_nextElement_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
                      [
                        M.get (| "srcPtr" |)
                      ]
                    |)
                  |) in
                tt
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256__dyn",
                  [
                    M.get (| "value0" |);
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_function_external_nonpayable_returns_uint256",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x03]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "memory_array_index_access_function_external_nonpayable_returns_uint256",
          ["baseRef"; "index"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.call (|
                          "array_length_array_function_external_nonpayable_returns_uint256",
                          [
                            M.get (| "baseRef" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                M.call (|
                  "mul",
                  [
                    M.get (| "index" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "baseRef" |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_32_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 32];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_64_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 64];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "split_external_function_id",
          ["combined"],
          ["addr";
      "selector"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["combined"],
                M.call (|
                  "shift_right_64_unsigned",
                  [
                    M.get (| "combined" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["selector"],
                M.call (|
                  "and",
                  [
                    M.get (| "combined" |);
                    [Literal.number 0xffffffff]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "shift_right_32_unsigned",
                  [
                    M.get (| "combined" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_memoryt_function_external_nonpayable_returns_uint",
          ["ptr"],
          ["addr";
      "selector"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["value"],
                M.call (|
                  "cleanup_function_external_nonpayable_returns_uint",
                  [
                    M.call (|
                      "mload",
                      [
                        M.get (| "ptr" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"; "selector"],
                M.call (|
                  "split_external_function_id",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_uint256",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_t_uint256_fromMemory",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "mload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_uint256",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_uint256_fromMemory",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                [Literal.number 0]
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_t_uint256_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_1_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_2_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_2_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_2_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_test",
          [],
          ["var_";
      "var";
      "var_1"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_1"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_uint256_1" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_t_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_1"],
                M.get (| "zero_t_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x0a]
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.call (|
                  "convert_t_rational_by_to_t_uint256",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_83_mpos"],
                M.call (|
                  "allocate_and_zero_memory_array_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
                  [
                    M.get (| "_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["var_x_mpos"],
                M.get (| "expr_83_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["var_i"],
                M.call (|
                  "convert_rational_0_by_1_to_uint256",
                  [
                    M.get (| "expr_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.for (|
                tt,
                [Literal.number 1],
                let _ :=
                  M.assign (|
                    ["_2"],
                    M.get (| "var_i" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_3"],
                    M.call (|
                      "increment_wrapping_uint256",
                      [
                        M.get (| "_2" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["var_i"],
                    M.get (| "_3" |)
                  |) in
                tt,
                let _ :=
                  M.assign (|
                    ["_4"],
                    M.get (| "var_i" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_2"],
                    M.get (| "_4" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_14_mpos"],
                    M.get (| "var_x_mpos" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_90_mpos"],
                    M.get (| "_14_mpos" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_3"],
                    M.call (|
                      "array_length_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
                      [
                        M.get (| "expr_90_mpos" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_4"],
                    M.call (|
                      "lt",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_2" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_3" |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.get (| "expr_4" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.break (||) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_99_address"],
                    M.call (|
                      "address",
                      [

                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_100_address"],
                    M.call (|
                      "convert_contract_C_to_address",
                      [
                        M.get (| "expr_99_address" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_100_functionSelector"],
                    [Literal.number 0xb8c9d365]
                  |) in
                let _ :=
                  M.assign (|
                    ["_15_mpos"],
                    M.get (| "var_x_mpos" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_96_mpos"],
                    M.get (| "_15_mpos" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_5"],
                    M.get (| "var_i" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_5"],
                    M.get (| "_5" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_address"],
                    M.get (| "expr_100_address" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_17_functionSelector"],
                    M.get (| "expr_100_functionSelector" |)
                  |) in
                let _ :=
                  M.call (|
                    "write_to_memory_function_external_nonpayable_returns_function_external_nonpayable_returns_uint",
                    [
                      M.call (|
                        "memory_array_index_access_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
                        [
                          M.get (| "expr_96_mpos" |);
                          M.get (| "expr_5" |)
                        ]
                      |);
                      M.get (| "_address" |);
                      M.get (| "_17_functionSelector" |)
                    ]
                  |) in
                tt
              |) in
            let _ :=
              M.assign (|
                ["expr_107_address"],
                M.call (|
                  "address",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_108_address"],
                M.call (|
                  "convert_contract_C_to_address",
                  [
                    M.get (| "expr_107_address" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_functionSelector"],
                [Literal.number 0x573a6b2f]
              |) in
            let _ :=
              M.assign (|
                ["_18_mpos"],
                M.get (| "var_x_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_104_mpos"],
                M.get (| "_18_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_19_address"],
                M.get (| "expr_108_address" |)
              |) in
            let _ :=
              M.assign (|
                ["_functionSelector"],
                M.get (| "expr_functionSelector" |)
              |) in
            let _ :=
              M.call (|
                "write_to_memory_function_external_nonpayable_returns_function_external_nonpayable_returns_uint",
                [
                  M.call (|
                    "memory_array_index_access_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
                    [
                      M.get (| "expr_104_mpos" |);
                      M.call (|
                        "convert_rational_0_by_1_to_uint256",
                        [
                          M.get (| "expr_6" |)
                        ]
                      |)
                    ]
                  |);
                  M.get (| "_19_address" |);
                  M.get (| "_functionSelector" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                M.call (|
                  "add",
                  [
                    M.get (| "_6" |);
                    M.call (|
                      "datasize",
                      [
                        [Literal.string "445f3531"]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "_7" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "_7" |);
                        M.get (| "_6" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "datacopy",
                [
                  M.get (| "_6" |);
                  M.call (|
                    "dataoffset",
                    [
                      [Literal.string "445f3531"]
                    ]
                  |);
                  M.call (|
                    "datasize",
                    [
                      [Literal.string "445f3531"]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["_7"],
                M.call (|
                  "abi_encode_tuple",
                  [
                    M.get (| "_7" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_122_address"],
                M.call (|
                  "create",
                  [
                    [Literal.number 0];
                    M.get (| "_6" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_7" |);
                        M.get (| "_6" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "expr_122_address" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_forward",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_123_address"],
                M.get (| "expr_122_address" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_124_address"],
                M.call (|
                  "convert_contract_D_to_address",
                  [
                    M.get (| "expr_123_address" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_124_functionSelector"],
                [Literal.number 0x2ed7fe6a]
              |) in
            let _ :=
              M.assign (|
                ["_22_mpos"],
                M.get (| "var_x_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_125_mpos"],
                M.get (| "_22_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "_8" |);
                  M.call (|
                    "shift_left_224",
                    [
                      M.get (| "expr_124_functionSelector" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                M.call (|
                  "abi_encode_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "_8" |);
                        [Literal.number 4]
                      ]
                    |);
                    M.get (| "expr_125_mpos" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_10"],
                M.call (|
                  "call",
                  [
                    M.call (|
                      "gas",
                      [

                      ]
                    |);
                    M.get (| "expr_124_address" |);
                    [Literal.number 0];
                    M.get (| "_8" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_9" |);
                        M.get (| "_8" |)
                      ]
                    |);
                    M.get (| "_8" |);
                    [Literal.number 96]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "_10" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_forward",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_mpos"],
                Literal.undefined
              |) in
            let _ :=
              M.if_ (|
                M.get (| "_10" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_11"],
                      [Literal.number 96]
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "gt",
                        [
                          M.get (| "_11" |);
                          M.call (|
                            "returndatasize",
                            [

                            ]
                          |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["_11"],
                            M.call (|
                              "returndatasize",
                              [

                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "finalize_allocation",
                      [
                        M.get (| "_8" |);
                        M.get (| "_11" |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_mpos"],
                      M.call (|
                        "abi_decode_array_function_external_nonpayable_returns_uint256_fromMemory",
                        [
                          M.get (| "_8" |);
                          M.call (|
                            "add",
                            [
                              M.get (| "_8" |);
                              M.get (| "_11" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["var_y_mpos"],
                M.get (| "expr_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_27_mpos"],
                M.get (| "var_y_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_128_mpos"],
                M.get (| "_27_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_28_address"; "_28_functionSelector"],
                M.call (|
                  "read_from_memoryt_function_external_nonpayable_returns_uint",
                  [
                    M.call (|
                      "memory_array_index_access_function_external_nonpayable_returns_uint256",
                      [
                        M.get (| "expr_128_mpos" |);
                        M.call (|
                          "convert_rational_0_by_1_to_uint256",
                          [
                            M.get (| "expr_7" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_address"],
                M.get (| "_28_address" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_130_functionSelector"],
                M.get (| "_28_functionSelector" |)
              |) in
            let _ :=
              M.assign (|
                ["_12"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "_12" |);
                  M.call (|
                    "shift_left_224",
                    [
                      M.get (| "expr_130_functionSelector" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_13"],
                M.call (|
                  "abi_encode_tuple",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "_12" |);
                        [Literal.number 4]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_14"],
                M.call (|
                  "call",
                  [
                    M.call (|
                      "gas",
                      [

                      ]
                    |);
                    M.get (| "expr_address" |);
                    [Literal.number 0];
                    M.get (| "_12" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_13" |);
                        M.get (| "_12" |)
                      ]
                    |);
                    M.get (| "_12" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "_14" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_forward",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Literal.undefined
              |) in
            let _ :=
              M.if_ (|
                M.get (| "_14" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_15"],
                      [Literal.number 32]
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "gt",
                        [
                          M.get (| "_15" |);
                          M.call (|
                            "returndatasize",
                            [

                            ]
                          |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["_15"],
                            M.call (|
                              "returndatasize",
                              [

                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "finalize_allocation",
                      [
                        M.get (| "_12" |);
                        M.get (| "_15" |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_8"],
                      M.call (|
                        "abi_decode_uint256_fromMemory",
                        [
                          M.get (| "_12" |);
                          M.call (|
                            "add",
                            [
                              M.get (| "_12" |);
                              M.get (| "_15" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_component"],
                M.get (| "expr_8" |)
              |) in
            let _ :=
              M.assign (|
                ["_mpos"],
                M.get (| "var_y_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_132_mpos"],
                M.get (| "_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_34_address"; "_34_functionSelector"],
                M.call (|
                  "read_from_memoryt_function_external_nonpayable_returns_uint",
                  [
                    M.call (|
                      "memory_array_index_access_function_external_nonpayable_returns_uint256",
                      [
                        M.get (| "expr_132_mpos" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_9" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_134_address"],
                M.get (| "_34_address" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_134_functionSelector"],
                M.get (| "_34_functionSelector" |)
              |) in
            let _ :=
              M.assign (|
                ["_16"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "_16" |);
                  M.call (|
                    "shift_left_224",
                    [
                      M.get (| "expr_134_functionSelector" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_17"],
                M.call (|
                  "abi_encode_tuple",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "_16" |);
                        [Literal.number 4]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_18"],
                M.call (|
                  "call",
                  [
                    M.call (|
                      "gas",
                      [

                      ]
                    |);
                    M.get (| "expr_134_address" |);
                    [Literal.number 0];
                    M.get (| "_16" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_17" |);
                        M.get (| "_16" |)
                      ]
                    |);
                    M.get (| "_16" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "_18" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_forward",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Literal.undefined
              |) in
            let _ :=
              M.if_ (|
                M.get (| "_18" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_19"],
                      [Literal.number 32]
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "gt",
                        [
                          M.get (| "_19" |);
                          M.call (|
                            "returndatasize",
                            [

                            ]
                          |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["_19"],
                            M.call (|
                              "returndatasize",
                              [

                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "finalize_allocation",
                      [
                        M.get (| "_16" |);
                        M.get (| "_19" |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_10"],
                      M.call (|
                        "abi_decode_uint256_fromMemory",
                        [
                          M.get (| "_16" |);
                          M.call (|
                            "add",
                            [
                              M.get (| "_16" |);
                              M.get (| "_19" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_component_1"],
                M.get (| "expr_10" |)
              |) in
            let _ :=
              M.assign (|
                ["_39_mpos"],
                M.get (| "var_y_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_136_mpos"],
                M.get (| "_39_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_40_address"; "_40_functionSelector"],
                M.call (|
                  "read_from_memoryt_function_external_nonpayable_returns_uint",
                  [
                    M.call (|
                      "memory_array_index_access_function_external_nonpayable_returns_uint256",
                      [
                        M.get (| "expr_136_mpos" |);
                        M.call (|
                          "convert_rational_2_by_1_to_uint256",
                          [
                            M.get (| "expr_11" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_138_address"],
                M.get (| "_40_address" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_138_functionSelector"],
                M.get (| "_40_functionSelector" |)
              |) in
            let _ :=
              M.assign (|
                ["_20"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "_20" |);
                  M.call (|
                    "shift_left_224",
                    [
                      M.get (| "expr_138_functionSelector" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_21"],
                M.call (|
                  "abi_encode_tuple",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "_20" |);
                        [Literal.number 4]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_22"],
                M.call (|
                  "call",
                  [
                    M.call (|
                      "gas",
                      [

                      ]
                    |);
                    M.get (| "expr_138_address" |);
                    [Literal.number 0];
                    M.get (| "_20" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_21" |);
                        M.get (| "_20" |)
                      ]
                    |);
                    M.get (| "_20" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "_22" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_forward",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Literal.undefined
              |) in
            let _ :=
              M.if_ (|
                M.get (| "_22" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_23"],
                      [Literal.number 32]
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "gt",
                        [
                          M.get (| "_23" |);
                          M.call (|
                            "returndatasize",
                            [

                            ]
                          |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["_23"],
                            M.call (|
                              "returndatasize",
                              [

                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "finalize_allocation",
                      [
                        M.get (| "_20" |);
                        M.get (| "_23" |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_12"],
                      M.call (|
                        "abi_decode_uint256_fromMemory",
                        [
                          M.get (| "_20" |);
                          M.call (|
                            "add",
                            [
                              M.get (| "_20" |);
                              M.get (| "_23" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_component_2"],
                M.get (| "expr_12" |)
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "expr_component" |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_component_1" |)
              |) in
            let _ :=
              M.declare (|
                ["var_1"],
                M.get (| "expr_component_2" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_5_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_e",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x05]
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.call (|
                  "convert_rational_5_by_1_to_uint256",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      tt
    )).

    Module D_51.
      Definition code : M.t unit := ltac:(M.monadic (
        let _ :=
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 64];
                M.call (|
                  "memoryguard",
                  [
                    [Literal.number 0x80]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "callvalue",
                [

                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["_1"],
              M.call (|
                "allocate_unbounded",
                [

                ]
              |)
            |) in
          let _ :=
            M.call (|
              "codecopy",
              [
                M.get (| "_1" |);
                M.call (|
                  "dataoffset",
                  [
                    [Literal.string "445f35315f6465706c6f796564"]
                  ]
                |);
                M.call (|
                  "datasize",
                  [
                    [Literal.string "445f35315f6465706c6f796564"]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "return",
              [
                M.get (| "_1" |);
                M.call (|
                  "datasize",
                  [
                    [Literal.string "445f35315f6465706c6f796564"]
                  ]
                |)
              ]
            |) in
          tt in
        let _ :=
          M.function (|
            "allocate_unbounded",
            [],
            ["memPtr"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["memPtr"],
                  M.call (|
                    "mload",
                    [
                      [Literal.number 64]
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
            [],
            [],
            ltac:(M.monadic (
              let _ :=
                M.call (|
                  "revert",
                  [
                    [Literal.number 0];
                    [Literal.number 0]
                  ]
                |) in
              tt
            ))
          |) in
        tt
      )).

      Module D_51_deployed.
        Definition code : M.t unit := ltac:(M.monadic (
          let _ :=
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 64];
                  M.call (|
                    "memoryguard",
                    [
                      [Literal.number 0x80]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.call (|
                          "calldatasize",
                          [

                          ]
                        |);
                        [Literal.number 4]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["selector"],
                      M.call (|
                        "shift_right_unsigned",
                        [
                          M.call (|
                            "calldataload",
                            [
                              [Literal.number 0]
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.switch (|
                      M.get (| "selector" |),
                      [
                        (
                          Some (Literal.number 0x2ed7fe6a),
                          ltac:(M.monadic (
                            let _ :=
                              M.call (|
                                "external_fun_f",
                                [

                                ]
                              |) in
                            tt
                          ))              );
                        (
                          None,
                          ltac:(M.monadic (
                            tt
                          ))              )            ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
                [

                ]
              |) in
            tt in
          let _ :=
            M.function (|
              "shift_right_unsigned",
              ["value"],
              ["newValue"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["newValue"],
                    M.call (|
                      "shr",
                      [
                        [Literal.number 224];
                        M.get (| "value" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "allocate_unbounded",
              [],
              ["memPtr"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["memPtr"],
                    M.call (|
                      "mload",
                      [
                        [Literal.number 64]
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
              [],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "revert",
                    [
                      [Literal.number 0];
                      [Literal.number 0]
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
              [],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "revert",
                    [
                      [Literal.number 0];
                      [Literal.number 0]
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
              [],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "revert",
                    [
                      [Literal.number 0];
                      [Literal.number 0]
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
              [],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "revert",
                    [
                      [Literal.number 0];
                      [Literal.number 0]
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "round_up_to_mul_of",
              ["value"],
              ["result"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["result"],
                    M.call (|
                      "and",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "value" |);
                            [Literal.number 31]
                          ]
                        |);
                        M.call (|
                          "not",
                          [
                            [Literal.number 31]
                          ]
                        |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "panic_error_0x41",
              [],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      [Literal.number 0];
                      M.call (|
                        "shl",
                        [
                          [Literal.number 224];
                          [Literal.number 0x4e487b71]
                        ]
                      |)
                    ]
                  |) in
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      [Literal.number 4];
                      [Literal.number 0x41]
                    ]
                  |) in
                let _ :=
                  M.call (|
                    "revert",
                    [
                      [Literal.number 0];
                      [Literal.number 0x24]
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "finalize_allocation",
              ["memPtr"; "size"],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["newFreePtr"],
                    M.call (|
                      "add",
                      [
                        M.get (| "memPtr" |);
                        M.call (|
                          "round_up_to_mul_of",
                          [
                            M.get (| "size" |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "or",
                      [
                        M.call (|
                          "gt",
                          [
                            M.get (| "newFreePtr" |);
                            [Literal.number 0xffffffffffffffff]
                          ]
                        |);
                        M.call (|
                          "lt",
                          [
                            M.get (| "newFreePtr" |);
                            M.get (| "memPtr" |)
                          ]
                        |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "panic_error_0x41",
                          [

                          ]
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      [Literal.number 64];
                      M.get (| "newFreePtr" |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "allocate_memory",
              ["size"],
              ["memPtr"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["memPtr"],
                    M.call (|
                      "allocate_unbounded",
                      [

                      ]
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "finalize_allocation",
                    [
                      M.get (| "memPtr" |);
                      M.get (| "size" |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "array_allocation_size_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
              ["length"],
              ["size"],
              ltac:(M.monadic (
                let _ :=
                  M.if_ (|
                    M.call (|
                      "gt",
                      [
                        M.get (| "length" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "panic_error_0x41",
                          [

                          ]
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.declare (|
                    ["size"],
                    M.call (|
                      "mul",
                      [
                        M.get (| "length" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["size"],
                    M.call (|
                      "add",
                      [
                        M.get (| "size" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
              [],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "revert",
                    [
                      [Literal.number 0];
                      [Literal.number 0]
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "cleanup_bytes24",
              ["value"],
              ["cleaned"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["cleaned"],
                    M.call (|
                      "and",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "not",
                          [
                            [Literal.number 0xffffffffffffffff]
                          ]
                        |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "cleanup_function_external_nonpayable_returns_function_external_nonpayable_returns_uint",
              ["value"],
              ["cleaned"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["cleaned"],
                    M.call (|
                      "cleanup_bytes24",
                      [
                        M.get (| "value" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "validator_revert_function_external_nonpayable_returns_function_external_nonpayable_returns_uint",
              ["value"],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.call (|
                          "eq",
                          [
                            M.get (| "value" |);
                            M.call (|
                              "cleanup_function_external_nonpayable_returns_function_external_nonpayable_returns_uint",
                              [
                                M.get (| "value" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "revert",
                          [
                            [Literal.number 0];
                            [Literal.number 0]
                          ]
                        |) in
                      tt
                    ))
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "abi_decode_function_external_nonpayable_returns_function_external_nonpayable_returns_uint",
              ["offset"; "end"],
              ["fun"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["fun"],
                    M.call (|
                      "calldataload",
                      [
                        M.get (| "offset" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "validator_revert_function_external_nonpayable_returns_function_external_nonpayable_returns_uint",
                    [
                      M.get (| "fun" |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "abi_decode_available_length_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
              ["offset"; "length"; "end"],
              ["array"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["array"],
                    M.call (|
                      "allocate_memory",
                      [
                        M.call (|
                          "array_allocation_size_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
                          [
                            M.get (| "length" |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["dst"],
                    M.get (| "array" |)
                  |) in
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.get (| "array" |);
                      M.get (| "length" |)
                    ]
                  |) in
                let _ :=
                  M.declare (|
                    ["dst"],
                    M.call (|
                      "add",
                      [
                        M.get (| "array" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["srcEnd"],
                    M.call (|
                      "add",
                      [
                        M.get (| "offset" |);
                        M.call (|
                          "mul",
                          [
                            M.get (| "length" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "gt",
                      [
                        M.get (| "srcEnd" |);
                        M.get (| "end" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                          [

                          ]
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["src"],
                    M.get (| "offset" |)
                  |) in
                let _ :=
                  M.for (|
                    tt,
                    M.call (|
                      "lt",
                      [
                        M.get (| "src" |);
                        M.get (| "srcEnd" |)
                      ]
                    |),
                    let _ :=
                      M.declare (|
                        ["src"],
                        M.call (|
                          "add",
                          [
                            M.get (| "src" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    tt,
                    let _ :=
                      M.assign (|
                        ["elementPos"],
                        M.get (| "src" |)
                      |) in
                    let _ :=
                      M.call (|
                        "mstore",
                        [
                          M.get (| "dst" |);
                          M.call (|
                            "abi_decode_function_external_nonpayable_returns_function_external_nonpayable_returns_uint",
                            [
                              M.get (| "elementPos" |);
                              M.get (| "end" |)
                            ]
                          |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["dst"],
                        M.call (|
                          "add",
                          [
                            M.get (| "dst" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    tt
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "abi_decode_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
              ["offset"; "end"],
              ["array"],
              ltac:(M.monadic (
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.call (|
                          "slt",
                          [
                            M.call (|
                              "add",
                              [
                                M.get (| "offset" |);
                                [Literal.number 0x1f]
                              ]
                            |);
                            M.get (| "end" |)
                          ]
                        |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                          [

                          ]
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["length"],
                    M.call (|
                      "calldataload",
                      [
                        M.get (| "offset" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["array"],
                    M.call (|
                      "abi_decode_available_length_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "offset" |);
                            [Literal.number 0x20]
                          ]
                        |);
                        M.get (| "length" |);
                        M.get (| "end" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "abi_decode_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn_memory_ptr",
              ["headStart"; "dataEnd"],
              ["value0"],
              ltac:(M.monadic (
                let _ :=
                  M.if_ (|
                    M.call (|
                      "slt",
                      [
                        M.call (|
                          "sub",
                          [
                            M.get (| "dataEnd" |);
                            M.get (| "headStart" |)
                          ]
                        |);
                        [Literal.number 32]
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                          [

                          ]
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["offset"],
                    M.call (|
                      "calldataload",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "headStart" |);
                            [Literal.number 0]
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "gt",
                      [
                        M.get (| "offset" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                          [

                          ]
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.declare (|
                    ["value0"],
                    M.call (|
                      "abi_decode_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "headStart" |);
                            M.get (| "offset" |)
                          ]
                        |);
                        M.get (| "dataEnd" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "array_length_array_function_external_nonpayable_returns_uint256",
              ["value"],
              ["length"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["length"],
                    [Literal.number 0x03]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "array_storeLengthForEncoding_array_function_external_nonpayable_returns_uint256",
              ["pos"; "length"],
              ["updated_pos"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["updated_pos"],
                    M.get (| "pos" |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "array_dataslot_array_function_external_nonpayable_returns_uint256",
              ["ptr"],
              ["data"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["data"],
                    M.get (| "ptr" |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "cleanup_function_external_nonpayable_returns_uint",
              ["value"],
              ["cleaned"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["cleaned"],
                    M.call (|
                      "cleanup_bytes24",
                      [
                        M.get (| "value" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "abi_encode_function_external_nonpayable_returns_uint256",
              ["addr_and_function_id"; "pos"],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.get (| "pos" |);
                      M.call (|
                        "cleanup_function_external_nonpayable_returns_uint",
                        [
                          M.get (| "addr_and_function_id" |)
                        ]
                      |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "abi_encodeUpdatedPos_function_external_nonpayable_returns_uint256",
              ["value0"; "pos"],
              ["updatedPos"],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "abi_encode_function_external_nonpayable_returns_uint256",
                    [
                      M.get (| "value0" |);
                      M.get (| "pos" |)
                    ]
                  |) in
                let _ :=
                  M.declare (|
                    ["updatedPos"],
                    M.call (|
                      "add",
                      [
                        M.get (| "pos" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "array_nextElement_array_function_external_nonpayable_returns_uint256",
              ["ptr"],
              ["next"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["next"],
                    M.call (|
                      "add",
                      [
                        M.get (| "ptr" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "abi_encode_array_function_external_nonpayable_returns_uint256",
              ["value"; "pos"],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["length"],
                    M.call (|
                      "array_length_array_function_external_nonpayable_returns_uint256",
                      [
                        M.get (| "value" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["pos"],
                    M.call (|
                      "array_storeLengthForEncoding_array_function_external_nonpayable_returns_uint256",
                      [
                        M.get (| "pos" |);
                        M.get (| "length" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["baseRef"],
                    M.call (|
                      "array_dataslot_array_function_external_nonpayable_returns_uint256",
                      [
                        M.get (| "value" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["srcPtr"],
                    M.get (| "baseRef" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["i"],
                    [Literal.number 0]
                  |) in
                let _ :=
                  M.for (|
                    tt,
                    M.call (|
                      "lt",
                      [
                        M.get (| "i" |);
                        M.get (| "length" |)
                      ]
                    |),
                    let _ :=
                      M.declare (|
                        ["i"],
                        M.call (|
                          "add",
                          [
                            M.get (| "i" |);
                            [Literal.number 1]
                          ]
                        |)
                      |) in
                    tt,
                    let _ :=
                      M.assign (|
                        ["elementValue0"],
                        M.call (|
                          "mload",
                          [
                            M.get (| "srcPtr" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "abi_encodeUpdatedPos_function_external_nonpayable_returns_uint256",
                          [
                            M.get (| "elementValue0" |);
                            M.get (| "pos" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.declare (|
                        ["srcPtr"],
                        M.call (|
                          "array_nextElement_array_function_external_nonpayable_returns_uint256",
                          [
                            M.get (| "srcPtr" |)
                          ]
                        |)
                      |) in
                    tt
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "abi_encode_array_function_external_nonpayable_returns_uint256_memory_ptr",
              ["headStart"; "value0"],
              ["tail"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["tail"],
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 96]
                      ]
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "abi_encode_array_function_external_nonpayable_returns_uint256",
                    [
                      M.get (| "value0" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "headStart" |);
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "external_fun_f",
              [],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.if_ (|
                    M.call (|
                      "callvalue",
                      [

                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                          [

                          ]
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["param"],
                    M.call (|
                      "abi_decode_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn_memory_ptr",
                      [
                        [Literal.number 4];
                        M.call (|
                          "calldatasize",
                          [

                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["ret"],
                    M.call (|
                      "fun_f",
                      [
                        M.get (| "param" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["memPos"],
                    M.call (|
                      "allocate_unbounded",
                      [

                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["memEnd"],
                    M.call (|
                      "abi_encode_array_function_external_nonpayable_returns_uint256_memory_ptr",
                      [
                        M.get (| "memPos" |);
                        M.get (| "ret" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "return",
                    [
                      M.get (| "memPos" |);
                      M.call (|
                        "sub",
                        [
                          M.get (| "memEnd" |);
                          M.get (| "memPos" |)
                        ]
                      |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
              [],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "revert",
                    [
                      [Literal.number 0];
                      [Literal.number 0]
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "array_allocation_size_array_function_external_nonpayable_returns_uint256",
              ["length"],
              ["size"],
              ltac:(M.monadic (
                let _ :=
                  M.if_ (|
                    M.call (|
                      "gt",
                      [
                        M.get (| "length" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "panic_error_0x41",
                          [

                          ]
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.declare (|
                    ["size"],
                    M.call (|
                      "mul",
                      [
                        M.get (| "length" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "allocate_memory_array_array_function_external_nonpayable_returns_uint256",
              ["length"],
              ["memPtr"],
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["allocSize"],
                    M.call (|
                      "array_allocation_size_array_function_external_nonpayable_returns_uint256",
                      [
                        M.get (| "length" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["memPtr"],
                    M.call (|
                      "allocate_memory",
                      [
                        M.get (| "allocSize" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "zero_value_for_function_external_nonpayable_returns_uint",
              [],
              ["ret"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["ret"],
                    [Literal.number 0]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "zero_complex_memory_array_array_function_external_nonpayable_returns_uint256",
              ["dataStart"; "dataSizeInBytes"],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["i"],
                    [Literal.number 0]
                  |) in
                let _ :=
                  M.for (|
                    tt,
                    M.call (|
                      "lt",
                      [
                        M.get (| "i" |);
                        M.get (| "dataSizeInBytes" |)
                      ]
                    |),
                    let _ :=
                      M.declare (|
                        ["i"],
                        M.call (|
                          "add",
                          [
                            M.get (| "i" |);
                            [Literal.number 32]
                          ]
                        |)
                      |) in
                    tt,
                    let _ :=
                      M.call (|
                        "mstore",
                        [
                          M.call (|
                            "add",
                            [
                              M.get (| "dataStart" |);
                              M.get (| "i" |)
                            ]
                          |);
                          M.call (|
                            "zero_value_for_function_external_nonpayable_returns_uint",
                            [

                            ]
                          |)
                        ]
                      |) in
                    tt
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "allocate_and_zero_memory_array_array_function_external_nonpayable_returns_uint256",
              ["length"],
              ["memPtr"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["memPtr"],
                    M.call (|
                      "allocate_memory_array_array_function_external_nonpayable_returns_uint256",
                      [
                        M.get (| "length" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["dataStart"],
                    M.get (| "memPtr" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["dataSize"],
                    M.call (|
                      "array_allocation_size_array_function_external_nonpayable_returns_uint256",
                      [
                        M.get (| "length" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "zero_complex_memory_array_array_function_external_nonpayable_returns_uint256",
                    [
                      M.get (| "dataStart" |);
                      M.get (| "dataSize" |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "zero_value_for_split_array_function_external_nonpayable_returns_uint256",
              [],
              ["ret"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["ret"],
                    M.call (|
                      "allocate_and_zero_memory_array_array_function_external_nonpayable_returns_uint256",
                      [
                        [Literal.number 3]
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "panic_error_0x32",
              [],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      [Literal.number 0];
                      M.call (|
                        "shl",
                        [
                          [Literal.number 224];
                          [Literal.number 0x4e487b71]
                        ]
                      |)
                    ]
                  |) in
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      [Literal.number 4];
                      [Literal.number 0x32]
                    ]
                  |) in
                let _ :=
                  M.call (|
                    "revert",
                    [
                      [Literal.number 0];
                      [Literal.number 0x24]
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "array_length_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
              ["value"],
              ["length"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["length"],
                    M.call (|
                      "mload",
                      [
                        M.get (| "value" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "memory_array_index_access_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
              ["baseRef"; "index"],
              ["addr"],
              ltac:(M.monadic (
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.call (|
                          "lt",
                          [
                            M.get (| "index" |);
                            M.call (|
                              "array_length_array_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
                              [
                                M.get (| "baseRef" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "panic_error_0x32",
                          [

                          ]
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["offset"],
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 32]
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["offset"],
                    M.call (|
                      "add",
                      [
                        M.get (| "offset" |);
                        [Literal.number 32]
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["addr"],
                    M.call (|
                      "add",
                      [
                        M.get (| "baseRef" |);
                        M.get (| "offset" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "cleanup_t_rational_by",
              ["value"],
              ["cleaned"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["cleaned"],
                    M.get (| "value" |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "cleanup_uint256",
              ["value"],
              ["cleaned"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["cleaned"],
                    M.get (| "value" |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "identity",
              ["value"],
              ["ret"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["ret"],
                    M.get (| "value" |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "convert_t_rational_by_to_t_uint256",
              ["value"],
              ["converted"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["converted"],
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.call (|
                          "identity",
                          [
                            M.call (|
                              "cleanup_t_rational_by",
                              [
                                M.get (| "value" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "shift_right_32_unsigned",
              ["value"],
              ["newValue"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["newValue"],
                    M.call (|
                      "shr",
                      [
                        [Literal.number 32];
                        M.get (| "value" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "shift_right_64_unsigned",
              ["value"],
              ["newValue"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["newValue"],
                    M.call (|
                      "shr",
                      [
                        [Literal.number 64];
                        M.get (| "value" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "split_external_function_id",
              ["combined"],
              ["addr";
          "selector"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["combined"],
                    M.call (|
                      "shift_right_64_unsigned",
                      [
                        M.get (| "combined" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["selector"],
                    M.call (|
                      "and",
                      [
                        M.get (| "combined" |);
                        [Literal.number 0xffffffff]
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["addr"],
                    M.call (|
                      "shift_right_32_unsigned",
                      [
                        M.get (| "combined" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "read_from_memoryt_function_external_nonpayable_returns_function_external_nonpayable_returns_uint",
              ["ptr"],
              ["addr";
          "selector"],
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["value"],
                    M.call (|
                      "cleanup_function_external_nonpayable_returns_function_external_nonpayable_returns_uint",
                      [
                        M.call (|
                          "mload",
                          [
                            M.get (| "ptr" |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["addr"; "selector"],
                    M.call (|
                      "split_external_function_id",
                      [
                        M.get (| "value" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "shift_left_224",
              ["value"],
              ["newValue"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["newValue"],
                    M.call (|
                      "shl",
                      [
                        [Literal.number 224];
                        M.get (| "value" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "validator_revert_function_external_nonpayable_returns_uint",
              ["value"],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.call (|
                          "eq",
                          [
                            M.get (| "value" |);
                            M.call (|
                              "cleanup_function_external_nonpayable_returns_uint",
                              [
                                M.get (| "value" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "revert",
                          [
                            [Literal.number 0];
                            [Literal.number 0]
                          ]
                        |) in
                      tt
                    ))
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "abi_decode_function_external_nonpayable_returns_uint256_fromMemory",
              ["offset"; "end"],
              ["fun"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["fun"],
                    M.call (|
                      "mload",
                      [
                        M.get (| "offset" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "validator_revert_function_external_nonpayable_returns_uint",
                    [
                      M.get (| "fun" |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "abi_decode_function_external_nonpayable_returns_uint256_fromMemory_onStack",
              ["offset"; "end"],
              ["addr";
          "function_selector"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["addr"; "function_selector"],
                    M.call (|
                      "split_external_function_id",
                      [
                        M.call (|
                          "abi_decode_function_external_nonpayable_returns_uint256_fromMemory",
                          [
                            M.get (| "offset" |);
                            M.get (| "end" |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "abi_decode_tuple_function_external_nonpayable_returns_uint256_fromMemory",
              ["headStart"; "dataEnd"],
              ["value0";
          "value1"],
              ltac:(M.monadic (
                let _ :=
                  M.if_ (|
                    M.call (|
                      "slt",
                      [
                        M.call (|
                          "sub",
                          [
                            M.get (| "dataEnd" |);
                            M.get (| "headStart" |)
                          ]
                        |);
                        [Literal.number 32]
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                          [

                          ]
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["offset"],
                    [Literal.number 0]
                  |) in
                let _ :=
                  M.declare (|
                    ["value0"; "value1"],
                    M.call (|
                      "abi_decode_function_external_nonpayable_returns_uint256_fromMemory_onStack",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "headStart" |);
                            M.get (| "offset" |)
                          ]
                        |);
                        M.get (| "dataEnd" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "abi_encode_tuple",
              ["headStart"],
              ["tail"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["tail"],
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 0]
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "revert_forward",
              [],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["pos"],
                    M.call (|
                      "allocate_unbounded",
                      [

                      ]
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "returndatacopy",
                    [
                      M.get (| "pos" |);
                      [Literal.number 0];
                      M.call (|
                        "returndatasize",
                        [

                        ]
                      |)
                    ]
                  |) in
                let _ :=
                  M.call (|
                    "revert",
                    [
                      M.get (| "pos" |);
                      M.call (|
                        "returndatasize",
                        [

                        ]
                      |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "memory_array_index_access_function_external_nonpayable_returns_uint256",
              ["baseRef"; "index"],
              ["addr"],
              ltac:(M.monadic (
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.call (|
                          "lt",
                          [
                            M.get (| "index" |);
                            M.call (|
                              "array_length_array_function_external_nonpayable_returns_uint256",
                              [
                                M.get (| "baseRef" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "panic_error_0x32",
                          [

                          ]
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["offset"],
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 32]
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["addr"],
                    M.call (|
                      "add",
                      [
                        M.get (| "baseRef" |);
                        M.get (| "offset" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "shift_left_32",
              ["value"],
              ["newValue"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["newValue"],
                    M.call (|
                      "shl",
                      [
                        [Literal.number 32];
                        M.get (| "value" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "shift_left",
              ["value"],
              ["newValue"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["newValue"],
                    M.call (|
                      "shl",
                      [
                        [Literal.number 64];
                        M.get (| "value" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "combine_external_function_id",
              ["addr"; "selector"],
              ["combined"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["combined"],
                    M.call (|
                      "shift_left",
                      [
                        M.call (|
                          "or",
                          [
                            M.call (|
                              "shift_left_32",
                              [
                                M.get (| "addr" |)
                              ]
                            |);
                            M.call (|
                              "and",
                              [
                                M.get (| "selector" |);
                                [Literal.number 0xffffffff]
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "write_to_memory_function_external_nonpayable_returns_uint",
              ["memPtr"; "addr"; "selector"],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.get (| "memPtr" |);
                      M.call (|
                        "combine_external_function_id",
                        [
                          M.get (| "addr" |);
                          M.get (| "selector" |)
                        ]
                      |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "cleanup_rational_by",
              ["value"],
              ["cleaned"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["cleaned"],
                    M.get (| "value" |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "convert_rational_by_to_uint256",
              ["value"],
              ["converted"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["converted"],
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.call (|
                          "identity",
                          [
                            M.call (|
                              "cleanup_rational_by",
                              [
                                M.get (| "value" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "cleanup_rational_by_1",
              ["value"],
              ["cleaned"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["cleaned"],
                    M.get (| "value" |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "convert_rational_2_by_1_to_uint256",
              ["value"],
              ["converted"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["converted"],
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.call (|
                          "identity",
                          [
                            M.call (|
                              "cleanup_rational_by_1",
                              [
                                M.get (| "value" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "fun_f",
              ["var_x_mpos"],
              ["var_r_mpos"],
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["zero_array_function_external_nonpayable_returns_uint256_mpos"],
                    M.call (|
                      "zero_value_for_split_array_function_external_nonpayable_returns_uint256",
                      [

                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["var_r_mpos"],
                    M.get (| "zero_array_function_external_nonpayable_returns_uint256_mpos" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_2_mpos"],
                    M.get (| "var_x_mpos" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_25_mpos"],
                    M.get (| "_2_mpos" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr"],
                    [Literal.number 0x00]
                  |) in
                let _ :=
                  M.assign (|
                    ["_3_address"; "_3_functionSelector"],
                    M.call (|
                      "read_from_memoryt_function_external_nonpayable_returns_function_external_nonpayable_returns_uint",
                      [
                        M.call (|
                          "memory_array_index_access_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
                          [
                            M.get (| "expr_25_mpos" |);
                            M.call (|
                              "convert_t_rational_by_to_t_uint256",
                              [
                                M.get (| "expr" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_27_address"],
                    M.get (| "_3_address" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_27_functionSelector"],
                    M.get (| "_3_functionSelector" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_1"],
                    M.call (|
                      "allocate_unbounded",
                      [

                      ]
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.get (| "_1" |);
                      M.call (|
                        "shift_left_224",
                        [
                          M.get (| "expr_27_functionSelector" |)
                        ]
                      |)
                    ]
                  |) in
                let _ :=
                  M.assign (|
                    ["_2"],
                    M.call (|
                      "abi_encode_tuple",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "_1" |);
                            [Literal.number 4]
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_3"],
                    M.call (|
                      "call",
                      [
                        M.call (|
                          "gas",
                          [

                          ]
                        |);
                        M.get (| "expr_27_address" |);
                        [Literal.number 0];
                        M.get (| "_1" |);
                        M.call (|
                          "sub",
                          [
                            M.get (| "_2" |);
                            M.get (| "_1" |)
                          ]
                        |);
                        M.get (| "_1" |);
                        [Literal.number 32]
                      ]
                    |)
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.get (| "_3" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "revert_forward",
                          [

                          ]
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_28_address"; "expr_functionSelector"],
                    Literal.undefined
                  |) in
                let _ :=
                  M.if_ (|
                    M.get (| "_3" |),
                    ltac:(M.monadic (
                      let _ :=
                        M.assign (|
                          ["_4"],
                          [Literal.number 32]
                        |) in
                      let _ :=
                        M.if_ (|
                          M.call (|
                            "gt",
                            [
                              M.get (| "_4" |);
                              M.call (|
                                "returndatasize",
                                [

                                ]
                              |)
                            ]
                          |),
                          ltac:(M.monadic (
                            let _ :=
                              M.declare (|
                                ["_4"],
                                M.call (|
                                  "returndatasize",
                                  [

                                  ]
                                |)
                              |) in
                            tt
                          ))
                        |) in
                      let _ :=
                        M.call (|
                          "finalize_allocation",
                          [
                            M.get (| "_1" |);
                            M.get (| "_4" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["expr_28_address"; "expr_functionSelector"],
                          M.call (|
                            "abi_decode_tuple_function_external_nonpayable_returns_uint256_fromMemory",
                            [
                              M.get (| "_1" |);
                              M.call (|
                                "add",
                                [
                                  M.get (| "_1" |);
                                  M.get (| "_4" |)
                                ]
                              |)
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["_8_mpos"],
                    M.get (| "var_r_mpos" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_22_mpos"],
                    M.get (| "_8_mpos" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_1"],
                    [Literal.number 0x00]
                  |) in
                let _ :=
                  M.assign (|
                    ["_9_address"],
                    M.get (| "expr_28_address" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_9_functionSelector"],
                    M.get (| "expr_functionSelector" |)
                  |) in
                let _ :=
                  M.call (|
                    "write_to_memory_function_external_nonpayable_returns_uint",
                    [
                      M.call (|
                        "memory_array_index_access_function_external_nonpayable_returns_uint256",
                        [
                          M.get (| "expr_22_mpos" |);
                          M.call (|
                            "convert_t_rational_by_to_t_uint256",
                            [
                              M.get (| "expr_1" |)
                            ]
                          |)
                        ]
                      |);
                      M.get (| "_9_address" |);
                      M.get (| "_9_functionSelector" |)
                    ]
                  |) in
                let _ :=
                  M.assign (|
                    ["_10_mpos"],
                    M.get (| "var_x_mpos" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_34_mpos"],
                    M.get (| "_10_mpos" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_2"],
                    [Literal.number 0x01]
                  |) in
                let _ :=
                  M.assign (|
                    ["_11_address"; "_functionSelector"],
                    M.call (|
                      "read_from_memoryt_function_external_nonpayable_returns_function_external_nonpayable_returns_uint",
                      [
                        M.call (|
                          "memory_array_index_access_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
                          [
                            M.get (| "expr_34_mpos" |);
                            M.call (|
                              "convert_rational_by_to_uint256",
                              [
                                M.get (| "expr_2" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_36_address"],
                    M.get (| "_11_address" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_36_functionSelector"],
                    M.get (| "_functionSelector" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_5"],
                    M.call (|
                      "allocate_unbounded",
                      [

                      ]
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.get (| "_5" |);
                      M.call (|
                        "shift_left_224",
                        [
                          M.get (| "expr_36_functionSelector" |)
                        ]
                      |)
                    ]
                  |) in
                let _ :=
                  M.assign (|
                    ["_6"],
                    M.call (|
                      "abi_encode_tuple",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "_5" |);
                            [Literal.number 4]
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_7"],
                    M.call (|
                      "call",
                      [
                        M.call (|
                          "gas",
                          [

                          ]
                        |);
                        M.get (| "expr_36_address" |);
                        [Literal.number 0];
                        M.get (| "_5" |);
                        M.call (|
                          "sub",
                          [
                            M.get (| "_6" |);
                            M.get (| "_5" |)
                          ]
                        |);
                        M.get (| "_5" |);
                        [Literal.number 32]
                      ]
                    |)
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.get (| "_7" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "revert_forward",
                          [

                          ]
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_37_address"; "expr_37_functionSelector"],
                    Literal.undefined
                  |) in
                let _ :=
                  M.if_ (|
                    M.get (| "_7" |),
                    ltac:(M.monadic (
                      let _ :=
                        M.assign (|
                          ["_8"],
                          [Literal.number 32]
                        |) in
                      let _ :=
                        M.if_ (|
                          M.call (|
                            "gt",
                            [
                              M.get (| "_8" |);
                              M.call (|
                                "returndatasize",
                                [

                                ]
                              |)
                            ]
                          |),
                          ltac:(M.monadic (
                            let _ :=
                              M.declare (|
                                ["_8"],
                                M.call (|
                                  "returndatasize",
                                  [

                                  ]
                                |)
                              |) in
                            tt
                          ))
                        |) in
                      let _ :=
                        M.call (|
                          "finalize_allocation",
                          [
                            M.get (| "_5" |);
                            M.get (| "_8" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["expr_37_address"; "expr_37_functionSelector"],
                          M.call (|
                            "abi_decode_tuple_function_external_nonpayable_returns_uint256_fromMemory",
                            [
                              M.get (| "_5" |);
                              M.call (|
                                "add",
                                [
                                  M.get (| "_5" |);
                                  M.get (| "_8" |)
                                ]
                              |)
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["_mpos"],
                    M.get (| "var_r_mpos" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_31_mpos"],
                    M.get (| "_mpos" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_3"],
                    [Literal.number 0x01]
                  |) in
                let _ :=
                  M.assign (|
                    ["_17_address"],
                    M.get (| "expr_37_address" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_17_functionSelector"],
                    M.get (| "expr_37_functionSelector" |)
                  |) in
                let _ :=
                  M.call (|
                    "write_to_memory_function_external_nonpayable_returns_uint",
                    [
                      M.call (|
                        "memory_array_index_access_function_external_nonpayable_returns_uint256",
                        [
                          M.get (| "expr_31_mpos" |);
                          M.call (|
                            "convert_rational_by_to_uint256",
                            [
                              M.get (| "expr_3" |)
                            ]
                          |)
                        ]
                      |);
                      M.get (| "_17_address" |);
                      M.get (| "_17_functionSelector" |)
                    ]
                  |) in
                let _ :=
                  M.assign (|
                    ["_18_mpos"],
                    M.get (| "var_x_mpos" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_mpos"],
                    M.get (| "_18_mpos" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_4"],
                    [Literal.number 0x02]
                  |) in
                let _ :=
                  M.assign (|
                    ["_19_address"; "_19_functionSelector"],
                    M.call (|
                      "read_from_memoryt_function_external_nonpayable_returns_function_external_nonpayable_returns_uint",
                      [
                        M.call (|
                          "memory_array_index_access_function_external_nonpayable_returns_function_external_nonpayable_returns_uint256_dyn",
                          [
                            M.get (| "expr_mpos" |);
                            M.call (|
                              "convert_rational_2_by_1_to_uint256",
                              [
                                M.get (| "expr_4" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_45_address"],
                    M.get (| "_19_address" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_45_functionSelector"],
                    M.get (| "_19_functionSelector" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_9"],
                    M.call (|
                      "allocate_unbounded",
                      [

                      ]
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.get (| "_9" |);
                      M.call (|
                        "shift_left_224",
                        [
                          M.get (| "expr_45_functionSelector" |)
                        ]
                      |)
                    ]
                  |) in
                let _ :=
                  M.assign (|
                    ["_10"],
                    M.call (|
                      "abi_encode_tuple",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "_9" |);
                            [Literal.number 4]
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_11"],
                    M.call (|
                      "call",
                      [
                        M.call (|
                          "gas",
                          [

                          ]
                        |);
                        M.get (| "expr_45_address" |);
                        [Literal.number 0];
                        M.get (| "_9" |);
                        M.call (|
                          "sub",
                          [
                            M.get (| "_10" |);
                            M.get (| "_9" |)
                          ]
                        |);
                        M.get (| "_9" |);
                        [Literal.number 32]
                      ]
                    |)
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.get (| "_11" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "revert_forward",
                          [

                          ]
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_address"; "expr_46_functionSelector"],
                    Literal.undefined
                  |) in
                let _ :=
                  M.if_ (|
                    M.get (| "_11" |),
                    ltac:(M.monadic (
                      let _ :=
                        M.assign (|
                          ["_12"],
                          [Literal.number 32]
                        |) in
                      let _ :=
                        M.if_ (|
                          M.call (|
                            "gt",
                            [
                              M.get (| "_12" |);
                              M.call (|
                                "returndatasize",
                                [

                                ]
                              |)
                            ]
                          |),
                          ltac:(M.monadic (
                            let _ :=
                              M.declare (|
                                ["_12"],
                                M.call (|
                                  "returndatasize",
                                  [

                                  ]
                                |)
                              |) in
                            tt
                          ))
                        |) in
                      let _ :=
                        M.call (|
                          "finalize_allocation",
                          [
                            M.get (| "_9" |);
                            M.get (| "_12" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["expr_address"; "expr_46_functionSelector"],
                          M.call (|
                            "abi_decode_tuple_function_external_nonpayable_returns_uint256_fromMemory",
                            [
                              M.get (| "_9" |);
                              M.call (|
                                "add",
                                [
                                  M.get (| "_9" |);
                                  M.get (| "_12" |)
                                ]
                              |)
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["_24_mpos"],
                    M.get (| "var_r_mpos" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_40_mpos"],
                    M.get (| "_24_mpos" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_5"],
                    [Literal.number 0x02]
                  |) in
                let _ :=
                  M.assign (|
                    ["_address"],
                    M.get (| "expr_address" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_25_functionSelector"],
                    M.get (| "expr_46_functionSelector" |)
                  |) in
                let _ :=
                  M.call (|
                    "write_to_memory_function_external_nonpayable_returns_uint",
                    [
                      M.call (|
                        "memory_array_index_access_function_external_nonpayable_returns_uint256",
                        [
                          M.get (| "expr_40_mpos" |);
                          M.call (|
                            "convert_rational_2_by_1_to_uint256",
                            [
                              M.get (| "expr_5" |)
                            ]
                          |)
                        ]
                      |);
                      M.get (| "_address" |);
                      M.get (| "_25_functionSelector" |)
                    ]
                  |) in
                tt
              ))
            |) in
          tt
        )).

        Definition data : string :=
          "a26469706673582212208c25ef85a4e256fbc04d3bd18420e338ec85987a1b84f14ec1f2a6f78fe0d89d64736f6c634300081b0033".
      End D_51_deployed.
    End D_51.

    Definition data : string :=
      "a26469706673582212209b759f1ba4f870c3b45d6e494fa58892a6e30e3e9b393ce20761835cf3c517e664736f6c634300081b0033".
  End C_203_deployed.
End C_203.
