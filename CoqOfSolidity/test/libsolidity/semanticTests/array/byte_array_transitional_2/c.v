(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module c_88.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            []
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                []
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          Some (M.call (|
            "allocate_unbounded",
            []
          |))
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "635f38385f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "635f38385f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "635f38385f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module c_88_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      []
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  Some (M.call (|
                    "shift_right_224_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0xf8a8fd6d),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_test",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            []
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_224_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_to_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_test",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_test",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint8",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "increment_wrapping_uint8",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_array_bytes_storage_to_bytes_ptr",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bytes1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "shl",
                      [
                        [Literal.number 248];
                        [Literal.number 255]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 248];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint8_to_bytes1",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "shift_left",
                      [
                        M.call (|
                          "cleanup_uint8",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x22",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x22]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_byte_array_length",
          ["data"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "div",
                  [
                    M.get (| "data" |);
                    [Literal.number 2]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["outOfPlaceEncoding"],
                Some (M.call (|
                  "and",
                  [
                    M.get (| "data" |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "outOfPlaceEncoding" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["length"],
                      M.call (|
                        "and",
                        [
                          M.get (| "length" |);
                          [Literal.number 0x7f]
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "eq",
                  [
                    M.get (| "outOfPlaceEncoding" |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "length" |);
                        [Literal.number 32]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x22",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_bytes_storage_ptr",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.get (| "ptr" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x32",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x32]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_bytes_storage_ptr",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "extract_byte_array_length",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "long_byte_array_index_access_no_checks",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "sub",
                  [
                    [Literal.number 31];
                    M.call (|
                      "mod",
                      [
                        M.get (| "index" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                Some (M.call (|
                  "array_dataslot_bytes_storage_ptr",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "div",
                      [
                        M.get (| "index" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_bytes_ptr",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                Some (M.call (|
                  "array_length_bytes_storage_ptr",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.switch (|
                M.call (|
                  "lt",
                  [
                    M.get (| "arrayLength" |);
                    [Literal.number 0x20]
                  ]
                |),
                [
                  (
                    Some (Literal.number 0),
                    ltac:(M.monadic (
                      let _ :=
                        M.declare (|
                          ["slot"; "offset"],
                          M.call (|
                            "long_byte_array_index_access_no_checks",
                            [
                              M.get (| "array" |);
                              M.get (| "index" |)
                            ]
                          |)
                        |) in
                      tt
                    ))            );
                  (
                    None,
                    ltac:(M.monadic (
                      let _ :=
                        M.declare (|
                          ["offset"],
                          M.call (|
                            "sub",
                            [
                              [Literal.number 31];
                              M.call (|
                                "mod",
                                [
                                  M.get (| "index" |);
                                  [Literal.number 0x20]
                                ]
                              |)
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["slot"],
                          M.get (| "array" |)
                        |) in
                      tt
                    ))            )          ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_dynamic",
          ["bits"; "value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    M.get (| "bits" |);
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_dynamic1",
          ["value"; "shiftBytes"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["shiftBits"],
                Some (M.call (|
                  "mul",
                  [
                    M.get (| "shiftBytes" |);
                    [Literal.number 8]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["mask"],
                Some (M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    [Literal.number 255]
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_bytes1_to_bytes1",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes1",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 248];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_bytes1",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "shift_right_unsigned",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_bytes1_to_bytes1",
          ["slot"; "offset"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                Some (M.call (|
                  "convert_bytes1_to_bytes1",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_dynamic1",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.get (| "offset" |);
                      M.call (|
                        "prepare_store_bytes1",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_push_from_bytes1_to_bytes_storage_ptr",
          ["array"; "value0"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["data"],
                Some (M.call (|
                  "sload",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["oldLen"],
                Some (M.call (|
                  "extract_byte_array_length",
                  [
                    M.get (| "data" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "oldLen" |);
                        [Literal.number 18446744073709551616]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.switch (|
                M.call (|
                  "gt",
                  [
                    M.get (| "oldLen" |);
                    [Literal.number 31]
                  ]
                |),
                [
                  (
                    Some (Literal.number 0),
                    ltac:(M.monadic (
                      let _ :=
                        M.assign (|
                          ["value"],
                          Some (M.call (|
                            "byte",
                            [
                              [Literal.number 0];
                              M.get (| "value0" |)
                            ]
                          |))
                        |) in
                      let _ :=
                        M.switch (|
                          M.get (| "oldLen" |),
                          [
                            (
                              Some (Literal.number 31),
                              ltac:(M.monadic (
                                let _ :=
                                  M.assign (|
                                    ["dataArea"],
                                    Some (M.call (|
                                      "array_dataslot_bytes_storage_ptr",
                                      [
                                        M.get (| "array" |)
                                      ]
                                    |))
                                  |) in
                                let _ :=
                                  M.declare (|
                                    ["data"],
                                    M.call (|
                                      "and",
                                      [
                                        M.get (| "data" |);
                                        M.call (|
                                          "not",
                                          [
                                            [Literal.number 0xff]
                                          ]
                                        |)
                                      ]
                                    |)
                                  |) in
                                let _ :=
                                  M.call (|
                                    "sstore",
                                    [
                                      M.get (| "dataArea" |);
                                      M.call (|
                                        "or",
                                        [
                                          M.call (|
                                            "and",
                                            [
                                              [Literal.number 0xff];
                                              M.get (| "value" |)
                                            ]
                                          |);
                                          M.get (| "data" |)
                                        ]
                                      |)
                                    ]
                                  |) in
                                let _ :=
                                  M.call (|
                                    "sstore",
                                    [
                                      M.get (| "array" |);
                                      [Literal.number 65]
                                    ]
                                  |) in
                                tt
                              ))                      );
                            (
                              None,
                              ltac:(M.monadic (
                                let _ :=
                                  M.declare (|
                                    ["data"],
                                    M.call (|
                                      "add",
                                      [
                                        M.get (| "data" |);
                                        [Literal.number 2]
                                      ]
                                    |)
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["shiftBits"],
                                    Some (M.call (|
                                      "mul",
                                      [
                                        [Literal.number 8];
                                        M.call (|
                                          "sub",
                                          [
                                            [Literal.number 31];
                                            M.get (| "oldLen" |)
                                          ]
                                        |)
                                      ]
                                    |))
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["valueShifted"],
                                    Some (M.call (|
                                      "shift_left_dynamic",
                                      [
                                        M.get (| "shiftBits" |);
                                        M.call (|
                                          "and",
                                          [
                                            [Literal.number 0xff];
                                            M.get (| "value" |)
                                          ]
                                        |)
                                      ]
                                    |))
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["mask"],
                                    Some (M.call (|
                                      "shift_left_dynamic",
                                      [
                                        M.get (| "shiftBits" |);
                                        [Literal.number 0xff]
                                      ]
                                    |))
                                  |) in
                                let _ :=
                                  M.declare (|
                                    ["data"],
                                    M.call (|
                                      "or",
                                      [
                                        M.call (|
                                          "and",
                                          [
                                            M.get (| "data" |);
                                            M.call (|
                                              "not",
                                              [
                                                M.get (| "mask" |)
                                              ]
                                            |)
                                          ]
                                        |);
                                        M.get (| "valueShifted" |)
                                      ]
                                    |)
                                  |) in
                                let _ :=
                                  M.call (|
                                    "sstore",
                                    [
                                      M.get (| "array" |);
                                      M.get (| "data" |)
                                    ]
                                  |) in
                                tt
                              ))                      )                    ]
                        |) in
                      tt
                    ))            );
                  (
                    None,
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "sstore",
                          [
                            M.get (| "array" |);
                            M.call (|
                              "add",
                              [
                                M.get (| "data" |);
                                [Literal.number 2]
                              ]
                            |)
                          ]
                        |) in
                      let _ :=
                        M.assign (|
                          ["slot"; "offset"],
                          Some (M.call (|
                            "storage_array_index_access_bytes_ptr",
                            [
                              M.get (| "array" |);
                              M.get (| "oldLen" |)
                            ]
                          |))
                        |) in
                      let _ :=
                        M.call (|
                          "update_storage_value_bytes1_to_bytes1",
                          [
                            M.get (| "slot" |);
                            M.get (| "offset" |);
                            M.get (| "value0" |)
                          ]
                        |) in
                      tt
                    ))            )          ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x11",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x11]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "increment_uint8",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "eq",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "add",
                  [
                    M.get (| "value" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_bytes_storage",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "extract_byte_array_length",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint8_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint8",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_bytes",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                Some (M.call (|
                  "array_length_bytes_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.switch (|
                M.call (|
                  "lt",
                  [
                    M.get (| "arrayLength" |);
                    [Literal.number 0x20]
                  ]
                |),
                [
                  (
                    Some (Literal.number 0),
                    ltac:(M.monadic (
                      let _ :=
                        M.declare (|
                          ["slot"; "offset"],
                          M.call (|
                            "long_byte_array_index_access_no_checks",
                            [
                              M.get (| "array" |);
                              M.get (| "index" |)
                            ]
                          |)
                        |) in
                      tt
                    ))            );
                  (
                    None,
                    ltac:(M.monadic (
                      let _ :=
                        M.declare (|
                          ["offset"],
                          M.call (|
                            "sub",
                            [
                              [Literal.number 31];
                              M.call (|
                                "mod",
                                [
                                  M.get (| "index" |);
                                  [Literal.number 0x20]
                                ]
                              |)
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["slot"],
                          M.get (| "array" |)
                        |) in
                      tt
                    ))            )          ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_unsigned_dynamic",
          ["bits"; "value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    M.get (| "bits" |);
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_bytes1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "shift_left",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_dynamict_bytes1",
          ["slot_value"; "offset"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_bytes1",
                  [
                    M.call (|
                      "shift_right_unsigned_dynamic",
                      [
                        M.call (|
                          "mul",
                          [
                            M.get (| "offset" |);
                            [Literal.number 8]
                          ]
                        |);
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_dynamic_bytes1",
          ["slot"; "offset"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_dynamict_bytes1",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x31",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x31]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "mask_bytes_dynamic",
          ["data"; "bytes"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                Some (M.call (|
                  "not",
                  [
                    M.call (|
                      "shift_right_unsigned_dynamic",
                      [
                        M.call (|
                          "mul",
                          [
                            [Literal.number 8];
                            M.get (| "bytes" |)
                          ]
                        |);
                        M.call (|
                          "not",
                          [
                            [Literal.number 0]
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "and",
                  [
                    M.get (| "data" |);
                    M.get (| "mask" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_used_part_and_set_length_of_short_byte_array",
          ["data"; "len"],
          ["used"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "mask_bytes_dynamic",
                  [
                    M.get (| "data" |);
                    M.get (| "len" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["used"],
                M.call (|
                  "or",
                  [
                    M.get (| "data" |);
                    M.call (|
                      "mul",
                      [
                        [Literal.number 2];
                        M.get (| "len" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "transit_byte_array_long_to_short_bytes_storage_ptr",
          ["array"; "len"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["dataPos"],
                Some (M.call (|
                  "array_dataslot_bytes_storage_ptr",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["data"],
                Some (M.call (|
                  "extract_used_part_and_set_length_of_short_byte_array",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "dataPos" |)
                      ]
                    |);
                    M.get (| "len" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "array" |);
                  M.get (| "data" |)
                ]
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "dataPos" |);
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_bytes1",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_set_to_zero_bytes1",
          ["slot"; "offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero"],
                Some (M.call (|
                  "zero_value_for_split_bytes1",
                  []
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_bytes1_to_bytes1",
                [
                  M.get (| "slot" |);
                  M.get (| "offset" |);
                  M.get (| "zero" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "byte_array_pop_bytes_storage_ptr",
          ["array"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["data"],
                Some (M.call (|
                  "sload",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["oldLen"],
                Some (M.call (|
                  "extract_byte_array_length",
                  [
                    M.get (| "data" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "oldLen" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x31",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.switch (|
                M.get (| "oldLen" |),
                [
                  (
                    Some (Literal.number 32),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "transit_byte_array_long_to_short_bytes_storage_ptr",
                          [
                            M.get (| "array" |);
                            [Literal.number 31]
                          ]
                        |) in
                      tt
                    ))            );
                  (
                    None,
                    ltac:(M.monadic (
                      let _ :=
                        M.assign (|
                          ["newLen"],
                          Some (M.call (|
                            "sub",
                            [
                              M.get (| "oldLen" |);
                              [Literal.number 1]
                            ]
                          |))
                        |) in
                      let _ :=
                        M.switch (|
                          M.call (|
                            "lt",
                            [
                              M.get (| "oldLen" |);
                              [Literal.number 32]
                            ]
                          |),
                          [
                            (
                              Some (Literal.number 1),
                              ltac:(M.monadic (
                                let _ :=
                                  M.call (|
                                    "sstore",
                                    [
                                      M.get (| "array" |);
                                      M.call (|
                                        "extract_used_part_and_set_length_of_short_byte_array",
                                        [
                                          M.get (| "data" |);
                                          M.get (| "newLen" |)
                                        ]
                                      |)
                                    ]
                                  |) in
                                tt
                              ))                      );
                            (
                              None,
                              ltac:(M.monadic (
                                let _ :=
                                  M.assign (|
                                    ["slot"; "offset"],
                                    Some (M.call (|
                                      "long_byte_array_index_access_no_checks",
                                      [
                                        M.get (| "array" |);
                                        M.get (| "newLen" |)
                                      ]
                                    |))
                                  |) in
                                let _ :=
                                  M.call (|
                                    "storage_set_to_zero_bytes1",
                                    [
                                      M.get (| "slot" |);
                                      M.get (| "offset" |)
                                    ]
                                  |) in
                                let _ :=
                                  M.call (|
                                    "sstore",
                                    [
                                      M.get (| "array" |);
                                      M.call (|
                                        "sub",
                                        [
                                          M.get (| "data" |);
                                          [Literal.number 2]
                                        ]
                                      |)
                                    ]
                                  |) in
                                tt
                              ))                      )                    ]
                        |) in
                      tt
                    ))            )          ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_test",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["var_i"],
                Some (M.call (|
                  "convert_t_rational_by_to_t_uint8",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                [Literal.number 1],
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_1"],
                      Some (M.get (| "var_i" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_2"],
                      Some (M.call (|
                        "increment_wrapping_uint8",
                        [
                          M.get (| "_1" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["var_i"],
                      M.get (| "_2" |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_3"],
                      Some (M.get (| "var_i" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_1"],
                      Some (M.get (| "_3" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_2"],
                      Some ([Literal.number 0x21])
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_3"],
                      Some (M.call (|
                        "lt",
                        [
                          M.call (|
                            "cleanup_uint8",
                            [
                              M.get (| "expr_1" |)
                            ]
                          |);
                          M.call (|
                            "convert_rational_by_to_uint8",
                            [
                              M.get (| "expr_2" |)
                            ]
                          |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "iszero",
                        [
                          M.get (| "expr_3" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.break (||) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_5_slot"],
                      Some ([Literal.number 0x00])
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_17_slot"],
                      Some (M.get (| "_5_slot" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_19_self_slot"],
                      Some (M.call (|
                        "convert_array_bytes_storage_to_bytes_ptr",
                        [
                          M.get (| "expr_17_slot" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_4"],
                      Some (M.get (| "var_i" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_4"],
                      Some (M.get (| "_4" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_5"],
                      Some (M.call (|
                        "convert_uint8_to_bytes1",
                        [
                          M.get (| "expr_4" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.call (|
                      "array_push_from_bytes1_to_bytes_storage_ptr",
                      [
                        M.get (| "expr_19_self_slot" |);
                        M.get (| "expr_5" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["var_i_1"],
                Some (M.call (|
                  "convert_t_rational_by_to_t_uint8",
                  [
                    M.get (| "expr_6" |)
                  ]
                |))
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                [Literal.number 1],
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_5"],
                      Some (M.get (| "var_i_1" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_6"],
                      Some (M.call (|
                        "increment_uint8",
                        [
                          M.get (| "_5" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["var_i_1"],
                      M.get (| "_6" |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_7"],
                      Some (M.get (| "var_i_1" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_7"],
                      Some (M.get (| "_7" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_10_slot"],
                      Some ([Literal.number 0x00])
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_33_slot"],
                      Some (M.get (| "_10_slot" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_8"],
                      Some (M.call (|
                        "array_length_bytes_storage",
                        [
                          M.get (| "expr_33_slot" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_9"],
                      Some (M.call (|
                        "lt",
                        [
                          M.call (|
                            "convert_uint8_to_uint256",
                            [
                              M.get (| "expr_7" |)
                            ]
                          |);
                          M.call (|
                            "cleanup_uint256",
                            [
                              M.get (| "expr_8" |)
                            ]
                          |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "iszero",
                        [
                          M.get (| "expr_9" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.break (||) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_slot"],
                      Some ([Literal.number 0x00])
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_39_slot"],
                      Some (M.get (| "_slot" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_8"],
                      Some (M.get (| "var_i_1" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_10"],
                      Some (M.get (| "_8" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_9"; "_10"],
                      Some (M.call (|
                        "storage_array_index_access_bytes",
                        [
                          M.get (| "expr_39_slot" |);
                          M.get (| "expr_10" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_11"],
                      Some (M.call (|
                        "read_from_storage_split_dynamic_bytes1",
                        [
                          M.get (| "_9" |);
                          M.get (| "_10" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_11"],
                      Some (M.get (| "_11" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_12"],
                      Some (M.get (| "var_i_1" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_12"],
                      Some (M.get (| "_12" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_13"],
                      Some (M.call (|
                        "convert_uint8_to_bytes1",
                        [
                          M.get (| "expr_12" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_14"],
                      Some (M.call (|
                        "iszero",
                        [
                          M.call (|
                            "eq",
                            [
                              M.call (|
                                "cleanup_bytes1",
                                [
                                  M.get (| "expr_11" |)
                                ]
                              |);
                              M.call (|
                                "cleanup_bytes1",
                                [
                                  M.get (| "expr_13" |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.get (| "expr_14" |),
                      ltac:(M.monadic (
                        let _ :=
                          M.assign (|
                            ["_13"],
                            Some (M.get (| "var_i_1" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_15"],
                            Some (M.get (| "_13" |))
                          |) in
                        let _ :=
                          M.declare (|
                            ["var"],
                            M.call (|
                              "convert_uint8_to_uint256",
                              [
                                M.get (| "expr_15" |)
                              ]
                            |)
                          |) in
                        let _ :=
                          M.leave (||) in
                        tt
                      ))
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["_18_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_51_slot"],
                Some (M.get (| "_18_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_self_slot"],
                Some (M.call (|
                  "convert_array_bytes_storage_to_bytes_ptr",
                  [
                    M.get (| "expr_51_slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "byte_array_pop_bytes_storage_ptr",
                [
                  M.get (| "expr_self_slot" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_19_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_slot"],
                Some (M.get (| "_19_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_58_self_slot"],
                Some (M.call (|
                  "convert_array_bytes_storage_to_bytes_ptr",
                  [
                    M.get (| "expr_slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "byte_array_pop_bytes_storage_ptr",
                [
                  M.get (| "expr_58_self_slot" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["var_i_2"],
                Some (M.call (|
                  "convert_t_rational_by_to_t_uint8",
                  [
                    M.get (| "expr_16" |)
                  ]
                |))
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                [Literal.number 1],
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_14"],
                      Some (M.get (| "var_i_2" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_15"],
                      Some (M.call (|
                        "increment_uint8",
                        [
                          M.get (| "_14" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["var_i_2"],
                      M.get (| "_15" |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_16"],
                      Some (M.get (| "var_i_2" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_17"],
                      Some (M.get (| "_16" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_23_slot"],
                      Some ([Literal.number 0x00])
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_66_slot"],
                      Some (M.get (| "_23_slot" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_18"],
                      Some (M.call (|
                        "array_length_bytes_storage",
                        [
                          M.get (| "expr_66_slot" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_19"],
                      Some (M.call (|
                        "lt",
                        [
                          M.call (|
                            "convert_uint8_to_uint256",
                            [
                              M.get (| "expr_17" |)
                            ]
                          |);
                          M.call (|
                            "cleanup_uint256",
                            [
                              M.get (| "expr_18" |)
                            ]
                          |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "iszero",
                        [
                          M.get (| "expr_19" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.break (||) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_24_slot"],
                      Some ([Literal.number 0x00])
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_72_slot"],
                      Some (M.get (| "_24_slot" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_17"],
                      Some (M.get (| "var_i_2" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_20"],
                      Some (M.get (| "_17" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_18"; "_19"],
                      Some (M.call (|
                        "storage_array_index_access_bytes",
                        [
                          M.get (| "expr_72_slot" |);
                          M.get (| "expr_20" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_20"],
                      Some (M.call (|
                        "read_from_storage_split_dynamic_bytes1",
                        [
                          M.get (| "_18" |);
                          M.get (| "_19" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_21"],
                      Some (M.get (| "_20" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_21"],
                      Some (M.get (| "var_i_2" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_22"],
                      Some (M.get (| "_21" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_23"],
                      Some (M.call (|
                        "convert_uint8_to_bytes1",
                        [
                          M.get (| "expr_22" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_24"],
                      Some (M.call (|
                        "iszero",
                        [
                          M.call (|
                            "eq",
                            [
                              M.call (|
                                "cleanup_bytes1",
                                [
                                  M.get (| "expr_21" |)
                                ]
                              |);
                              M.call (|
                                "cleanup_bytes1",
                                [
                                  M.get (| "expr_23" |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.get (| "expr_24" |),
                      ltac:(M.monadic (
                        let _ :=
                          M.assign (|
                            ["_22"],
                            Some (M.get (| "var_i_2" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_25"],
                            Some (M.get (| "_22" |))
                          |) in
                        let _ :=
                          M.declare (|
                            ["var"],
                            M.call (|
                              "convert_uint8_to_uint256",
                              [
                                M.get (| "expr_25" |)
                              ]
                            |)
                          |) in
                        let _ :=
                          M.leave (||) in
                        tt
                      ))
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.call (|
                  "convert_rational_by_to_uint256",
                  [
                    M.get (| "expr_26" |)
                  ]
                |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a2646970667358221220753a85809a638d17214069ae488e0b6d4a80f1acd4d9ee211f37ac9af7c6f0f764736f6c634300081b0033".
  End c_88_deployed.
End c_88.
