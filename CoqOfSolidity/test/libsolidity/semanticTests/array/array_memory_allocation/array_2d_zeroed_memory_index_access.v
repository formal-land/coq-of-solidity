(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition test1 : Value.t :=
    undefined.

  Definition test2 : Value.t :=
    undefined.

  Definition test3 : Value.t :=
    undefined.

  Definition test4 : Value.t :=
    undefined.

  Definition test5 : Value.t :=
    undefined.

  Definition test6 : Value.t :=
    undefined.

  Definition test7 : Value.t :=
    undefined.

  Definition map : Value.t :=
    undefined.

  Definition set (α : list Value.t) : M :=
    match α with
    | [s, n, m, a, b] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "map" |),
            Some (M.get_name (| "s" |))
          |),
          Value.Integer 0
        |) in
      let _ :=
        M.define (|
          [ "x" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 47
src: 262:8:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 46
src: 262:6:0
nodeType: ArrayTypeName
baseType: Ty.path "uint"
length: 
typeDescriptions: typeString uint256[]typeIdentifier st_array$_t_uint256_$dyn_storage_ptr

length: 
typeDescriptions: typeString uint256[][]typeIdentifier st_array$_t_array$_t_uint256_$dyn_storage_$dyn_storage_ptr

,
            [
              M.get_name (| "n" |)
            ]
          |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 72
src: 277:52:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          M.get_name (| "n" |)
        |)
loopExpression: M.un_op (|
          true,
          "++",
          M.get_name (| "i" |)
        |)
body: M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "x" |),
            Some (M.get_name (| "i" |))
          |),
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 66
src: 320:6:0
nodeType: ArrayTypeName
baseType: Ty.path "uint"
length: 
typeDescriptions: typeString uint256[]typeIdentifier st_array$_t_uint256_$dyn_storage_ptr

,
            [
              M.get_name (| "m" |)
            ]
          |)
        |)
isSimpleCounterLoop: 1
 in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.index_access (|
              M.get_name (| "x" |),
              Some (M.get_name (| "a" |))
            |),
            Some (M.get_name (| "b" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
