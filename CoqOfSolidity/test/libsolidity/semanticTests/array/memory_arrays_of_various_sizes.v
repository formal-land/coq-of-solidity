(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [n, k] =>
      let _ :=
        M.define (|
          [ "rows" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 17
src: 165:11:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 16
src: 165:9:0
nodeType: ArrayTypeName
baseType: Ty.path "uint256"
length: 
typeDescriptions: typeString uint256[]typeIdentifier st_array$_t_uint256_$dyn_storage_ptr

length: 
typeDescriptions: typeString uint256[][]typeIdentifier st_array$_t_array$_t_uint256_$dyn_storage_$dyn_storage_ptr

,
            [
              M.bin_op (|
                "+",
                M.get_name (| "n" |),
                Value.Integer 1
              |)
            ]
          |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 101
src: 193:256:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 1
        |)
condition: M.bin_op (|
          "<=",
          M.get_name (| "i" |),
          M.get_name (| "n" |)
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "i" |)
        |)
body: let _ :=
          M.assign (|
            "=",
            M.index_access (|
              M.get_name (| "rows" |),
              Some (M.get_name (| "i" |))
            |),
            M.call (|
              NewExpression (* Beginning of a node! *)
id: 38
src: 254:9:0
nodeType: ArrayTypeName
baseType: Ty.path "uint256"
length: 
typeDescriptions: typeString uint256[]typeIdentifier st_array$_t_uint256_$dyn_storage_ptr

,
              [
                M.get_name (| "i" |)
              ]
            |)
          |) in
        let _ :=
          M.assign (|
            "=",
            M.index_access (|
              M.index_access (|
                M.get_name (| "rows" |),
                Some (M.get_name (| "i" |))
              |),
              Some (Value.Integer 0)
            |),
            M.assign (|
              "=",
              M.index_access (|
                M.index_access (|
                  M.get_name (| "rows" |),
                  Some (M.get_name (| "i" |))
                |),
                Some (M.bin_op (|
                  "-",
                  M.member_access (|
                    M.index_access (|
                      M.get_name (| "rows" |),
                      Some (M.get_name (| "i" |))
                    |),
                    "length"
                  |),
                  Value.Integer 1
                |))
              |),
              Value.Integer 1
            |)
          |) in
        let _ :=
          (* Beginning of a node! *)
id: 99
src: 338:100:0
nodeType: ForStatement
initializationExpression: M.define (|
            [ "j" ],
            Value.Integer 1
          |)
condition: M.bin_op (|
            "<",
            M.get_name (| "j" |),
            M.bin_op (|
              "-",
              M.get_name (| "i" |),
              Value.Integer 1
            |)
          |)
loopExpression: M.un_op (|
            false,
            "++",
            M.get_name (| "j" |)
          |)
body: M.assign (|
            "=",
            M.index_access (|
              M.index_access (|
                M.get_name (| "rows" |),
                Some (M.get_name (| "i" |))
              |),
              Some (M.get_name (| "j" |))
            |),
            M.bin_op (|
              "+",
              M.index_access (|
                M.index_access (|
                  M.get_name (| "rows" |),
                  Some (M.bin_op (|
                    "-",
                    M.get_name (| "i" |),
                    Value.Integer 1
                  |))
                |),
                Some (M.bin_op (|
                  "-",
                  M.get_name (| "j" |),
                  Value.Integer 1
                |))
              |),
              M.index_access (|
                M.index_access (|
                  M.get_name (| "rows" |),
                  Some (M.bin_op (|
                    "-",
                    M.get_name (| "i" |),
                    Value.Integer 1
                  |))
                |),
                Some (M.get_name (| "j" |))
              |)
            |)
          |)
isSimpleCounterLoop: 1
 in
        Value.Tuple []
isSimpleCounterLoop: 0
 in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.index_access (|
              M.get_name (| "rows" |),
              Some (M.get_name (| "n" |))
            |),
            Some (M.bin_op (|
              "-",
              M.get_name (| "k" |),
              Value.Integer 1
            |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
