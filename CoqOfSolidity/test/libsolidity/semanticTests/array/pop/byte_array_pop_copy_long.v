(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module c.
  Definition data : Value.t :=
    undefined.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        (* Beginning of a node! *)
id: 23
src: 90:48:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          Value.Integer 33
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "i" |)
        |)
body: M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "push"
          |),
          [
            Value.Integer 0x03
          ]
        |)
isSimpleCounterLoop: 1
 in
      let _ :=
        (* Beginning of a node! *)
id: 39
src: 148:42:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "j" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "j" |),
          Value.Integer 4
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "j" |)
        |)
body: M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "pop"
          |),
          []
        |)
isSimpleCounterLoop: 1
 in
      let _ :=
        M.return_ (|
          M.get_name (| "data" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End c.
