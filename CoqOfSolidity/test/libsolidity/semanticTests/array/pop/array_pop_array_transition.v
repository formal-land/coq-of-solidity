(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module c.
  Definition a : Value.t :=
    undefined.

  Definition b : Value.t :=
    undefined.

  Definition c : Value.t :=
    undefined.

  Definition inner : Value.t :=
    Value.Array [
      Value.Integer 1,
      Value.Integer 2,
      Value.Integer 3,
      Value.Integer 4,
      Value.Integer 5,
      Value.Integer 6,
      Value.Integer 7,
      Value.Integer 8,
      Value.Integer 9,
      Value.Integer 10,
      Value.Integer 11,
      Value.Integer 12,
      Value.Integer 13,
      Value.Integer 14,
      Value.Integer 15,
      Value.Integer 16
    ].

  Definition data : Value.t :=
    undefined.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        (* Beginning of a node! *)
id: 55
src: 227:59:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 1
        |)
condition: M.bin_op (|
          "<=",
          M.get_name (| "i" |),
          Value.Integer 48
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "i" |)
        |)
body: M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "push"
          |),
          [
            M.get_name (| "inner" |)
          ]
        |)
isSimpleCounterLoop: 0
 in
      let _ :=
        (* Beginning of a node! *)
id: 71
src: 296:53:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "j" ],
          Value.Integer 1
        |)
condition: M.bin_op (|
          "<=",
          M.get_name (| "j" |),
          Value.Integer 10
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "j" |)
        |)
body: M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "pop"
          |),
          []
        |)
isSimpleCounterLoop: 0
 in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          M.index_access (|
            M.index_access (|
              M.get_name (| "data" |),
              Some (M.bin_op (|
                "-",
                M.member_access (|
                  M.get_name (| "data" |),
                  "length"
                |),
                Value.Integer 1
              |))
            |),
            Some (Value.Integer 0)
          |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 98
src: 397:53:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "k" ],
          Value.Integer 1
        |)
condition: M.bin_op (|
          "<=",
          M.get_name (| "k" |),
          Value.Integer 10
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "k" |)
        |)
body: M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "pop"
          |),
          []
        |)
isSimpleCounterLoop: 0
 in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "y" |),
          M.index_access (|
            M.index_access (|
              M.get_name (| "data" |),
              Some (M.bin_op (|
                "-",
                M.member_access (|
                  M.get_name (| "data" |),
                  "length"
                |),
                Value.Integer 1
              |))
            |),
            Some (Value.Integer 1)
          |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 125
src: 498:53:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "l" ],
          Value.Integer 1
        |)
condition: M.bin_op (|
          "<=",
          M.get_name (| "l" |),
          Value.Integer 10
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "l" |)
        |)
body: M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "pop"
          |),
          []
        |)
isSimpleCounterLoop: 0
 in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "z" |),
          M.index_access (|
            M.index_access (|
              M.get_name (| "data" |),
              Some (M.bin_op (|
                "-",
                M.member_access (|
                  M.get_name (| "data" |),
                  "length"
                |),
                Value.Integer 1
              |))
            |),
            Some (Value.Integer 2)
          |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 152
src: 599:53:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "m" ],
          Value.Integer 1
        |)
condition: M.bin_op (|
          "<=",
          M.get_name (| "m" |),
          Value.Integer 18
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "m" |)
        |)
body: M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "pop"
          |),
          []
        |)
isSimpleCounterLoop: 0
 in
      let _ :=
        M.un_op (|
          true,
          "delete",
          M.get_name (| "inner" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End c.
