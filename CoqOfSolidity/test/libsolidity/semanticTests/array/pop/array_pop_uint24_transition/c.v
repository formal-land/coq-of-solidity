(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module c_104.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            [

            ]
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                [

                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          M.call (|
            "allocate_unbounded",
            [

            ]
          |)
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "635f3130345f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "635f3130345f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "635f3130345f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module c_104_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0xf8a8fd6d),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_test",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            [

            ]
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint24",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint24",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint24",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint24_uint24",
          ["headStart"; "value0"; "value1"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint24",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint24",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_test",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"],
                M.call (|
                  "fun_test",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_uint24_uint24",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint24",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_1_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x11",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x11]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "increment_uint256",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "eq",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "add",
                  [
                    M.get (| "value" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_array_array_uint24_dyn_storage_to_array_uint24_dyn_ptr",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint256_to_uint24",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint24",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint24_dyn_storage_ptr",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.get (| "ptr" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x32",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x32]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint24_dyn_storage_ptr",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_uint24_dyn_ptr",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                M.call (|
                  "array_length_array_uint24_dyn_storage_ptr",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                M.call (|
                  "array_dataslot_array_uint24_dyn_storage_ptr",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "div",
                      [
                        M.get (| "index" |);
                        [Literal.number 10]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "mul",
                  [
                    M.call (|
                      "mod",
                      [
                        M.get (| "index" |);
                        [Literal.number 10]
                      ]
                    |);
                    [Literal.number 3]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_dynamic",
          ["bits"; "value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    M.get (| "bits" |);
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_dynamic3",
          ["value"; "shiftBytes"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["shiftBits"],
                M.call (|
                  "mul",
                  [
                    M.get (| "shiftBytes" |);
                    [Literal.number 8]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["mask"],
                M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    [Literal.number 16777215]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint24_to_uint24",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint24",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint24",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_uint24",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_uint24_to_uint24",
          ["slot"; "offset"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                M.call (|
                  "convert_uint24_to_uint24",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_dynamic3",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.get (| "offset" |);
                      M.call (|
                        "prepare_store_uint24",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_push_from_uint24_to_array_uint24_dyn_storage_ptr",
          ["array"; "value0"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["oldLen"],
                M.call (|
                  "sload",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "oldLen" |);
                        [Literal.number 18446744073709551616]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "array" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "oldLen" |);
                      [Literal.number 1]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["slot"; "offset"],
                M.call (|
                  "storage_array_index_access_uint24_dyn_ptr",
                  [
                    M.get (| "array" |);
                    M.get (| "oldLen" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_uint24_to_uint24",
                [
                  M.get (| "slot" |);
                  M.get (| "offset" |);
                  M.get (| "value0" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x31",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x31]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_set_to_zero_uint24",
          ["slot"; "offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero"],
                M.call (|
                  "zero_value_for_split_uint24",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_uint24_to_uint24",
                [
                  M.get (| "slot" |);
                  M.get (| "offset" |);
                  M.get (| "zero" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_pop_array_uint24_dyn_storage_ptr",
          ["array"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["oldLen"],
                M.call (|
                  "array_length_array_uint24_dyn_storage_ptr",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "oldLen" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x31",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["newLen"],
                M.call (|
                  "sub",
                  [
                    M.get (| "oldLen" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["slot"; "offset"],
                M.call (|
                  "storage_array_index_access_uint24_dyn_ptr",
                  [
                    M.get (| "array" |);
                    M.get (| "newLen" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "storage_set_to_zero_uint24",
                [
                  M.get (| "slot" |);
                  M.get (| "offset" |)
                ]
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "array" |);
                  M.get (| "newLen" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint24_dyn_storage",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_sub_uint256",
          ["x"; "y"],
          ["diff"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["x"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "x" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["y"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["diff"],
                M.call (|
                  "sub",
                  [
                    M.get (| "x" |);
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "diff" |);
                    M.get (| "x" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint24_dyn_storage",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.get (| "ptr" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_uint24_dyn",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                M.call (|
                  "array_length_array_uint24_dyn_storage",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                M.call (|
                  "array_dataslot_array_uint24_dyn_storage",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "div",
                      [
                        M.get (| "index" |);
                        [Literal.number 10]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "mul",
                  [
                    M.call (|
                      "mod",
                      [
                        M.get (| "index" |);
                        [Literal.number 10]
                      ]
                    |);
                    [Literal.number 3]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_unsigned_dynamic",
          ["bits"; "value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    M.get (| "bits" |);
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_uint24",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_dynamict_uint24",
          ["slot_value"; "offset"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint24",
                  [
                    M.call (|
                      "shift_right_unsigned_dynamic",
                      [
                        M.call (|
                          "mul",
                          [
                            M.get (| "offset" |);
                            [Literal.number 8]
                          ]
                        |);
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_dynamic_uint24",
          ["slot"; "offset"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_dynamict_uint24",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_test",
          [],
          ["var_x";
      "var_y"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_t_uint24"],
                M.call (|
                  "zero_value_for_split_uint24",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_x"],
                M.get (| "zero_t_uint24" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint24"],
                M.call (|
                  "zero_value_for_split_uint24",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_y"],
                M.get (| "zero_uint24" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["var_i"],
                M.call (|
                  "convert_rational_1_by_1_to_uint256",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.for (|
                tt,
                [Literal.number 1],
                let _ :=
                  M.assign (|
                    ["_1"],
                    M.get (| "var_i" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_2"],
                    M.call (|
                      "increment_uint256",
                      [
                        M.get (| "_1" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["var_i"],
                    M.get (| "_2" |)
                  |) in
                tt,
                let _ :=
                  M.assign (|
                    ["_3"],
                    M.get (| "var_i" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_1"],
                    M.get (| "_3" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_2"],
                    [Literal.number 0x1e]
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_3"],
                    M.call (|
                      "iszero",
                      [
                        M.call (|
                          "gt",
                          [
                            M.call (|
                              "cleanup_uint256",
                              [
                                M.get (| "expr_1" |)
                              ]
                            |);
                            M.call (|
                              "convert_t_rational_by_to_t_uint256",
                              [
                                M.get (| "expr_2" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.get (| "expr_3" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.break (||) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["_6_slot"],
                    [Literal.number 0x03]
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_26_slot"],
                    M.get (| "_6_slot" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_28_self_slot"],
                    M.call (|
                      "convert_array_array_uint24_dyn_storage_to_array_uint24_dyn_ptr",
                      [
                        M.get (| "expr_26_slot" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_4"],
                    M.get (| "var_i" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_4"],
                    M.get (| "_4" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_5"],
                    M.call (|
                      "convert_uint256_to_uint24",
                      [
                        M.get (| "expr_4" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "array_push_from_uint24_to_array_uint24_dyn_storage_ptr",
                    [
                      M.get (| "expr_28_self_slot" |);
                      M.get (| "expr_5" |)
                    ]
                  |) in
                tt
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["var_j"],
                M.call (|
                  "convert_rational_1_by_1_to_uint256",
                  [
                    M.get (| "expr_6" |)
                  ]
                |)
              |) in
            let _ :=
              M.for (|
                tt,
                [Literal.number 1],
                let _ :=
                  M.assign (|
                    ["_5"],
                    M.get (| "var_j" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_6"],
                    M.call (|
                      "increment_uint256",
                      [
                        M.get (| "_5" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["var_j"],
                    M.get (| "_6" |)
                  |) in
                tt,
                let _ :=
                  M.assign (|
                    ["_7"],
                    M.get (| "var_j" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_7"],
                    M.get (| "_7" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_8"],
                    [Literal.number 0x0a]
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_9"],
                    M.call (|
                      "iszero",
                      [
                        M.call (|
                          "gt",
                          [
                            M.call (|
                              "cleanup_uint256",
                              [
                                M.get (| "expr_7" |)
                              ]
                            |);
                            M.call (|
                              "convert_rational_by_to_uint256",
                              [
                                M.get (| "expr_8" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.break (||) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["_11_slot"],
                    [Literal.number 0x03]
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_46_slot"],
                    M.get (| "_11_slot" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_self_slot"],
                    M.call (|
                      "convert_array_array_uint24_dyn_storage_to_array_uint24_dyn_ptr",
                      [
                        M.get (| "expr_46_slot" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "array_pop_array_uint24_dyn_storage_ptr",
                    [
                      M.get (| "expr_self_slot" |)
                    ]
                  |) in
                tt
              |) in
            let _ :=
              M.assign (|
                ["_slot"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["expr_53_slot"],
                M.get (| "_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_13_slot"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["expr_54_slot"],
                M.get (| "_13_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                M.call (|
                  "array_length_array_uint24_dyn_storage",
                  [
                    M.get (| "expr_54_slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                M.call (|
                  "checked_sub_uint256",
                  [
                    M.get (| "expr_10" |);
                    M.call (|
                      "convert_rational_1_by_1_to_uint256",
                      [
                        M.get (| "expr_11" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_8"; "_9"],
                M.call (|
                  "storage_array_index_access_uint24_dyn",
                  [
                    M.get (| "expr_53_slot" |);
                    M.get (| "expr_12" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_10"],
                M.call (|
                  "read_from_storage_split_dynamic_uint24",
                  [
                    M.get (| "_8" |);
                    M.get (| "_9" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                M.get (| "_10" |)
              |) in
            let _ :=
              M.declare (|
                ["var_x"],
                M.get (| "expr_13" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["var_k"],
                M.call (|
                  "convert_rational_1_by_1_to_uint256",
                  [
                    M.get (| "expr_14" |)
                  ]
                |)
              |) in
            let _ :=
              M.for (|
                tt,
                [Literal.number 1],
                let _ :=
                  M.assign (|
                    ["_11"],
                    M.get (| "var_k" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_12"],
                    M.call (|
                      "increment_uint256",
                      [
                        M.get (| "_11" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["var_k"],
                    M.get (| "_12" |)
                  |) in
                tt,
                let _ :=
                  M.assign (|
                    ["_13"],
                    M.get (| "var_k" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_15"],
                    M.get (| "_13" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_16"],
                    [Literal.number 0x0a]
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_17"],
                    M.call (|
                      "iszero",
                      [
                        M.call (|
                          "gt",
                          [
                            M.call (|
                              "cleanup_uint256",
                              [
                                M.get (| "expr_15" |)
                              ]
                            |);
                            M.call (|
                              "convert_rational_by_to_uint256",
                              [
                                M.get (| "expr_16" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.get (| "expr_17" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.break (||) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["_20_slot"],
                    [Literal.number 0x03]
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_71_slot"],
                    M.get (| "_20_slot" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_73_self_slot"],
                    M.call (|
                      "convert_array_array_uint24_dyn_storage_to_array_uint24_dyn_ptr",
                      [
                        M.get (| "expr_71_slot" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "array_pop_array_uint24_dyn_storage_ptr",
                    [
                      M.get (| "expr_73_self_slot" |)
                    ]
                  |) in
                tt
              |) in
            let _ :=
              M.assign (|
                ["_21_slot"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["expr_78_slot"],
                M.get (| "_21_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_22_slot"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["expr_79_slot"],
                M.get (| "_22_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                M.call (|
                  "array_length_array_uint24_dyn_storage",
                  [
                    M.get (| "expr_79_slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                M.call (|
                  "checked_sub_uint256",
                  [
                    M.get (| "expr_18" |);
                    M.call (|
                      "convert_rational_1_by_1_to_uint256",
                      [
                        M.get (| "expr_19" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_14"; "_15"],
                M.call (|
                  "storage_array_index_access_uint24_dyn",
                  [
                    M.get (| "expr_78_slot" |);
                    M.get (| "expr_20" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_16"],
                M.call (|
                  "read_from_storage_split_dynamic_uint24",
                  [
                    M.get (| "_14" |);
                    M.get (| "_15" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                M.get (| "_16" |)
              |) in
            let _ :=
              M.declare (|
                ["var_y"],
                M.get (| "expr_21" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["var_l"],
                M.call (|
                  "convert_rational_1_by_1_to_uint256",
                  [
                    M.get (| "expr_22" |)
                  ]
                |)
              |) in
            let _ :=
              M.for (|
                tt,
                [Literal.number 1],
                let _ :=
                  M.assign (|
                    ["_17"],
                    M.get (| "var_l" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_18"],
                    M.call (|
                      "increment_uint256",
                      [
                        M.get (| "_17" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["var_l"],
                    M.get (| "_18" |)
                  |) in
                tt,
                let _ :=
                  M.assign (|
                    ["_19"],
                    M.get (| "var_l" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_23"],
                    M.get (| "_19" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_24"],
                    [Literal.number 0x0a]
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_25"],
                    M.call (|
                      "iszero",
                      [
                        M.call (|
                          "gt",
                          [
                            M.call (|
                              "cleanup_uint256",
                              [
                                M.get (| "expr_23" |)
                              ]
                            |);
                            M.call (|
                              "convert_rational_by_to_uint256",
                              [
                                M.get (| "expr_24" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.get (| "expr_25" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.break (||) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["_29_slot"],
                    [Literal.number 0x03]
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_slot"],
                    M.get (| "_29_slot" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_98_self_slot"],
                    M.call (|
                      "convert_array_array_uint24_dyn_storage_to_array_uint24_dyn_ptr",
                      [
                        M.get (| "expr_slot" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "array_pop_array_uint24_dyn_storage_ptr",
                    [
                      M.get (| "expr_98_self_slot" |)
                    ]
                  |) in
                tt
              |) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a264697066735822122007ec9d39b8501abeccc69ea3f7f1de778a161302750597634eb17f35a2ee7dfd64736f6c634300081b0033".
  End c_104_deployed.
End c_104.
