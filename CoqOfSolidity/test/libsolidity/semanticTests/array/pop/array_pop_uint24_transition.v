(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module c.
  Definition a : Value.t :=
    undefined.

  Definition b : Value.t :=
    undefined.

  Definition c : Value.t :=
    undefined.

  Definition data : Value.t :=
    undefined.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        (* Beginning of a node! *)
id: 35
src: 143:63:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 1
        |)
condition: M.bin_op (|
          "<=",
          M.get_name (| "i" |),
          Value.Integer 30
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "i" |)
        |)
body: M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "push"
          |),
          [
            M.call (|
              Ty.path "uint24",
              [
                M.get_name (| "i" |)
              ]
            |)
          ]
        |)
isSimpleCounterLoop: 0
 in
      let _ :=
        (* Beginning of a node! *)
id: 51
src: 216:53:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "j" ],
          Value.Integer 1
        |)
condition: M.bin_op (|
          "<=",
          M.get_name (| "j" |),
          Value.Integer 10
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "j" |)
        |)
body: M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "pop"
          |),
          []
        |)
isSimpleCounterLoop: 0
 in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          M.index_access (|
            M.get_name (| "data" |),
            Some (M.bin_op (|
              "-",
              M.member_access (|
                M.get_name (| "data" |),
                "length"
              |),
              Value.Integer 1
            |))
          |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 76
src: 314:53:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "k" ],
          Value.Integer 1
        |)
condition: M.bin_op (|
          "<=",
          M.get_name (| "k" |),
          Value.Integer 10
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "k" |)
        |)
body: M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "pop"
          |),
          []
        |)
isSimpleCounterLoop: 0
 in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "y" |),
          M.index_access (|
            M.get_name (| "data" |),
            Some (M.bin_op (|
              "-",
              M.member_access (|
                M.get_name (| "data" |),
                "length"
              |),
              Value.Integer 1
            |))
          |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 101
src: 412:53:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "l" ],
          Value.Integer 1
        |)
condition: M.bin_op (|
          "<=",
          M.get_name (| "l" |),
          Value.Integer 10
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "l" |)
        |)
body: M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "pop"
          |),
          []
        |)
isSimpleCounterLoop: 0
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End c.
