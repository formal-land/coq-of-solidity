(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition test (α : list Value.t) : M :=
    match α with
    | [len, idx] =>
      let _ :=
        M.define (|
          [ "array" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 15
src: 107:6:0
nodeType: ArrayTypeName
baseType: Ty.path "uint"
length: 
typeDescriptions: typeString uint256[]typeIdentifier st_array$_t_uint256_$dyn_storage_ptr

,
            [
              M.get_name (| "len" |)
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "result" ],
          M.call (|
            M.get_name (| "receiver" |),
            [
              M.get_name (| "array" |),
              M.get_name (| "idx" |)
            ]
          |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 48
src: 161:72:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          M.member_access (|
            M.get_name (| "array" |),
            "length"
          |)
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "i" |)
        |)
body: M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.get_name (| "array" |),
                Some (M.get_name (| "i" |))
              |),
              M.bin_op (|
                "+",
                M.get_name (| "i" |),
                Value.Integer 1
              |)
            |)
          ]
        |)
isSimpleCounterLoop: 1
 in
      let _ :=
        M.return_ (|
          M.get_name (| "result" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition receiver (α : list Value.t) : M :=
    match α with
    | [array, idx] =>
      let _ :=
        (* Beginning of a node! *)
id: 81
src: 336:62:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          M.member_access (|
            M.get_name (| "array" |),
            "length"
          |)
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "i" |)
        |)
body: M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "array" |),
            Some (M.get_name (| "i" |))
          |),
          M.bin_op (|
            "+",
            M.get_name (| "i" |),
            Value.Integer 1
          |)
        |)
isSimpleCounterLoop: 1
 in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "array" |),
            Some (M.get_name (| "idx" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
