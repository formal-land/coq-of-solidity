(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition array : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "array" |),
            "push"
          |),
          []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        (* Beginning of a node! *)
id: 39
src: 102:63:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          M.get_name (| "x" |)
        |)
loopExpression: M.un_op (|
          true,
          "++",
          M.get_name (| "i" |)
        |)
body: M.assign (|
          "=",
          M.call (|
            M.member_access (|
              M.get_name (| "array" |),
              "push"
            |),
            []
          |),
          M.call (|
            Ty.path "bytes1",
            [
              M.call (|
                Ty.path "uint8",
                [
                  M.get_name (| "i" |)
                ]
              |)
            ]
          |)
        |)
isSimpleCounterLoop: 1
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition l (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.get_name (| "array" |),
            "length"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition a (α : list Value.t) : M :=
    match α with
    | [index] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "array" |),
            Some (M.get_name (| "index" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
