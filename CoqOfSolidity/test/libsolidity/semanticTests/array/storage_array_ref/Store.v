(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module Store_143.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            []
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                []
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          Some (M.call (|
            "allocate_unbounded",
            []
          |))
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "53746f72655f3134335f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "53746f72655f3134335f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "53746f72655f3134335f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module Store_143_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      []
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  Some (M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x1003e2d2),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_add",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x3e530e5b),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_find",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            []
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_uint256",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_uint256",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_uint256",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_tuple_uint256",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple",
          ["headStart"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_add",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"],
                Some (M.call (|
                  "abi_decode_tuple_uint256",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "fun_add",
                [
                  M.get (| "param" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_tuple",
                  [
                    M.get (| "memPos" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_to_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_find",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"],
                Some (M.call (|
                  "abi_decode_tuple_uint256",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_find",
                  [
                    M.get (| "param" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_array_array_uint256_dyn_storage_to_array_uint256_dyn_ptr",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint256_dyn_storage_ptr",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.get (| "ptr" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x32",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x32]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint256_dyn_storage_ptr",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_uint256_dyn_ptr",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                Some (M.call (|
                  "array_length_array_uint256_dyn_storage_ptr",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                Some (M.call (|
                  "array_dataslot_array_uint256_dyn_storage_ptr",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_dynamic",
          ["bits"; "value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    M.get (| "bits" |);
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_dynamic32",
          ["value"; "shiftBytes"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["shiftBits"],
                Some (M.call (|
                  "mul",
                  [
                    M.get (| "shiftBytes" |);
                    [Literal.number 8]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["mask"],
                Some (M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint256_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_uint256",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_uint256_to_uint256",
          ["slot"; "offset"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                Some (M.call (|
                  "convert_uint256_to_uint256",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_dynamic32",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.get (| "offset" |);
                      M.call (|
                        "prepare_store_uint256",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_push_from_uint256_to_array_uint256_dyn_storage_ptr",
          ["array"; "value0"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["oldLen"],
                Some (M.call (|
                  "sload",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "oldLen" |);
                        [Literal.number 18446744073709551616]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "array" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "oldLen" |);
                      [Literal.number 1]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["slot"; "offset"],
                Some (M.call (|
                  "storage_array_index_access_uint256_dyn_ptr",
                  [
                    M.get (| "array" |);
                    M.get (| "oldLen" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_uint256_to_uint256",
                [
                  M.get (| "slot" |);
                  M.get (| "offset" |);
                  M.get (| "value0" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint256_dyn_storage",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x11",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x11]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_sub_uint256",
          ["x"; "y"],
          ["diff"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["x"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "x" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["y"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["diff"],
                M.call (|
                  "sub",
                  [
                    M.get (| "x" |);
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "diff" |);
                    M.get (| "x" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint256_dyn_storage",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.get (| "ptr" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_uint256_dyn",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                Some (M.call (|
                  "array_length_array_uint256_dyn_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                Some (M.call (|
                  "array_dataslot_array_uint256_dyn_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_add",
          ["var_v"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["_1_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_113_slot"],
                Some (M.get (| "_1_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_self_slot"],
                Some (M.call (|
                  "convert_array_array_uint256_dyn_storage_to_array_uint256_dyn_ptr",
                  [
                    M.get (| "expr_113_slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.call (|
                  "convert_t_rational_by_to_t_uint256",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "array_push_from_uint256_to_array_uint256_dyn_storage_ptr",
                [
                  M.get (| "expr_self_slot" |);
                  M.get (| "_1" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_v" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["_4_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_119_slot"],
                Some (M.get (| "_4_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_5_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_120_slot"],
                Some (M.get (| "_5_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.call (|
                  "array_length_array_uint256_dyn_storage",
                  [
                    M.get (| "expr_120_slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.call (|
                  "checked_sub_uint256",
                  [
                    M.get (| "expr_2" |);
                    M.call (|
                      "convert_rational_by_to_uint256",
                      [
                        M.get (| "expr_3" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_3"; "_4"],
                Some (M.call (|
                  "storage_array_index_access_uint256_dyn",
                  [
                    M.get (| "expr_119_slot" |);
                    M.get (| "expr_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_uint256_to_uint256",
                [
                  M.get (| "_3" |);
                  M.get (| "_4" |);
                  M.get (| "expr_1" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_find",
          ["var_v"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["_9_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_137_slot"],
                Some (M.get (| "_9_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_v" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["_11_slot"],
                Some (M.call (|
                  "convert_array_array_uint256_dyn_storage_to_array_uint256_dyn_ptr",
                  [
                    M.get (| "expr_137_slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "fun_find_20",
                  [
                    M.get (| "_11_slot" |);
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_find_20",
          ["var_data_slot"; "var__value"],
          ["var_o_position"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_t_uint256"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_o_position"],
                M.get (| "zero_t_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["_13_slot"],
                Some (M.get (| "var_data_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_12_slot"],
                Some (M.get (| "_13_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_slot"],
                Some (M.get (| "var_data_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14_slot"],
                Some (M.get (| "_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "array_length_array_uint256_dyn_storage_ptr",
                  [
                    M.get (| "expr_14_slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var__value" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.call (|
                  "convert_t_rational_by_to_t_uint256",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "fun_find_102",
                  [
                    M.get (| "expr_12_slot" |);
                    M.get (| "_2" |);
                    M.get (| "expr_1" |);
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_o_position"],
                M.get (| "expr_3" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_unsigned_dynamic",
          ["bits"; "value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    M.get (| "bits" |);
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_dynamict_uint256",
          ["slot_value"; "offset"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint256",
                  [
                    M.call (|
                      "shift_right_unsigned_dynamic",
                      [
                        M.call (|
                          "mul",
                          [
                            M.get (| "offset" |);
                            [Literal.number 8]
                          ]
                        |);
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_dynamic_uint256",
          ["slot"; "offset"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_dynamict_uint256",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_2_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x12",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x12]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_div_uint256",
          ["x"; "y"],
          ["r"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["x"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "x" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["y"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "y" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x12",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["r"],
                M.call (|
                  "div",
                  [
                    M.get (| "x" |);
                    M.get (| "y" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_add_uint256",
          ["x"; "y"],
          ["sum"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["x"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "x" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["y"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["sum"],
                M.call (|
                  "add",
                  [
                    M.get (| "x" |);
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "x" |);
                    M.get (| "sum" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_find_102",
          ["var__data_slot"; "var_begin"; "var_len"; "var_value"],
          ["var_o_position"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_o_position"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_len" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.get (| "expr_2" |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "expr_3" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_2"],
                      Some (M.get (| "var_len" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_4"],
                      Some (M.get (| "_2" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_5"],
                      Some ([Literal.number 0x01])
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_6"],
                      Some (M.call (|
                        "eq",
                        [
                          M.call (|
                            "cleanup_uint256",
                            [
                              M.get (| "expr_4" |)
                            ]
                          |);
                          M.call (|
                            "convert_rational_by_to_uint256",
                            [
                              M.get (| "expr_5" |)
                            ]
                          |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_7"],
                      Some (M.get (| "expr_6" |))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.get (| "expr_7" |),
                      ltac:(M.monadic (
                        let _ :=
                          M.assign (|
                            ["_20_slot"],
                            Some (M.get (| "var__data_slot" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_40_slot"],
                            Some (M.get (| "_20_slot" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_3"],
                            Some (M.get (| "var_begin" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_8"],
                            Some (M.get (| "_3" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_4"; "_5"],
                            Some (M.call (|
                              "storage_array_index_access_uint256_dyn_ptr",
                              [
                                M.get (| "expr_40_slot" |);
                                M.get (| "expr_8" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_6"],
                            Some (M.call (|
                              "read_from_storage_split_dynamic_uint256",
                              [
                                M.get (| "_4" |);
                                M.get (| "_5" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_9"],
                            Some (M.get (| "_6" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_7"],
                            Some (M.get (| "var_value" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_10"],
                            Some (M.get (| "_7" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_11"],
                            Some (M.call (|
                              "iszero",
                              [
                                M.call (|
                                  "eq",
                                  [
                                    M.call (|
                                      "cleanup_uint256",
                                      [
                                        M.get (| "expr_9" |)
                                      ]
                                    |);
                                    M.call (|
                                      "cleanup_uint256",
                                      [
                                        M.get (| "expr_10" |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.declare (|
                            ["expr_7"],
                            M.get (| "expr_11" |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_12"],
                      Some (M.get (| "expr_7" |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_3"],
                      M.get (| "expr_12" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_3" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["expr_13"],
                      Some (M.call (|
                        "not",
                        [
                          [Literal.number 0]
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["var_o_position"],
                      M.get (| "expr_13" |)
                    |) in
                  let _ :=
                    M.leave (||) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.get (| "var_len" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some (M.get (| "_8" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some (M.call (|
                  "checked_div_uint256",
                  [
                    M.get (| "expr_14" |);
                    M.call (|
                      "convert_rational_2_by_1_to_uint256",
                      [
                        M.get (| "expr_15" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_halfLen"],
                Some (M.get (| "expr_16" |))
              |) in
            let _ :=
              M.assign (|
                ["_27_slot"],
                Some (M.get (| "var__data_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_slot"],
                Some (M.get (| "_27_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                Some (M.get (| "var_begin" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some (M.get (| "_9" |))
              |) in
            let _ :=
              M.assign (|
                ["_10"],
                Some (M.get (| "var_halfLen" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some (M.get (| "_10" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some (M.call (|
                  "checked_add_uint256",
                  [
                    M.get (| "expr_17" |);
                    M.get (| "expr_18" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_11"; "_12"],
                Some (M.call (|
                  "storage_array_index_access_uint256_dyn_ptr",
                  [
                    M.get (| "expr_slot" |);
                    M.get (| "expr_19" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_13"],
                Some (M.call (|
                  "read_from_storage_split_dynamic_uint256",
                  [
                    M.get (| "_11" |);
                    M.get (| "_12" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some (M.get (| "_13" |))
              |) in
            let _ :=
              M.assign (|
                ["var_v"],
                Some (M.get (| "expr_20" |))
              |) in
            let _ :=
              M.assign (|
                ["_14"],
                Some (M.get (| "var_value" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                Some (M.get (| "_14" |))
              |) in
            let _ :=
              M.assign (|
                ["_15"],
                Some (M.get (| "var_v" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                Some (M.get (| "_15" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                Some (M.call (|
                  "lt",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_21" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_22" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.switch (|
                M.get (| "expr_23" |),
                [
                  (
                    Some (Literal.number 0),
                    ltac:(M.monadic (
                      let _ :=
                        M.assign (|
                          ["_16"],
                          Some (M.get (| "var_value" |))
                        |) in
                      let _ :=
                        M.assign (|
                          ["expr_24"],
                          Some (M.get (| "_16" |))
                        |) in
                      let _ :=
                        M.assign (|
                          ["_17"],
                          Some (M.get (| "var_v" |))
                        |) in
                      let _ :=
                        M.assign (|
                          ["expr_25"],
                          Some (M.get (| "_17" |))
                        |) in
                      let _ :=
                        M.assign (|
                          ["expr_26"],
                          Some (M.call (|
                            "gt",
                            [
                              M.call (|
                                "cleanup_uint256",
                                [
                                  M.get (| "expr_24" |)
                                ]
                              |);
                              M.call (|
                                "cleanup_uint256",
                                [
                                  M.get (| "expr_25" |)
                                ]
                              |)
                            ]
                          |))
                        |) in
                      let _ :=
                        M.switch (|
                          M.get (| "expr_26" |),
                          [
                            (
                              Some (Literal.number 0),
                              ltac:(M.monadic (
                                let _ :=
                                  M.assign (|
                                    ["_18"],
                                    Some (M.get (| "var_begin" |))
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["expr_27"],
                                    Some (M.get (| "_18" |))
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["_19"],
                                    Some (M.get (| "var_halfLen" |))
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["expr_28"],
                                    Some (M.get (| "_19" |))
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["expr_29"],
                                    Some (M.call (|
                                      "checked_add_uint256",
                                      [
                                        M.get (| "expr_27" |);
                                        M.get (| "expr_28" |)
                                      ]
                                    |))
                                  |) in
                                let _ :=
                                  M.declare (|
                                    ["var_o_position"],
                                    M.get (| "expr_29" |)
                                  |) in
                                let _ :=
                                  M.leave (||) in
                                tt
                              ))                      );
                            (
                              None,
                              ltac:(M.monadic (
                                let _ :=
                                  M.assign (|
                                    ["_39_slot"],
                                    Some (M.get (| "var__data_slot" |))
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["expr_83_slot"],
                                    Some (M.get (| "_39_slot" |))
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["_20"],
                                    Some (M.get (| "var_begin" |))
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["expr_30"],
                                    Some (M.get (| "_20" |))
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["_21"],
                                    Some (M.get (| "var_halfLen" |))
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["expr_31"],
                                    Some (M.get (| "_21" |))
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["expr_32"],
                                    Some (M.call (|
                                      "checked_add_uint256",
                                      [
                                        M.get (| "expr_30" |);
                                        M.get (| "expr_31" |)
                                      ]
                                    |))
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["expr_33"],
                                    Some ([Literal.number 0x01])
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["expr_34"],
                                    Some (M.call (|
                                      "checked_add_uint256",
                                      [
                                        M.get (| "expr_32" |);
                                        M.call (|
                                          "convert_rational_by_to_uint256",
                                          [
                                            M.get (| "expr_33" |)
                                          ]
                                        |)
                                      ]
                                    |))
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["_22"],
                                    Some (M.get (| "var_halfLen" |))
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["expr_35"],
                                    Some (M.get (| "_22" |))
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["expr_36"],
                                    Some ([Literal.number 0x01])
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["expr_37"],
                                    Some (M.call (|
                                      "checked_sub_uint256",
                                      [
                                        M.get (| "expr_35" |);
                                        M.call (|
                                          "convert_rational_by_to_uint256",
                                          [
                                            M.get (| "expr_36" |)
                                          ]
                                        |)
                                      ]
                                    |))
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["_23"],
                                    Some (M.get (| "var_value" |))
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["expr_38"],
                                    Some (M.get (| "_23" |))
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["expr_39"],
                                    Some (M.call (|
                                      "fun_find_102",
                                      [
                                        M.get (| "expr_83_slot" |);
                                        M.get (| "expr_34" |);
                                        M.get (| "expr_37" |);
                                        M.get (| "expr_38" |)
                                      ]
                                    |))
                                  |) in
                                let _ :=
                                  M.declare (|
                                    ["var_o_position"],
                                    M.get (| "expr_39" |)
                                  |) in
                                let _ :=
                                  M.leave (||) in
                                tt
                              ))                      )                    ]
                        |) in
                      tt
                    ))            );
                  (
                    None,
                    ltac:(M.monadic (
                      let _ :=
                        M.assign (|
                          ["_44_slot"],
                          Some (M.get (| "var__data_slot" |))
                        |) in
                      let _ :=
                        M.assign (|
                          ["expr_73_slot"],
                          Some (M.get (| "_44_slot" |))
                        |) in
                      let _ :=
                        M.assign (|
                          ["_24"],
                          Some (M.get (| "var_begin" |))
                        |) in
                      let _ :=
                        M.assign (|
                          ["expr_40"],
                          Some (M.get (| "_24" |))
                        |) in
                      let _ :=
                        M.assign (|
                          ["_25"],
                          Some (M.get (| "var_halfLen" |))
                        |) in
                      let _ :=
                        M.assign (|
                          ["expr_41"],
                          Some (M.get (| "_25" |))
                        |) in
                      let _ :=
                        M.assign (|
                          ["_26"],
                          Some (M.get (| "var_value" |))
                        |) in
                      let _ :=
                        M.assign (|
                          ["expr_42"],
                          Some (M.get (| "_26" |))
                        |) in
                      let _ :=
                        M.assign (|
                          ["expr_43"],
                          Some (M.call (|
                            "fun_find_102",
                            [
                              M.get (| "expr_73_slot" |);
                              M.get (| "expr_40" |);
                              M.get (| "expr_41" |);
                              M.get (| "expr_42" |)
                            ]
                          |))
                        |) in
                      let _ :=
                        M.declare (|
                          ["var_o_position"],
                          M.get (| "expr_43" |)
                        |) in
                      let _ :=
                        M.leave (||) in
                      tt
                    ))            )          ]
              |) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a2646970667358221220aab3758b8dc15303957a1b1e86c553cd174ee097c5f7f0fd8f7fdfa5bfa4214c64736f6c634300081b0033".
  End Store_143_deployed.
End Store_143.
