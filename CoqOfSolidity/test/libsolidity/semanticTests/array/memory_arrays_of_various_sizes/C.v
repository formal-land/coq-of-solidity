(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_112.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            []
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                []
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          Some (M.call (|
            "allocate_unbounded",
            []
          |))
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f3131325f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3131325f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3131325f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_112_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      []
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  Some (M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x13d1aa2e),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_f",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            []
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_uint256",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_uint256",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_uint256",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_uint256t_uint256",
          ["headStart"; "dataEnd"],
          ["value0";
      "value1"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 64]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset_1"],
                Some ([Literal.number 32])
              |) in
            let _ :=
              M.declare (|
                ["value1"],
                M.call (|
                  "abi_decode_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset_1" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_to_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_f",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"],
                Some (M.call (|
                  "abi_decode_uint256t_uint256",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_f",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x11",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x11]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_add_uint256",
          ["x"; "y"],
          ["sum"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["x"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "x" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["y"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["sum"],
                M.call (|
                  "add",
                  [
                    M.get (| "x" |);
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "x" |);
                    M.get (| "sum" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "round_up_to_mul_of",
          ["value"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "and",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 31]
                      ]
                    |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 31]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "finalize_allocation",
          ["memPtr"; "size"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["newFreePtr"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "memPtr" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "size" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "newFreePtr" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "newFreePtr" |);
                        M.get (| "memPtr" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 64];
                  M.get (| "newFreePtr" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory",
          ["size"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_unbounded",
                  []
                |)
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "memPtr" |);
                  M.get (| "size" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_array_array_uint256_dyn_dyn",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "mul",
                  [
                    M.get (| "length" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "add",
                  [
                    M.get (| "size" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_array_array_array_uint256_dyn_dyn",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["allocSize"],
                Some (M.call (|
                  "array_allocation_size_array_array_uint256_dyn_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    M.get (| "allocSize" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.get (| "length" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_array_uint256_dyn",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 96]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_complex_memory_array_array_array_uint256_dyn_dyn",
          ["dataStart"; "dataSizeInBytes"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "dataSizeInBytes" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 32]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "dataStart" |);
                            M.get (| "i" |)
                          ]
                        |);
                        M.call (|
                          "zero_value_for_array_uint256_dyn",
                          []
                        |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_and_zero_memory_array_array_array_uint256_dyn_dyn",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_array_array_array_uint256_dyn_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["dataStart"],
                Some (M.get (| "memPtr" |))
              |) in
            let _ :=
              M.assign (|
                ["dataSize"],
                Some (M.call (|
                  "array_allocation_size_array_array_uint256_dyn_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["dataStart"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["dataSize"],
                M.call (|
                  "sub",
                  [
                    M.get (| "dataSize" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "zero_complex_memory_array_array_array_uint256_dyn_dyn",
                [
                  M.get (| "dataStart" |);
                  M.get (| "dataSize" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "increment_uint256",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "eq",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "add",
                  [
                    M.get (| "value" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_array_uint256_dyn",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "mul",
                  [
                    M.get (| "length" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "add",
                  [
                    M.get (| "size" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_array_array_uint256_dyn",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["allocSize"],
                Some (M.call (|
                  "array_allocation_size_array_uint256_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    M.get (| "allocSize" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.get (| "length" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_memory_chunk_uint256",
          ["dataStart"; "dataSizeInBytes"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "calldatacopy",
                [
                  M.get (| "dataStart" |);
                  M.call (|
                    "calldatasize",
                    []
                  |);
                  M.get (| "dataSizeInBytes" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_and_zero_memory_array_array_uint256_dyn",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_array_array_uint256_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["dataStart"],
                Some (M.get (| "memPtr" |))
              |) in
            let _ :=
              M.assign (|
                ["dataSize"],
                Some (M.call (|
                  "array_allocation_size_array_uint256_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["dataStart"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["dataSize"],
                M.call (|
                  "sub",
                  [
                    M.get (| "dataSize" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "zero_memory_chunk_uint256",
                [
                  M.get (| "dataStart" |);
                  M.get (| "dataSize" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x32",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x32]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_array_uint256_dyn_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "memory_array_index_access_uint256_dyn_dyn",
          ["baseRef"; "index"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.call (|
                          "array_length_array_array_uint256_dyn_dyn",
                          [
                            M.get (| "baseRef" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some (M.call (|
                  "mul",
                  [
                    M.get (| "index" |);
                    [Literal.number 32]
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "baseRef" |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint256_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_sub_uint256",
          ["x"; "y"],
          ["diff"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["x"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "x" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["y"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["diff"],
                M.call (|
                  "sub",
                  [
                    M.get (| "x" |);
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "diff" |);
                    M.get (| "x" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "memory_array_index_access_uint256_dyn",
          ["baseRef"; "index"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.call (|
                          "array_length_array_uint256_dyn",
                          [
                            M.get (| "baseRef" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some (M.call (|
                  "mul",
                  [
                    M.get (| "index" |);
                    [Literal.number 32]
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "baseRef" |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "write_to_memory_uint256",
          ["memPtr"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "increment_wrapping_uint256",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_memoryt_uint256",
          ["ptr"],
          ["returnValue"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["value"],
                Some (M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "mload",
                      [
                        M.get (| "ptr" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["returnValue"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_f",
          ["var_n"; "var_k"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_n" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.call (|
                  "checked_add_uint256",
                  [
                    M.get (| "expr" |);
                    M.call (|
                      "convert_rational_by_to_uint256",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_22_mpos"],
                Some (M.call (|
                  "allocate_and_zero_memory_array_array_array_uint256_dyn_dyn",
                  [
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_rows_mpos"],
                Some (M.get (| "expr_22_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["var_i"],
                Some (M.call (|
                  "convert_rational_by_to_uint256",
                  [
                    M.get (| "expr_3" |)
                  ]
                |))
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                [Literal.number 1],
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_2"],
                      Some (M.get (| "var_i" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_3"],
                      Some (M.call (|
                        "increment_uint256",
                        [
                          M.get (| "_2" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["var_i"],
                      M.get (| "_3" |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_4"],
                      Some (M.get (| "var_i" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_4"],
                      Some (M.get (| "_4" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_5"],
                      Some (M.get (| "var_n" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_5"],
                      Some (M.get (| "_5" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_6"],
                      Some (M.call (|
                        "iszero",
                        [
                          M.call (|
                            "gt",
                            [
                              M.call (|
                                "cleanup_uint256",
                                [
                                  M.get (| "expr_4" |)
                                ]
                              |);
                              M.call (|
                                "cleanup_uint256",
                                [
                                  M.get (| "expr_5" |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "iszero",
                        [
                          M.get (| "expr_6" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.break (||) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_6"],
                      Some (M.get (| "var_i" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_7"],
                      Some (M.get (| "_6" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_41_mpos"],
                      Some (M.call (|
                        "allocate_and_zero_memory_array_array_uint256_dyn",
                        [
                          M.get (| "expr_7" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_8_mpos"],
                      Some (M.get (| "var_rows_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_34_mpos"],
                      Some (M.get (| "_8_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_7"],
                      Some (M.get (| "var_i" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_8"],
                      Some (M.get (| "_7" |))
                    |) in
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.call (|
                          "memory_array_index_access_uint256_dyn_dyn",
                          [
                            M.get (| "expr_34_mpos" |);
                            M.get (| "expr_8" |)
                          ]
                        |);
                        M.get (| "expr_41_mpos" |)
                      ]
                    |) in
                  let _ :=
                    M.call (|
                      "pop",
                      [
                        M.call (|
                          "mload",
                          [
                            M.call (|
                              "memory_array_index_access_uint256_dyn_dyn",
                              [
                                M.get (| "expr_34_mpos" |);
                                M.get (| "expr_8" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_9"],
                      Some ([Literal.number 0x01])
                    |) in
                  let _ :=
                    M.assign (|
                      ["_8"],
                      Some (M.call (|
                        "convert_rational_by_to_uint256",
                        [
                          M.get (| "expr_9" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_12_mpos"],
                      Some (M.get (| "var_rows_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_49_mpos"],
                      Some (M.get (| "_12_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_9"],
                      Some (M.get (| "var_i" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_10"],
                      Some (M.get (| "_9" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_14_mpos"],
                      Some (M.call (|
                        "mload",
                        [
                          M.call (|
                            "memory_array_index_access_uint256_dyn_dyn",
                            [
                              M.get (| "expr_49_mpos" |);
                              M.get (| "expr_10" |)
                            ]
                          |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_51_mpos"],
                      Some (M.get (| "_14_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_15_mpos"],
                      Some (M.get (| "var_rows_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_52_mpos"],
                      Some (M.get (| "_15_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_10"],
                      Some (M.get (| "var_i" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_11"],
                      Some (M.get (| "_10" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_17_mpos"],
                      Some (M.call (|
                        "mload",
                        [
                          M.call (|
                            "memory_array_index_access_uint256_dyn_dyn",
                            [
                              M.get (| "expr_52_mpos" |);
                              M.get (| "expr_11" |)
                            ]
                          |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_54_mpos"],
                      Some (M.get (| "_17_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_12"],
                      Some (M.call (|
                        "array_length_array_uint256_dyn",
                        [
                          M.get (| "expr_54_mpos" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_13"],
                      Some ([Literal.number 0x01])
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_14"],
                      Some (M.call (|
                        "checked_sub_uint256",
                        [
                          M.get (| "expr_12" |);
                          M.call (|
                            "convert_rational_by_to_uint256",
                            [
                              M.get (| "expr_13" |)
                            ]
                          |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_11"],
                      Some (M.get (| "_8" |))
                    |) in
                  let _ :=
                    M.call (|
                      "write_to_memory_uint256",
                      [
                        M.call (|
                          "memory_array_index_access_uint256_dyn",
                          [
                            M.get (| "expr_51_mpos" |);
                            M.get (| "expr_14" |)
                          ]
                        |);
                        M.get (| "_11" |)
                      ]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_15"],
                      Some (M.get (| "_8" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_19_mpos"],
                      Some (M.get (| "var_rows_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_44_mpos"],
                      Some (M.get (| "_19_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_12"],
                      Some (M.get (| "var_i" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_16"],
                      Some (M.get (| "_12" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_21_mpos"],
                      Some (M.call (|
                        "mload",
                        [
                          M.call (|
                            "memory_array_index_access_uint256_dyn_dyn",
                            [
                              M.get (| "expr_44_mpos" |);
                              M.get (| "expr_16" |)
                            ]
                          |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_mpos"],
                      Some (M.get (| "_21_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_17"],
                      Some ([Literal.number 0x00])
                    |) in
                  let _ :=
                    M.assign (|
                      ["_13"],
                      Some (M.get (| "expr_15" |))
                    |) in
                  let _ :=
                    M.call (|
                      "write_to_memory_uint256",
                      [
                        M.call (|
                          "memory_array_index_access_uint256_dyn",
                          [
                            M.get (| "expr_mpos" |);
                            M.call (|
                              "convert_t_rational_by_to_t_uint256",
                              [
                                M.get (| "expr_17" |)
                              ]
                            |)
                          ]
                        |);
                        M.get (| "_13" |)
                      ]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_18"],
                      Some ([Literal.number 0x01])
                    |) in
                  let _ :=
                    M.assign (|
                      ["var_j"],
                      Some (M.call (|
                        "convert_rational_by_to_uint256",
                        [
                          M.get (| "expr_18" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    let _ :=
                      tt in
                    M.for_ (|
                      [Literal.number 1],
                      ltac:(M.monadic (
                        let _ :=
                          M.assign (|
                            ["_14"],
                            Some (M.get (| "var_j" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_15"],
                            Some (M.call (|
                              "increment_wrapping_uint256",
                              [
                                M.get (| "_14" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.declare (|
                            ["var_j"],
                            M.get (| "_15" |)
                          |) in
                        tt
                      )),
                      ltac:(M.monadic (
                        let _ :=
                          M.assign (|
                            ["_16"],
                            Some (M.get (| "var_j" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_19"],
                            Some (M.get (| "_16" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_17"],
                            Some (M.get (| "var_i" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_20"],
                            Some (M.get (| "_17" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_21"],
                            Some ([Literal.number 0x01])
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_22"],
                            Some (M.call (|
                              "checked_sub_uint256",
                              [
                                M.get (| "expr_20" |);
                                M.call (|
                                  "convert_rational_by_to_uint256",
                                  [
                                    M.get (| "expr_21" |)
                                  ]
                                |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_23"],
                            Some (M.call (|
                              "lt",
                              [
                                M.call (|
                                  "cleanup_uint256",
                                  [
                                    M.get (| "expr_19" |)
                                  ]
                                |);
                                M.call (|
                                  "cleanup_uint256",
                                  [
                                    M.get (| "expr_22" |)
                                  ]
                                |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.if_ (|
                            M.call (|
                              "iszero",
                              [
                                M.get (| "expr_23" |)
                              ]
                            |),
                            ltac:(M.monadic (
                              let _ :=
                                M.break (||) in
                              tt
                            ))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_27_mpos"],
                            Some (M.get (| "var_rows_mpos" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_80_mpos"],
                            Some (M.get (| "_27_mpos" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_18"],
                            Some (M.get (| "var_i" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_24"],
                            Some (M.get (| "_18" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_25"],
                            Some ([Literal.number 0x01])
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_26"],
                            Some (M.call (|
                              "checked_sub_uint256",
                              [
                                M.get (| "expr_24" |);
                                M.call (|
                                  "convert_rational_by_to_uint256",
                                  [
                                    M.get (| "expr_25" |)
                                  ]
                                |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_mpos"],
                            Some (M.call (|
                              "mload",
                              [
                                M.call (|
                                  "memory_array_index_access_uint256_dyn_dyn",
                                  [
                                    M.get (| "expr_80_mpos" |);
                                    M.get (| "expr_26" |)
                                  ]
                                |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_84_mpos"],
                            Some (M.get (| "_mpos" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_19"],
                            Some (M.get (| "var_j" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_27"],
                            Some (M.get (| "_19" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_28"],
                            Some ([Literal.number 0x01])
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_29"],
                            Some (M.call (|
                              "checked_sub_uint256",
                              [
                                M.get (| "expr_27" |);
                                M.call (|
                                  "convert_rational_by_to_uint256",
                                  [
                                    M.get (| "expr_28" |)
                                  ]
                                |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_20"],
                            Some (M.call (|
                              "read_from_memoryt_uint256",
                              [
                                M.call (|
                                  "memory_array_index_access_uint256_dyn",
                                  [
                                    M.get (| "expr_84_mpos" |);
                                    M.get (| "expr_29" |)
                                  ]
                                |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_30"],
                            Some (M.get (| "_20" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_32_mpos"],
                            Some (M.get (| "var_rows_mpos" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_89_mpos"],
                            Some (M.get (| "_32_mpos" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_21"],
                            Some (M.get (| "var_i" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_31"],
                            Some (M.get (| "_21" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_32"],
                            Some ([Literal.number 0x01])
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_33"],
                            Some (M.call (|
                              "checked_sub_uint256",
                              [
                                M.get (| "expr_31" |);
                                M.call (|
                                  "convert_rational_by_to_uint256",
                                  [
                                    M.get (| "expr_32" |)
                                  ]
                                |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_34_mpos"],
                            Some (M.call (|
                              "mload",
                              [
                                M.call (|
                                  "memory_array_index_access_uint256_dyn_dyn",
                                  [
                                    M.get (| "expr_89_mpos" |);
                                    M.get (| "expr_33" |)
                                  ]
                                |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_93_mpos"],
                            Some (M.get (| "_34_mpos" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_22"],
                            Some (M.get (| "var_j" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_34"],
                            Some (M.get (| "_22" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_23"],
                            Some (M.call (|
                              "read_from_memoryt_uint256",
                              [
                                M.call (|
                                  "memory_array_index_access_uint256_dyn",
                                  [
                                    M.get (| "expr_93_mpos" |);
                                    M.get (| "expr_34" |)
                                  ]
                                |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_35"],
                            Some (M.get (| "_23" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_36"],
                            Some (M.call (|
                              "checked_add_uint256",
                              [
                                M.get (| "expr_30" |);
                                M.get (| "expr_35" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_37_mpos"],
                            Some (M.get (| "var_rows_mpos" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_75_mpos"],
                            Some (M.get (| "_37_mpos" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_24"],
                            Some (M.get (| "var_i" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_37"],
                            Some (M.get (| "_24" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_39_mpos"],
                            Some (M.call (|
                              "mload",
                              [
                                M.call (|
                                  "memory_array_index_access_uint256_dyn_dyn",
                                  [
                                    M.get (| "expr_75_mpos" |);
                                    M.get (| "expr_37" |)
                                  ]
                                |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_78_mpos"],
                            Some (M.get (| "_39_mpos" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_25"],
                            Some (M.get (| "var_j" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["expr_38"],
                            Some (M.get (| "_25" |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["_26"],
                            Some (M.get (| "expr_36" |))
                          |) in
                        let _ :=
                          M.call (|
                            "write_to_memory_uint256",
                            [
                              M.call (|
                                "memory_array_index_access_uint256_dyn",
                                [
                                  M.get (| "expr_78_mpos" |);
                                  M.get (| "expr_38" |)
                                ]
                              |);
                              M.get (| "_26" |)
                            ]
                          |) in
                        tt
                      ))
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["_42_mpos"],
                Some (M.get (| "var_rows_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_102_mpos"],
                Some (M.get (| "_42_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["_27"],
                Some (M.get (| "var_n" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_39"],
                Some (M.get (| "_27" |))
              |) in
            let _ :=
              M.assign (|
                ["_44_mpos"],
                Some (M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_uint256_dyn_dyn",
                      [
                        M.get (| "expr_102_mpos" |);
                        M.get (| "expr_39" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_104_mpos"],
                Some (M.get (| "_44_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["_28"],
                Some (M.get (| "var_k" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_40"],
                Some (M.get (| "_28" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_41"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_42"],
                Some (M.call (|
                  "checked_sub_uint256",
                  [
                    M.get (| "expr_40" |);
                    M.call (|
                      "convert_rational_by_to_uint256",
                      [
                        M.get (| "expr_41" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_29"],
                Some (M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.call (|
                      "memory_array_index_access_uint256_dyn",
                      [
                        M.get (| "expr_104_mpos" |);
                        M.get (| "expr_42" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_43"],
                Some (M.get (| "_29" |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_43" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a2646970667358221220131c4cdf5d10f2a0f4554de4a332b6d97f367fdf1d1fbe513fe6a85c24e523ae64736f6c634300081b0033".
  End C_112_deployed.
End C_112.
