(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module D.
  Definition f (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "r" |),
            Some (Value.Integer 0)
          |),
          M.call (|
            M.index_access (|
              M.get_name (| "x" |),
              Some (Value.Integer 0)
            |),
            []
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "r" |),
            Some (Value.Integer 1)
          |),
          M.call (|
            M.index_access (|
              M.get_name (| "x" |),
              Some (Value.Integer 1)
            |),
            []
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "r" |),
            Some (Value.Integer 2)
          |),
          M.call (|
            M.index_access (|
              M.get_name (| "x" |),
              Some (Value.Integer 2)
            |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End D.

(* Contract *)
Module C.
  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 80
src: 438:66:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 79
src: 438:65:0
nodeType: FunctionTypeName
visibility: external
stateMutability: nonpayable
parameterTypes: (* Beginning of a node! *)
id: 71
src: 446:2:0
nodeType: ParameterList
parameters: 

returnParameterTypes: (* Beginning of a node! *)
id: 78
src: 466:36:0
nodeType: ParameterList
parameters: Definition  : Value.t :=
              undefined.

typeDescriptions: typeString function () external returns (function () external returns (uint256))typeIdentifier st_function_external_nonpayable$__$returns$_t_function_external_nonpayable$__$returns$_t_uint256_$_$

length: 
typeDescriptions: typeString function () external returns (function () external returns (uint256))[]typeIdentifier st_array$_t_function_external_nonpayable$__$returns$_t_function_external_nonpayable$__$returns$_t_uint256_$_$_$dyn_storage_ptr

,
            [
              Value.Integer 10
            ]
          |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 103
src: 518:52:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          M.member_access (|
            M.get_name (| "x" |),
            "length"
          |)
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "i" |)
        |)
body: M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "x" |),
            Some (M.get_name (| "i" |))
          |),
          M.member_access (|
            M.get_name (| "this" |),
            "h"
          |)
        |)
isSimpleCounterLoop: 1
 in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 0)
          |),
          M.member_access (|
            M.get_name (| "this" |),
            "htwo"
          |)
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          M.call (|
            M.member_access (|
              Value.Tuple [
                M.call (|
                  NewExpression (* Beginning of a node! *)
id: 120
src: 660:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 119
src: 660:1:0
nodeType: IdentifierPath
name: D
nameLocations: [660:1:0, ]
referencedDeclaration: 51

referencedDeclaration: 51
typeDescriptions: typeString contract DtypeIdentifier st_contract$_D_$51

,
                  []
                |)
              ],
              "f"
            |),
            [
              M.get_name (| "x" |)
            ]
          |)
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.call (|
              M.index_access (|
                M.get_name (| "y" |),
                Some (Value.Integer 0)
              |),
              []
            |),
            M.call (|
              M.index_access (|
                M.get_name (| "y" |),
                Some (Value.Integer 1)
              |),
              []
            |),
            M.call (|
              M.index_access (|
                M.get_name (| "y" |),
                Some (Value.Integer 2)
              |),
              []
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition e (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Integer 5
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Integer 6
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Integer 7
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition counter : Value.t :=
    undefined.

  Definition h (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Conditional M.bin_op (|
            "==",
            M.un_op (|
              false,
              "++",
              M.get_name (| "counter" |)
            |),
            Value.Integer 0
          |) M.member_access (|
            M.get_name (| "this" |),
            "f"
          |) M.member_access (|
            M.get_name (| "this" |),
            "g"
          |)

        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition htwo (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.get_name (| "this" |),
            "e"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
