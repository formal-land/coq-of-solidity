(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [b, start, end] =>
      let _ :=
        M.define (|
          [ "m" ],
          IndexRangeAccess M.get_name (| "b" |) M.get_name (| "start" |) M.get_name (| "end" |)

        |) in
      let _ :=
        M.define (|
          [ "len" ],
          M.bin_op (|
            "-",
            M.get_name (| "end" |),
            M.get_name (| "start" |)
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "len" |),
              M.member_access (|
                M.get_name (| "m" |),
                "length"
              |)
            |)
          ]
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 59
src: 209:87:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          M.get_name (| "len" |)
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "i" |)
        |)
body: let _ :=
          M.call (|
            M.get_name (| "assert" |),
            [
              M.bin_op (|
                "==",
                M.index_access (|
                  IndexRangeAccess M.get_name (| "b" |) M.get_name (| "start" |) M.get_name (| "end" |)
,
                  Some (M.get_name (| "i" |))
                |),
                M.index_access (|
                  M.get_name (| "m" |),
                  Some (M.get_name (| "i" |))
                |)
              |)
            ]
          |) in
        Value.Tuple []
isSimpleCounterLoop: 1
 in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.index_access (|
              Value.Array [
                IndexRangeAccess M.get_name (| "b" |) M.get_name (| "start" |) M.get_name (| "end" |)

              ],
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [b, start, end] =>
      let _ :=
        M.return_ (|
          IndexRangeAccess M.get_name (| "b" |) M.get_name (| "start" |) M.get_name (| "end" |)

        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h1 (α : list Value.t) : M :=
    match α with
    | [b] =>
      let _ :=
        M.return_ (|
          M.get_name (| "b" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h (α : list Value.t) : M :=
    match α with
    | [b, start, end] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "h1" |),
            [
              IndexRangeAccess M.get_name (| "b" |) M.get_name (| "start" |) M.get_name (| "end" |)

            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
