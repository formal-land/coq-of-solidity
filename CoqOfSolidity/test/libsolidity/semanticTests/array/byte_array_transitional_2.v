(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module c.
  Definition data : Value.t :=
    undefined.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        (* Beginning of a node! *)
id: 27
src: 147:76:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          Value.Integer 33
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "i" |)
        |)
body: let _ :=
          M.call (|
            M.member_access (|
              M.get_name (| "data" |),
              "push"
            |),
            [
              M.call (|
                Ty.path "bytes1",
                [
                  M.get_name (| "i" |)
                ]
              |)
            ]
          |) in
        Value.Tuple []
isSimpleCounterLoop: 1
 in
      let _ :=
        (* Beginning of a node! *)
id: 50
src: 232:86:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          M.member_access (|
            M.get_name (| "data" |),
            "length"
          |)
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "i" |)
        |)
body: if M.bin_op (|
          "!=",
          M.index_access (|
            M.get_name (| "data" |),
            Some (M.get_name (| "i" |))
          |),
          M.call (|
            Ty.path "bytes1",
            [
              M.get_name (| "i" |)
            ]
          |)
        |) then
          M.return_ (|
            M.get_name (| "i" |)
          |)
        else
          Value.Tuple []
isSimpleCounterLoop: 0
 in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "pop"
          |),
          []
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "pop"
          |),
          []
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 83
src: 368:86:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          M.member_access (|
            M.get_name (| "data" |),
            "length"
          |)
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "i" |)
        |)
body: if M.bin_op (|
          "!=",
          M.index_access (|
            M.get_name (| "data" |),
            Some (M.get_name (| "i" |))
          |),
          M.call (|
            Ty.path "bytes1",
            [
              M.get_name (| "i" |)
            ]
          |)
        |) then
          M.return_ (|
            M.get_name (| "i" |)
          |)
        else
          Value.Tuple []
isSimpleCounterLoop: 0
 in
      let _ :=
        M.return_ (|
          Value.Integer 0
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End c.
