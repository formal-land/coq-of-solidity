(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module Test.
  Definition del (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 55
src: 113:131:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          M.member_access (|
            M.get_name (| "x" |),
            "length"
          |)
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "i" |)
        |)
body: (* Beginning of a node! *)
id: 54
src: 164:80:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "j" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "j" |),
          M.member_access (|
            M.index_access (|
              M.get_name (| "x" |),
              Some (M.get_name (| "i" |))
            |),
            "length"
          |)
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "j" |)
        |)
body: M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "x" |),
              Some (M.get_name (| "i" |))
            |),
            Some (M.get_name (| "j" |))
          |),
          M.bin_op (|
            "+",
            M.bin_op (|
              "*",
              M.get_name (| "i" |),
              Value.Integer 0x10
            |),
            M.get_name (| "j" |)
          |)
        |)
isSimpleCounterLoop: 0

isSimpleCounterLoop: 0
 in
      let _ :=
        M.un_op (|
          true,
          "delete",
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 1)
          |)
        |) in
      let _ :=
        M.un_op (|
          true,
          "delete",
          M.index_access (|
            M.index_access (|
              M.get_name (| "x" |),
              Some (Value.Integer 3)
            |),
            Some (Value.Integer 2)
          |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "x" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Test.
