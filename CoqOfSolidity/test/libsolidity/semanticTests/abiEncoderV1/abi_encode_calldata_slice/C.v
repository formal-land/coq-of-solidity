(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_381.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            [

            ]
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                [

                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          M.call (|
            "allocate_unbounded",
            [

            ]
          |)
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f3338315f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3338315f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3338315f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_381_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x0a92f495),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_test_uint256",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x0f6038e0),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_enc_uint256",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x1aea3d1d),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_enc_packed_bytes_reference",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x207451e0),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_enc_bytes_reference",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x668859ae),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_enc_uint256_reference",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x8b4416de),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_enc_packed_bytes",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x9a41a130),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_enc_packed_uint256",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xb797fd78),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_enc_bytes",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xbb622219),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_enc_packed_uint256_reference",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xe54bf056),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_test_bytes",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            [

            ]
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple",
          ["headStart"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_test_uint256",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "fun_test_uint256",
                [

                ]
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_tuple",
                  [
                    M.get (| "memPos" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_uint256_dyn_calldata",
          ["offset"; "end"],
          ["arrayPos";
      "length"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "offset" |);
                            [Literal.number 0x1f]
                          ]
                        |);
                        M.get (| "end" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["arrayPos"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "arrayPos" |);
                        M.call (|
                          "mul",
                          [
                            M.get (| "length" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      ]
                    |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_uint256",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_uint256",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_uint256",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_uint256_dyn_calldatat_uint256t_uint256",
          ["headStart"; "dataEnd"],
          ["value0";
      "value1";
      "value2";
      "value3"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 96]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                M.call (|
                  "calldataload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value0"; "value1"],
                M.call (|
                  "abi_decode_array_uint256_dyn_calldata",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset_1"],
                [Literal.number 32]
              |) in
            let _ :=
              M.declare (|
                ["value2"],
                M.call (|
                  "abi_decode_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset_1" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset_2"],
                [Literal.number 64]
              |) in
            let _ :=
              M.declare (|
                ["value3"],
                M.call (|
                  "abi_decode_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset_2" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_bytes",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_bytes",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_memory_to_memory_with_cleanup",
          ["src"; "dst"; "length"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mcopy",
                [
                  M.get (| "dst" |);
                  M.get (| "src" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "dst" |);
                      M.get (| "length" |)
                    ]
                  |);
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "round_up_to_mul_of",
          ["value"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "and",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 31]
                      ]
                    |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 31]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bytes_memory_ptr",
          ["value"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                M.call (|
                  "array_length_bytes",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_bytes",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "copy_memory_to_memory_with_cleanup",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 0x20]
                    ]
                  |);
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "length" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bytes",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_bytes_memory_ptr",
                  [
                    M.get (| "value0" |);
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_enc_uint256",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"; "param_2"; "param_3"],
                M.call (|
                  "abi_decode_array_uint256_dyn_calldatat_uint256t_uint256",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_enc_uint256",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |);
                    M.get (| "param_2" |);
                    M.get (| "param_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_bytes",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_bytes_calldata",
          ["offset"; "end"],
          ["arrayPos";
      "length"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "offset" |);
                            [Literal.number 0x1f]
                          ]
                        |);
                        M.get (| "end" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["arrayPos"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "arrayPos" |);
                        M.call (|
                          "mul",
                          [
                            M.get (| "length" |);
                            [Literal.number 0x01]
                          ]
                        |)
                      ]
                    |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_bytes_calldatat_uint256t_uint256",
          ["headStart"; "dataEnd"],
          ["value0";
      "value1";
      "value2";
      "value3"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 96]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                M.call (|
                  "calldataload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value0"; "value1"],
                M.call (|
                  "abi_decode_bytes_calldata",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset_1"],
                [Literal.number 32]
              |) in
            let _ :=
              M.declare (|
                ["value2"],
                M.call (|
                  "abi_decode_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset_1" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset_2"],
                [Literal.number 64]
              |) in
            let _ :=
              M.declare (|
                ["value3"],
                M.call (|
                  "abi_decode_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset_2" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_enc_packed_bytes_reference",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"; "param_2"; "param_3"],
                M.call (|
                  "abi_decode_bytes_calldatat_uint256t_uint256",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_enc_packed_bytes_reference",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |);
                    M.get (| "param_2" |);
                    M.get (| "param_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_bytes",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_enc_bytes_reference",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"; "param_2"; "param_3"],
                M.call (|
                  "abi_decode_bytes_calldatat_uint256t_uint256",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_enc_bytes_reference",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |);
                    M.get (| "param_2" |);
                    M.get (| "param_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_bytes",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_enc_uint256_reference",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"; "param_2"; "param_3"],
                M.call (|
                  "abi_decode_array_uint256_dyn_calldatat_uint256t_uint256",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_enc_uint256_reference",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |);
                    M.get (| "param_2" |);
                    M.get (| "param_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_bytes",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_enc_packed_bytes",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"; "param_2"; "param_3"],
                M.call (|
                  "abi_decode_bytes_calldatat_uint256t_uint256",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_enc_packed_bytes",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |);
                    M.get (| "param_2" |);
                    M.get (| "param_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_bytes",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_enc_packed_uint256",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"; "param_2"; "param_3"],
                M.call (|
                  "abi_decode_array_uint256_dyn_calldatat_uint256t_uint256",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_enc_packed_uint256",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |);
                    M.get (| "param_2" |);
                    M.get (| "param_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_bytes",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_enc_bytes",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"; "param_2"; "param_3"],
                M.call (|
                  "abi_decode_bytes_calldatat_uint256t_uint256",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_enc_bytes",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |);
                    M.get (| "param_2" |);
                    M.get (| "param_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_bytes",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_enc_packed_uint256_reference",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"; "param_2"; "param_3"],
                M.call (|
                  "abi_decode_array_uint256_dyn_calldatat_uint256t_uint256",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_enc_packed_uint256_reference",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |);
                    M.get (| "param_2" |);
                    M.get (| "param_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_bytes",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_test_bytes",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "fun_test_bytes",
                [

                ]
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_tuple",
                  [
                    M.get (| "memPos" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_3_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_3_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_3_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "finalize_allocation",
          ["memPtr"; "size"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["newFreePtr"],
                M.call (|
                  "add",
                  [
                    M.get (| "memPtr" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "size" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "newFreePtr" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "newFreePtr" |);
                        M.get (| "memPtr" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 64];
                  M.get (| "newFreePtr" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory",
          ["size"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "memPtr" |);
                  M.get (| "size" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_array_uint256_dyn",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "mul",
                  [
                    M.get (| "length" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "add",
                  [
                    M.get (| "size" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_array_array_uint256_dyn",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["allocSize"],
                M.call (|
                  "array_allocation_size_array_uint256_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    M.get (| "allocSize" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.get (| "length" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_memory_chunk_uint256",
          ["dataStart"; "dataSizeInBytes"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "calldatacopy",
                [
                  M.get (| "dataStart" |);
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |);
                  M.get (| "dataSizeInBytes" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_and_zero_memory_array_array_uint256_dyn",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_array_array_uint256_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["dataStart"],
                M.get (| "memPtr" |)
              |) in
            let _ :=
              M.assign (|
                ["dataSize"],
                M.call (|
                  "array_allocation_size_array_uint256_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["dataStart"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["dataSize"],
                M.call (|
                  "sub",
                  [
                    M.get (| "dataSize" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "zero_memory_chunk_uint256",
                [
                  M.get (| "dataStart" |);
                  M.get (| "dataSize" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x32",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x32]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint256_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "memory_array_index_access_uint256_dyn",
          ["baseRef"; "index"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.call (|
                          "array_length_array_uint256_dyn",
                          [
                            M.get (| "baseRef" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                M.call (|
                  "mul",
                  [
                    M.get (| "index" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "baseRef" |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_0_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "write_to_memory_uint256",
          ["memPtr"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_1_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_2_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_2_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_2_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "increment_wrapping_uint256",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x11",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x11]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "increment_uint256",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "eq",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "add",
                  [
                    M.get (| "value" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint160",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "shl",
                          [
                            [Literal.number 160];
                            [Literal.number 1]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint160_to_uint160",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint160",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint160",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint160_to_address",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_uint160",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_contract_C_to_address",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_address",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_bytes",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "round_up_to_mul_of",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "add",
                  [
                    M.get (| "size" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_available_length_bytes_fromMemory",
          ["src"; "length"; "end"],
          ["array"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["array"],
                M.call (|
                  "allocate_memory",
                  [
                    M.call (|
                      "array_allocation_size_bytes",
                      [
                        M.get (| "length" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "array" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["dst"],
                M.call (|
                  "add",
                  [
                    M.get (| "array" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "src" |);
                        M.get (| "length" |)
                      ]
                    |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "copy_memory_to_memory_with_cleanup",
                [
                  M.get (| "src" |);
                  M.get (| "dst" |);
                  M.get (| "length" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_bytes_fromMemory",
          ["offset"; "end"],
          ["array"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "offset" |);
                            [Literal.number 0x1f]
                          ]
                        |);
                        M.get (| "end" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["array"],
                M.call (|
                  "abi_decode_available_length_bytes_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "offset" |);
                        [Literal.number 0x20]
                      ]
                    |);
                    M.get (| "length" |);
                    M.get (| "end" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_bytes_memory_ptr_fromMemory",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_bytes_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_array_uint256_dyn",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint256_dyn",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encodeUpdatedPos_uint256",
          ["value0"; "pos"],
          ["updatedPos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value0" |);
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updatedPos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_nextElement_array_uint256_dyn",
          ["ptr"],
          ["next"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["next"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_uint256_dyn",
          ["value"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                M.call (|
                  "array_length_array_uint256_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_uint256_dyn",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["baseRef"],
                M.call (|
                  "array_dataslot_array_uint256_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                M.get (| "baseRef" |)
              |) in
            let _ :=
              M.assign (|
                ["i"],
                [Literal.number 0]
              |) in
            let _ :=
              M.for (|
                tt,
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                let _ :=
                  M.declare (|
                    ["i"],
                    M.call (|
                      "add",
                      [
                        M.get (| "i" |);
                        [Literal.number 1]
                      ]
                    |)
                  |) in
                tt,
                let _ :=
                  M.assign (|
                    ["elementValue0"],
                    M.call (|
                      "mload",
                      [
                        M.get (| "srcPtr" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["pos"],
                    M.call (|
                      "abi_encodeUpdatedPos_uint256",
                      [
                        M.get (| "elementValue0" |);
                        M.get (| "pos" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["srcPtr"],
                    M.call (|
                      "array_nextElement_array_uint256_dyn",
                      [
                        M.get (| "srcPtr" |)
                      ]
                    |)
                  |) in
                tt
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_to_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_uint256_dyn_uint256_uint256",
          ["headStart"; "value0"; "value1"; "value2"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 96]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_array_uint256_dyn",
                  [
                    M.get (| "value0" |);
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value2" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 64]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_forward",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["pos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "returndatacopy",
                [
                  M.get (| "pos" |);
                  [Literal.number 0];
                  M.call (|
                    "returndatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "returndatasize",
                    [

                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_test_uint256",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.call (|
                  "convert_rational_3_by_1_to_uint256",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_304_mpos"],
                M.call (|
                  "allocate_and_zero_memory_array_array_uint256_dyn",
                  [
                    M.get (| "_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["var_test_mpos"],
                M.get (| "expr_304_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                [Literal.number 0x41]
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.call (|
                  "convert_rational_by_to_uint256",
                  [
                    M.get (| "expr_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_3_mpos"],
                M.get (| "var_test_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_306_mpos"],
                M.get (| "_3_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint256",
                [
                  M.call (|
                    "memory_array_index_access_uint256_dyn",
                    [
                      M.get (| "expr_306_mpos" |);
                      M.call (|
                        "convert_rational_0_by_1_to_uint256",
                        [
                          M.get (| "expr_2" |)
                        ]
                      |)
                    ]
                  |);
                  M.get (| "_3" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                [Literal.number 0x42]
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.call (|
                  "convert_t_rational_by_to_t_uint256",
                  [
                    M.get (| "expr_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_6_mpos"],
                M.get (| "var_test_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_312_mpos"],
                M.get (| "_6_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.get (| "_4" |)
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint256",
                [
                  M.call (|
                    "memory_array_index_access_uint256_dyn",
                    [
                      M.get (| "expr_312_mpos" |);
                      M.call (|
                        "convert_rational_1_by_1_to_uint256",
                        [
                          M.get (| "expr_4" |)
                        ]
                      |)
                    ]
                  |);
                  M.get (| "_5" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                [Literal.number 0x42]
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.call (|
                  "convert_t_rational_by_to_t_uint256",
                  [
                    M.get (| "expr_5" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_9_mpos"],
                M.get (| "var_test_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_318_mpos"],
                M.get (| "_9_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                M.get (| "_6" |)
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint256",
                [
                  M.call (|
                    "memory_array_index_access_uint256_dyn",
                    [
                      M.get (| "expr_318_mpos" |);
                      M.call (|
                        "convert_rational_2_by_1_to_uint256",
                        [
                          M.get (| "expr_6" |)
                        ]
                      |)
                    ]
                  |);
                  M.get (| "_7" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["var_i"],
                M.call (|
                  "convert_rational_0_by_1_to_uint256",
                  [
                    M.get (| "expr_7" |)
                  ]
                |)
              |) in
            let _ :=
              M.for (|
                tt,
                [Literal.number 1],
                let _ :=
                  M.assign (|
                    ["_8"],
                    M.get (| "var_i" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_9"],
                    M.call (|
                      "increment_wrapping_uint256",
                      [
                        M.get (| "_8" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["var_i"],
                    M.get (| "_9" |)
                  |) in
                tt,
                let _ :=
                  M.assign (|
                    ["_10"],
                    M.get (| "var_i" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_8"],
                    M.get (| "_10" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_14_mpos"],
                    M.get (| "var_test_mpos" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_329_mpos"],
                    M.get (| "_14_mpos" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_9"],
                    M.call (|
                      "array_length_array_uint256_dyn",
                      [
                        M.get (| "expr_329_mpos" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_10"],
                    M.call (|
                      "lt",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_8" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_9" |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.break (||) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["_11"],
                    M.get (| "var_i" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_11"],
                    M.get (| "_11" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["var_j"],
                    M.get (| "expr_11" |)
                  |) in
                let _ :=
                  M.for (|
                    tt,
                    [Literal.number 1],
                    let _ :=
                      M.assign (|
                        ["_12"],
                        M.get (| "var_j" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_13"],
                        M.call (|
                          "increment_uint256",
                          [
                            M.get (| "_12" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.declare (|
                        ["var_j"],
                        M.get (| "_13" |)
                      |) in
                    tt,
                    let _ :=
                      M.assign (|
                        ["_14"],
                        M.get (| "var_j" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_12"],
                        M.get (| "_14" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_19_mpos"],
                        M.get (| "var_test_mpos" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_340_mpos"],
                        M.get (| "_19_mpos" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_13"],
                        M.call (|
                          "array_length_array_uint256_dyn",
                          [
                            M.get (| "expr_340_mpos" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_14"],
                        M.call (|
                          "iszero",
                          [
                            M.call (|
                              "gt",
                              [
                                M.call (|
                                  "cleanup_uint256",
                                  [
                                    M.get (| "expr_12" |)
                                  ]
                                |);
                                M.call (|
                                  "cleanup_uint256",
                                  [
                                    M.get (| "expr_13" |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.if_ (|
                        M.call (|
                          "iszero",
                          [
                            M.get (| "expr_14" |)
                          ]
                        |),
                        ltac:(M.monadic (
                          let _ :=
                            M.break (||) in
                          tt
                        ))
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_347_address"],
                        M.call (|
                          "address",
                          [

                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_348_address"],
                        M.call (|
                          "convert_contract_C_to_address",
                          [
                            M.get (| "expr_347_address" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_348_functionSelector"],
                        [Literal.number 0x9a41a130]
                      |) in
                    let _ :=
                      M.assign (|
                        ["_20_mpos"],
                        M.get (| "var_test_mpos" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_349_mpos"],
                        M.get (| "_20_mpos" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_15"],
                        M.get (| "var_i" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_15"],
                        M.get (| "_15" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_16"],
                        M.get (| "var_j" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_16"],
                        M.get (| "_16" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_17"],
                        M.call (|
                          "allocate_unbounded",
                          [

                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "mstore",
                        [
                          M.get (| "_17" |);
                          M.call (|
                            "shift_left",
                            [
                              M.get (| "expr_348_functionSelector" |)
                            ]
                          |)
                        ]
                      |) in
                    let _ :=
                      M.assign (|
                        ["_18"],
                        M.call (|
                          "abi_encode_array_uint256_dyn_uint256_uint256",
                          [
                            M.call (|
                              "add",
                              [
                                M.get (| "_17" |);
                                [Literal.number 4]
                              ]
                            |);
                            M.get (| "expr_349_mpos" |);
                            M.get (| "expr_15" |);
                            M.get (| "expr_16" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_19"],
                        M.call (|
                          "call",
                          [
                            M.call (|
                              "gas",
                              [

                              ]
                            |);
                            M.get (| "expr_348_address" |);
                            [Literal.number 0];
                            M.get (| "_17" |);
                            M.call (|
                              "sub",
                              [
                                M.get (| "_18" |);
                                M.get (| "_17" |)
                              ]
                            |);
                            M.get (| "_17" |);
                            [Literal.number 0]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.if_ (|
                        M.call (|
                          "iszero",
                          [
                            M.get (| "_19" |)
                          ]
                        |),
                        ltac:(M.monadic (
                          let _ :=
                            M.call (|
                              "revert_forward",
                              [

                              ]
                            |) in
                          tt
                        ))
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_352_mpos"],
                        Literal.undefined
                      |) in
                    let _ :=
                      M.if_ (|
                        M.get (| "_19" |),
                        ltac:(M.monadic (
                          let _ :=
                            M.assign (|
                              ["_20"],
                              M.call (|
                                "returndatasize",
                                [

                                ]
                              |)
                            |) in
                          let _ :=
                            M.call (|
                              "returndatacopy",
                              [
                                M.get (| "_17" |);
                                [Literal.number 0];
                                M.get (| "_20" |)
                              ]
                            |) in
                          let _ :=
                            M.call (|
                              "finalize_allocation",
                              [
                                M.get (| "_17" |);
                                M.get (| "_20" |)
                              ]
                            |) in
                          let _ :=
                            M.declare (|
                              ["expr_352_mpos"],
                              M.call (|
                                "abi_decode_bytes_memory_ptr_fromMemory",
                                [
                                  M.get (| "_17" |);
                                  M.call (|
                                    "add",
                                    [
                                      M.get (| "_17" |);
                                      M.get (| "_20" |)
                                    ]
                                  |)
                                ]
                              |)
                            |) in
                          tt
                        ))
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_353_address"],
                        M.call (|
                          "address",
                          [

                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_354_address"],
                        M.call (|
                          "convert_contract_C_to_address",
                          [
                            M.get (| "expr_353_address" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_functionSelector"],
                        [Literal.number 0xbb622219]
                      |) in
                    let _ :=
                      M.assign (|
                        ["_27_mpos"],
                        M.get (| "var_test_mpos" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_355_mpos"],
                        M.get (| "_27_mpos" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_21"],
                        M.get (| "var_i" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_17"],
                        M.get (| "_21" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_22"],
                        M.get (| "var_j" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_18"],
                        M.get (| "_22" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_23"],
                        M.call (|
                          "allocate_unbounded",
                          [

                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "mstore",
                        [
                          M.get (| "_23" |);
                          M.call (|
                            "shift_left",
                            [
                              M.get (| "expr_functionSelector" |)
                            ]
                          |)
                        ]
                      |) in
                    let _ :=
                      M.assign (|
                        ["_24"],
                        M.call (|
                          "abi_encode_array_uint256_dyn_uint256_uint256",
                          [
                            M.call (|
                              "add",
                              [
                                M.get (| "_23" |);
                                [Literal.number 4]
                              ]
                            |);
                            M.get (| "expr_355_mpos" |);
                            M.get (| "expr_17" |);
                            M.get (| "expr_18" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_25"],
                        M.call (|
                          "call",
                          [
                            M.call (|
                              "gas",
                              [

                              ]
                            |);
                            M.get (| "expr_354_address" |);
                            [Literal.number 0];
                            M.get (| "_23" |);
                            M.call (|
                              "sub",
                              [
                                M.get (| "_24" |);
                                M.get (| "_23" |)
                              ]
                            |);
                            M.get (| "_23" |);
                            [Literal.number 0]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.if_ (|
                        M.call (|
                          "iszero",
                          [
                            M.get (| "_25" |)
                          ]
                        |),
                        ltac:(M.monadic (
                          let _ :=
                            M.call (|
                              "revert_forward",
                              [

                              ]
                            |) in
                          tt
                        ))
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_358_mpos"],
                        Literal.undefined
                      |) in
                    let _ :=
                      M.if_ (|
                        M.get (| "_25" |),
                        ltac:(M.monadic (
                          let _ :=
                            M.assign (|
                              ["_26"],
                              M.call (|
                                "returndatasize",
                                [

                                ]
                              |)
                            |) in
                          let _ :=
                            M.call (|
                              "returndatacopy",
                              [
                                M.get (| "_23" |);
                                [Literal.number 0];
                                M.get (| "_26" |)
                              ]
                            |) in
                          let _ :=
                            M.call (|
                              "finalize_allocation",
                              [
                                M.get (| "_23" |);
                                M.get (| "_26" |)
                              ]
                            |) in
                          let _ :=
                            M.declare (|
                              ["expr_358_mpos"],
                              M.call (|
                                "abi_decode_bytes_memory_ptr_fromMemory",
                                [
                                  M.get (| "_23" |);
                                  M.call (|
                                    "add",
                                    [
                                      M.get (| "_23" |);
                                      M.get (| "_26" |)
                                    ]
                                  |)
                                ]
                              |)
                            |) in
                          tt
                        ))
                      |) in
                    let _ :=
                      M.call (|
                        "fun_compare",
                        [
                          M.get (| "expr_352_mpos" |);
                          M.get (| "expr_358_mpos" |)
                        ]
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_362_address"],
                        M.call (|
                          "address",
                          [

                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_363_address"],
                        M.call (|
                          "convert_contract_C_to_address",
                          [
                            M.get (| "expr_362_address" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_363_functionSelector"],
                        [Literal.number 0x0f6038e0]
                      |) in
                    let _ :=
                      M.assign (|
                        ["_34_mpos"],
                        M.get (| "var_test_mpos" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_364_mpos"],
                        M.get (| "_34_mpos" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_27"],
                        M.get (| "var_i" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_19"],
                        M.get (| "_27" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_28"],
                        M.get (| "var_j" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_20"],
                        M.get (| "_28" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_29"],
                        M.call (|
                          "allocate_unbounded",
                          [

                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "mstore",
                        [
                          M.get (| "_29" |);
                          M.call (|
                            "shift_left",
                            [
                              M.get (| "expr_363_functionSelector" |)
                            ]
                          |)
                        ]
                      |) in
                    let _ :=
                      M.assign (|
                        ["_30"],
                        M.call (|
                          "abi_encode_array_uint256_dyn_uint256_uint256",
                          [
                            M.call (|
                              "add",
                              [
                                M.get (| "_29" |);
                                [Literal.number 4]
                              ]
                            |);
                            M.get (| "expr_364_mpos" |);
                            M.get (| "expr_19" |);
                            M.get (| "expr_20" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_31"],
                        M.call (|
                          "call",
                          [
                            M.call (|
                              "gas",
                              [

                              ]
                            |);
                            M.get (| "expr_363_address" |);
                            [Literal.number 0];
                            M.get (| "_29" |);
                            M.call (|
                              "sub",
                              [
                                M.get (| "_30" |);
                                M.get (| "_29" |)
                              ]
                            |);
                            M.get (| "_29" |);
                            [Literal.number 0]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.if_ (|
                        M.call (|
                          "iszero",
                          [
                            M.get (| "_31" |)
                          ]
                        |),
                        ltac:(M.monadic (
                          let _ :=
                            M.call (|
                              "revert_forward",
                              [

                              ]
                            |) in
                          tt
                        ))
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_367_mpos"],
                        Literal.undefined
                      |) in
                    let _ :=
                      M.if_ (|
                        M.get (| "_31" |),
                        ltac:(M.monadic (
                          let _ :=
                            M.assign (|
                              ["_32"],
                              M.call (|
                                "returndatasize",
                                [

                                ]
                              |)
                            |) in
                          let _ :=
                            M.call (|
                              "returndatacopy",
                              [
                                M.get (| "_29" |);
                                [Literal.number 0];
                                M.get (| "_32" |)
                              ]
                            |) in
                          let _ :=
                            M.call (|
                              "finalize_allocation",
                              [
                                M.get (| "_29" |);
                                M.get (| "_32" |)
                              ]
                            |) in
                          let _ :=
                            M.declare (|
                              ["expr_367_mpos"],
                              M.call (|
                                "abi_decode_bytes_memory_ptr_fromMemory",
                                [
                                  M.get (| "_29" |);
                                  M.call (|
                                    "add",
                                    [
                                      M.get (| "_29" |);
                                      M.get (| "_32" |)
                                    ]
                                  |)
                                ]
                              |)
                            |) in
                          tt
                        ))
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_368_address"],
                        M.call (|
                          "address",
                          [

                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_369_address"],
                        M.call (|
                          "convert_contract_C_to_address",
                          [
                            M.get (| "expr_368_address" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_369_functionSelector"],
                        [Literal.number 0x668859ae]
                      |) in
                    let _ :=
                      M.assign (|
                        ["_41_mpos"],
                        M.get (| "var_test_mpos" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_370_mpos"],
                        M.get (| "_41_mpos" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_33"],
                        M.get (| "var_i" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_21"],
                        M.get (| "_33" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_34"],
                        M.get (| "var_j" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_22"],
                        M.get (| "_34" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_35"],
                        M.call (|
                          "allocate_unbounded",
                          [

                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "mstore",
                        [
                          M.get (| "_35" |);
                          M.call (|
                            "shift_left",
                            [
                              M.get (| "expr_369_functionSelector" |)
                            ]
                          |)
                        ]
                      |) in
                    let _ :=
                      M.assign (|
                        ["_36"],
                        M.call (|
                          "abi_encode_array_uint256_dyn_uint256_uint256",
                          [
                            M.call (|
                              "add",
                              [
                                M.get (| "_35" |);
                                [Literal.number 4]
                              ]
                            |);
                            M.get (| "expr_370_mpos" |);
                            M.get (| "expr_21" |);
                            M.get (| "expr_22" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_37"],
                        M.call (|
                          "call",
                          [
                            M.call (|
                              "gas",
                              [

                              ]
                            |);
                            M.get (| "expr_369_address" |);
                            [Literal.number 0];
                            M.get (| "_35" |);
                            M.call (|
                              "sub",
                              [
                                M.get (| "_36" |);
                                M.get (| "_35" |)
                              ]
                            |);
                            M.get (| "_35" |);
                            [Literal.number 0]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.if_ (|
                        M.call (|
                          "iszero",
                          [
                            M.get (| "_37" |)
                          ]
                        |),
                        ltac:(M.monadic (
                          let _ :=
                            M.call (|
                              "revert_forward",
                              [

                              ]
                            |) in
                          tt
                        ))
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_373_mpos"],
                        Literal.undefined
                      |) in
                    let _ :=
                      M.if_ (|
                        M.get (| "_37" |),
                        ltac:(M.monadic (
                          let _ :=
                            M.assign (|
                              ["_38"],
                              M.call (|
                                "returndatasize",
                                [

                                ]
                              |)
                            |) in
                          let _ :=
                            M.call (|
                              "returndatacopy",
                              [
                                M.get (| "_35" |);
                                [Literal.number 0];
                                M.get (| "_38" |)
                              ]
                            |) in
                          let _ :=
                            M.call (|
                              "finalize_allocation",
                              [
                                M.get (| "_35" |);
                                M.get (| "_38" |)
                              ]
                            |) in
                          let _ :=
                            M.declare (|
                              ["expr_373_mpos"],
                              M.call (|
                                "abi_decode_bytes_memory_ptr_fromMemory",
                                [
                                  M.get (| "_35" |);
                                  M.call (|
                                    "add",
                                    [
                                      M.get (| "_35" |);
                                      M.get (| "_38" |)
                                    ]
                                  |)
                                ]
                              |)
                            |) in
                          tt
                        ))
                      |) in
                    let _ :=
                      M.call (|
                        "fun_compare",
                        [
                          M.get (| "expr_367_mpos" |);
                          M.get (| "expr_373_mpos" |)
                        ]
                      |) in
                    tt
                  |) in
                tt
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_bytes",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 96]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_7678404c0552a58cf14944d1a786cf4c81aab3563e2735cb332aee47bbb57c4a",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_46e3e63c93837e9efa638abb3b4e76ced8c11259a873f1381a0abdf6ae6a823c",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "calldata_array_index_range_access_array_uint256_dyn_calldata",
          ["offset"; "length"; "startIndex"; "endIndex"],
          ["offsetOut";
      "lengthOut"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "startIndex" |);
                    M.get (| "endIndex" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_7678404c0552a58cf14944d1a786cf4c81aab3563e2735cb332aee47bbb57c4a",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "endIndex" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_46e3e63c93837e9efa638abb3b4e76ced8c11259a873f1381a0abdf6ae6a823c",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["offsetOut"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "startIndex" |);
                        [Literal.number 32]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["lengthOut"],
                M.call (|
                  "sub",
                  [
                    M.get (| "endIndex" |);
                    M.get (| "startIndex" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_d0468cefdb41083d2ff66f1e66140f10c9da08cd905521a779422e76a84d11ec",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_calldata_to_memory",
          ["src"; "dst"; "length"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "calldatacopy",
                [
                  M.get (| "dst" |);
                  M.get (| "src" |);
                  M.get (| "length" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_uint256_dyn_calldata_ptr",
          ["start"; "length"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_uint256_dyn",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "shl",
                          [
                            [Literal.number 251];
                            [Literal.number 1]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_d0468cefdb41083d2ff66f1e66140f10c9da08cd905521a779422e76a84d11ec",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mul",
                  [
                    M.get (| "length" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "copy_calldata_to_memory",
                [
                  M.get (| "start" |);
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_uint256_dyn_calldata_slice",
          ["headStart"; "value0"; "value1"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_array_uint256_dyn_calldata_ptr",
                  [
                    M.get (| "value0" |);
                    M.get (| "value1" |);
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_enc_uint256",
          ["var_x_89_offset"; "var_x_89_length"; "var_start"; "var_end"],
          ["var_mpos"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bytes_48_mpos"],
                M.call (|
                  "zero_value_for_split_bytes",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_mpos"],
                M.get (| "zero_bytes_48_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_49_offset"],
                M.get (| "var_x_89_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["_length"],
                M.get (| "var_x_89_length" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_offset"],
                M.get (| "_49_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_length"],
                M.get (| "_length" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_start" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.get (| "var_end" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.get (| "expr" |)
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_103_offset"; "expr_103_length"],
                M.call (|
                  "calldata_array_index_range_access_array_uint256_dyn_calldata",
                  [
                    M.get (| "expr_offset" |);
                    M.get (| "expr_length" |);
                    M.get (| "_3" |);
                    M.get (| "_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_104_mpos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_104_mpos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.call (|
                  "abi_encode_array_uint256_dyn_calldata_slice",
                  [
                    M.get (| "_5" |);
                    M.get (| "expr_103_offset" |);
                    M.get (| "expr_103_length" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "expr_104_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_6" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_104_mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "expr_104_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_6" |);
                      M.get (| "expr_104_mpos" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["var_mpos"],
                M.get (| "expr_104_mpos" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "calldata_array_index_range_access_bytes_calldata",
          ["offset"; "length"; "startIndex"; "endIndex"],
          ["offsetOut";
      "lengthOut"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "startIndex" |);
                    M.get (| "endIndex" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_7678404c0552a58cf14944d1a786cf4c81aab3563e2735cb332aee47bbb57c4a",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "endIndex" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_46e3e63c93837e9efa638abb3b4e76ced8c11259a873f1381a0abdf6ae6a823c",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["offsetOut"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "startIndex" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["lengthOut"],
                M.call (|
                  "sub",
                  [
                    M.get (| "endIndex" |);
                    M.get (| "startIndex" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_bytes_calldata_slice_to_bytes_calldata",
          ["offset"; "length"],
          ["outOffset";
      "outLength"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["outOffset"],
                M.get (| "offset" |)
              |) in
            let _ :=
              M.declare (|
                ["outLength"],
                M.get (| "length" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_bytes_nonPadded_inplace",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_calldata_to_memory_with_cleanup",
          ["src"; "dst"; "length"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "calldatacopy",
                [
                  M.get (| "dst" |);
                  M.get (| "src" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "dst" |);
                      M.get (| "length" |)
                    ]
                  |);
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bytes_calldata_ptr",
          ["start"; "length"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_bytes_nonPadded_inplace",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "copy_calldata_to_memory_with_cleanup",
                [
                  M.get (| "start" |);
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_packed_bytes_calldata",
          ["pos"; "value0"; "value1"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "abi_encode_bytes_calldata_ptr",
                  [
                    M.get (| "value0" |);
                    M.get (| "value1" |);
                    M.get (| "pos" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_enc_packed_bytes_reference",
          ["var_data_22_offset"; "var_data_22_length"; "var_start"; "var_end"],
          ["var_29_mpos"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_t_bytes_mpos"],
                M.call (|
                  "zero_value_for_split_bytes",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_29_mpos"],
                M.get (| "zero_t_bytes_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_57_offset"],
                M.get (| "var_data_22_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["_57_length"],
                M.get (| "var_data_22_length" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_35_offset"],
                M.get (| "_57_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_35_length"],
                M.get (| "_57_length" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_start" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.get (| "var_end" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.get (| "expr" |)
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_38_offset"; "expr_38_length"],
                M.call (|
                  "calldata_array_index_range_access_bytes_calldata",
                  [
                    M.get (| "expr_35_offset" |);
                    M.get (| "expr_35_length" |);
                    M.get (| "_3" |);
                    M.get (| "_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_39_offset"; "expr_39_length"],
                M.call (|
                  "convert_bytes_calldata_slice_to_bytes_calldata",
                  [
                    M.get (| "expr_38_offset" |);
                    M.get (| "expr_38_length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_40_mpos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_40_mpos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.call (|
                  "abi_encode_packed_bytes_calldata",
                  [
                    M.get (| "_5" |);
                    M.get (| "expr_39_offset" |);
                    M.get (| "expr_39_length" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "expr_40_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_6" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_40_mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "expr_40_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_6" |);
                      M.get (| "expr_40_mpos" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["var_29_mpos"],
                M.get (| "expr_40_mpos" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bytes_calldata_to_bytes",
          ["start"; "length"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_bytes",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "copy_calldata_to_memory_with_cleanup",
                [
                  M.get (| "start" |);
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "length" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bytes_calldata",
          ["headStart"; "value0"; "value1"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_bytes_calldata_to_bytes",
                  [
                    M.get (| "value0" |);
                    M.get (| "value1" |);
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_enc_bytes_reference",
          ["var_data_offset"; "var_data_65_length"; "var_start"; "var_end"],
          ["var_72_mpos"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bytes_64_mpos"],
                M.call (|
                  "zero_value_for_split_bytes",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_72_mpos"],
                M.get (| "zero_bytes_64_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_65_offset"],
                M.get (| "var_data_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["_65_length"],
                M.get (| "var_data_65_length" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_78_offset"],
                M.get (| "_65_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_78_length"],
                M.get (| "_65_length" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_start" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.get (| "var_end" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.get (| "expr" |)
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_81_offset"; "expr_81_length"],
                M.call (|
                  "calldata_array_index_range_access_bytes_calldata",
                  [
                    M.get (| "expr_78_offset" |);
                    M.get (| "expr_78_length" |);
                    M.get (| "_3" |);
                    M.get (| "_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_82_offset"; "expr_82_length"],
                M.call (|
                  "convert_bytes_calldata_slice_to_bytes_calldata",
                  [
                    M.get (| "expr_81_offset" |);
                    M.get (| "expr_81_length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_83_mpos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_83_mpos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.call (|
                  "abi_encode_bytes_calldata",
                  [
                    M.get (| "_5" |);
                    M.get (| "expr_82_offset" |);
                    M.get (| "expr_82_length" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "expr_83_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_6" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_83_mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "expr_83_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_6" |);
                      M.get (| "expr_83_mpos" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["var_72_mpos"],
                M.get (| "expr_83_mpos" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_enc_uint256_reference",
          ["var_x_110_offset"; "var_x_length"; "var_start"; "var_end"],
          ["var__mpos"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_t_bytes_memory_ptr_mpos"],
                M.call (|
                  "zero_value_for_split_bytes",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var__mpos"],
                M.get (| "zero_t_bytes_memory_ptr_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_73_offset"],
                M.get (| "var_x_110_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["_73_length"],
                M.get (| "var_x_length" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_121_offset"],
                M.get (| "_73_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_121_length"],
                M.get (| "_73_length" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_start" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.get (| "var_end" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.get (| "expr" |)
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_124_offset"; "expr_124_length"],
                M.call (|
                  "calldata_array_index_range_access_array_uint256_dyn_calldata",
                  [
                    M.get (| "expr_121_offset" |);
                    M.get (| "expr_121_length" |);
                    M.get (| "_3" |);
                    M.get (| "_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_125_mpos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_125_mpos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.call (|
                  "abi_encode_array_uint256_dyn_calldata_slice",
                  [
                    M.get (| "_5" |);
                    M.get (| "expr_124_offset" |);
                    M.get (| "expr_124_length" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "expr_125_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_6" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_125_mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "expr_125_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_6" |);
                      M.get (| "expr_125_mpos" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["var__mpos"],
                M.get (| "expr_125_mpos" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_packed_bytes_calldata_slice",
          ["pos"; "value0"; "value1"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "abi_encode_bytes_calldata_ptr",
                  [
                    M.get (| "value0" |);
                    M.get (| "value1" |);
                    M.get (| "pos" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_enc_packed_bytes",
          ["var_data_2_offset"; "var_data_2_length"; "var_start"; "var_end"],
          ["var_9_mpos"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bytes_80_mpos"],
                M.call (|
                  "zero_value_for_split_bytes",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_9_mpos"],
                M.get (| "zero_bytes_80_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_offset"],
                M.get (| "var_data_2_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["_81_length"],
                M.get (| "var_data_2_length" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_13_offset"],
                M.get (| "_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_13_length"],
                M.get (| "_81_length" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_start" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.get (| "var_end" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.get (| "expr" |)
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_16_offset"; "expr_16_length"],
                M.call (|
                  "calldata_array_index_range_access_bytes_calldata",
                  [
                    M.get (| "expr_13_offset" |);
                    M.get (| "expr_13_length" |);
                    M.get (| "_3" |);
                    M.get (| "_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_17_mpos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_17_mpos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.call (|
                  "abi_encode_packed_bytes_calldata_slice",
                  [
                    M.get (| "_5" |);
                    M.get (| "expr_16_offset" |);
                    M.get (| "expr_16_length" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "expr_17_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_6" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_17_mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "expr_17_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_6" |);
                      M.get (| "expr_17_mpos" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["var_9_mpos"],
                M.get (| "expr_17_mpos" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_array_uint256_dyn_nonPadded_inplace",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_uint256_dyn_calldata",
          ["start"; "length"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_uint256_dyn_nonPadded_inplace",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "shl",
                          [
                            [Literal.number 251];
                            [Literal.number 1]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_d0468cefdb41083d2ff66f1e66140f10c9da08cd905521a779422e76a84d11ec",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mul",
                  [
                    M.get (| "length" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "copy_calldata_to_memory",
                [
                  M.get (| "start" |);
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_packed_array_uint256_dyn_calldata_slice",
          ["pos"; "value0"; "value1"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "abi_encode_array_uint256_dyn_calldata",
                  [
                    M.get (| "value0" |);
                    M.get (| "value1" |);
                    M.get (| "pos" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_enc_packed_uint256",
          ["var_x_offset"; "var_x_131_length"; "var_start"; "var_end"],
          ["var_138_mpos"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bytes_mpos"],
                M.call (|
                  "zero_value_for_split_bytes",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_138_mpos"],
                M.get (| "zero_bytes_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_89_offset"],
                M.get (| "var_x_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["_89_length"],
                M.get (| "var_x_131_length" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_142_offset"],
                M.get (| "_89_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_142_length"],
                M.get (| "_89_length" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_start" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.get (| "var_end" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.get (| "expr" |)
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_145_offset"; "expr_145_length"],
                M.call (|
                  "calldata_array_index_range_access_array_uint256_dyn_calldata",
                  [
                    M.get (| "expr_142_offset" |);
                    M.get (| "expr_142_length" |);
                    M.get (| "_3" |);
                    M.get (| "_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_146_mpos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_146_mpos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.call (|
                  "abi_encode_packed_array_uint256_dyn_calldata_slice",
                  [
                    M.get (| "_5" |);
                    M.get (| "expr_145_offset" |);
                    M.get (| "expr_145_length" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "expr_146_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_6" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_146_mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "expr_146_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_6" |);
                      M.get (| "expr_146_mpos" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["var_138_mpos"],
                M.get (| "expr_146_mpos" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bytes_calldata_slice",
          ["headStart"; "value0"; "value1"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_bytes_calldata_to_bytes",
                  [
                    M.get (| "value0" |);
                    M.get (| "value1" |);
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_enc_bytes",
          ["var_data_45_offset"; "var_data_length"; "var_start"; "var_end"],
          ["var_52_mpos"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bytes_memory_ptr_mpos"],
                M.call (|
                  "zero_value_for_split_bytes",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_52_mpos"],
                M.get (| "zero_bytes_memory_ptr_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_97_offset"],
                M.get (| "var_data_45_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["_97_length"],
                M.get (| "var_data_length" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_56_offset"],
                M.get (| "_97_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_56_length"],
                M.get (| "_97_length" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_start" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.get (| "var_end" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.get (| "expr" |)
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_59_offset"; "expr_59_length"],
                M.call (|
                  "calldata_array_index_range_access_bytes_calldata",
                  [
                    M.get (| "expr_56_offset" |);
                    M.get (| "expr_56_length" |);
                    M.get (| "_3" |);
                    M.get (| "_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_60_mpos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_60_mpos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.call (|
                  "abi_encode_bytes_calldata_slice",
                  [
                    M.get (| "_5" |);
                    M.get (| "expr_59_offset" |);
                    M.get (| "expr_59_length" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "expr_60_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_6" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_60_mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "expr_60_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_6" |);
                      M.get (| "expr_60_mpos" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["var_52_mpos"],
                M.get (| "expr_60_mpos" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_enc_packed_uint256_reference",
          ["var_x_152_offset"; "var_x_152_length"; "var_start"; "var_end"],
          ["var_159_mpos"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bytes_104_mpos"],
                M.call (|
                  "zero_value_for_split_bytes",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_159_mpos"],
                M.get (| "zero_bytes_104_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_105_offset"],
                M.get (| "var_x_152_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["_105_length"],
                M.get (| "var_x_152_length" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_163_offset"],
                M.get (| "_105_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_163_length"],
                M.get (| "_105_length" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_start" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.get (| "var_end" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.get (| "expr" |)
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_166_offset"; "expr_166_length"],
                M.call (|
                  "calldata_array_index_range_access_array_uint256_dyn_calldata",
                  [
                    M.get (| "expr_163_offset" |);
                    M.get (| "expr_163_length" |);
                    M.get (| "_3" |);
                    M.get (| "_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_167_mpos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_167_mpos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.call (|
                  "abi_encode_packed_array_uint256_dyn_calldata_slice",
                  [
                    M.get (| "_5" |);
                    M.get (| "expr_166_offset" |);
                    M.get (| "expr_166_length" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "expr_167_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_6" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_167_mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "expr_167_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_6" |);
                      M.get (| "expr_167_mpos" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["var_159_mpos"],
                M.get (| "expr_167_mpos" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_array_bytes",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["allocSize"],
                M.call (|
                  "array_allocation_size_bytes",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    M.get (| "allocSize" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.get (| "length" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_memory_chunk_bytes1",
          ["dataStart"; "dataSizeInBytes"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "calldatacopy",
                [
                  M.get (| "dataStart" |);
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |);
                  M.get (| "dataSizeInBytes" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_and_zero_memory_array_bytes",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_array_bytes",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["dataStart"],
                M.get (| "memPtr" |)
              |) in
            let _ :=
              M.assign (|
                ["dataSize"],
                M.call (|
                  "array_allocation_size_bytes",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["dataStart"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["dataSize"],
                M.call (|
                  "sub",
                  [
                    M.get (| "dataSize" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "zero_memory_chunk_bytes1",
                [
                  M.get (| "dataStart" |);
                  M.get (| "dataSize" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bytes1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "shl",
                      [
                        [Literal.number 248];
                        [Literal.number 255]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_248",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 248];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_bytes1",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "shift_left_248",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "memory_array_index_access_bytes",
          ["baseRef"; "index"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.call (|
                          "array_length_bytes",
                          [
                            M.get (| "baseRef" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                M.call (|
                  "mul",
                  [
                    M.get (| "index" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "baseRef" |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_bytes1",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "shift_left_248",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bytes_uint256_uint256",
          ["headStart"; "value0"; "value1"; "value2"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 96]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_bytes_memory_ptr",
                  [
                    M.get (| "value0" |);
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value2" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 64]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_test_bytes",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.call (|
                  "convert_rational_3_by_1_to_uint256",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_216_mpos"],
                M.call (|
                  "allocate_and_zero_memory_array_bytes",
                  [
                    M.get (| "_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["var_test_212_mpos"],
                M.get (| "expr_216_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                [Literal.number 0x41]
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.call (|
                  "convert_t_rational_by_to_t_bytes1",
                  [
                    M.get (| "expr_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_114_mpos"],
                M.get (| "var_test_212_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_218_mpos"],
                M.get (| "_114_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.call (|
                "mstore8",
                [
                  M.call (|
                    "memory_array_index_access_bytes",
                    [
                      M.get (| "expr_218_mpos" |);
                      M.call (|
                        "convert_rational_0_by_1_to_uint256",
                        [
                          M.get (| "expr_2" |)
                        ]
                      |)
                    ]
                  |);
                  M.call (|
                    "byte",
                    [
                      [Literal.number 0];
                      M.get (| "_3" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                [Literal.number 0x42]
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.call (|
                  "convert_rational_by_to_bytes1",
                  [
                    M.get (| "expr_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_117_mpos"],
                M.get (| "var_test_212_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_224_mpos"],
                M.get (| "_117_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.get (| "_4" |)
              |) in
            let _ :=
              M.call (|
                "mstore8",
                [
                  M.call (|
                    "memory_array_index_access_bytes",
                    [
                      M.get (| "expr_224_mpos" |);
                      M.call (|
                        "convert_rational_1_by_1_to_uint256",
                        [
                          M.get (| "expr_4" |)
                        ]
                      |)
                    ]
                  |);
                  M.call (|
                    "byte",
                    [
                      [Literal.number 0];
                      M.get (| "_5" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                [Literal.number 0x42]
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.call (|
                  "convert_rational_by_to_bytes1",
                  [
                    M.get (| "expr_5" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_120_mpos"],
                M.get (| "var_test_212_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_230_mpos"],
                M.get (| "_120_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                M.get (| "_6" |)
              |) in
            let _ :=
              M.call (|
                "mstore8",
                [
                  M.call (|
                    "memory_array_index_access_bytes",
                    [
                      M.get (| "expr_230_mpos" |);
                      M.call (|
                        "convert_rational_2_by_1_to_uint256",
                        [
                          M.get (| "expr_6" |)
                        ]
                      |)
                    ]
                  |);
                  M.call (|
                    "byte",
                    [
                      [Literal.number 0];
                      M.get (| "_7" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["var_i"],
                M.call (|
                  "convert_rational_0_by_1_to_uint256",
                  [
                    M.get (| "expr_7" |)
                  ]
                |)
              |) in
            let _ :=
              M.for (|
                tt,
                [Literal.number 1],
                let _ :=
                  M.assign (|
                    ["_8"],
                    M.get (| "var_i" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_9"],
                    M.call (|
                      "increment_wrapping_uint256",
                      [
                        M.get (| "_8" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["var_i"],
                    M.get (| "_9" |)
                  |) in
                tt,
                let _ :=
                  M.assign (|
                    ["_10"],
                    M.get (| "var_i" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_8"],
                    M.get (| "_10" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_125_mpos"],
                    M.get (| "var_test_212_mpos" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_241_mpos"],
                    M.get (| "_125_mpos" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_9"],
                    M.call (|
                      "array_length_bytes",
                      [
                        M.get (| "expr_241_mpos" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_10"],
                    M.call (|
                      "lt",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_8" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_9" |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.break (||) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["_11"],
                    M.get (| "var_i" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_11"],
                    M.get (| "_11" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["var_j"],
                    M.get (| "expr_11" |)
                  |) in
                let _ :=
                  M.for (|
                    tt,
                    [Literal.number 1],
                    let _ :=
                      M.assign (|
                        ["_12"],
                        M.get (| "var_j" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_13"],
                        M.call (|
                          "increment_uint256",
                          [
                            M.get (| "_12" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.declare (|
                        ["var_j"],
                        M.get (| "_13" |)
                      |) in
                    tt,
                    let _ :=
                      M.assign (|
                        ["_14"],
                        M.get (| "var_j" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_12"],
                        M.get (| "_14" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_130_mpos"],
                        M.get (| "var_test_212_mpos" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_252_mpos"],
                        M.get (| "_130_mpos" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_13"],
                        M.call (|
                          "array_length_bytes",
                          [
                            M.get (| "expr_252_mpos" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_14"],
                        M.call (|
                          "iszero",
                          [
                            M.call (|
                              "gt",
                              [
                                M.call (|
                                  "cleanup_uint256",
                                  [
                                    M.get (| "expr_12" |)
                                  ]
                                |);
                                M.call (|
                                  "cleanup_uint256",
                                  [
                                    M.get (| "expr_13" |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.if_ (|
                        M.call (|
                          "iszero",
                          [
                            M.get (| "expr_14" |)
                          ]
                        |),
                        ltac:(M.monadic (
                          let _ :=
                            M.break (||) in
                          tt
                        ))
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_address"],
                        M.call (|
                          "address",
                          [

                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_260_address"],
                        M.call (|
                          "convert_contract_C_to_address",
                          [
                            M.get (| "expr_address" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_260_functionSelector"],
                        [Literal.number 0x8b4416de]
                      |) in
                    let _ :=
                      M.assign (|
                        ["_131_mpos"],
                        M.get (| "var_test_212_mpos" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_mpos"],
                        M.get (| "_131_mpos" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_15"],
                        M.get (| "var_i" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_15"],
                        M.get (| "_15" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_16"],
                        M.get (| "var_j" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_16"],
                        M.get (| "_16" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_17"],
                        M.call (|
                          "allocate_unbounded",
                          [

                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "mstore",
                        [
                          M.get (| "_17" |);
                          M.call (|
                            "shift_left",
                            [
                              M.get (| "expr_260_functionSelector" |)
                            ]
                          |)
                        ]
                      |) in
                    let _ :=
                      M.assign (|
                        ["_18"],
                        M.call (|
                          "abi_encode_bytes_uint256_uint256",
                          [
                            M.call (|
                              "add",
                              [
                                M.get (| "_17" |);
                                [Literal.number 4]
                              ]
                            |);
                            M.get (| "expr_mpos" |);
                            M.get (| "expr_15" |);
                            M.get (| "expr_16" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_19"],
                        M.call (|
                          "call",
                          [
                            M.call (|
                              "gas",
                              [

                              ]
                            |);
                            M.get (| "expr_260_address" |);
                            [Literal.number 0];
                            M.get (| "_17" |);
                            M.call (|
                              "sub",
                              [
                                M.get (| "_18" |);
                                M.get (| "_17" |)
                              ]
                            |);
                            M.get (| "_17" |);
                            [Literal.number 0]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.if_ (|
                        M.call (|
                          "iszero",
                          [
                            M.get (| "_19" |)
                          ]
                        |),
                        ltac:(M.monadic (
                          let _ :=
                            M.call (|
                              "revert_forward",
                              [

                              ]
                            |) in
                          tt
                        ))
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_264_mpos"],
                        Literal.undefined
                      |) in
                    let _ :=
                      M.if_ (|
                        M.get (| "_19" |),
                        ltac:(M.monadic (
                          let _ :=
                            M.assign (|
                              ["_20"],
                              M.call (|
                                "returndatasize",
                                [

                                ]
                              |)
                            |) in
                          let _ :=
                            M.call (|
                              "returndatacopy",
                              [
                                M.get (| "_17" |);
                                [Literal.number 0];
                                M.get (| "_20" |)
                              ]
                            |) in
                          let _ :=
                            M.call (|
                              "finalize_allocation",
                              [
                                M.get (| "_17" |);
                                M.get (| "_20" |)
                              ]
                            |) in
                          let _ :=
                            M.declare (|
                              ["expr_264_mpos"],
                              M.call (|
                                "abi_decode_bytes_memory_ptr_fromMemory",
                                [
                                  M.get (| "_17" |);
                                  M.call (|
                                    "add",
                                    [
                                      M.get (| "_17" |);
                                      M.get (| "_20" |)
                                    ]
                                  |)
                                ]
                              |)
                            |) in
                          tt
                        ))
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_265_address"],
                        M.call (|
                          "address",
                          [

                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_266_address"],
                        M.call (|
                          "convert_contract_C_to_address",
                          [
                            M.get (| "expr_265_address" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_266_functionSelector"],
                        [Literal.number 0x1aea3d1d]
                      |) in
                    let _ :=
                      M.assign (|
                        ["_138_mpos"],
                        M.get (| "var_test_212_mpos" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_267_mpos"],
                        M.get (| "_138_mpos" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_21"],
                        M.get (| "var_i" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_17"],
                        M.get (| "_21" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_22"],
                        M.get (| "var_j" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_18"],
                        M.get (| "_22" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_23"],
                        M.call (|
                          "allocate_unbounded",
                          [

                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "mstore",
                        [
                          M.get (| "_23" |);
                          M.call (|
                            "shift_left",
                            [
                              M.get (| "expr_266_functionSelector" |)
                            ]
                          |)
                        ]
                      |) in
                    let _ :=
                      M.assign (|
                        ["_24"],
                        M.call (|
                          "abi_encode_bytes_uint256_uint256",
                          [
                            M.call (|
                              "add",
                              [
                                M.get (| "_23" |);
                                [Literal.number 4]
                              ]
                            |);
                            M.get (| "expr_267_mpos" |);
                            M.get (| "expr_17" |);
                            M.get (| "expr_18" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_25"],
                        M.call (|
                          "call",
                          [
                            M.call (|
                              "gas",
                              [

                              ]
                            |);
                            M.get (| "expr_266_address" |);
                            [Literal.number 0];
                            M.get (| "_23" |);
                            M.call (|
                              "sub",
                              [
                                M.get (| "_24" |);
                                M.get (| "_23" |)
                              ]
                            |);
                            M.get (| "_23" |);
                            [Literal.number 0]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.if_ (|
                        M.call (|
                          "iszero",
                          [
                            M.get (| "_25" |)
                          ]
                        |),
                        ltac:(M.monadic (
                          let _ :=
                            M.call (|
                              "revert_forward",
                              [

                              ]
                            |) in
                          tt
                        ))
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_270_mpos"],
                        Literal.undefined
                      |) in
                    let _ :=
                      M.if_ (|
                        M.get (| "_25" |),
                        ltac:(M.monadic (
                          let _ :=
                            M.assign (|
                              ["_26"],
                              M.call (|
                                "returndatasize",
                                [

                                ]
                              |)
                            |) in
                          let _ :=
                            M.call (|
                              "returndatacopy",
                              [
                                M.get (| "_23" |);
                                [Literal.number 0];
                                M.get (| "_26" |)
                              ]
                            |) in
                          let _ :=
                            M.call (|
                              "finalize_allocation",
                              [
                                M.get (| "_23" |);
                                M.get (| "_26" |)
                              ]
                            |) in
                          let _ :=
                            M.declare (|
                              ["expr_270_mpos"],
                              M.call (|
                                "abi_decode_bytes_memory_ptr_fromMemory",
                                [
                                  M.get (| "_23" |);
                                  M.call (|
                                    "add",
                                    [
                                      M.get (| "_23" |);
                                      M.get (| "_26" |)
                                    ]
                                  |)
                                ]
                              |)
                            |) in
                          tt
                        ))
                      |) in
                    let _ :=
                      M.call (|
                        "fun_compare",
                        [
                          M.get (| "expr_264_mpos" |);
                          M.get (| "expr_270_mpos" |)
                        ]
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_274_address"],
                        M.call (|
                          "address",
                          [

                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_275_address"],
                        M.call (|
                          "convert_contract_C_to_address",
                          [
                            M.get (| "expr_274_address" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_275_functionSelector"],
                        [Literal.number 0xb797fd78]
                      |) in
                    let _ :=
                      M.assign (|
                        ["_mpos"],
                        M.get (| "var_test_212_mpos" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_276_mpos"],
                        M.get (| "_mpos" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_27"],
                        M.get (| "var_i" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_19"],
                        M.get (| "_27" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_28"],
                        M.get (| "var_j" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_20"],
                        M.get (| "_28" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_29"],
                        M.call (|
                          "allocate_unbounded",
                          [

                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "mstore",
                        [
                          M.get (| "_29" |);
                          M.call (|
                            "shift_left",
                            [
                              M.get (| "expr_275_functionSelector" |)
                            ]
                          |)
                        ]
                      |) in
                    let _ :=
                      M.assign (|
                        ["_30"],
                        M.call (|
                          "abi_encode_bytes_uint256_uint256",
                          [
                            M.call (|
                              "add",
                              [
                                M.get (| "_29" |);
                                [Literal.number 4]
                              ]
                            |);
                            M.get (| "expr_276_mpos" |);
                            M.get (| "expr_19" |);
                            M.get (| "expr_20" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_31"],
                        M.call (|
                          "call",
                          [
                            M.call (|
                              "gas",
                              [

                              ]
                            |);
                            M.get (| "expr_275_address" |);
                            [Literal.number 0];
                            M.get (| "_29" |);
                            M.call (|
                              "sub",
                              [
                                M.get (| "_30" |);
                                M.get (| "_29" |)
                              ]
                            |);
                            M.get (| "_29" |);
                            [Literal.number 0]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.if_ (|
                        M.call (|
                          "iszero",
                          [
                            M.get (| "_31" |)
                          ]
                        |),
                        ltac:(M.monadic (
                          let _ :=
                            M.call (|
                              "revert_forward",
                              [

                              ]
                            |) in
                          tt
                        ))
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_279_mpos"],
                        Literal.undefined
                      |) in
                    let _ :=
                      M.if_ (|
                        M.get (| "_31" |),
                        ltac:(M.monadic (
                          let _ :=
                            M.assign (|
                              ["_32"],
                              M.call (|
                                "returndatasize",
                                [

                                ]
                              |)
                            |) in
                          let _ :=
                            M.call (|
                              "returndatacopy",
                              [
                                M.get (| "_29" |);
                                [Literal.number 0];
                                M.get (| "_32" |)
                              ]
                            |) in
                          let _ :=
                            M.call (|
                              "finalize_allocation",
                              [
                                M.get (| "_29" |);
                                M.get (| "_32" |)
                              ]
                            |) in
                          let _ :=
                            M.declare (|
                              ["expr_279_mpos"],
                              M.call (|
                                "abi_decode_bytes_memory_ptr_fromMemory",
                                [
                                  M.get (| "_29" |);
                                  M.call (|
                                    "add",
                                    [
                                      M.get (| "_29" |);
                                      M.get (| "_32" |)
                                    ]
                                  |)
                                ]
                              |)
                            |) in
                          tt
                        ))
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_280_address"],
                        M.call (|
                          "address",
                          [

                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_281_address"],
                        M.call (|
                          "convert_contract_C_to_address",
                          [
                            M.get (| "expr_280_address" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_281_functionSelector"],
                        [Literal.number 0x207451e0]
                      |) in
                    let _ :=
                      M.assign (|
                        ["_152_mpos"],
                        M.get (| "var_test_212_mpos" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_282_mpos"],
                        M.get (| "_152_mpos" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_33"],
                        M.get (| "var_i" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_21"],
                        M.get (| "_33" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_34"],
                        M.get (| "var_j" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_22"],
                        M.get (| "_34" |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_35"],
                        M.call (|
                          "allocate_unbounded",
                          [

                          ]
                        |)
                      |) in
                    let _ :=
                      M.call (|
                        "mstore",
                        [
                          M.get (| "_35" |);
                          M.call (|
                            "shift_left",
                            [
                              M.get (| "expr_281_functionSelector" |)
                            ]
                          |)
                        ]
                      |) in
                    let _ :=
                      M.assign (|
                        ["_36"],
                        M.call (|
                          "abi_encode_bytes_uint256_uint256",
                          [
                            M.call (|
                              "add",
                              [
                                M.get (| "_35" |);
                                [Literal.number 4]
                              ]
                            |);
                            M.get (| "expr_282_mpos" |);
                            M.get (| "expr_21" |);
                            M.get (| "expr_22" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["_37"],
                        M.call (|
                          "call",
                          [
                            M.call (|
                              "gas",
                              [

                              ]
                            |);
                            M.get (| "expr_281_address" |);
                            [Literal.number 0];
                            M.get (| "_35" |);
                            M.call (|
                              "sub",
                              [
                                M.get (| "_36" |);
                                M.get (| "_35" |)
                              ]
                            |);
                            M.get (| "_35" |);
                            [Literal.number 0]
                          ]
                        |)
                      |) in
                    let _ :=
                      M.if_ (|
                        M.call (|
                          "iszero",
                          [
                            M.get (| "_37" |)
                          ]
                        |),
                        ltac:(M.monadic (
                          let _ :=
                            M.call (|
                              "revert_forward",
                              [

                              ]
                            |) in
                          tt
                        ))
                      |) in
                    let _ :=
                      M.assign (|
                        ["expr_285_mpos"],
                        Literal.undefined
                      |) in
                    let _ :=
                      M.if_ (|
                        M.get (| "_37" |),
                        ltac:(M.monadic (
                          let _ :=
                            M.assign (|
                              ["_38"],
                              M.call (|
                                "returndatasize",
                                [

                                ]
                              |)
                            |) in
                          let _ :=
                            M.call (|
                              "returndatacopy",
                              [
                                M.get (| "_35" |);
                                [Literal.number 0];
                                M.get (| "_38" |)
                              ]
                            |) in
                          let _ :=
                            M.call (|
                              "finalize_allocation",
                              [
                                M.get (| "_35" |);
                                M.get (| "_38" |)
                              ]
                            |) in
                          let _ :=
                            M.declare (|
                              ["expr_285_mpos"],
                              M.call (|
                                "abi_decode_bytes_memory_ptr_fromMemory",
                                [
                                  M.get (| "_35" |);
                                  M.call (|
                                    "add",
                                    [
                                      M.get (| "_35" |);
                                      M.get (| "_38" |)
                                    ]
                                  |)
                                ]
                              |)
                            |) in
                          tt
                        ))
                      |) in
                    let _ :=
                      M.call (|
                        "fun_compare",
                        [
                          M.get (| "expr_279_mpos" |);
                          M.get (| "expr_285_mpos" |)
                        ]
                      |) in
                    tt
                  |) in
                tt
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x01",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x01]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "assert_helper",
          ["condition"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "condition" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x01",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_memoryt_bytes1",
          ["ptr"],
          ["returnValue"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["value"],
                M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "mload",
                      [
                        M.get (| "ptr" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["returnValue"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_compare",
          ["var_x_mpos"; "var_y_mpos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["_159_mpos"],
                M.get (| "var_x_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_178_mpos"],
                M.get (| "_159_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.call (|
                  "array_length_bytes",
                  [
                    M.get (| "expr_178_mpos" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_160_mpos"],
                M.get (| "var_y_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_180_mpos"],
                M.get (| "_160_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "array_length_bytes",
                  [
                    M.get (| "expr_180_mpos" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_2" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["var_i"],
                M.call (|
                  "convert_rational_0_by_1_to_uint256",
                  [
                    M.get (| "expr_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.for (|
                tt,
                [Literal.number 1],
                let _ :=
                  M.assign (|
                    ["_1"],
                    M.get (| "var_i" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_2"],
                    M.call (|
                      "increment_wrapping_uint256",
                      [
                        M.get (| "_1" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["var_i"],
                    M.get (| "_2" |)
                  |) in
                tt,
                let _ :=
                  M.assign (|
                    ["_3"],
                    M.get (| "var_i" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_4"],
                    M.get (| "_3" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_164_mpos"],
                    M.get (| "var_x_mpos" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_190_mpos"],
                    M.get (| "_164_mpos" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_5"],
                    M.call (|
                      "array_length_bytes",
                      [
                        M.get (| "expr_190_mpos" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_6"],
                    M.call (|
                      "lt",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_4" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_5" |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.get (| "expr_6" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.break (||) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["_165_mpos"],
                    M.get (| "var_x_mpos" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_197_mpos"],
                    M.get (| "_165_mpos" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_4"],
                    M.get (| "var_i" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_7"],
                    M.get (| "_4" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_5"],
                    M.call (|
                      "read_from_memoryt_bytes1",
                      [
                        M.call (|
                          "memory_array_index_access_bytes",
                          [
                            M.get (| "expr_197_mpos" |);
                            M.get (| "expr_7" |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_8"],
                    M.get (| "_5" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_168_mpos"],
                    M.get (| "var_y_mpos" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_200_mpos"],
                    M.get (| "_168_mpos" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_6"],
                    M.get (| "var_i" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_9"],
                    M.get (| "_6" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_7"],
                    M.call (|
                      "read_from_memoryt_bytes1",
                      [
                        M.call (|
                          "memory_array_index_access_bytes",
                          [
                            M.get (| "expr_200_mpos" |);
                            M.get (| "expr_9" |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_10"],
                    M.get (| "_7" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_11"],
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_bytes1",
                          [
                            M.get (| "expr_8" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_bytes1",
                          [
                            M.get (| "expr_10" |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "assert_helper",
                    [
                      M.get (| "expr_11" |)
                    ]
                  |) in
                tt
              |) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a2646970667358221220100e8f630f20100af1fadfe1ee4fca4805213d99898cea39218c185a5e662d6264736f6c634300081b0033".
  End C_381_deployed.
End C_381.
