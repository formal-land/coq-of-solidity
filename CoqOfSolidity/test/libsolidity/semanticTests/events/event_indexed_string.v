(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition x : Value.t :=
    undefined.

  Definition y : Value.t :=
    undefined.

  (* Event E *)

  Definition deposit (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        (* Beginning of a node! *)
id: 35
src: 132:58:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          Value.Integer 90
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "i" |)
        |)
body: M.call (|
          M.member_access (|
            M.call (|
              Ty.path "bytes",
              [
                M.get_name (| "x" |)
              ]
            |),
            "push"
          |),
          [
            Value.Integer 0
          ]
        |)
isSimpleCounterLoop: 1
 in
      let _ :=
        (* Beginning of a node! *)
id: 58
src: 200:66:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          Value.Integer 90
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "i" |)
        |)
body: M.assign (|
          "=",
          M.index_access (|
            M.call (|
              Ty.path "bytes",
              [
                M.get_name (| "x" |)
              ]
            |),
            Some (M.get_name (| "i" |))
          |),
          M.call (|
            Ty.path "bytes1",
            [
              M.get_name (| "i" |)
            ]
          |)
        |)
isSimpleCounterLoop: 1
 in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "y" |),
            Some (Value.Integer 0)
          |),
          Value.Integer 4
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "y" |),
            Some (Value.Integer 1)
          |),
          Value.Integer 5
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "y" |),
            Some (Value.Integer 2)
          |),
          Value.Integer 6
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "y" |),
            Some (Value.Integer 3)
          |),
          Value.Integer 7
        |) in
      let _ :=
        EmitStatement M.call (|
          M.get_name (| "E" |),
          [
            M.get_name (| "x" |),
            M.get_name (| "y" |)
          ]
        |)
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
