(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  (* Event E *)

  Definition arr : Value.t :=
    undefined.

  Definition createEvent (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "arr" |),
            "push"
          |),
          [
            M.call (|
              NewExpression (* Beginning of a node! *)
id: 20
src: 137:6:0
nodeType: ArrayTypeName
baseType: Ty.path "uint"
length: 
typeDescriptions: typeString uint256[]typeIdentifier st_array$_t_uint256_$dyn_storage_ptr

,
              [
                Value.Integer 2
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "arr" |),
            "push"
          |),
          [
            M.call (|
              NewExpression (* Beginning of a node! *)
id: 30
src: 170:6:0
nodeType: ArrayTypeName
baseType: Ty.path "uint"
length: 
typeDescriptions: typeString uint256[]typeIdentifier st_array$_t_uint256_$dyn_storage_ptr

,
              [
                Value.Integer 2
              ]
            |)
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "arr" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          M.get_name (| "x" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "arr" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 1)
          |),
          M.bin_op (|
            "+",
            M.get_name (| "x" |),
            Value.Integer 1
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "arr" |),
              Some (Value.Integer 1)
            |),
            Some (Value.Integer 0)
          |),
          M.bin_op (|
            "+",
            M.get_name (| "x" |),
            Value.Integer 2
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "arr" |),
              Some (Value.Integer 1)
            |),
            Some (Value.Integer 1)
          |),
          M.bin_op (|
            "+",
            M.get_name (| "x" |),
            Value.Integer 3
          |)
        |) in
      let _ :=
        EmitStatement M.call (|
          M.get_name (| "E" |),
          [
            M.get_name (| "arr" |)
          ]
        |)
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
