(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_185.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            [

            ]
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                [

                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.call (|
          "constructor_C",
          [

          ]
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          M.call (|
            "allocate_unbounded",
            [

            ]
          |)
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f3138355f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3138355f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3138355f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_left",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shl",
                [
                  [Literal.number 0];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_byte_slice_shift",
        ["value"; "toInsert"],
        ["result"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["mask"],
              M.call (|
                "not",
                [
                  [Literal.number 0]
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["toInsert"],
              M.call (|
                "shift_left",
                [
                  M.get (| "toInsert" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "and",
                [
                  M.get (| "value" |);
                  M.call (|
                    "not",
                    [
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["result"],
              M.call (|
                "or",
                [
                  M.get (| "value" |);
                  M.call (|
                    "and",
                    [
                      M.get (| "toInsert" |);
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_bytes32",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_bytes32_to_bytes32",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_bytes32",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 0];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "prepare_store_bytes32",
        ["value"],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.call (|
                "shift_right_unsigned",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_storage_value_offsett_bytes32_to_bytes32",
        ["slot"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["convertedValue"],
              M.call (|
                "convert_bytes32_to_bytes32",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "sstore",
              [
                M.get (| "slot" |);
                M.call (|
                  "update_byte_slice_shift",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |);
                    M.call (|
                      "prepare_store_bytes32",
                      [
                        M.get (| "convertedValue" |)
                      ]
                    |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "constructor_C",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["expr"],
              [Literal.number 0x92bbf6e823a631f3c8e09b1c8df90f378fb56f7fbc9701827e1ff8aad7f6a028]
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_bytes32_to_bytes32",
              [
                [Literal.number 0x00];
                M.get (| "expr" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_1"],
              [Literal.number 0x2ff0672f372fbe844b353429d4510ea5e43683af134c54f75f789ff57bc0c0]
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_bytes32_to_bytes32",
              [
                [Literal.number 0x01];
                M.get (| "expr_1" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_2"],
              [Literal.number 0x92bbf6e823a631f3c8e09b1c8df90f378fb56f7fbc9701827e1ff8aad7f6a028]
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_bytes32_to_bytes32",
              [
                [Literal.number 0x02];
                M.get (| "expr_2" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_3"],
              [Literal.number 0x92bbf6e823a631f3c8e09b1c8df90f378fb56f7fbc9701827e1ff8aad7f6a028]
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_bytes32_to_bytes32",
              [
                [Literal.number 0x03];
                M.get (| "expr_3" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_4"],
              [Literal.number 0x92bbf6e823a631f3c8e09b1c8df90f378fb56f7fbc9701827e1ff8aad7f6a028]
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_bytes32_to_bytes32",
              [
                [Literal.number 0x04];
                M.get (| "expr_4" |)
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_185_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x0a8e8e01),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_test3",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x66e41cb7),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_test2",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x6b59084d),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_test1",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            [

            ]
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bytes32",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bytes32_to_bytes32",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_bytes32",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bytes32",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_bytes32_to_bytes32",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_test3",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_test3",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_bytes32",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bytes32_bytes32_bytes32_bytes32_bytes32",
          ["headStart"; "value0"; "value1"; "value2"; "value3"; "value4"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 160]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_bytes32_to_bytes32",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_bytes32_to_bytes32",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_bytes32_to_bytes32",
                [
                  M.get (| "value2" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 64]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_bytes32_to_bytes32",
                [
                  M.get (| "value3" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 96]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_bytes32_to_bytes32",
                [
                  M.get (| "value4" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 128]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_test2",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"; "ret_2"; "ret_3"; "ret_4"],
                M.call (|
                  "fun_test2",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_bytes32_bytes32_bytes32_bytes32_bytes32",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |);
                    M.get (| "ret_2" |);
                    M.get (| "ret_3" |);
                    M.get (| "ret_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bytes32_bytes32_bytes32_bytes32",
          ["headStart"; "value0"; "value1"; "value2"; "value3"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 128]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_bytes32_to_bytes32",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_bytes32_to_bytes32",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_bytes32_to_bytes32",
                [
                  M.get (| "value2" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 64]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_bytes32_to_bytes32",
                [
                  M.get (| "value3" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 96]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_test1",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"; "ret_2"; "ret_3"],
                M.call (|
                  "fun_test1",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_bytes32_bytes32_bytes32_bytes32",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |);
                    M.get (| "ret_2" |);
                    M.get (| "ret_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_bytes32",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_test3",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bytes32"],
                M.call (|
                  "zero_value_for_split_bytes32",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bytes32" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x28811f5935c16a099486acb976b3a6b4942950a1425a74e9eb3e9b7f7135e12a]
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.get (| "expr" |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_0_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_bytes32",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_bytes32",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_bytes32",
                  [
                    M.call (|
                      "shift_right_0_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_bytes32",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offsett_bytes32",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_test2",
          [],
          ["var";
      "var_1";
      "var_2";
      "var_3";
      "var_4"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bytes32"],
                M.call (|
                  "zero_value_for_split_bytes32",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bytes32" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_bytes32_1"],
                M.call (|
                  "zero_value_for_split_bytes32",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_1"],
                M.get (| "zero_bytes32_1" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_bytes32_2"],
                M.call (|
                  "zero_value_for_split_bytes32",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_2"],
                M.get (| "zero_bytes32_2" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_t_bytes32"],
                M.call (|
                  "zero_value_for_split_bytes32",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_3"],
                M.get (| "zero_t_bytes32" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_bytes32_3"],
                M.call (|
                  "zero_value_for_split_bytes32",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_4"],
                M.get (| "zero_bytes32_3" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.call (|
                  "read_from_storage_split_offset_bytes32",
                  [
                    [Literal.number 0x00]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_component"],
                M.get (| "expr" |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.call (|
                  "read_from_storage_split_offset_bytes32",
                  [
                    [Literal.number 0x01]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_component_1"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.call (|
                  "read_from_storage_split_offset_bytes32",
                  [
                    [Literal.number 0x02]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.get (| "_3" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_component_2"],
                M.get (| "expr_2" |)
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.call (|
                  "read_from_storage_split_offset_bytes32",
                  [
                    [Literal.number 0x03]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.get (| "_4" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_component_3"],
                M.get (| "expr_3" |)
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.call (|
                  "read_from_storage_split_offset_bytes32",
                  [
                    [Literal.number 0x04]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                M.get (| "_5" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_component_4"],
                M.get (| "expr_4" |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_component" |)
              |) in
            let _ :=
              M.declare (|
                ["var_1"],
                M.get (| "expr_component_1" |)
              |) in
            let _ :=
              M.declare (|
                ["var_2"],
                M.get (| "expr_component_2" |)
              |) in
            let _ :=
              M.declare (|
                ["var_3"],
                M.get (| "expr_component_3" |)
              |) in
            let _ :=
              M.declare (|
                ["var_4"],
                M.get (| "expr_component_4" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x01",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x01]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "assert_helper",
          ["condition"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "condition" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x01",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_test1",
          [],
          ["var_";
      "var";
      "var_1";
      "var_2"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bytes32"],
                M.call (|
                  "zero_value_for_split_bytes32",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "zero_bytes32" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_bytes32_1"],
                M.call (|
                  "zero_value_for_split_bytes32",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bytes32_1" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_bytes32_2"],
                M.call (|
                  "zero_value_for_split_bytes32",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_1"],
                M.get (| "zero_bytes32_2" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_bytes32_3"],
                M.call (|
                  "zero_value_for_split_bytes32",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_2"],
                M.get (| "zero_bytes32_3" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x92bbf6e823a631f3c8e09b1c8df90f378fb56f7fbc9701827e1ff8aad7f6a028]
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                [Literal.number 0x92bbf6e823a631f3c8e09b1c8df90f378fb56f7fbc9701827e1ff8aad7f6a028]
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_bytes32",
                      [
                        M.get (| "expr" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_bytes32",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_2" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                [Literal.number 0x92bbf6e823a631f3c8e09b1c8df90f378fb56f7fbc9701827e1ff8aad7f6a028]
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                [Literal.number 0x92bbf6e823a631f3c8e09b1c8df90f378fb56f7fbc9701827e1ff8aad7f6a028]
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_bytes32",
                      [
                        M.get (| "expr_3" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_bytes32",
                      [
                        M.get (| "expr_4" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_5" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                [Literal.number 0x92bbf6e823a631f3c8e09b1c8df90f378fb56f7fbc9701827e1ff8aad7f6a028]
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                [Literal.number 0x92bbf6e823a631f3c8e09b1c8df90f378fb56f7fbc9701827e1ff8aad7f6a028]
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_bytes32",
                      [
                        M.get (| "expr_6" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_bytes32",
                      [
                        M.get (| "expr_7" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_8" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                [Literal.number 0x92bbf6e823a631f3c8e09b1c8df90f378fb56f7fbc9701827e1ff8aad7f6a028]
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                [Literal.number 0x92bbf6e823a631f3c8e09b1c8df90f378fb56f7fbc9701827e1ff8aad7f6a028]
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_bytes32",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_bytes32",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                [Literal.number 0x92bbf6e823a631f3c8e09b1c8df90f378fb56f7fbc9701827e1ff8aad7f6a028]
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                [Literal.number 0x2ff0672f372fbe844b353429d4510ea5e43683af134c54f75f789ff57bc0c0]
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_bytes32",
                          [
                            M.get (| "expr_12" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_bytes32",
                          [
                            M.get (| "expr_13" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_14" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                [Literal.number 0x92bbf6e823a631f3c8e09b1c8df90f378fb56f7fbc9701827e1ff8aad7f6a028]
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                [Literal.number 0x2ff0672f372fbe844b353429d4510ea5e43683af134c54f75f789ff57bc0c0]
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_bytes32",
                          [
                            M.get (| "expr_15" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_bytes32",
                          [
                            M.get (| "expr_16" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_17" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                [Literal.number 0x92bbf6e823a631f3c8e09b1c8df90f378fb56f7fbc9701827e1ff8aad7f6a028]
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                [Literal.number 0x2ff0672f372fbe844b353429d4510ea5e43683af134c54f75f789ff57bc0c0]
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_bytes32",
                          [
                            M.get (| "expr_18" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_bytes32",
                          [
                            M.get (| "expr_19" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_20" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                [Literal.number 0x92bbf6e823a631f3c8e09b1c8df90f378fb56f7fbc9701827e1ff8aad7f6a028]
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                [Literal.number 0x2ff0672f372fbe844b353429d4510ea5e43683af134c54f75f789ff57bc0c0]
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_bytes32",
                          [
                            M.get (| "expr_21" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_bytes32",
                          [
                            M.get (| "expr_22" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_23" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                [Literal.number 0x92bbf6e823a631f3c8e09b1c8df90f378fb56f7fbc9701827e1ff8aad7f6a028]
              |) in
            let _ :=
              M.assign (|
                ["expr_component"],
                M.get (| "expr_24" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                [Literal.number 0x2ff0672f372fbe844b353429d4510ea5e43683af134c54f75f789ff57bc0c0]
              |) in
            let _ :=
              M.assign (|
                ["expr_125_component"],
                M.get (| "expr_25" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                [Literal.number 0x92bbf6e823a631f3c8e09b1c8df90f378fb56f7fbc9701827e1ff8aad7f6a028]
              |) in
            let _ :=
              M.assign (|
                ["expr_125_component_1"],
                M.get (| "expr_26" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                [Literal.number 0x92bbf6e823a631f3c8e09b1c8df90f378fb56f7fbc9701827e1ff8aad7f6a028]
              |) in
            let _ :=
              M.assign (|
                ["expr_125_component_2"],
                M.get (| "expr_27" |)
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "expr_component" |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_125_component" |)
              |) in
            let _ :=
              M.declare (|
                ["var_1"],
                M.get (| "expr_125_component_1" |)
              |) in
            let _ :=
              M.declare (|
                ["var_2"],
                M.get (| "expr_125_component_2" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a2646970667358221220bccad076d958bd565199415f4bd0425fa365e79fe081570e9fa76f0a3e1b026064736f6c634300081b0033".
  End C_185_deployed.
End C_185.
