(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_38.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            [

            ]
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                [

                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.call (|
          "constructor_C",
          [

          ]
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          M.call (|
            "allocate_unbounded",
            [

            ]
          |)
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f33385f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f33385f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f33385f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "constructor_C",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "fun_f",
              [

              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "round_up_to_mul_of",
        ["value"],
        ["result"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["result"],
              M.call (|
                "and",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 31]
                    ]
                  |);
                  M.call (|
                    "not",
                    [
                      [Literal.number 31]
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "panic_error_0x41",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    [Literal.number 0x4e487b71]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 4];
                [Literal.number 0x41]
              ]
            |) in
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0x24]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "finalize_allocation",
        ["memPtr"; "size"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["newFreePtr"],
              M.call (|
                "add",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "round_up_to_mul_of",
                    [
                      M.get (| "size" |)
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "or",
                [
                  M.call (|
                    "gt",
                    [
                      M.get (| "newFreePtr" |);
                      M.call (|
                        "sub",
                        [
                          M.call (|
                            "shl",
                            [
                              [Literal.number 64];
                              [Literal.number 1]
                            ]
                          |);
                          [Literal.number 1]
                        ]
                      |)
                    ]
                  |);
                  M.call (|
                    "lt",
                    [
                      M.get (| "newFreePtr" |);
                      M.get (| "memPtr" |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x41",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 64];
                M.get (| "newFreePtr" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "allocate_memory",
        ["size"],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "allocate_unbounded",
                [

                ]
              |)
            |) in
          let _ :=
            M.call (|
              "finalize_allocation",
              [
                M.get (| "memPtr" |);
                M.get (| "size" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "allocate_memory_struct_struct_S",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "allocate_memory",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "zero_value_for_uint8",
        [],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              [Literal.number 0]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "zero_value_for_int16",
        [],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              [Literal.number 0]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "allocate_and_zero_memory_struct_struct_S",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "allocate_memory_struct_struct_S",
                [

                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["offset"],
              M.get (| "memPtr" |)
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                M.get (| "offset" |);
                M.call (|
                  "zero_value_for_uint8",
                  [

                  ]
                |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["offset"],
              M.call (|
                "add",
                [
                  M.get (| "offset" |);
                  [Literal.number 32]
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                M.get (| "offset" |);
                M.call (|
                  "zero_value_for_int16",
                  [

                  ]
                |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["offset"],
              M.call (|
                "add",
                [
                  M.get (| "offset" |);
                  [Literal.number 32]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "zero_value_for_split_struct_S",
        [],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.call (|
                "allocate_and_zero_memory_struct_struct_S",
                [

                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_uint8",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.call (|
                "and",
                [
                  M.get (| "value" |);
                  [Literal.number 0xff]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_encode_uint8",
        ["value"; "pos"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                M.get (| "pos" |);
                M.call (|
                  "cleanup_uint8",
                  [
                    M.get (| "value" |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_encodeUpdatedPos_uint8",
        ["value0"; "pos"],
        ["updatedPos"],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "abi_encode_uint8",
              [
                M.get (| "value0" |);
                M.get (| "pos" |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["updatedPos"],
              M.call (|
                "add",
                [
                  M.get (| "pos" |);
                  [Literal.number 0x20]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_int16",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.call (|
                "signextend",
                [
                  [Literal.number 1];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_encode_int16",
        ["value"; "pos"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                M.get (| "pos" |);
                M.call (|
                  "cleanup_int16",
                  [
                    M.get (| "value" |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_encodeUpdatedPos_int16",
        ["value0"; "pos"],
        ["updatedPos"],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "abi_encode_int16",
              [
                M.get (| "value0" |);
                M.get (| "pos" |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["updatedPos"],
              M.call (|
                "add",
                [
                  M.get (| "pos" |);
                  [Literal.number 0x20]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_encode_struct_S",
        ["value"; "pos"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["memberValue0"],
              M.call (|
                "mload",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 0x00]
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["pos"],
              M.call (|
                "abi_encodeUpdatedPos_uint8",
                [
                  M.get (| "memberValue0" |);
                  M.get (| "pos" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["memberValue0_1"],
              M.call (|
                "mload",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 0x20]
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["pos"],
              M.call (|
                "abi_encodeUpdatedPos_int16",
                [
                  M.get (| "memberValue0_1" |);
                  M.get (| "pos" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_encode_packed_struct_S",
        ["pos"; "value0"],
        ["end"],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "abi_encode_struct_S",
              [
                M.get (| "value0" |);
                M.get (| "pos" |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["pos"],
              M.call (|
                "add",
                [
                  M.get (| "pos" |);
                  [Literal.number 64]
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["end"],
              M.get (| "pos" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "packed_hashed_struct_S_to_struct_S",
        ["var"],
        ["hash"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["pos"],
              M.call (|
                "allocate_unbounded",
                [

                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["end"],
              M.call (|
                "abi_encode_packed_struct_S",
                [
                  M.get (| "pos" |);
                  M.get (| "var" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["hash"],
              M.call (|
                "keccak256",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "end" |);
                      M.get (| "pos" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_encode_uint8_to_uint8",
        ["value"; "pos"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                M.get (| "pos" |);
                M.call (|
                  "cleanup_uint8",
                  [
                    M.get (| "value" |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_encode_int16_to_int16",
        ["value"; "pos"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                M.get (| "pos" |);
                M.call (|
                  "cleanup_int16",
                  [
                    M.get (| "value" |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_encode_struct_S_memory_ptr",
        ["value"; "pos"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["memberValue0"],
              M.call (|
                "mload",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 0x00]
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "abi_encode_uint8_to_uint8",
              [
                M.get (| "memberValue0" |);
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x00]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["memberValue0_1"],
              M.call (|
                "mload",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 0x20]
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "abi_encode_int16_to_int16",
              [
                M.get (| "memberValue0_1" |);
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_encode_tuple_struct_S",
        ["headStart"; "value0"],
        ["tail"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["tail"],
              M.call (|
                "add",
                [
                  M.get (| "headStart" |);
                  [Literal.number 64]
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "abi_encode_struct_S_memory_ptr",
              [
                M.get (| "value0" |);
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 0]
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "fun_f",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["var_s_mpos"],
              Literal.undefined
            |) in
          let _ :=
            M.assign (|
              ["zero_struct_S_mpos"],
              M.call (|
                "zero_value_for_split_struct_S",
                [

                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["var_s_mpos"],
              M.get (| "zero_struct_S_mpos" |)
            |) in
          let _ :=
            M.assign (|
              ["_3_mpos"],
              M.get (| "var_s_mpos" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_22_mpos"],
              M.get (| "_3_mpos" |)
            |) in
          let _ :=
            M.assign (|
              ["_mpos"],
              M.get (| "var_s_mpos" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_mpos"],
              M.get (| "_mpos" |)
            |) in
          let _ :=
            M.assign (|
              ["_1"],
              [Literal.number 0xde36958a609314d3ec594bea4ec463de5d1a213a4294213bca60d20e4dc69fa4]
            |) in
          let _ :=
            M.assign (|
              ["_2"],
              M.call (|
                "packed_hashed_struct_S_to_struct_S",
                [
                  M.get (| "expr_22_mpos" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_3"],
              M.call (|
                "allocate_unbounded",
                [

                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_4"],
              M.call (|
                "abi_encode_tuple_struct_S",
                [
                  M.get (| "_3" |);
                  M.get (| "expr_mpos" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "log2",
              [
                M.get (| "_3" |);
                M.call (|
                  "sub",
                  [
                    M.get (| "_4" |);
                    M.get (| "_3" |)
                  ]
                |);
                M.get (| "_1" |);
                M.get (| "_2" |)
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_38_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            [

            ]
          |) in
        tt in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a2646970667358221220504d16ef0ea49d4672f6808737e941ab66721743686f7b51edc342d8d756dc2c64736f6c634300081b0033".
  End C_38_deployed.
End C_38.
