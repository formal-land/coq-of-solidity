(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_267.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            []
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                []
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          Some (M.call (|
            "allocate_unbounded",
            []
          |))
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f3236375f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3236375f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3236375f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_267_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      []
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  Some (M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0xcd580ff3),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_b",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xf0fdf834),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_a",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xf8a8fd6d),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_test",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            []
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_uint256",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_uint256",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_uint256",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_tuple_uint256",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_to_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"],
                Some (M.call (|
                  "abi_decode_tuple_uint256",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_b",
                  [
                    M.get (| "param" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_a",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"],
                Some (M.call (|
                  "abi_decode_tuple_uint256",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_a",
                  [
                    M.get (| "param" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_test",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_test",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint160",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "shl",
                          [
                            [Literal.number 160];
                            [Literal.number 1]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint160_to_uint160",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint160",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint160",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint160_to_address",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_uint160",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_contract_C_to_address",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_address",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "round_up_to_mul_of",
          ["value"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "and",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 31]
                      ]
                    |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 31]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "finalize_allocation",
          ["memPtr"; "size"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["newFreePtr"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "memPtr" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "size" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "newFreePtr" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "newFreePtr" |);
                        M.get (| "memPtr" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 64];
                  M.get (| "newFreePtr" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_t_uint256_fromMemory",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "mload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_uint256",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_uint256_fromMemory",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_t_uint256_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_forward",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["pos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.call (|
                "returndatacopy",
                [
                  M.get (| "pos" |);
                  [Literal.number 0];
                  M.call (|
                    "returndatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "returndatasize",
                    []
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_b",
          ["var_x"],
          ["var_"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_260_address"],
                Some (M.call (|
                  "address",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_261_address"],
                Some (M.call (|
                  "convert_contract_C_to_address",
                  [
                    M.get (| "expr_260_address" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_261_functionSelector"],
                Some ([Literal.number 0xf0fdf834])
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_x" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "_2" |);
                  M.call (|
                    "shift_left",
                    [
                      M.get (| "expr_261_functionSelector" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.call (|
                  "abi_encode_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "_2" |);
                        [Literal.number 4]
                      ]
                    |);
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.call (|
                  "staticcall",
                  [
                    M.call (|
                      "gas",
                      []
                    |);
                    M.get (| "expr_261_address" |);
                    M.get (| "_2" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_3" |);
                        M.get (| "_2" |)
                      ]
                    |);
                    M.get (| "_2" |);
                    [Literal.number 32]
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "_4" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_forward",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                None
              |) in
            let _ :=
              M.if_ (|
                M.get (| "_4" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_5"],
                      Some ([Literal.number 32])
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "gt",
                        [
                          M.get (| "_5" |);
                          M.call (|
                            "returndatasize",
                            []
                          |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["_5"],
                            M.call (|
                              "returndatasize",
                              []
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "finalize_allocation",
                      [
                        M.get (| "_2" |);
                        M.get (| "_5" |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_1"],
                      M.call (|
                        "abi_decode_uint256_fromMemory",
                        [
                          M.get (| "_2" |);
                          M.call (|
                            "add",
                            [
                              M.get (| "_2" |);
                              M.get (| "_5" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_1_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_1_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_1_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x11",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x11]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_add_uint256",
          ["x"; "y"],
          ["sum"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["x"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "x" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["y"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["sum"],
                M.call (|
                  "add",
                  [
                    M.get (| "x" |);
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "x" |);
                    M.get (| "sum" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_a",
          ["var_x"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_t_uint256"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_t_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_x" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.call (|
                  "checked_add_uint256",
                  [
                    M.get (| "expr" |);
                    M.call (|
                      "convert_rational_1_by_1_to_uint256",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_2" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_bool",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_bytes",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 96]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_t_rational_by",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "convert_rational_1_by_1_to_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple_rational_by_to_uint256",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_t_rational_by",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory",
          ["size"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_unbounded",
                  []
                |)
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "memPtr" |);
                  M.get (| "size" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_bytes",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "round_up_to_mul_of",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "add",
                  [
                    M.get (| "size" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_array_bytes",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["allocSize"],
                Some (M.call (|
                  "array_allocation_size_bytes",
                  [
                    M.get (| "length" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    M.get (| "allocSize" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.get (| "length" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_returndata",
          [],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.switch (|
                M.call (|
                  "returndatasize",
                  []
                |),
                [
                  (
                    Some (Literal.number 0),
                    ltac:(M.monadic (
                      let _ :=
                        M.declare (|
                          ["data"],
                          M.call (|
                            "zero_value_for_split_bytes",
                            []
                          |)
                        |) in
                      tt
                    ))            );
                  (
                    None,
                    ltac:(M.monadic (
                      let _ :=
                        M.declare (|
                          ["data"],
                          M.call (|
                            "allocate_memory_array_bytes",
                            [
                              M.call (|
                                "returndatasize",
                                []
                              |)
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "returndatacopy",
                          [
                            M.call (|
                              "add",
                              [
                                M.get (| "data" |);
                                [Literal.number 0x20]
                              ]
                            |);
                            [Literal.number 0];
                            M.call (|
                              "returndatasize",
                              []
                            |)
                          ]
                        |) in
                      tt
                    ))            )          ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_bytes",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_32_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "require_helper",
          ["condition"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "condition" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_2_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_2_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_2_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_10_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_10_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_10_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_t_rational_by_to_t_uint256_fromStack",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "convert_rational_10_by_1_to_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_rational_by_",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_t_rational_by_to_t_uint256_fromStack",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_13_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_13_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_13_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_100_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_rational_by_to_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "convert_rational_100_by_1_to_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_rational_by",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_rational_by_to_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_114_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_114_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint32",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bytes4",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "shl",
                      [
                        [Literal.number 224];
                        [Literal.number 0xffffffff]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint32_to_bytes4",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes4",
                  [
                    M.call (|
                      "shift_left",
                      [
                        M.call (|
                          "cleanup_uint32",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_t_rational_by_to_t_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "convert_rational_by_to_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple_rational_by",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_t_rational_by_to_t_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_1115_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_10000_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_10000_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_10000_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_rational_by_to_uint256_fromStack",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "convert_rational_10000_by_1_to_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple_rational_by_to_uint256_fromStack",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_rational_by_to_uint256_fromStack",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_11116_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_11116_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_11116_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_test",
          [],
          ["var_r"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_r"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["var_success"],
                None
              |) in
            let _ :=
              M.assign (|
                ["zero_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_success"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["var_result_mpos"],
                None
              |) in
            let _ :=
              M.assign (|
                ["zero_bytes_mpos"],
                Some (M.call (|
                  "zero_value_for_split_bytes",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_result_mpos"],
                M.get (| "zero_bytes_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_45_address"],
                Some (M.call (|
                  "address",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.call (|
                  "convert_contract_C_to_address",
                  [
                    M.get (| "expr_45_address" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_address"],
                Some (M.get (| "expr" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_53_mpos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_53_mpos" |);
                    [Literal.number 0x20]
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "_1" |);
                  M.call (|
                    "shl",
                    [
                      [Literal.number 226];
                      [Literal.number 0x3c3f7e0d]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["_1"],
                M.call (|
                  "add",
                  [
                    M.get (| "_1" |);
                    [Literal.number 4]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.call (|
                  "abi_encode_tuple_rational_by_to_uint256",
                  [
                    M.get (| "_1" |);
                    M.get (| "expr_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "expr_53_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_2" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_53_mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "expr_53_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_2" |);
                      M.get (| "expr_53_mpos" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_53_mpos" |);
                    [Literal.number 0x20]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.call (|
                  "mload",
                  [
                    M.get (| "expr_53_mpos" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_54_component"],
                Some (M.call (|
                  "staticcall",
                  [
                    M.call (|
                      "gas",
                      []
                    |);
                    M.get (| "expr_address" |);
                    M.get (| "_3" |);
                    M.get (| "_4" |);
                    [Literal.number 0];
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_54_component_2_mpos"],
                Some (M.call (|
                  "extract_returndata",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_result_mpos"],
                M.get (| "expr_54_component_2_mpos" |)
              |) in
            let _ :=
              M.declare (|
                ["var_success"],
                M.get (| "expr_54_component" |)
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.get (| "var_success" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.get (| "expr_2" |))
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_3" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_17_mpos"],
                      Some (M.get (| "var_result_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_mpos"],
                      Some (M.get (| "_17_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_4"],
                      Some (M.call (|
                        "array_length_bytes",
                        [
                          M.get (| "expr_mpos" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_5"],
                      Some ([Literal.number 0x20])
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_6"],
                      Some (M.call (|
                        "eq",
                        [
                          M.call (|
                            "cleanup_uint256",
                            [
                              M.get (| "expr_4" |)
                            ]
                          |);
                          M.call (|
                            "convert_rational_32_by_1_to_uint256",
                            [
                              M.get (| "expr_5" |)
                            ]
                          |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_3"],
                      M.get (| "expr_6" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_3" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_18_mpos"],
                Some (M.get (| "var_result_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_69_mpos"],
                Some (M.get (| "_18_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some (M.call (|
                  "abi_decode_uint256_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "expr_69_mpos" |);
                        [Literal.number 32]
                      ]
                    |);
                    M.call (|
                      "add",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "expr_69_mpos" |);
                            [Literal.number 32]
                          ]
                        |);
                        M.call (|
                          "array_length_bytes",
                          [
                            M.get (| "expr_69_mpos" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.get (| "var_r" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some (M.call (|
                  "checked_add_uint256",
                  [
                    M.get (| "_6" |);
                    M.get (| "expr_7" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_r"],
                M.get (| "expr_8" |)
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                Some (M.get (| "var_r" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.get (| "_7" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_2_by_1_to_uint256",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_87_address"],
                Some (M.call (|
                  "address",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some (M.call (|
                  "convert_contract_C_to_address",
                  [
                    M.get (| "expr_87_address" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_89_address"],
                Some (M.get (| "expr_12" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some ([Literal.number 0x0a])
              |) in
            let _ :=
              M.assign (|
                ["expr_95_mpos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_95_mpos" |);
                    [Literal.number 0x20]
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "_8" |);
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0xcd580ff3]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["_8"],
                M.call (|
                  "add",
                  [
                    M.get (| "_8" |);
                    [Literal.number 4]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                Some (M.call (|
                  "abi_encode_rational_by_",
                  [
                    M.get (| "_8" |);
                    M.get (| "expr_13" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "expr_95_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_9" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_95_mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "expr_95_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_9" |);
                      M.get (| "expr_95_mpos" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_10"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_95_mpos" |);
                    [Literal.number 0x20]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_11"],
                Some (M.call (|
                  "mload",
                  [
                    M.get (| "expr_95_mpos" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component"],
                Some (M.call (|
                  "staticcall",
                  [
                    M.call (|
                      "gas",
                      []
                    |);
                    M.get (| "expr_89_address" |);
                    M.get (| "_10" |);
                    M.get (| "_11" |);
                    [Literal.number 0];
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_96_component_2_mpos"],
                Some (M.call (|
                  "extract_returndata",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_result_mpos"],
                M.get (| "expr_96_component_2_mpos" |)
              |) in
            let _ :=
              M.declare (|
                ["var_success"],
                M.get (| "expr_component" |)
              |) in
            let _ :=
              M.assign (|
                ["_12"],
                Some (M.get (| "var_success" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some (M.get (| "_12" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some (M.get (| "expr_14" |))
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_15" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_26_mpos"],
                      Some (M.get (| "var_result_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_101_mpos"],
                      Some (M.get (| "_26_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_16"],
                      Some (M.call (|
                        "array_length_bytes",
                        [
                          M.get (| "expr_101_mpos" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_17"],
                      Some ([Literal.number 0x20])
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_18"],
                      Some (M.call (|
                        "eq",
                        [
                          M.call (|
                            "cleanup_uint256",
                            [
                              M.get (| "expr_16" |)
                            ]
                          |);
                          M.call (|
                            "convert_rational_32_by_1_to_uint256",
                            [
                              M.get (| "expr_17" |)
                            ]
                          |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_15"],
                      M.get (| "expr_18" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_15" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_27_mpos"],
                Some (M.get (| "var_result_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_111_mpos"],
                Some (M.get (| "_27_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some (M.call (|
                  "abi_decode_uint256_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "expr_111_mpos" |);
                        [Literal.number 32]
                      ]
                    |);
                    M.call (|
                      "add",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "expr_111_mpos" |);
                            [Literal.number 32]
                          ]
                        |);
                        M.call (|
                          "array_length_bytes",
                          [
                            M.get (| "expr_111_mpos" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_13"],
                Some (M.get (| "var_r" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some (M.call (|
                  "checked_add_uint256",
                  [
                    M.get (| "_13" |);
                    M.get (| "expr_19" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_r"],
                M.get (| "expr_20" |)
              |) in
            let _ :=
              M.assign (|
                ["_14"],
                Some (M.get (| "var_r" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                Some (M.get (| "_14" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                Some ([Literal.number 0x0d])
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_21" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_13_by_1_to_uint256",
                      [
                        M.get (| "expr_22" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_23" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_129_address"],
                Some (M.call (|
                  "address",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                Some (M.call (|
                  "convert_contract_C_to_address",
                  [
                    M.get (| "expr_129_address" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_131_address"],
                Some (M.get (| "expr_24" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                Some ([Literal.number 0x64])
              |) in
            let _ :=
              M.assign (|
                ["expr_137_mpos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["_15"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_137_mpos" |);
                    [Literal.number 0x20]
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "_15" |);
                  M.call (|
                    "shl",
                    [
                      [Literal.number 226];
                      [Literal.number 0x3c3f7e0d]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["_15"],
                M.call (|
                  "add",
                  [
                    M.get (| "_15" |);
                    [Literal.number 4]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_16"],
                Some (M.call (|
                  "abi_encode_rational_by",
                  [
                    M.get (| "_15" |);
                    M.get (| "expr_25" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "expr_137_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_16" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_137_mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "expr_137_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_16" |);
                      M.get (| "expr_137_mpos" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_17"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_137_mpos" |);
                    [Literal.number 0x20]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_18"],
                Some (M.call (|
                  "mload",
                  [
                    M.get (| "expr_137_mpos" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_138_component"],
                Some (M.call (|
                  "staticcall",
                  [
                    M.call (|
                      "gas",
                      []
                    |);
                    M.get (| "expr_131_address" |);
                    M.get (| "_17" |);
                    M.get (| "_18" |);
                    [Literal.number 0];
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_138_component_2_mpos"],
                Some (M.call (|
                  "extract_returndata",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_result_mpos"],
                M.get (| "expr_138_component_2_mpos" |)
              |) in
            let _ :=
              M.declare (|
                ["var_success"],
                M.get (| "expr_138_component" |)
              |) in
            let _ :=
              M.assign (|
                ["_19"],
                Some (M.get (| "var_success" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                Some (M.get (| "_19" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                Some (M.get (| "expr_26" |))
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_27" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_35_mpos"],
                      Some (M.get (| "var_result_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_143_mpos"],
                      Some (M.get (| "_35_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_28"],
                      Some (M.call (|
                        "array_length_bytes",
                        [
                          M.get (| "expr_143_mpos" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_29"],
                      Some ([Literal.number 0x20])
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_30"],
                      Some (M.call (|
                        "eq",
                        [
                          M.call (|
                            "cleanup_uint256",
                            [
                              M.get (| "expr_28" |)
                            ]
                          |);
                          M.call (|
                            "convert_rational_32_by_1_to_uint256",
                            [
                              M.get (| "expr_29" |)
                            ]
                          |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_27"],
                      M.get (| "expr_30" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_27" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_36_mpos"],
                Some (M.get (| "var_result_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_153_mpos"],
                Some (M.get (| "_36_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                Some (M.call (|
                  "abi_decode_uint256_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "expr_153_mpos" |);
                        [Literal.number 32]
                      ]
                    |);
                    M.call (|
                      "add",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "expr_153_mpos" |);
                            [Literal.number 32]
                          ]
                        |);
                        M.call (|
                          "array_length_bytes",
                          [
                            M.get (| "expr_153_mpos" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_20"],
                Some (M.get (| "var_r" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                Some (M.call (|
                  "checked_add_uint256",
                  [
                    M.get (| "_20" |);
                    M.get (| "expr_31" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_r"],
                M.get (| "expr_32" |)
              |) in
            let _ :=
              M.assign (|
                ["_21"],
                Some (M.get (| "var_r" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_33"],
                Some (M.get (| "_21" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_34"],
                Some ([Literal.number 0x72])
              |) in
            let _ :=
              M.assign (|
                ["expr_35"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_33" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_34" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_35" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_171_address"],
                Some (M.call (|
                  "address",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_36"],
                Some (M.call (|
                  "convert_contract_C_to_address",
                  [
                    M.get (| "expr_171_address" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_173_address"],
                Some (M.get (| "expr_36" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_functionSelector"],
                Some ([Literal.number 0xf0fdf834])
              |) in
            let _ :=
              M.assign (|
                ["expr_37"],
                Some ([Literal.number 0x03e8])
              |) in
            let _ :=
              M.assign (|
                ["_22"],
                Some (M.call (|
                  "convert_uint32_to_bytes4",
                  [
                    M.get (| "expr_functionSelector" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_179_mpos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["_23"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_179_mpos" |);
                    [Literal.number 0x20]
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "_23" |);
                  M.get (| "_22" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["_23"],
                M.call (|
                  "add",
                  [
                    M.get (| "_23" |);
                    [Literal.number 4]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_24"],
                Some (M.call (|
                  "abi_encode_tuple_rational_by",
                  [
                    M.get (| "_23" |);
                    M.get (| "expr_37" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "expr_179_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_24" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_179_mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "expr_179_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_24" |);
                      M.get (| "expr_179_mpos" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_25"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_179_mpos" |);
                    [Literal.number 0x20]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_26"],
                Some (M.call (|
                  "mload",
                  [
                    M.get (| "expr_179_mpos" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_180_component"],
                Some (M.call (|
                  "staticcall",
                  [
                    M.call (|
                      "gas",
                      []
                    |);
                    M.get (| "expr_173_address" |);
                    M.get (| "_25" |);
                    M.get (| "_26" |);
                    [Literal.number 0];
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_180_component_2_mpos"],
                Some (M.call (|
                  "extract_returndata",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_result_mpos"],
                M.get (| "expr_180_component_2_mpos" |)
              |) in
            let _ :=
              M.declare (|
                ["var_success"],
                M.get (| "expr_180_component" |)
              |) in
            let _ :=
              M.assign (|
                ["_27"],
                Some (M.get (| "var_success" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_38"],
                Some (M.get (| "_27" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_39"],
                Some (M.get (| "expr_38" |))
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_39" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_mpos"],
                      Some (M.get (| "var_result_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_185_mpos"],
                      Some (M.get (| "_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_40"],
                      Some (M.call (|
                        "array_length_bytes",
                        [
                          M.get (| "expr_185_mpos" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_41"],
                      Some ([Literal.number 0x20])
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_42"],
                      Some (M.call (|
                        "eq",
                        [
                          M.call (|
                            "cleanup_uint256",
                            [
                              M.get (| "expr_40" |)
                            ]
                          |);
                          M.call (|
                            "convert_rational_32_by_1_to_uint256",
                            [
                              M.get (| "expr_41" |)
                            ]
                          |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_39"],
                      M.get (| "expr_42" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_39" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_46_mpos"],
                Some (M.get (| "var_result_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_195_mpos"],
                Some (M.get (| "_46_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_43"],
                Some (M.call (|
                  "abi_decode_uint256_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "expr_195_mpos" |);
                        [Literal.number 32]
                      ]
                    |);
                    M.call (|
                      "add",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "expr_195_mpos" |);
                            [Literal.number 32]
                          ]
                        |);
                        M.call (|
                          "array_length_bytes",
                          [
                            M.get (| "expr_195_mpos" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_28"],
                Some (M.get (| "var_r" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_44"],
                Some (M.call (|
                  "checked_add_uint256",
                  [
                    M.get (| "_28" |);
                    M.get (| "expr_43" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_r"],
                M.get (| "expr_44" |)
              |) in
            let _ :=
              M.assign (|
                ["_29"],
                Some (M.get (| "var_r" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_45"],
                Some (M.get (| "_29" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_46"],
                Some ([Literal.number 0x045b])
              |) in
            let _ :=
              M.assign (|
                ["expr_47"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_45" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_1115_by_1_to_uint256",
                      [
                        M.get (| "expr_46" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_47" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_213_address"],
                Some (M.call (|
                  "address",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_48"],
                Some (M.call (|
                  "convert_contract_C_to_address",
                  [
                    M.get (| "expr_213_address" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_215_address"],
                Some (M.get (| "expr_48" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_49"],
                Some ([Literal.number 0x2710])
              |) in
            let _ :=
              M.assign (|
                ["expr_221_mpos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["_30"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_221_mpos" |);
                    [Literal.number 0x20]
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "_30" |);
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0xcd580ff3]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["_30"],
                M.call (|
                  "add",
                  [
                    M.get (| "_30" |);
                    [Literal.number 4]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_31"],
                Some (M.call (|
                  "abi_encode_tuple_rational_by_to_uint256_fromStack",
                  [
                    M.get (| "_30" |);
                    M.get (| "expr_49" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "expr_221_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_31" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_221_mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "expr_221_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_31" |);
                      M.get (| "expr_221_mpos" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_32"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_221_mpos" |);
                    [Literal.number 0x20]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_33"],
                Some (M.call (|
                  "mload",
                  [
                    M.get (| "expr_221_mpos" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component_1"],
                Some (M.call (|
                  "staticcall",
                  [
                    M.call (|
                      "gas",
                      []
                    |);
                    M.get (| "expr_215_address" |);
                    M.get (| "_32" |);
                    M.get (| "_33" |);
                    [Literal.number 0];
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component_mpos"],
                Some (M.call (|
                  "extract_returndata",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_result_mpos"],
                M.get (| "expr_component_mpos" |)
              |) in
            let _ :=
              M.declare (|
                ["var_success"],
                M.get (| "expr_component_1" |)
              |) in
            let _ :=
              M.assign (|
                ["_34"],
                Some (M.get (| "var_success" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_50"],
                Some (M.get (| "_34" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_51"],
                Some (M.get (| "expr_50" |))
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_51" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_54_mpos"],
                      Some (M.get (| "var_result_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_227_mpos"],
                      Some (M.get (| "_54_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_52"],
                      Some (M.call (|
                        "array_length_bytes",
                        [
                          M.get (| "expr_227_mpos" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_53"],
                      Some ([Literal.number 0x20])
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_54"],
                      Some (M.call (|
                        "eq",
                        [
                          M.call (|
                            "cleanup_uint256",
                            [
                              M.get (| "expr_52" |)
                            ]
                          |);
                          M.call (|
                            "convert_rational_32_by_1_to_uint256",
                            [
                              M.get (| "expr_53" |)
                            ]
                          |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_51"],
                      M.get (| "expr_54" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_51" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_55_mpos"],
                Some (M.get (| "var_result_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_237_mpos"],
                Some (M.get (| "_55_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_55"],
                Some (M.call (|
                  "abi_decode_uint256_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "expr_237_mpos" |);
                        [Literal.number 32]
                      ]
                    |);
                    M.call (|
                      "add",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "expr_237_mpos" |);
                            [Literal.number 32]
                          ]
                        |);
                        M.call (|
                          "array_length_bytes",
                          [
                            M.get (| "expr_237_mpos" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_35"],
                Some (M.get (| "var_r" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_56"],
                Some (M.call (|
                  "checked_add_uint256",
                  [
                    M.get (| "_35" |);
                    M.get (| "expr_55" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_r"],
                M.get (| "expr_56" |)
              |) in
            let _ :=
              M.assign (|
                ["_36"],
                Some (M.get (| "var_r" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_57"],
                Some (M.get (| "_36" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_58"],
                Some ([Literal.number 0x2b6c])
              |) in
            let _ :=
              M.assign (|
                ["expr_59"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_57" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_11116_by_1_to_uint256",
                      [
                        M.get (| "expr_58" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_59" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_37"],
                Some (M.get (| "var_r" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_60"],
                Some (M.get (| "_37" |))
              |) in
            let _ :=
              M.declare (|
                ["var_r"],
                M.get (| "expr_60" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a26469706673582212207257b2d3e2c465876b88abfcf61a953eb247481f30ea02a9f40eb4ac22d75e2664736f6c634300081b0033".
  End C_267_deployed.
End C_267.
