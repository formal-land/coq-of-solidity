(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module D.
  Definition something (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End D.

(* Contract *)
Module C.
  Definition something (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 0)
          |),
          M.member_access (|
            M.get_name (| "this" |),
            "something"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 1)
          |),
          M.member_access (|
            Value.Tuple [
              M.call (|
                NewExpression (* Beginning of a node! *)
id: 33
src: 247:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 32
src: 247:1:0
nodeType: IdentifierPath
name: D
nameLocations: [247:1:0, ]
referencedDeclaration: 6

referencedDeclaration: 6
typeDescriptions: typeString contract DtypeIdentifier st_contract$_D_$6

,
                []
              |)
            ],
            "something"
          |)
        |) in
      let _ :=
        M.define (|
          [ "f" ],
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 1)
          |)
        |) in
      let _ :=
        M.define (|
          [ "a" ],
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeCall"
            |),
            [
              M.index_access (|
                M.get_name (| "x" |),
                Some (Value.Integer 0)
              |),
              Value.Tuple [
                
              ]
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "b" ],
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeCall"
            |),
            [
              M.index_access (|
                M.get_name (| "x" |),
                Some (Value.Integer 1)
              |),
              Value.Tuple [
                
              ]
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "c" ],
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeCall"
            |),
            [
              M.get_name (| "f" |),
              Value.Tuple [
                
              ]
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "&&",
              M.bin_op (|
                "&&",
                M.bin_op (|
                  "==",
                  M.member_access (|
                    M.get_name (| "a" |),
                    "length"
                  |),
                  Value.Integer 4
                |),
                M.bin_op (|
                  "==",
                  M.member_access (|
                    M.get_name (| "b" |),
                    "length"
                  |),
                  Value.Integer 4
                |)
              |),
              M.bin_op (|
                "==",
                M.member_access (|
                  M.get_name (| "c" |),
                  "length"
                |),
                Value.Integer 4
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                Ty.path "bytes4",
                [
                  M.get_name (| "a" |)
                ]
              |),
              M.call (|
                Ty.path "bytes4",
                [
                  M.get_name (| "b" |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                Ty.path "bytes4",
                [
                  M.get_name (| "a" |)
                ]
              |),
              M.call (|
                Ty.path "bytes4",
                [
                  M.get_name (| "c" |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                Ty.path "bytes4",
                [
                  M.get_name (| "a" |)
                ]
              |),
              M.member_access (|
                M.get_name (| "f" |),
                "selector"
              |)
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            Ty.path "bytes4",
            [
              M.get_name (| "a" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
