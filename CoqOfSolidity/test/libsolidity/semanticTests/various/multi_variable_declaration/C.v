(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_226.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            [

            ]
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                [

                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          M.call (|
            "allocate_unbounded",
            [

            ]
          |)
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f3232365f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3232365f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3232365f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_226_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x26121ff0),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_f",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x9942ec6f),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_f2",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xb8c9d365),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_h",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xc27fc305),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_f1",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xe2179b8e),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_g",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            [

            ]
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bool",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "iszero",
                      [
                        M.get (| "value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bool_to_bool",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_bool",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bool",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_bool_to_bool",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_f",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_f",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_f2",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_f2",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_uint256_uint256_uint256",
          ["headStart"; "value0"; "value1"; "value2"; "value3"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 128]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value2" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 64]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value3" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 96]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_h",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"; "ret_2"; "ret_3"],
                M.call (|
                  "fun_h",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_uint256_uint256_uint256_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |);
                    M.get (| "ret_2" |);
                    M.get (| "ret_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_f1",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_f1",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_uint256_uint256",
          ["headStart"; "value0"; "value1"; "value2"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 96]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value2" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 64]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_g",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"; "ret_2"],
                M.call (|
                  "fun_g",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_uint256_uint256_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |);
                    M.get (| "ret_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_bool",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_f",
          [],
          ["var_"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_t_bool"],
                M.call (|
                  "zero_value_for_split_bool",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "zero_t_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.call (|
                  "fun_f1",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.get (| "expr" |)
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_1" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["expr_2"],
                      M.call (|
                        "fun_f2",
                        [

                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_1"],
                      M.get (| "expr_2" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_1_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_2_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_f2",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                M.call (|
                  "zero_value_for_split_bool",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_124_component"; "expr_124_component_1"; "expr_124_component_2"; "expr_124_component_3"],
                M.call (|
                  "fun_h",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["var_a1"],
                M.get (| "expr_124_component" |)
              |) in
            let _ :=
              M.assign (|
                ["var_a3"],
                M.get (| "expr_124_component_2" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_a1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr" |)
                          ]
                        |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_1" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.get (| "expr_2" |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "expr_3" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_2"],
                      M.get (| "var_a3" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_4"],
                      M.get (| "_2" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_5"],
                      [Literal.number 0x03]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_6"],
                      M.call (|
                        "iszero",
                        [
                          M.call (|
                            "eq",
                            [
                              M.call (|
                                "cleanup_uint256",
                                [
                                  M.get (| "expr_4" |)
                                ]
                              |);
                              M.call (|
                                "convert_t_rational_by_to_t_uint256",
                                [
                                  M.get (| "expr_5" |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_3"],
                      M.get (| "expr_6" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_3" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["expr_7"],
                      [Literal.number 0x00]
                    |) in
                  let _ :=
                    M.declare (|
                      ["var"],
                      M.get (| "expr_7" |)
                    |) in
                  let _ :=
                    M.leave (||) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_141_component"; "expr_141_component_1"; "expr_141_component_2"; "expr_component"],
                M.call (|
                  "fun_h",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["var_b1"],
                M.get (| "expr_141_component" |)
              |) in
            let _ :=
              M.assign (|
                ["var_b2"],
                M.get (| "expr_141_component_1" |)
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.get (| "var_b1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                M.get (| "_3" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_8" |)
                          ]
                        |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_9" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                M.get (| "expr_10" |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "expr_11" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_4"],
                      M.get (| "var_b2" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_12"],
                      M.get (| "_4" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_13"],
                      [Literal.number 0x02]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_14"],
                      M.call (|
                        "iszero",
                        [
                          M.call (|
                            "eq",
                            [
                              M.call (|
                                "cleanup_uint256",
                                [
                                  M.get (| "expr_12" |)
                                ]
                              |);
                              M.call (|
                                "convert_rational_2_by_1_to_uint256",
                                [
                                  M.get (| "expr_13" |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_11"],
                      M.get (| "expr_14" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_11" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["expr_15"],
                      [Literal.number 0x00]
                    |) in
                  let _ :=
                    M.declare (|
                      ["var"],
                      M.get (| "expr_15" |)
                    |) in
                  let _ :=
                    M.leave (||) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_158_component"; "expr_158_component_1"; "expr_158_component_2"; "expr_158_component_3"],
                M.call (|
                  "fun_h",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["var_c2"],
                M.get (| "expr_158_component_1" |)
              |) in
            let _ :=
              M.assign (|
                ["var_c3"],
                M.get (| "expr_158_component_2" |)
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.get (| "var_c2" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                M.get (| "_5" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_16" |)
                          ]
                        |);
                        M.call (|
                          "convert_rational_2_by_1_to_uint256",
                          [
                            M.get (| "expr_17" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                M.get (| "expr_18" |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "expr_19" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_6"],
                      M.get (| "var_c3" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_20"],
                      M.get (| "_6" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_21"],
                      [Literal.number 0x03]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_22"],
                      M.call (|
                        "iszero",
                        [
                          M.call (|
                            "eq",
                            [
                              M.call (|
                                "cleanup_uint256",
                                [
                                  M.get (| "expr_20" |)
                                ]
                              |);
                              M.call (|
                                "convert_t_rational_by_to_t_uint256",
                                [
                                  M.get (| "expr_21" |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_19"],
                      M.get (| "expr_22" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_19" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["expr_23"],
                      [Literal.number 0x00]
                    |) in
                  let _ :=
                    M.declare (|
                      ["var"],
                      M.get (| "expr_23" |)
                    |) in
                  let _ :=
                    M.leave (||) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_175_component"; "expr_175_component_1"; "expr_175_component_2"; "expr_175_component_3"],
                M.call (|
                  "fun_h",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["var_d3"],
                M.get (| "expr_175_component_2" |)
              |) in
            let _ :=
              M.assign (|
                ["var_d4"],
                M.get (| "expr_175_component_3" |)
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                M.get (| "var_d3" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                M.get (| "_7" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_24" |)
                          ]
                        |);
                        M.call (|
                          "convert_t_rational_by_to_t_uint256",
                          [
                            M.get (| "expr_25" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                M.get (| "expr_26" |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "expr_27" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_8"],
                      M.get (| "var_d4" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_28"],
                      M.get (| "_8" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_29"],
                      [Literal.number 0x04]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_30"],
                      M.call (|
                        "iszero",
                        [
                          M.call (|
                            "eq",
                            [
                              M.call (|
                                "cleanup_uint256",
                                [
                                  M.get (| "expr_28" |)
                                ]
                              |);
                              M.call (|
                                "convert_rational_by_to_uint256",
                                [
                                  M.get (| "expr_29" |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_27"],
                      M.get (| "expr_30" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_27" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["expr_31"],
                      [Literal.number 0x00]
                    |) in
                  let _ :=
                    M.declare (|
                      ["var"],
                      M.get (| "expr_31" |)
                    |) in
                  let _ :=
                    M.leave (||) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_194_component"; "expr_194_component_1"; "expr_194_component_2"; "expr_194_component_3"],
                M.call (|
                  "fun_h",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["var_e1"],
                M.get (| "expr_194_component" |)
              |) in
            let _ :=
              M.assign (|
                ["var_e3"],
                M.get (| "expr_194_component_2" |)
              |) in
            let _ :=
              M.assign (|
                ["var_e4"],
                M.get (| "expr_194_component_3" |)
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                M.get (| "var_e1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                M.get (| "_9" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_33"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_34"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_32" |)
                          ]
                        |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_33" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_35"],
                M.get (| "expr_34" |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "expr_35" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_10"],
                      M.get (| "var_e3" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_36"],
                      M.get (| "_10" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_37"],
                      [Literal.number 0x03]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_38"],
                      M.call (|
                        "iszero",
                        [
                          M.call (|
                            "eq",
                            [
                              M.call (|
                                "cleanup_uint256",
                                [
                                  M.get (| "expr_36" |)
                                ]
                              |);
                              M.call (|
                                "convert_t_rational_by_to_t_uint256",
                                [
                                  M.get (| "expr_37" |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_35"],
                      M.get (| "expr_38" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_39"],
                M.get (| "expr_35" |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "expr_39" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_11"],
                      M.get (| "var_e4" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_40"],
                      M.get (| "_11" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_41"],
                      [Literal.number 0x04]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_42"],
                      M.call (|
                        "iszero",
                        [
                          M.call (|
                            "eq",
                            [
                              M.call (|
                                "cleanup_uint256",
                                [
                                  M.get (| "expr_40" |)
                                ]
                              |);
                              M.call (|
                                "convert_rational_by_to_uint256",
                                [
                                  M.get (| "expr_41" |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_39"],
                      M.get (| "expr_42" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_39" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["expr_43"],
                      [Literal.number 0x00]
                    |) in
                  let _ :=
                    M.declare (|
                      ["var"],
                      M.get (| "expr_43" |)
                    |) in
                  let _ :=
                    M.leave (||) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_44"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_44" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_h",
          [],
          ["var_a";
      "var_b";
      "var_c";
      "var_d"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_a"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_t_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_b"],
                M.get (| "zero_t_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_1"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_c"],
                M.get (| "zero_uint256_1" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_2"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_d"],
                M.get (| "zero_uint256_2" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.call (|
                  "convert_rational_1_by_1_to_uint256",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_a"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.call (|
                  "convert_rational_2_by_1_to_uint256",
                  [
                    M.get (| "expr_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_b"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.call (|
                  "convert_t_rational_by_to_t_uint256",
                  [
                    M.get (| "expr_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_c"],
                M.get (| "_3" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                [Literal.number 0x04]
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.call (|
                  "convert_rational_by_to_uint256",
                  [
                    M.get (| "expr_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_d"],
                M.get (| "_4" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_f1",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                M.call (|
                  "zero_value_for_split_bool",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_62_component"; "expr_62_component_1"; "expr_62_component_2"],
                M.call (|
                  "fun_g",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["var_x"],
                M.get (| "expr_62_component" |)
              |) in
            let _ :=
              M.assign (|
                ["var_y"],
                M.get (| "expr_62_component_1" |)
              |) in
            let _ :=
              M.assign (|
                ["var_z"],
                M.get (| "expr_62_component_2" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_x" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr" |)
                          ]
                        |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_1" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.get (| "expr_2" |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "expr_3" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_2"],
                      M.get (| "var_y" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_4"],
                      M.get (| "_2" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_5"],
                      [Literal.number 0x02]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_6"],
                      M.call (|
                        "iszero",
                        [
                          M.call (|
                            "eq",
                            [
                              M.call (|
                                "cleanup_uint256",
                                [
                                  M.get (| "expr_4" |)
                                ]
                              |);
                              M.call (|
                                "convert_rational_2_by_1_to_uint256",
                                [
                                  M.get (| "expr_5" |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_3"],
                      M.get (| "expr_6" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                M.get (| "expr_3" |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "expr_7" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_3"],
                      M.get (| "var_z" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_8"],
                      M.get (| "_3" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_9"],
                      [Literal.number 0x03]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_10"],
                      M.call (|
                        "iszero",
                        [
                          M.call (|
                            "eq",
                            [
                              M.call (|
                                "cleanup_uint256",
                                [
                                  M.get (| "expr_8" |)
                                ]
                              |);
                              M.call (|
                                "convert_t_rational_by_to_t_uint256",
                                [
                                  M.get (| "expr_9" |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_7"],
                      M.get (| "expr_10" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_7" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["expr_11"],
                      [Literal.number 0x00]
                    |) in
                  let _ :=
                    M.declare (|
                      ["var"],
                      M.get (| "expr_11" |)
                    |) in
                  let _ :=
                    M.leave (||) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_81_component"; "expr_81_component_1"; "expr_81_component_2"],
                M.call (|
                  "fun_g",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["var_a"],
                M.get (| "expr_81_component_1" |)
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.get (| "var_a" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                M.get (| "_4" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_12" |)
                          ]
                        |);
                        M.call (|
                          "convert_rational_2_by_1_to_uint256",
                          [
                            M.get (| "expr_13" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_14" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["expr_15"],
                      [Literal.number 0x00]
                    |) in
                  let _ :=
                    M.declare (|
                      ["var"],
                      M.get (| "expr_15" |)
                    |) in
                  let _ :=
                    M.leave (||) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_component"; "expr_component_1"; "expr_component_2"],
                M.call (|
                  "fun_g",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["var_b"],
                M.get (| "expr_component" |)
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.get (| "var_b" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                M.get (| "_5" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_16" |)
                          ]
                        |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_17" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_18" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["expr_19"],
                      [Literal.number 0x00]
                    |) in
                  let _ :=
                    M.declare (|
                      ["var"],
                      M.get (| "expr_19" |)
                    |) in
                  let _ :=
                    M.leave (||) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_103_component"; "expr_103_component_1"; "expr_component_3"],
                M.call (|
                  "fun_g",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["var_c"],
                M.get (| "expr_component_3" |)
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.get (| "var_c" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                M.get (| "_6" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_20" |)
                          ]
                        |);
                        M.call (|
                          "convert_t_rational_by_to_t_uint256",
                          [
                            M.get (| "expr_21" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_22" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["expr_23"],
                      [Literal.number 0x00]
                    |) in
                  let _ :=
                    M.declare (|
                      ["var"],
                      M.get (| "expr_23" |)
                    |) in
                  let _ :=
                    M.leave (||) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_24" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_g",
          [],
          ["var_a";
      "var_b";
      "var_c"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_a"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_1"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_b"],
                M.get (| "zero_uint256_1" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_2"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_c"],
                M.get (| "zero_uint256_2" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.call (|
                  "convert_rational_1_by_1_to_uint256",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_a"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.call (|
                  "convert_rational_2_by_1_to_uint256",
                  [
                    M.get (| "expr_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_b"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.call (|
                  "convert_t_rational_by_to_t_uint256",
                  [
                    M.get (| "expr_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_c"],
                M.get (| "_3" |)
              |) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a2646970667358221220a91b3faff4f7df7cb1449fd8bf54f8c64e39c303375af63a70c96472e74ab0f164736f6c634300081b0033".
  End C_226_deployed.
End C_226.
