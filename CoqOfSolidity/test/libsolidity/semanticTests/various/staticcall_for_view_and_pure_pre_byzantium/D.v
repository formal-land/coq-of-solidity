(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module D_80.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            []
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                []
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          Some (M.call (|
            "allocate_unbounded",
            []
          |))
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "445f38305f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "445f38305f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "445f38305f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module D_80_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      []
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  Some (M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x26121ff0),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_f",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x73b0487b),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_fview",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xe4e0fefc),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_fpure",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            []
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_to_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_f",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_f",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_fview",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_fview",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_fpure",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_fpure",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple",
          ["headStart"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_forward",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["pos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.call (|
                "returndatacopy",
                [
                  M.get (| "pos" |);
                  [Literal.number 0];
                  M.call (|
                    "returndatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "returndatasize",
                    []
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint160",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "shl",
                          [
                            [Literal.number 160];
                            [Literal.number 1]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint160_to_uint160",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint160",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint160",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint160_to_address",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_uint160",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_contract_C_to_address",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_address",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "round_up_to_mul_of",
          ["value"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "and",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 31]
                      ]
                    |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 31]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "finalize_allocation",
          ["memPtr"; "size"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["newFreePtr"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "memPtr" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "size" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "newFreePtr" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "newFreePtr" |);
                        M.get (| "memPtr" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 64];
                  M.get (| "newFreePtr" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_uint256",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_t_uint256_fromMemory",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "mload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_uint256",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_uint256_fromMemory",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_t_uint256_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_f",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "_1" |);
                    M.call (|
                      "datasize",
                      [
                        [Literal.string "435f3135"]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "_2" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "_2" |);
                        M.get (| "_1" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "datacopy",
                [
                  M.get (| "_1" |);
                  M.call (|
                    "dataoffset",
                    [
                      [Literal.string "435f3135"]
                    ]
                  |);
                  M.call (|
                    "datasize",
                    [
                      [Literal.string "435f3135"]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["_2"],
                M.call (|
                  "abi_encode_tuple",
                  [
                    M.get (| "_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_35_address"],
                Some (M.call (|
                  "create",
                  [
                    [Literal.number 0];
                    M.get (| "_1" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_2" |);
                        M.get (| "_1" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "expr_35_address" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_forward",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_36_address"],
                Some (M.get (| "expr_35_address" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_37_address"],
                Some (M.call (|
                  "convert_contract_C_to_address",
                  [
                    M.get (| "expr_36_address" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_37_functionSelector"],
                Some ([Literal.number 0x26121ff0])
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "_3" |);
                  M.call (|
                    "shift_left",
                    [
                      M.get (| "expr_37_functionSelector" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.call (|
                  "abi_encode_tuple",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "_3" |);
                        [Literal.number 4]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.call (|
                  "call",
                  [
                    M.call (|
                      "gas",
                      []
                    |);
                    M.get (| "expr_37_address" |);
                    [Literal.number 0];
                    M.get (| "_3" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_4" |);
                        M.get (| "_3" |)
                      ]
                    |);
                    M.get (| "_3" |);
                    [Literal.number 32]
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "_5" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_forward",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                None
              |) in
            let _ :=
              M.if_ (|
                M.get (| "_5" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_6"],
                      Some ([Literal.number 32])
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "gt",
                        [
                          M.get (| "_6" |);
                          M.call (|
                            "returndatasize",
                            []
                          |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["_6"],
                            M.call (|
                              "returndatasize",
                              []
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "finalize_allocation",
                      [
                        M.get (| "_3" |);
                        M.get (| "_6" |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr"],
                      M.call (|
                        "abi_decode_uint256_fromMemory",
                        [
                          M.get (| "_3" |);
                          M.call (|
                            "add",
                            [
                              M.get (| "_3" |);
                              M.get (| "_6" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint160_to_contract_CView",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_uint160",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_address_to_contract_CView",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_contract_CView",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_contract_CView_to_address",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_address",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_fview",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_t_uint256"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_t_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "_1" |);
                    M.call (|
                      "datasize",
                      [
                        [Literal.string "435f3135"]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "_2" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "_2" |);
                        M.get (| "_1" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "datacopy",
                [
                  M.get (| "_1" |);
                  M.call (|
                    "dataoffset",
                    [
                      [Literal.string "435f3135"]
                    ]
                  |);
                  M.call (|
                    "datasize",
                    [
                      [Literal.string "435f3135"]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["_2"],
                M.call (|
                  "abi_encode_tuple",
                  [
                    M.get (| "_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_52_address"],
                Some (M.call (|
                  "create",
                  [
                    [Literal.number 0];
                    M.get (| "_1" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_2" |);
                        M.get (| "_1" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "expr_52_address" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_forward",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.call (|
                  "convert_contract_C_to_address",
                  [
                    M.get (| "expr_52_address" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_54_address"],
                Some (M.call (|
                  "convert_address_to_contract_CView",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_address"],
                Some (M.get (| "expr_54_address" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_56_address"],
                Some (M.call (|
                  "convert_contract_CView_to_address",
                  [
                    M.get (| "expr_address" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_56_functionSelector"],
                Some ([Literal.number 0x26121ff0])
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "_3" |);
                  M.call (|
                    "shift_left",
                    [
                      M.get (| "expr_56_functionSelector" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.call (|
                  "abi_encode_tuple",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "_3" |);
                        [Literal.number 4]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.call (|
                  "staticcall",
                  [
                    M.call (|
                      "gas",
                      []
                    |);
                    M.get (| "expr_56_address" |);
                    M.get (| "_3" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_4" |);
                        M.get (| "_3" |)
                      ]
                    |);
                    M.get (| "_3" |);
                    [Literal.number 32]
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "_5" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_forward",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                None
              |) in
            let _ :=
              M.if_ (|
                M.get (| "_5" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_6"],
                      Some ([Literal.number 32])
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "gt",
                        [
                          M.get (| "_6" |);
                          M.call (|
                            "returndatasize",
                            []
                          |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["_6"],
                            M.call (|
                              "returndatasize",
                              []
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "finalize_allocation",
                      [
                        M.get (| "_3" |);
                        M.get (| "_6" |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_1"],
                      M.call (|
                        "abi_decode_uint256_fromMemory",
                        [
                          M.get (| "_3" |);
                          M.call (|
                            "add",
                            [
                              M.get (| "_3" |);
                              M.get (| "_6" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint160_to_contract_CPure",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_uint160",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_address_to_contract_CPure",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_contract_CPure",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_contract_CPure_to_address",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_address",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_fpure",
          [],
          ["var_"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "_1" |);
                    M.call (|
                      "datasize",
                      [
                        [Literal.string "435f3135"]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "_2" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "_2" |);
                        M.get (| "_1" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "datacopy",
                [
                  M.get (| "_1" |);
                  M.call (|
                    "dataoffset",
                    [
                      [Literal.string "435f3135"]
                    ]
                  |);
                  M.call (|
                    "datasize",
                    [
                      [Literal.string "435f3135"]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["_2"],
                M.call (|
                  "abi_encode_tuple",
                  [
                    M.get (| "_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_71_address"],
                Some (M.call (|
                  "create",
                  [
                    [Literal.number 0];
                    M.get (| "_1" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_2" |);
                        M.get (| "_1" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "expr_71_address" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_forward",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.call (|
                  "convert_contract_C_to_address",
                  [
                    M.get (| "expr_71_address" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_73_address"],
                Some (M.call (|
                  "convert_address_to_contract_CPure",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_74_address"],
                Some (M.get (| "expr_73_address" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_75_address"],
                Some (M.call (|
                  "convert_contract_CPure_to_address",
                  [
                    M.get (| "expr_74_address" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_functionSelector"],
                Some ([Literal.number 0x26121ff0])
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "_3" |);
                  M.call (|
                    "shift_left",
                    [
                      M.get (| "expr_functionSelector" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.call (|
                  "abi_encode_tuple",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "_3" |);
                        [Literal.number 4]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.call (|
                  "staticcall",
                  [
                    M.call (|
                      "gas",
                      []
                    |);
                    M.get (| "expr_75_address" |);
                    M.get (| "_3" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_4" |);
                        M.get (| "_3" |)
                      ]
                    |);
                    M.get (| "_3" |);
                    [Literal.number 32]
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "_5" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_forward",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                None
              |) in
            let _ :=
              M.if_ (|
                M.get (| "_5" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_6"],
                      Some ([Literal.number 32])
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "gt",
                        [
                          M.get (| "_6" |);
                          M.call (|
                            "returndatasize",
                            []
                          |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["_6"],
                            M.call (|
                              "returndatasize",
                              []
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "finalize_allocation",
                      [
                        M.get (| "_3" |);
                        M.get (| "_6" |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_1"],
                      M.call (|
                        "abi_decode_uint256_fromMemory",
                        [
                          M.get (| "_3" |);
                          M.call (|
                            "add",
                            [
                              M.get (| "_3" |);
                              M.get (| "_6" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      tt
    )).

    Module C_15.
      Definition code : M.t unit := ltac:(M.monadic (
        let _ :=
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 64];
                M.call (|
                  "memoryguard",
                  [
                    [Literal.number 0x80]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "callvalue",
                []
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                    []
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["_1"],
              Some (M.call (|
                "allocate_unbounded",
                []
              |))
            |) in
          let _ :=
            M.call (|
              "codecopy",
              [
                M.get (| "_1" |);
                M.call (|
                  "dataoffset",
                  [
                    [Literal.string "435f31355f6465706c6f796564"]
                  ]
                |);
                M.call (|
                  "datasize",
                  [
                    [Literal.string "435f31355f6465706c6f796564"]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "return",
              [
                M.get (| "_1" |);
                M.call (|
                  "datasize",
                  [
                    [Literal.string "435f31355f6465706c6f796564"]
                  ]
                |)
              ]
            |) in
          tt in
        let _ :=
          M.function (|
            "allocate_unbounded",
            [],
            ["memPtr"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["memPtr"],
                  M.call (|
                    "mload",
                    [
                      [Literal.number 64]
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
            [],
            [],
            ltac:(M.monadic (
              let _ :=
                M.call (|
                  "revert",
                  [
                    [Literal.number 0];
                    [Literal.number 0]
                  ]
                |) in
              tt
            ))
          |) in
        tt
      )).

      Module C_15_deployed.
        Definition code : M.t unit := ltac:(M.monadic (
          let _ :=
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 64];
                  M.call (|
                    "memoryguard",
                    [
                      [Literal.number 0x80]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.call (|
                          "calldatasize",
                          []
                        |);
                        [Literal.number 4]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["selector"],
                      Some (M.call (|
                        "shift_right_unsigned",
                        [
                          M.call (|
                            "calldataload",
                            [
                              [Literal.number 0]
                            ]
                          |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.switch (|
                      M.get (| "selector" |),
                      [
                        (
                          Some (Literal.number 0x26121ff0),
                          ltac:(M.monadic (
                            let _ :=
                              M.call (|
                                "external_fun_f",
                                []
                              |) in
                            tt
                          ))              );
                        (
                          None,
                          ltac:(M.monadic (
                            tt
                          ))              )            ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
                []
              |) in
            tt in
          let _ :=
            M.function (|
              "shift_right_unsigned",
              ["value"],
              ["newValue"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["newValue"],
                    M.call (|
                      "shr",
                      [
                        [Literal.number 224];
                        M.get (| "value" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "allocate_unbounded",
              [],
              ["memPtr"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["memPtr"],
                    M.call (|
                      "mload",
                      [
                        [Literal.number 64]
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
              [],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "revert",
                    [
                      [Literal.number 0];
                      [Literal.number 0]
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
              [],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "revert",
                    [
                      [Literal.number 0];
                      [Literal.number 0]
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "abi_decode",
              ["headStart"; "dataEnd"],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.if_ (|
                    M.call (|
                      "slt",
                      [
                        M.call (|
                          "sub",
                          [
                            M.get (| "dataEnd" |);
                            M.get (| "headStart" |)
                          ]
                        |);
                        [Literal.number 0]
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                          []
                        |) in
                      tt
                    ))
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "cleanup_uint256",
              ["value"],
              ["cleaned"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["cleaned"],
                    M.get (| "value" |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "abi_encode_uint256_to_uint256",
              ["value"; "pos"],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.get (| "pos" |);
                      M.call (|
                        "cleanup_uint256",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "abi_encode_uint256",
              ["headStart"; "value0"],
              ["tail"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["tail"],
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 32]
                      ]
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "abi_encode_uint256_to_uint256",
                    [
                      M.get (| "value0" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "headStart" |);
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "external_fun_f",
              [],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.if_ (|
                    M.call (|
                      "callvalue",
                      []
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                          []
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.call (|
                    "abi_decode",
                    [
                      [Literal.number 4];
                      M.call (|
                        "calldatasize",
                        []
                      |)
                    ]
                  |) in
                let _ :=
                  M.assign (|
                    ["ret"],
                    Some (M.call (|
                      "fun_f",
                      []
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["memPos"],
                    Some (M.call (|
                      "allocate_unbounded",
                      []
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["memEnd"],
                    Some (M.call (|
                      "abi_encode_uint256",
                      [
                        M.get (| "memPos" |);
                        M.get (| "ret" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.call (|
                    "return",
                    [
                      M.get (| "memPos" |);
                      M.call (|
                        "sub",
                        [
                          M.get (| "memEnd" |);
                          M.get (| "memPos" |)
                        ]
                      |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
              [],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "revert",
                    [
                      [Literal.number 0];
                      [Literal.number 0]
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "zero_value_for_split_uint256",
              [],
              ["ret"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["ret"],
                    [Literal.number 0]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "cleanup_t_rational_by",
              ["value"],
              ["cleaned"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["cleaned"],
                    M.get (| "value" |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "identity",
              ["value"],
              ["ret"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["ret"],
                    M.get (| "value" |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "convert_rational_by_to_uint256",
              ["value"],
              ["converted"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["converted"],
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.call (|
                          "identity",
                          [
                            M.call (|
                              "cleanup_t_rational_by",
                              [
                                M.get (| "value" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "shift_left",
              ["value"],
              ["newValue"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["newValue"],
                    M.call (|
                      "shl",
                      [
                        [Literal.number 0];
                        M.get (| "value" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "update_byte_slice_shift",
              ["value"; "toInsert"],
              ["result"],
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["mask"],
                    Some (M.call (|
                      "not",
                      [
                        [Literal.number 0]
                      ]
                    |))
                  |) in
                let _ :=
                  M.declare (|
                    ["toInsert"],
                    M.call (|
                      "shift_left",
                      [
                        M.get (| "toInsert" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["value"],
                    M.call (|
                      "and",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "not",
                          [
                            M.get (| "mask" |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["result"],
                    M.call (|
                      "or",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "and",
                          [
                            M.get (| "toInsert" |);
                            M.get (| "mask" |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "convert_uint256_to_uint256",
              ["value"],
              ["converted"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["converted"],
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.call (|
                          "identity",
                          [
                            M.call (|
                              "cleanup_uint256",
                              [
                                M.get (| "value" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "prepare_store_uint256",
              ["value"],
              ["ret"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["ret"],
                    M.get (| "value" |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "update_storage_value_offsett_uint256_to_uint256",
              ["slot"; "value"],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["convertedValue"],
                    Some (M.call (|
                      "convert_uint256_to_uint256",
                      [
                        M.get (| "value" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.call (|
                    "sstore",
                    [
                      M.get (| "slot" |);
                      M.call (|
                        "update_byte_slice_shift",
                        [
                          M.call (|
                            "sload",
                            [
                              M.get (| "slot" |)
                            ]
                          |);
                          M.call (|
                            "prepare_store_uint256",
                            [
                              M.get (| "convertedValue" |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "cleanup_rational_by",
              ["value"],
              ["cleaned"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["cleaned"],
                    M.get (| "value" |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "convert_t_rational_by_to_t_uint256",
              ["value"],
              ["converted"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["converted"],
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.call (|
                          "identity",
                          [
                            M.call (|
                              "cleanup_rational_by",
                              [
                                M.get (| "value" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "fun_f",
              [],
              ["var"],
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["zero_uint256"],
                    Some (M.call (|
                      "zero_value_for_split_uint256",
                      []
                    |))
                  |) in
                let _ :=
                  M.declare (|
                    ["var"],
                    M.get (| "zero_uint256" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr"],
                    Some ([Literal.number 0x03])
                  |) in
                let _ :=
                  M.assign (|
                    ["_1"],
                    Some (M.call (|
                      "convert_rational_by_to_uint256",
                      [
                        M.get (| "expr" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.call (|
                    "update_storage_value_offsett_uint256_to_uint256",
                    [
                      [Literal.number 0x00];
                      M.get (| "_1" |)
                    ]
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_1"],
                    Some ([Literal.number 0x01])
                  |) in
                let _ :=
                  M.declare (|
                    ["var"],
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.leave (||) in
                tt
              ))
            |) in
          tt
        )).

        Definition data : string :=
          "a2646970667358221220b2a9114f101a2d7bf9dd51efc1e6d7ea9bc247a7de8f269641e15f1c2ace7a3864736f6c634300081b0033".
      End C_15_deployed.
    End C_15.

    Definition data : string :=
      "a2646970667358221220e1b4d3544dc445ef9c1ac6e375632fa267f238e5495f18e2ea91971735106a4364736f6c634300081b0033".
  End D_80_deployed.
End D_80.
