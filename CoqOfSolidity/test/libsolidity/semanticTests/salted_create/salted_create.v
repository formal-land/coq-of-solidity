(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module B.
  
End B.

(* Contract *)
Module A.
  Definition different_salt (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          M.call (|
            FunctionCallOptions NewExpression (* Beginning of a node! *)
id: 10
src: 101:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 9
src: 101:1:0
nodeType: IdentifierPath
name: B
nameLocations: [101:1:0, ]
referencedDeclaration: 1

referencedDeclaration: 1
typeDescriptions: typeString contract BtypeIdentifier st_contract$_B_$1

 [salt, ] Value.String "abc"
,
            []
          |)
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          M.call (|
            FunctionCallOptions NewExpression (* Beginning of a node! *)
id: 20
src: 137:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 19
src: 137:1:0
nodeType: IdentifierPath
name: B
nameLocations: [137:1:0, ]
referencedDeclaration: 1

referencedDeclaration: 1
typeDescriptions: typeString contract BtypeIdentifier st_contract$_B_$1

 [salt, ] Value.String "abcef"
,
            []
          |)
        |) in
      let _ :=
        M.return_ (|
          M.bin_op (|
            "!=",
            M.get_name (| "x" |),
            M.get_name (| "y" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition same_salt (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          M.call (|
            FunctionCallOptions NewExpression (* Beginning of a node! *)
id: 40
src: 253:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 39
src: 253:1:0
nodeType: IdentifierPath
name: B
nameLocations: [253:1:0, ]
referencedDeclaration: 1

referencedDeclaration: 1
typeDescriptions: typeString contract BtypeIdentifier st_contract$_B_$1

 [salt, ] Value.String "xyz"
,
            []
          |)
        |) in
      let _ :=
        TryStatement M.call (|
          FunctionCallOptions NewExpression (* Beginning of a node! *)
id: 47
src: 287:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 46
src: 287:1:0
nodeType: IdentifierPath
name: B
nameLocations: [287:1:0, ]
referencedDeclaration: 1

referencedDeclaration: 1
typeDescriptions: typeString contract BtypeIdentifier st_contract$_B_$1

 [salt, ] Value.String "xyz"
,
          []
        |) TryCatchClause   let _ :=
           in
        Value.Tuple [], TryCatchClause   let _ :=
          M.return_ (|
            Value.Bool true
          |) in
        Value.Tuple [] in
      let _ :=
        M.return_ (|
          Value.Bool false
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End A.
