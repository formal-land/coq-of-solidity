(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_269.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            []
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                []
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          Some (M.call (|
            "allocate_unbounded",
            []
          |))
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f3236395f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3236395f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3236395f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_269_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      []
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  Some (M.call (|
                    "shift_right_224_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x792dab9e),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_g1",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x7a86e4ea),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_f2",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xbeec3ef2),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_g2",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xebaeb7cb),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_f1",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            []
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_224_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_bytes_calldata_calldata",
          ["offset"; "end"],
          ["arrayPos"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["arrayPos"],
                M.get (| "offset" |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "arrayPos" |);
                        M.call (|
                          "mul",
                          [
                            [Literal.number 0x02];
                            [Literal.number 0x20]
                          ]
                        |)
                      ]
                    |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_bytes_calldata_ptr_calldata_ptr",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_array_bytes_calldata_calldata",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_to_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_uint256_uint256_uint256_uint256_uint256_uint256_uint256",
          ["headStart"; "value0"; "value1"; "value2"; "value3"; "value4"; "value5"; "value6"; "value7"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 256]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value2" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 64]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value3" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 96]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value4" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 128]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value5" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 160]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value6" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 192]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value7" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 224]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_g1",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"],
                Some (M.call (|
                  "abi_decode_array_bytes_calldata_ptr_calldata_ptr",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"; "ret_2"; "ret_3"; "ret_4"; "ret_5"; "ret_6"; "ret_7"],
                Some (M.call (|
                  "fun_g1",
                  [
                    M.get (| "param" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_uint256_uint256_uint256_uint256_uint256_uint256_uint256_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |);
                    M.get (| "ret_2" |);
                    M.get (| "ret_3" |);
                    M.get (| "ret_4" |);
                    M.get (| "ret_5" |);
                    M.get (| "ret_6" |);
                    M.get (| "ret_7" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_t_array_t_bytes_calldata_calldata",
          ["offset"; "end"],
          ["arrayPos"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["arrayPos"],
                M.get (| "offset" |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "arrayPos" |);
                        M.call (|
                          "mul",
                          [
                            [Literal.number 0x01];
                            [Literal.number 0x20]
                          ]
                        |)
                      ]
                    |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_bytes_calldata_calldatat_array_bytes_calldata_calldata",
          ["headStart"; "dataEnd"],
          ["value0";
      "value1"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 64]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_t_array_t_bytes_calldata_calldata",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset_1"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 32]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "offset_1" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value1"],
                M.call (|
                  "abi_decode_t_array_t_bytes_calldata_calldata",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset_1" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_uint256_uint256_uint256_uint256_uint256_uint256",
          ["headStart"; "value0"; "value1"; "value2"; "value3"; "value4"; "value5"; "value6"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 224]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value2" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 64]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value3" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 96]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value4" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 128]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value5" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 160]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value6" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 192]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_f2",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"],
                Some (M.call (|
                  "abi_decode_array_bytes_calldata_calldatat_array_bytes_calldata_calldata",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"; "ret_2"; "ret_3"; "ret_4"; "ret_5"; "ret_6"],
                Some (M.call (|
                  "fun_f2",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_uint256_uint256_uint256_uint256_uint256_uint256_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |);
                    M.get (| "ret_2" |);
                    M.get (| "ret_3" |);
                    M.get (| "ret_4" |);
                    M.get (| "ret_5" |);
                    M.get (| "ret_6" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_bytes_calldata_ptr_dyn_calldata_ptr",
          ["offset"; "end"],
          ["arrayPos";
      "length"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "offset" |);
                            [Literal.number 0x1f]
                          ]
                        |);
                        M.get (| "end" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["arrayPos"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "arrayPos" |);
                        M.call (|
                          "mul",
                          [
                            M.get (| "length" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      ]
                    |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_bytes_calldata_dyn_calldata",
          ["headStart"; "dataEnd"],
          ["value0";
      "value1"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value0"; "value1"],
                M.call (|
                  "abi_decode_array_bytes_calldata_ptr_dyn_calldata_ptr",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint256",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x08]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_array_uint256",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint256",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encodeUpdatedPos_uint256",
          ["value0"; "pos"],
          ["updatedPos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value0" |);
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updatedPos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_nextElement_array_uint256",
          ["ptr"],
          ["next"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["next"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_uint256_memory_ptr",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_uint256",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_uint256",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["baseRef"],
                Some (M.call (|
                  "array_dataslot_array_uint256",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.get (| "baseRef" |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["elementValue0"],
                      Some (M.call (|
                        "mload",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["pos"],
                      M.call (|
                        "abi_encodeUpdatedPos_uint256",
                        [
                          M.get (| "elementValue0" |);
                          M.get (| "pos" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["srcPtr"],
                      M.call (|
                        "array_nextElement_array_uint256",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_uint256",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 256]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_array_uint256_memory_ptr",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_g2",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"],
                Some (M.call (|
                  "abi_decode_array_bytes_calldata_dyn_calldata",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_g2",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_array_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_tuple_array_bytes_calldata_calldata",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_t_array_t_bytes_calldata_calldata",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_uint256_uint256_uint256",
          ["headStart"; "value0"; "value1"; "value2"; "value3"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 128]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value2" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 64]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value3" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 96]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_f1",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"],
                Some (M.call (|
                  "abi_decode_tuple_array_bytes_calldata_calldata",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"; "ret_2"; "ret_3"],
                Some (M.call (|
                  "fun_f1",
                  [
                    M.get (| "param" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_uint256_uint256_uint256_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |);
                    M.get (| "ret_2" |);
                    M.get (| "ret_3" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x32",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x32]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_356d538aaf70fba12156cc466564b792649f8f3befb07b071c91142253e175ad",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_1e55d03107e9c4f1b5e21c76a16fba166a461117ab153bcce65e6a4ea8e5fc8a",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_977805620ff29572292dee35f70b0f3f3f73d3fdd0e9f4d7a901c2e43ab18a2e",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "access_calldata_tail_bytes_calldata",
          ["base_ref"; "ptr_to_tail"],
          ["addr";
      "length"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["rel_offset_of_tail"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.get (| "ptr_to_tail" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.get (| "rel_offset_of_tail" |);
                        M.call (|
                          "sub",
                          [
                            M.call (|
                              "sub",
                              [
                                M.call (|
                                  "calldatasize",
                                  []
                                |);
                                M.get (| "base_ref" |)
                              ]
                            |);
                            M.call (|
                              "sub",
                              [
                                [Literal.number 0x20];
                                [Literal.number 1]
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_356d538aaf70fba12156cc466564b792649f8f3befb07b071c91142253e175ad",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "base_ref" |);
                    M.get (| "rel_offset_of_tail" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "addr" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_1e55d03107e9c4f1b5e21c76a16fba166a461117ab153bcce65e6a4ea8e5fc8a",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "addr" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "sgt",
                  [
                    M.get (| "addr" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "calldatasize",
                          []
                        |);
                        M.call (|
                          "mul",
                          [
                            M.get (| "length" |);
                            [Literal.number 0x01]
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_977805620ff29572292dee35f70b0f3f3f73d3fdd0e9f4d7a901c2e43ab18a2e",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "calldata_array_index_access_bytes_calldata_calldata",
          ["base_ref"; "index"],
          ["addr";
      "len"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        [Literal.number 0x02]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "base_ref" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 32]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"; "len"],
                M.call (|
                  "access_calldata_tail_bytes_calldata",
                  [
                    M.get (| "base_ref" |);
                    M.get (| "addr" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_bytes_calldata",
          ["value"; "len"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.get (| "len" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "calldata_array_index_access_bytes_calldata",
          ["base_ref"; "length"; "index"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "length" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "base_ref" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bytes1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "shl",
                      [
                        [Literal.number 248];
                        [Literal.number 255]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 248];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint8",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint8_to_uint8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint8",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_bytes1_to_uint8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint8_to_uint8",
                  [
                    M.call (|
                      "shift_right_unsigned",
                      [
                        M.get (| "value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_2_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint8_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint8",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_g1",
          ["var_a_127_offset"],
          ["var";
      "var_1";
      "var_2";
      "var_3";
      "var_4";
      "var_5";
      "var_6";
      "var_7"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_1"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_1"],
                M.get (| "zero_uint256_1" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_2"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_2"],
                M.get (| "zero_uint256_2" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_3"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_3"],
                M.get (| "zero_uint256_3" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_4"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_4"],
                M.get (| "zero_uint256_4" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_5"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_5"],
                M.get (| "zero_uint256_5" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_6"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_6"],
                M.get (| "zero_uint256_6" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_7"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_7"],
                M.get (| "zero_uint256_7" |)
              |) in
            let _ :=
              M.assign (|
                ["_9_offset"],
                Some (M.get (| "var_a_127_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_146_offset"],
                Some (M.get (| "_9_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_148_offset"; "expr_148_length"],
                Some (M.call (|
                  "calldata_array_index_access_bytes_calldata_calldata",
                  [
                    M.get (| "expr_146_offset" |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "array_length_bytes_calldata",
                  [
                    M.get (| "expr_148_offset" |);
                    M.get (| "expr_148_length" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_202_component"],
                Some (M.get (| "expr_1" |))
              |) in
            let _ :=
              M.assign (|
                ["_10_offset"],
                Some (M.get (| "var_a_127_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_152_offset"],
                Some (M.get (| "_10_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_154_offset"; "expr_154_length"],
                Some (M.call (|
                  "calldata_array_index_access_bytes_calldata_calldata",
                  [
                    M.get (| "expr_152_offset" |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_2" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "calldataload",
                      [
                        M.call (|
                          "calldata_array_index_access_bytes_calldata",
                          [
                            M.get (| "expr_154_offset" |);
                            M.get (| "expr_154_length" |);
                            M.call (|
                              "convert_t_rational_by_to_t_uint256",
                              [
                                M.get (| "expr_3" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.call (|
                  "convert_bytes1_to_uint8",
                  [
                    M.get (| "expr_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_202_component_1"],
                Some (M.get (| "expr_5" |))
              |) in
            let _ :=
              M.assign (|
                ["_11_offset"],
                Some (M.get (| "var_a_127_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_160_offset"],
                Some (M.get (| "_11_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_162_offset"; "expr_162_length"],
                Some (M.call (|
                  "calldata_array_index_access_bytes_calldata_calldata",
                  [
                    M.get (| "expr_160_offset" |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_6" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some (M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "calldataload",
                      [
                        M.call (|
                          "calldata_array_index_access_bytes_calldata",
                          [
                            M.get (| "expr_162_offset" |);
                            M.get (| "expr_162_length" |);
                            M.call (|
                              "convert_rational_by_to_uint256",
                              [
                                M.get (| "expr_7" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.call (|
                  "convert_bytes1_to_uint8",
                  [
                    M.get (| "expr_8" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_202_component_2"],
                Some (M.get (| "expr_9" |))
              |) in
            let _ :=
              M.assign (|
                ["_12_offset"],
                Some (M.get (| "var_a_127_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_168_offset"],
                Some (M.get (| "_12_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_170_offset"; "expr_170_length"],
                Some (M.call (|
                  "calldata_array_index_access_bytes_calldata_calldata",
                  [
                    M.get (| "expr_168_offset" |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some (M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "calldataload",
                      [
                        M.call (|
                          "calldata_array_index_access_bytes_calldata",
                          [
                            M.get (| "expr_170_offset" |);
                            M.get (| "expr_170_length" |);
                            M.call (|
                              "convert_rational_2_by_1_to_uint256",
                              [
                                M.get (| "expr_11" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some (M.call (|
                  "convert_bytes1_to_uint8",
                  [
                    M.get (| "expr_12" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_202_component_3"],
                Some (M.get (| "expr_13" |))
              |) in
            let _ :=
              M.assign (|
                ["_13_offset"],
                Some (M.get (| "var_a_127_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_174_offset"],
                Some (M.get (| "_13_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_176_offset"; "expr_176_length"],
                Some (M.call (|
                  "calldata_array_index_access_bytes_calldata_calldata",
                  [
                    M.get (| "expr_174_offset" |);
                    M.call (|
                      "convert_rational_by_to_uint256",
                      [
                        M.get (| "expr_14" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some (M.call (|
                  "array_length_bytes_calldata",
                  [
                    M.get (| "expr_176_offset" |);
                    M.get (| "expr_176_length" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_202_component_4"],
                Some (M.get (| "expr_15" |))
              |) in
            let _ :=
              M.assign (|
                ["_14_offset"],
                Some (M.get (| "var_a_127_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_180_offset"],
                Some (M.get (| "_14_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_182_offset"; "expr_182_length"],
                Some (M.call (|
                  "calldata_array_index_access_bytes_calldata_calldata",
                  [
                    M.get (| "expr_180_offset" |);
                    M.call (|
                      "convert_rational_by_to_uint256",
                      [
                        M.get (| "expr_16" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some (M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "calldataload",
                      [
                        M.call (|
                          "calldata_array_index_access_bytes_calldata",
                          [
                            M.get (| "expr_182_offset" |);
                            M.get (| "expr_182_length" |);
                            M.call (|
                              "convert_t_rational_by_to_t_uint256",
                              [
                                M.get (| "expr_17" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some (M.call (|
                  "convert_bytes1_to_uint8",
                  [
                    M.get (| "expr_18" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_202_component_5"],
                Some (M.get (| "expr_19" |))
              |) in
            let _ :=
              M.assign (|
                ["_15_offset"],
                Some (M.get (| "var_a_127_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_188_offset"],
                Some (M.get (| "_15_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_190_offset"; "expr_190_length"],
                Some (M.call (|
                  "calldata_array_index_access_bytes_calldata_calldata",
                  [
                    M.get (| "expr_188_offset" |);
                    M.call (|
                      "convert_rational_by_to_uint256",
                      [
                        M.get (| "expr_20" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                Some (M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "calldataload",
                      [
                        M.call (|
                          "calldata_array_index_access_bytes_calldata",
                          [
                            M.get (| "expr_190_offset" |);
                            M.get (| "expr_190_length" |);
                            M.call (|
                              "convert_rational_by_to_uint256",
                              [
                                M.get (| "expr_21" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                Some (M.call (|
                  "convert_bytes1_to_uint8",
                  [
                    M.get (| "expr_22" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_202_component_6"],
                Some (M.get (| "expr_23" |))
              |) in
            let _ :=
              M.assign (|
                ["_16_offset"],
                Some (M.get (| "var_a_127_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_196_offset"],
                Some (M.get (| "_16_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_198_offset"; "expr_198_length"],
                Some (M.call (|
                  "calldata_array_index_access_bytes_calldata_calldata",
                  [
                    M.get (| "expr_196_offset" |);
                    M.call (|
                      "convert_rational_by_to_uint256",
                      [
                        M.get (| "expr_24" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                Some (M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "calldataload",
                      [
                        M.call (|
                          "calldata_array_index_access_bytes_calldata",
                          [
                            M.get (| "expr_198_offset" |);
                            M.get (| "expr_198_length" |);
                            M.call (|
                              "convert_rational_2_by_1_to_uint256",
                              [
                                M.get (| "expr_25" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                Some (M.call (|
                  "convert_bytes1_to_uint8",
                  [
                    M.get (| "expr_26" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component"],
                Some (M.get (| "expr_27" |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_202_component" |)
              |) in
            let _ :=
              M.declare (|
                ["var_1"],
                M.call (|
                  "convert_uint8_to_uint256",
                  [
                    M.get (| "expr_202_component_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_2"],
                M.call (|
                  "convert_uint8_to_uint256",
                  [
                    M.get (| "expr_202_component_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_3"],
                M.call (|
                  "convert_uint8_to_uint256",
                  [
                    M.get (| "expr_202_component_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_4"],
                M.get (| "expr_202_component_4" |)
              |) in
            let _ :=
              M.declare (|
                ["var_5"],
                M.call (|
                  "convert_uint8_to_uint256",
                  [
                    M.get (| "expr_202_component_5" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_6"],
                M.call (|
                  "convert_uint8_to_uint256",
                  [
                    M.get (| "expr_202_component_6" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_7"],
                M.call (|
                  "convert_uint8_to_uint256",
                  [
                    M.get (| "expr_component" |)
                  ]
                |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "calldata_array_index_access_array_bytes_calldata_calldata",
          ["base_ref"; "index"],
          ["addr";
      "len"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        [Literal.number 0x01]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "base_ref" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 32]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"; "len"],
                M.call (|
                  "access_calldata_tail_bytes_calldata",
                  [
                    M.get (| "base_ref" |);
                    M.get (| "addr" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_f2",
          ["var_a_offset"; "var_b_offset"],
          ["var";
      "var_1";
      "var_2";
      "var_3";
      "var_4";
      "var_5";
      "var_6"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_1"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_1"],
                M.get (| "zero_uint256_1" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_2"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_2"],
                M.get (| "zero_uint256_2" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_3"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_3"],
                M.get (| "zero_uint256_3" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_4"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_4"],
                M.get (| "zero_uint256_4" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_5"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_5"],
                M.get (| "zero_uint256_5" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_6"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_6"],
                M.get (| "zero_uint256_6" |)
              |) in
            let _ :=
              M.assign (|
                ["_24_offset"],
                Some (M.get (| "var_a_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_72_offset"],
                Some (M.get (| "_24_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_74_offset"; "expr_74_length"],
                Some (M.call (|
                  "calldata_array_index_access_array_bytes_calldata_calldata",
                  [
                    M.get (| "expr_72_offset" |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "array_length_bytes_calldata",
                  [
                    M.get (| "expr_74_offset" |);
                    M.get (| "expr_74_length" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_120_component"],
                Some (M.get (| "expr_1" |))
              |) in
            let _ :=
              M.assign (|
                ["_25_offset"],
                Some (M.get (| "var_a_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_78_offset"],
                Some (M.get (| "_25_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_80_offset"; "expr_80_length"],
                Some (M.call (|
                  "calldata_array_index_access_array_bytes_calldata_calldata",
                  [
                    M.get (| "expr_78_offset" |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_2" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "calldataload",
                      [
                        M.call (|
                          "calldata_array_index_access_bytes_calldata",
                          [
                            M.get (| "expr_80_offset" |);
                            M.get (| "expr_80_length" |);
                            M.call (|
                              "convert_t_rational_by_to_t_uint256",
                              [
                                M.get (| "expr_3" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.call (|
                  "convert_bytes1_to_uint8",
                  [
                    M.get (| "expr_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component"],
                Some (M.get (| "expr_5" |))
              |) in
            let _ :=
              M.assign (|
                ["_26_offset"],
                Some (M.get (| "var_a_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_86_offset"],
                Some (M.get (| "_26_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_88_offset"; "expr_88_length"],
                Some (M.call (|
                  "calldata_array_index_access_array_bytes_calldata_calldata",
                  [
                    M.get (| "expr_86_offset" |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_6" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some (M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "calldataload",
                      [
                        M.call (|
                          "calldata_array_index_access_bytes_calldata",
                          [
                            M.get (| "expr_88_offset" |);
                            M.get (| "expr_88_length" |);
                            M.call (|
                              "convert_rational_by_to_uint256",
                              [
                                M.get (| "expr_7" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.call (|
                  "convert_bytes1_to_uint8",
                  [
                    M.get (| "expr_8" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_120_component_1"],
                Some (M.get (| "expr_9" |))
              |) in
            let _ :=
              M.assign (|
                ["_27_offset"],
                Some (M.get (| "var_a_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_94_offset"],
                Some (M.get (| "_27_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_96_offset"; "expr_96_length"],
                Some (M.call (|
                  "calldata_array_index_access_array_bytes_calldata_calldata",
                  [
                    M.get (| "expr_94_offset" |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some (M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "calldataload",
                      [
                        M.call (|
                          "calldata_array_index_access_bytes_calldata",
                          [
                            M.get (| "expr_96_offset" |);
                            M.get (| "expr_96_length" |);
                            M.call (|
                              "convert_rational_2_by_1_to_uint256",
                              [
                                M.get (| "expr_11" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some (M.call (|
                  "convert_bytes1_to_uint8",
                  [
                    M.get (| "expr_12" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_120_component_2"],
                Some (M.get (| "expr_13" |))
              |) in
            let _ :=
              M.assign (|
                ["_28_offset"],
                Some (M.get (| "var_b_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_offset"],
                Some (M.get (| "_28_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_102_offset"; "expr_102_length"],
                Some (M.call (|
                  "calldata_array_index_access_array_bytes_calldata_calldata",
                  [
                    M.get (| "expr_offset" |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_14" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some (M.call (|
                  "array_length_bytes_calldata",
                  [
                    M.get (| "expr_102_offset" |);
                    M.get (| "expr_102_length" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component_1"],
                Some (M.get (| "expr_15" |))
              |) in
            let _ :=
              M.assign (|
                ["_29_offset"],
                Some (M.get (| "var_b_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_106_offset"],
                Some (M.get (| "_29_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_108_offset"; "expr_108_length"],
                Some (M.call (|
                  "calldata_array_index_access_array_bytes_calldata_calldata",
                  [
                    M.get (| "expr_106_offset" |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_16" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some (M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "calldataload",
                      [
                        M.call (|
                          "calldata_array_index_access_bytes_calldata",
                          [
                            M.get (| "expr_108_offset" |);
                            M.get (| "expr_108_length" |);
                            M.call (|
                              "convert_t_rational_by_to_t_uint256",
                              [
                                M.get (| "expr_17" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some (M.call (|
                  "convert_bytes1_to_uint8",
                  [
                    M.get (| "expr_18" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component_2"],
                Some (M.get (| "expr_19" |))
              |) in
            let _ :=
              M.assign (|
                ["_30_offset"],
                Some (M.get (| "var_b_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_114_offset"],
                Some (M.get (| "_30_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_116_offset"; "expr_116_length"],
                Some (M.call (|
                  "calldata_array_index_access_array_bytes_calldata_calldata",
                  [
                    M.get (| "expr_114_offset" |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_20" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                Some (M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "calldataload",
                      [
                        M.call (|
                          "calldata_array_index_access_bytes_calldata",
                          [
                            M.get (| "expr_116_offset" |);
                            M.get (| "expr_116_length" |);
                            M.call (|
                              "convert_rational_by_to_uint256",
                              [
                                M.get (| "expr_21" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                Some (M.call (|
                  "convert_bytes1_to_uint8",
                  [
                    M.get (| "expr_22" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component_3"],
                Some (M.get (| "expr_23" |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_120_component" |)
              |) in
            let _ :=
              M.declare (|
                ["var_1"],
                M.call (|
                  "convert_uint8_to_uint256",
                  [
                    M.get (| "expr_component" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_2"],
                M.call (|
                  "convert_uint8_to_uint256",
                  [
                    M.get (| "expr_120_component_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_3"],
                M.call (|
                  "convert_uint8_to_uint256",
                  [
                    M.get (| "expr_120_component_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_4"],
                M.get (| "expr_component_1" |)
              |) in
            let _ :=
              M.declare (|
                ["var_5"],
                M.call (|
                  "convert_uint8_to_uint256",
                  [
                    M.get (| "expr_component_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_6"],
                M.call (|
                  "convert_uint8_to_uint256",
                  [
                    M.get (| "expr_component_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "round_up_to_mul_of",
          ["value"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "and",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 31]
                      ]
                    |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 31]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "finalize_allocation",
          ["memPtr"; "size"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["newFreePtr"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "memPtr" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "size" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "newFreePtr" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "newFreePtr" |);
                        M.get (| "memPtr" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 64];
                  M.get (| "newFreePtr" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory",
          ["size"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_unbounded",
                  []
                |)
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "memPtr" |);
                  M.get (| "size" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_array_uint256",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "mul",
                  [
                    M.get (| "length" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_array_array_uint256",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["allocSize"],
                Some (M.call (|
                  "array_allocation_size_array_uint256",
                  [
                    M.get (| "length" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    M.get (| "allocSize" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_memory_chunk_uint256",
          ["dataStart"; "dataSizeInBytes"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "calldatacopy",
                [
                  M.get (| "dataStart" |);
                  M.call (|
                    "calldatasize",
                    []
                  |);
                  M.get (| "dataSizeInBytes" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_and_zero_memory_array_array_uint256",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_array_array_uint256",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["dataStart"],
                Some (M.get (| "memPtr" |))
              |) in
            let _ :=
              M.assign (|
                ["dataSize"],
                Some (M.call (|
                  "array_allocation_size_array_uint256",
                  [
                    M.get (| "length" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "zero_memory_chunk_uint256",
                [
                  M.get (| "dataStart" |);
                  M.get (| "dataSize" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_array_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "allocate_and_zero_memory_array_array_uint256",
                  [
                    [Literal.number 8]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_bytes_calldata_dyn_calldata",
          ["value"; "len"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.get (| "len" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "write_to_memory_uint256",
          ["memPtr"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "calldata_array_index_access_bytes_calldata_dyn_calldata",
          ["base_ref"; "length"; "index"],
          ["addr";
      "len"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "length" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "base_ref" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 32]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"; "len"],
                M.call (|
                  "access_calldata_tail_bytes_calldata",
                  [
                    M.get (| "base_ref" |);
                    M.get (| "addr" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_g2",
          ["var_a_208_offset"; "var_a_length"],
          ["var_mpos"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_array_uint256_mpos"],
                Some (M.call (|
                  "zero_value_for_split_array_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_mpos"],
                M.get (| "zero_array_uint256_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_mpos"],
                Some (M.call (|
                  "allocate_memory_array_array_uint256",
                  [
                    [Literal.number 8]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_32_offset"],
                Some (M.get (| "var_a_208_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["_32_length"],
                Some (M.get (| "var_a_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_215_offset"],
                Some (M.get (| "_32_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_215_length"],
                Some (M.get (| "_32_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.call (|
                  "array_length_array_bytes_calldata_dyn_calldata",
                  [
                    M.get (| "expr_215_offset" |);
                    M.get (| "expr_215_length" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint256",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "expr_mpos" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.get (| "expr" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_offset"],
                Some (M.get (| "var_a_208_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["_33_length"],
                Some (M.get (| "var_a_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_217_offset"],
                Some (M.get (| "_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_217_length"],
                Some (M.get (| "_33_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_219_offset"; "expr_219_length"],
                Some (M.call (|
                  "calldata_array_index_access_bytes_calldata_dyn_calldata",
                  [
                    M.get (| "expr_217_offset" |);
                    M.get (| "expr_217_length" |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.call (|
                  "array_length_bytes_calldata",
                  [
                    M.get (| "expr_219_offset" |);
                    M.get (| "expr_219_length" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint256",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "expr_mpos" |);
                      [Literal.number 32]
                    ]
                  |);
                  M.get (| "expr_2" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_34_offset"],
                Some (M.get (| "var_a_208_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["_34_length"],
                Some (M.get (| "var_a_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_223_offset"],
                Some (M.get (| "_34_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_223_length"],
                Some (M.get (| "_34_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_225_offset"; "expr_225_length"],
                Some (M.call (|
                  "calldata_array_index_access_bytes_calldata_dyn_calldata",
                  [
                    M.get (| "expr_223_offset" |);
                    M.get (| "expr_223_length" |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_3" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "calldataload",
                      [
                        M.call (|
                          "calldata_array_index_access_bytes_calldata",
                          [
                            M.get (| "expr_225_offset" |);
                            M.get (| "expr_225_length" |);
                            M.call (|
                              "convert_t_rational_by_to_t_uint256",
                              [
                                M.get (| "expr_4" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some (M.call (|
                  "convert_bytes1_to_uint8",
                  [
                    M.get (| "expr_5" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.call (|
                  "convert_uint8_to_uint256",
                  [
                    M.get (| "expr_6" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint256",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "expr_mpos" |);
                      [Literal.number 64]
                    ]
                  |);
                  M.get (| "_1" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_36_offset"],
                Some (M.get (| "var_a_208_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["_length"],
                Some (M.get (| "var_a_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_231_offset"],
                Some (M.get (| "_36_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_231_length"],
                Some (M.get (| "_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_233_offset"; "expr_233_length"],
                Some (M.call (|
                  "calldata_array_index_access_bytes_calldata_dyn_calldata",
                  [
                    M.get (| "expr_231_offset" |);
                    M.get (| "expr_231_length" |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_7" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "calldataload",
                      [
                        M.call (|
                          "calldata_array_index_access_bytes_calldata",
                          [
                            M.get (| "expr_233_offset" |);
                            M.get (| "expr_233_length" |);
                            M.call (|
                              "convert_rational_by_to_uint256",
                              [
                                M.get (| "expr_8" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some (M.call (|
                  "convert_bytes1_to_uint8",
                  [
                    M.get (| "expr_9" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.call (|
                  "convert_uint8_to_uint256",
                  [
                    M.get (| "expr_10" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint256",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "expr_mpos" |);
                      [Literal.number 96]
                    ]
                  |);
                  M.get (| "_2" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_38_offset"],
                Some (M.get (| "var_a_208_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["_38_length"],
                Some (M.get (| "var_a_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_237_offset"],
                Some (M.get (| "_38_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_237_length"],
                Some (M.get (| "_38_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_239_offset"; "expr_239_length"],
                Some (M.call (|
                  "calldata_array_index_access_bytes_calldata_dyn_calldata",
                  [
                    M.get (| "expr_237_offset" |);
                    M.get (| "expr_237_length" |);
                    M.call (|
                      "convert_rational_by_to_uint256",
                      [
                        M.get (| "expr_11" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some (M.call (|
                  "array_length_bytes_calldata",
                  [
                    M.get (| "expr_239_offset" |);
                    M.get (| "expr_239_length" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint256",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "expr_mpos" |);
                      [Literal.number 128]
                    ]
                  |);
                  M.get (| "expr_12" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_39_offset"],
                Some (M.get (| "var_a_208_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["_39_length"],
                Some (M.get (| "var_a_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_243_offset"],
                Some (M.get (| "_39_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_243_length"],
                Some (M.get (| "_39_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_245_offset"; "expr_245_length"],
                Some (M.call (|
                  "calldata_array_index_access_bytes_calldata_dyn_calldata",
                  [
                    M.get (| "expr_243_offset" |);
                    M.get (| "expr_243_length" |);
                    M.call (|
                      "convert_rational_by_to_uint256",
                      [
                        M.get (| "expr_13" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some (M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "calldataload",
                      [
                        M.call (|
                          "calldata_array_index_access_bytes_calldata",
                          [
                            M.get (| "expr_245_offset" |);
                            M.get (| "expr_245_length" |);
                            M.call (|
                              "convert_t_rational_by_to_t_uint256",
                              [
                                M.get (| "expr_14" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some (M.call (|
                  "convert_bytes1_to_uint8",
                  [
                    M.get (| "expr_15" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.call (|
                  "convert_uint8_to_uint256",
                  [
                    M.get (| "expr_16" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint256",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "expr_mpos" |);
                      [Literal.number 160]
                    ]
                  |);
                  M.get (| "_3" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_41_offset"],
                Some (M.get (| "var_a_208_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["_41_length"],
                Some (M.get (| "var_a_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_251_offset"],
                Some (M.get (| "_41_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_251_length"],
                Some (M.get (| "_41_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_253_offset"; "expr_253_length"],
                Some (M.call (|
                  "calldata_array_index_access_bytes_calldata_dyn_calldata",
                  [
                    M.get (| "expr_251_offset" |);
                    M.get (| "expr_251_length" |);
                    M.call (|
                      "convert_rational_by_to_uint256",
                      [
                        M.get (| "expr_17" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some (M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "calldataload",
                      [
                        M.call (|
                          "calldata_array_index_access_bytes_calldata",
                          [
                            M.get (| "expr_253_offset" |);
                            M.get (| "expr_253_length" |);
                            M.call (|
                              "convert_rational_by_to_uint256",
                              [
                                M.get (| "expr_18" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some (M.call (|
                  "convert_bytes1_to_uint8",
                  [
                    M.get (| "expr_19" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.call (|
                  "convert_uint8_to_uint256",
                  [
                    M.get (| "expr_20" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint256",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "expr_mpos" |);
                      [Literal.number 192]
                    ]
                  |);
                  M.get (| "_4" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_43_offset"],
                Some (M.get (| "var_a_208_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["_43_length"],
                Some (M.get (| "var_a_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_259_offset"],
                Some (M.get (| "_43_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_length"],
                Some (M.get (| "_43_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_261_offset"; "expr_261_length"],
                Some (M.call (|
                  "calldata_array_index_access_bytes_calldata_dyn_calldata",
                  [
                    M.get (| "expr_259_offset" |);
                    M.get (| "expr_length" |);
                    M.call (|
                      "convert_rational_by_to_uint256",
                      [
                        M.get (| "expr_21" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                Some (M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "calldataload",
                      [
                        M.call (|
                          "calldata_array_index_access_bytes_calldata",
                          [
                            M.get (| "expr_261_offset" |);
                            M.get (| "expr_261_length" |);
                            M.call (|
                              "convert_rational_2_by_1_to_uint256",
                              [
                                M.get (| "expr_22" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                Some (M.call (|
                  "convert_bytes1_to_uint8",
                  [
                    M.get (| "expr_23" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.call (|
                  "convert_uint8_to_uint256",
                  [
                    M.get (| "expr_24" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint256",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "expr_mpos" |);
                      [Literal.number 224]
                    ]
                  |);
                  M.get (| "_5" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["var_mpos"],
                M.get (| "expr_mpos" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_f1",
          ["var_a_5_offset"],
          ["var";
      "var_";
      "var_1";
      "var_2"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_1"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "zero_uint256_1" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_t_uint256"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_1"],
                M.get (| "zero_t_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_2"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_2"],
                M.get (| "zero_uint256_2" |)
              |) in
            let _ :=
              M.assign (|
                ["_49_offset"],
                Some (M.get (| "var_a_5_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_16_offset"],
                Some (M.get (| "_49_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_18_offset"; "expr_18_length"],
                Some (M.call (|
                  "calldata_array_index_access_array_bytes_calldata_calldata",
                  [
                    M.get (| "expr_16_offset" |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "array_length_bytes_calldata",
                  [
                    M.get (| "expr_18_offset" |);
                    M.get (| "expr_18_length" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component"],
                Some (M.get (| "expr_1" |))
              |) in
            let _ :=
              M.assign (|
                ["_50_offset"],
                Some (M.get (| "var_a_5_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_22_offset"],
                Some (M.get (| "_50_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_24_offset"; "expr_24_length"],
                Some (M.call (|
                  "calldata_array_index_access_array_bytes_calldata_calldata",
                  [
                    M.get (| "expr_22_offset" |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_2" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "calldataload",
                      [
                        M.call (|
                          "calldata_array_index_access_bytes_calldata",
                          [
                            M.get (| "expr_24_offset" |);
                            M.get (| "expr_24_length" |);
                            M.call (|
                              "convert_t_rational_by_to_t_uint256",
                              [
                                M.get (| "expr_3" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.call (|
                  "convert_bytes1_to_uint8",
                  [
                    M.get (| "expr_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component_1"],
                Some (M.get (| "expr_5" |))
              |) in
            let _ :=
              M.assign (|
                ["_51_offset"],
                Some (M.get (| "var_a_5_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_30_offset"],
                Some (M.get (| "_51_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_32_offset"; "expr_32_length"],
                Some (M.call (|
                  "calldata_array_index_access_array_bytes_calldata_calldata",
                  [
                    M.get (| "expr_30_offset" |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_6" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some (M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "calldataload",
                      [
                        M.call (|
                          "calldata_array_index_access_bytes_calldata",
                          [
                            M.get (| "expr_32_offset" |);
                            M.get (| "expr_32_length" |);
                            M.call (|
                              "convert_rational_by_to_uint256",
                              [
                                M.get (| "expr_7" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.call (|
                  "convert_bytes1_to_uint8",
                  [
                    M.get (| "expr_8" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component_2"],
                Some (M.get (| "expr_9" |))
              |) in
            let _ :=
              M.assign (|
                ["_52_offset"],
                Some (M.get (| "var_a_5_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_38_offset"],
                Some (M.get (| "_52_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_40_offset"; "expr_40_length"],
                Some (M.call (|
                  "calldata_array_index_access_array_bytes_calldata_calldata",
                  [
                    M.get (| "expr_38_offset" |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some (M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "calldataload",
                      [
                        M.call (|
                          "calldata_array_index_access_bytes_calldata",
                          [
                            M.get (| "expr_40_offset" |);
                            M.get (| "expr_40_length" |);
                            M.call (|
                              "convert_rational_2_by_1_to_uint256",
                              [
                                M.get (| "expr_11" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some (M.call (|
                  "convert_bytes1_to_uint8",
                  [
                    M.get (| "expr_12" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component_3"],
                Some (M.get (| "expr_13" |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_component" |)
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.call (|
                  "convert_uint8_to_uint256",
                  [
                    M.get (| "expr_component_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_1"],
                M.call (|
                  "convert_uint8_to_uint256",
                  [
                    M.get (| "expr_component_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_2"],
                M.call (|
                  "convert_uint8_to_uint256",
                  [
                    M.get (| "expr_component_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a264697066735822122002e3be22b7b69c7e9706c80c4092e89d9701a8a8fec20d0f4614a5929ba5678364736f6c634300081b0033".
  End C_269_deployed.
End C_269.
