(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Library *)
Module L.
  Definition reverse (α : list Value.t) : M :=
    match α with
    | [_a] =>
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.index_access (|
              M.get_name (| "_a" |),
              Some (Value.Integer 1)
            |),
            M.index_access (|
              M.get_name (| "_a" |),
              Some (Value.Integer 0)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End L.

(* Contract *)
Module C.
  (* Beginning of a node! *)
id: 27
src: 169:20:0
nodeType: UsingForDirective
typeName: (* Beginning of a node! *)
id: 26
src: 181:7:0
nodeType: ArrayTypeName
baseType: Ty.path "uint"
length: Value.Integer 2
typeDescriptions: typeString uint256[2]typeIdentifier st_array$_t_uint256_$2_storage_ptr

libraryName: (* Beginning of a node! *)
id: 23
src: 175:1:0
nodeType: IdentifierPath
name: L
nameLocations: [175:1:0, ]
referencedDeclaration: 22

global: 0


  Definition test (α : list Value.t) : M :=
    match α with
    | [, _a, ] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "_a" |),
              "reverse"
            |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
