(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition x : Value.t :=
    undefined.

  (* Beginning of a node! *)
id: 23
src: 39:137:0
nodeType: ModifierDefinition
name: run
nameLocation: 48:3:0
documentation: 
visibility: internal
parameters: (* Beginning of a node! *)
id: 3
src: 51:2:0
nodeType: ParameterList
parameters: 

virtual: 0
overrides: 
body: let _ :=
    (* Beginning of a node! *)
id: 21
src: 64:106:0
nodeType: ForStatement
initializationExpression: M.define (|
      [ "i" ],
      Value.Integer 0
    |)
condition: M.bin_op (|
      "<",
      M.get_name (| "i" |),
      Value.Integer 10
    |)
loopExpression: M.un_op (|
      false,
      "++",
      M.get_name (| "i" |)
    |)
body: let _ :=
      (* Beginning of a node! *)
id: 14
src: 111:1:0
nodeType: PlaceholderStatement
 in
    let _ :=
      if M.bin_op (|
        "==",
        M.get_name (| "i" |),
        Value.Integer 1
      |) then
        M.break (||)
      else
        Value.Tuple [] in
    Value.Tuple []
isSimpleCounterLoop: 1
 in
  Value.Tuple []


  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "k" ],
          M.get_name (| "x" |)
        |) in
      let _ :=
        M.define (|
          [ "t" ],
          M.bin_op (|
            "+",
            M.get_name (| "k" |),
            Value.Integer 1
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          M.get_name (| "t" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
