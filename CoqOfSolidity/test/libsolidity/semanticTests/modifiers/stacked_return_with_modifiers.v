(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition x : Value.t :=
    undefined.

  (* Beginning of a node! *)
id: 22
src: 39:125:0
nodeType: ModifierDefinition
name: m
nameLocation: 48:1:0
documentation: 
visibility: internal
parameters: (* Beginning of a node! *)
id: 3
src: 49:2:0
nodeType: ParameterList
parameters: 

virtual: 0
overrides: 
body: let _ :=
    (* Beginning of a node! *)
id: 20
src: 62:96:0
nodeType: ForStatement
initializationExpression: M.define (|
      [ "i" ],
      Value.Integer 0
    |)
condition: M.bin_op (|
      "<",
      M.get_name (| "i" |),
      Value.Integer 10
    |)
loopExpression: M.un_op (|
      false,
      "++",
      M.get_name (| "i" |)
    |)
body: let _ :=
      (* Beginning of a node! *)
id: 14
src: 109:1:0
nodeType: PlaceholderStatement
 in
    let _ :=
      M.un_op (|
        true,
        "++",
        M.get_name (| "x" |)
      |) in
    let _ :=
      M.return_ (|
        Value.Tuple []
      |) in
    Value.Tuple []
isSimpleCounterLoop: 1
 in
  Value.Tuple []


  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        (* Beginning of a node! *)
id: 49
src: 221:84:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          Value.Integer 10
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "i" |)
        |)
body: let _ :=
          M.un_op (|
            true,
            "++",
            M.get_name (| "x" |)
          |) in
        let _ :=
          M.return_ (|
            Value.Integer 42
          |) in
        Value.Tuple []
isSimpleCounterLoop: 1
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
