(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_93.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            [

            ]
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                [

                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          M.call (|
            "allocate_unbounded",
            [

            ]
          |)
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f39335f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f39335f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f39335f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_93_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x1e228514),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_equal",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xc57930e9),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_unequal",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            [

            ]
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bool",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "iszero",
                      [
                        M.get (| "value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bool",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_bool",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bool_bool_bool",
          ["headStart"; "value0"; "value1"; "value2"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 96]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_bool",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_bool",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_bool",
                [
                  M.get (| "value2" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 64]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_equal",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"; "ret_2"],
                M.call (|
                  "fun_equal",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_bool_bool_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |);
                    M.get (| "ret_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_unequal",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"; "ret_2"],
                M.call (|
                  "fun_unequal",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_bool_bool_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |);
                    M.get (| "ret_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_bool",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_function_internal_pure_returns_bool",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_function_internal_pure_returns_bool",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_equal",
          [],
          ["var_same";
      "var_diff";
      "var_inv"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                M.call (|
                  "zero_value_for_split_bool",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_same"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_bool_1"],
                M.call (|
                  "zero_value_for_split_bool",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_diff"],
                M.get (| "zero_bool_1" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_bool_2"],
                M.call (|
                  "zero_value_for_split_bool",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_inv"],
                M.get (| "zero_bool_2" |)
              |) in
            let _ :=
              M.assign (|
                ["var_invalid_functionIdentifier"],
                Literal.undefined
              |) in
            let _ :=
              M.assign (|
                ["zero_function_internal_pure__returns_bool__functionIdentifier"],
                M.call (|
                  "zero_value_for_split_function_internal_pure_returns_bool",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_invalid_functionIdentifier"],
                M.get (| "zero_function_internal_pure__returns_bool__functionIdentifier" |)
              |) in
            let _ :=
              M.assign (|
                ["_functionIdentifier"],
                M.call (|
                  "zero_value_for_split_function_internal_pure_returns_bool",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_invalid_functionIdentifier"],
                M.get (| "_functionIdentifier" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_36_functionIdentifier"],
                [Literal.number 1]
              |) in
            let _ :=
              M.assign (|
                ["expr_37_functionIdentifier"],
                [Literal.number 1]
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_function_internal_pure_returns_bool",
                      [
                        M.get (| "expr_36_functionIdentifier" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_function_internal_pure_returns_bool",
                      [
                        M.get (| "expr_37_functionIdentifier" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_same"],
                M.get (| "expr" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_42_functionIdentifier"],
                [Literal.number 1]
              |) in
            let _ :=
              M.assign (|
                ["expr_43_functionIdentifier"],
                [Literal.number 2]
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_function_internal_pure_returns_bool",
                      [
                        M.get (| "expr_42_functionIdentifier" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_function_internal_pure_returns_bool",
                      [
                        M.get (| "expr_43_functionIdentifier" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_diff"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_48_functionIdentifier"],
                [Literal.number 1]
              |) in
            let _ :=
              M.assign (|
                ["_6_functionIdentifier"],
                M.get (| "var_invalid_functionIdentifier" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_49_functionIdentifier"],
                M.get (| "_6_functionIdentifier" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_function_internal_pure_returns_bool",
                      [
                        M.get (| "expr_48_functionIdentifier" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_function_internal_pure_returns_bool",
                      [
                        M.get (| "expr_49_functionIdentifier" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_inv"],
                M.get (| "expr_2" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_unequal",
          [],
          ["var_same";
      "var_diff";
      "var_inv"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                M.call (|
                  "zero_value_for_split_bool",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_same"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_bool_1"],
                M.call (|
                  "zero_value_for_split_bool",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_diff"],
                M.get (| "zero_bool_1" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_bool_2"],
                M.call (|
                  "zero_value_for_split_bool",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_inv"],
                M.get (| "zero_bool_2" |)
              |) in
            let _ :=
              M.assign (|
                ["var_invalid_68_functionIdentifier"],
                Literal.undefined
              |) in
            let _ :=
              M.assign (|
                ["zero_function_internal_pure_returns_bool_functionIdentifier"],
                M.call (|
                  "zero_value_for_split_function_internal_pure_returns_bool",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_invalid_68_functionIdentifier"],
                M.get (| "zero_function_internal_pure_returns_bool_functionIdentifier" |)
              |) in
            let _ :=
              M.assign (|
                ["_11_functionIdentifier"],
                M.call (|
                  "zero_value_for_split_function_internal_pure_returns_bool",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_invalid_68_functionIdentifier"],
                M.get (| "_11_functionIdentifier" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_74_functionIdentifier"],
                [Literal.number 1]
              |) in
            let _ :=
              M.assign (|
                ["expr_75_functionIdentifier"],
                [Literal.number 1]
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_function_internal_pure_returns_bool",
                          [
                            M.get (| "expr_74_functionIdentifier" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_function_internal_pure_returns_bool",
                          [
                            M.get (| "expr_75_functionIdentifier" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_same"],
                M.get (| "expr" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_functionIdentifier"],
                [Literal.number 1]
              |) in
            let _ :=
              M.assign (|
                ["expr_81_functionIdentifier"],
                [Literal.number 2]
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_function_internal_pure_returns_bool",
                          [
                            M.get (| "expr_functionIdentifier" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_function_internal_pure_returns_bool",
                          [
                            M.get (| "expr_81_functionIdentifier" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_diff"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_86_functionIdentifier"],
                [Literal.number 1]
              |) in
            let _ :=
              M.assign (|
                ["_12_functionIdentifier"],
                M.get (| "var_invalid_68_functionIdentifier" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_87_functionIdentifier"],
                M.get (| "_12_functionIdentifier" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_function_internal_pure_returns_bool",
                          [
                            M.get (| "expr_86_functionIdentifier" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_function_internal_pure_returns_bool",
                          [
                            M.get (| "expr_87_functionIdentifier" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_inv"],
                M.get (| "expr_2" |)
              |) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a264697066735822122049d9d39d1ddc5d4362de85bfd28d4cc30f1aa7b2ae2aa7305c720e911ef69afe64736f6c634300081b0033".
  End C_93_deployed.
End C_93.
