(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [s] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.get_name (| "s" |),
                "length"
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.call (|
              M.index_access (|
                M.get_name (| "s" |),
                Some (Value.Integer 0)
              |),
              []
            |),
            M.call (|
              M.index_access (|
                M.get_name (| "s" |),
                Some (Value.Integer 1)
              |),
              []
            |),
            M.call (|
              M.index_access (|
                M.get_name (| "s" |),
                Some (Value.Integer 2)
              |),
              []
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f_reenc (α : list Value.t) : M :=
    match α with
    | [s] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "this" |),
              "f"
            |),
            [
              M.get_name (| "s" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition getter1 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Integer 23
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition getter2 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Integer 37
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition getter3 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Integer 71
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [reenc] =>
      let _ :=
        M.define (|
          [ "a" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 108
src: 715:36:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 107
src: 715:35:0
nodeType: FunctionTypeName
visibility: external
stateMutability: nonpayable
parameterTypes: (* Beginning of a node! *)
id: 103
src: 723:2:0
nodeType: ParameterList
parameters: 

returnParameterTypes: (* Beginning of a node! *)
id: 106
src: 743:6:0
nodeType: ParameterList
parameters: Definition  : Value.t :=
              undefined.

typeDescriptions: typeString function () external returns (uint256)typeIdentifier st_function_external_nonpayable$__$returns$_t_uint256_$

length: 
typeDescriptions: typeString function () external returns (uint256)[]typeIdentifier st_array$_t_function_external_nonpayable$__$returns$_t_uint256_$_$dyn_storage_ptr

,
            [
              Value.Integer 3
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "a" |),
            Some (Value.Integer 0)
          |),
          M.member_access (|
            M.get_name (| "this" |),
            "getter1"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "a" |),
            Some (Value.Integer 1)
          |),
          M.member_access (|
            M.get_name (| "this" |),
            "getter2"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "a" |),
            Some (Value.Integer 2)
          |),
          M.member_access (|
            M.get_name (| "this" |),
            "getter3"
          |)
        |) in
      let _ :=
        M.return_ (|
          Conditional M.get_name (| "reenc" |) M.call (|
            M.member_access (|
              M.get_name (| "this" |),
              "f_reenc"
            |),
            [
              M.get_name (| "a" |)
            ]
          |) M.call (|
            M.member_access (|
              M.get_name (| "this" |),
              "f"
            |),
            [
              M.get_name (| "a" |)
            ]
          |)

        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
