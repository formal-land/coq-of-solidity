(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [a, b, c, d] =>
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.get_name (| "a" |),
            M.member_access (|
              M.get_name (| "b" |),
              "length"
            |),
            M.member_access (|
              M.index_access (|
                M.get_name (| "b" |),
                Some (Value.Integer 1)
              |),
              "length"
            |),
            M.index_access (|
              M.index_access (|
                M.get_name (| "b" |),
                Some (Value.Integer 1)
              |),
              Some (Value.Integer 1)
            |),
            M.member_access (|
              M.index_access (|
                M.get_name (| "c" |),
                Some (Value.Integer 1)
              |),
              "length"
            |),
            M.index_access (|
              M.index_access (|
                M.index_access (|
                  M.get_name (| "c" |),
                  Some (Value.Integer 1)
                |),
                Some (Value.Integer 1)
              |),
              Some (Value.Integer 1)
            |),
            M.get_name (| "d" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "b" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 85
src: 375:10:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 84
src: 375:8:0
nodeType: ArrayTypeName
baseType: Ty.path "uint16"
length: 
typeDescriptions: typeString uint16[]typeIdentifier st_array$_t_uint16_$dyn_storage_ptr

length: 
typeDescriptions: typeString uint16[][]typeIdentifier st_array$_t_array$_t_uint16_$dyn_storage_$dyn_storage_ptr

,
            [
              Value.Integer 3
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "b" |),
            Some (Value.Integer 0)
          |),
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 94
src: 403:8:0
nodeType: ArrayTypeName
baseType: Ty.path "uint16"
length: 
typeDescriptions: typeString uint16[]typeIdentifier st_array$_t_uint16_$dyn_storage_ptr

,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "b" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          Value.Integer 0x55
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "b" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 1)
          |),
          Value.Integer 0x56
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "b" |),
            Some (Value.Integer 1)
          |),
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 120
src: 465:8:0
nodeType: ArrayTypeName
baseType: Ty.path "uint16"
length: 
typeDescriptions: typeString uint16[]typeIdentifier st_array$_t_uint16_$dyn_storage_ptr

,
            [
              Value.Integer 4
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "b" |),
              Some (Value.Integer 1)
            |),
            Some (Value.Integer 0)
          |),
          Value.Integer 0x65
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "b" |),
              Some (Value.Integer 1)
            |),
            Some (Value.Integer 1)
          |),
          Value.Integer 0x66
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "b" |),
              Some (Value.Integer 1)
            |),
            Some (Value.Integer 2)
          |),
          Value.Integer 0x67
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "b" |),
              Some (Value.Integer 1)
            |),
            Some (Value.Integer 3)
          |),
          Value.Integer 0x68
        |) in
      let _ :=
        M.define (|
          [ "c" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "c" |),
            Some (Value.Integer 0)
          |),
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 174
src: 589:9:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 173
src: 589:7:0
nodeType: ArrayTypeName
baseType: Ty.path "uint"
length: Value.Integer 2
typeDescriptions: typeString uint256[2]typeIdentifier st_array$_t_uint256_$2_storage_ptr

length: 
typeDescriptions: typeString uint256[2][]typeIdentifier st_array$_t_array$_t_uint256_$2_storage_$dyn_storage_ptr

,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.index_access (|
                M.get_name (| "c" |),
                Some (Value.Integer 0)
              |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 1)
          |),
          Value.Integer 0x75
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "c" |),
            Some (Value.Integer 1)
          |),
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 196
src: 637:9:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 195
src: 637:7:0
nodeType: ArrayTypeName
baseType: Ty.path "uint"
length: Value.Integer 2
typeDescriptions: typeString uint256[2]typeIdentifier st_array$_t_uint256_$2_storage_ptr

length: 
typeDescriptions: typeString uint256[2][]typeIdentifier st_array$_t_array$_t_uint256_$2_storage_$dyn_storage_ptr

,
            [
              Value.Integer 5
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.index_access (|
                M.get_name (| "c" |),
                Some (Value.Integer 1)
              |),
              Some (Value.Integer 1)
            |),
            Some (Value.Integer 1)
          |),
          Value.Integer 0x85
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "this" |),
              "f"
            |),
            [
              Value.Integer 12,
              M.get_name (| "b" |),
              M.get_name (| "c" |),
              Value.Integer 13
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
