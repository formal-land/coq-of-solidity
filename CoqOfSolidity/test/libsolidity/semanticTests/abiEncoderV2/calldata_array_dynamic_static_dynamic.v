(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [s] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.get_name (| "msg" |),
            "data"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f2 (α : list Value.t) : M :=
    match α with
    | [s] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.get_name (| "msg" |),
            "data"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition reenc_f (α : list Value.t) : M :=
    match α with
    | [s] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "this" |),
              "f"
            |),
            [
              M.get_name (| "s" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition reenc_f2 (α : list Value.t) : M :=
    match α with
    | [s] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "this" |),
              "f2"
            |),
            [
              M.get_name (| "s" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "m" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 82
src: 596:12:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 81
src: 596:10:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 79
src: 596:7:0
nodeType: ArrayTypeName
baseType: Ty.path "uint8"
length: 
typeDescriptions: typeString uint8[]typeIdentifier st_array$_t_uint8_$dyn_storage_ptr

length: Value.Integer 1
typeDescriptions: typeString uint8[][1]typeIdentifier st_array$_t_array$_t_uint8_$dyn_storage_$1_storage_ptr

length: 
typeDescriptions: typeString uint8[][1][]typeIdentifier st_array$_t_array$_t_array$_t_uint8_$dyn_storage_$1_storage_$dyn_storage_ptr

,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 93
src: 635:7:0
nodeType: ArrayTypeName
baseType: Ty.path "uint8"
length: 
typeDescriptions: typeString uint8[]typeIdentifier st_array$_t_uint8_$dyn_storage_ptr

,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.index_access (|
                M.get_name (| "m" |),
                Some (Value.Integer 0)
              |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          Value.Integer 42
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "this" |),
              "f"
            |),
            [
              M.get_name (| "m" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "m" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 132
src: 791:12:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 131
src: 791:10:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 129
src: 791:7:0
nodeType: ArrayTypeName
baseType: Ty.path "uint8"
length: 
typeDescriptions: typeString uint8[]typeIdentifier st_array$_t_uint8_$dyn_storage_ptr

length: Value.Integer 1
typeDescriptions: typeString uint8[][1]typeIdentifier st_array$_t_array$_t_uint8_$dyn_storage_$1_storage_ptr

length: 
typeDescriptions: typeString uint8[][1][]typeIdentifier st_array$_t_array$_t_array$_t_uint8_$dyn_storage_$1_storage_$dyn_storage_ptr

,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 143
src: 830:7:0
nodeType: ArrayTypeName
baseType: Ty.path "uint8"
length: 
typeDescriptions: typeString uint8[]typeIdentifier st_array$_t_uint8_$dyn_storage_ptr

,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.index_access (|
                M.get_name (| "m" |),
                Some (Value.Integer 0)
              |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          Value.Integer 42
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "this" |),
              "reenc_f"
            |),
            [
              M.get_name (| "m" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition i (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "m" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 182
src: 994:14:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 181
src: 994:12:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 179
src: 994:9:0
nodeType: ArrayTypeName
baseType: Ty.path "uint256"
length: 
typeDescriptions: typeString uint256[]typeIdentifier st_array$_t_uint256_$dyn_storage_ptr

length: Value.Integer 2
typeDescriptions: typeString uint256[][2]typeIdentifier st_array$_t_array$_t_uint256_$dyn_storage_$2_storage_ptr

length: 
typeDescriptions: typeString uint256[][2][]typeIdentifier st_array$_t_array$_t_array$_t_uint256_$dyn_storage_$2_storage_$dyn_storage_ptr

,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 193
src: 1035:9:0
nodeType: ArrayTypeName
baseType: Ty.path "uint256"
length: 
typeDescriptions: typeString uint256[]typeIdentifier st_array$_t_uint256_$dyn_storage_ptr

,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 1)
          |),
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 205
src: 1071:9:0
nodeType: ArrayTypeName
baseType: Ty.path "uint256"
length: 
typeDescriptions: typeString uint256[]typeIdentifier st_array$_t_uint256_$dyn_storage_ptr

,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.index_access (|
                M.get_name (| "m" |),
                Some (Value.Integer 0)
              |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          Value.Integer 42
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.index_access (|
                M.get_name (| "m" |),
                Some (Value.Integer 0)
              |),
              Some (Value.Integer 1)
            |),
            Some (Value.Integer 0)
          |),
          Value.Integer 42
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "this" |),
              "f2"
            |),
            [
              M.get_name (| "m" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition j (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "m" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 254
src: 1257:14:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 253
src: 1257:12:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 251
src: 1257:9:0
nodeType: ArrayTypeName
baseType: Ty.path "uint256"
length: 
typeDescriptions: typeString uint256[]typeIdentifier st_array$_t_uint256_$dyn_storage_ptr

length: Value.Integer 2
typeDescriptions: typeString uint256[][2]typeIdentifier st_array$_t_array$_t_uint256_$dyn_storage_$2_storage_ptr

length: 
typeDescriptions: typeString uint256[][2][]typeIdentifier st_array$_t_array$_t_array$_t_uint256_$dyn_storage_$2_storage_$dyn_storage_ptr

,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 265
src: 1298:9:0
nodeType: ArrayTypeName
baseType: Ty.path "uint256"
length: 
typeDescriptions: typeString uint256[]typeIdentifier st_array$_t_uint256_$dyn_storage_ptr

,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 1)
          |),
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 277
src: 1334:9:0
nodeType: ArrayTypeName
baseType: Ty.path "uint256"
length: 
typeDescriptions: typeString uint256[]typeIdentifier st_array$_t_uint256_$dyn_storage_ptr

,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.index_access (|
                M.get_name (| "m" |),
                Some (Value.Integer 0)
              |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          Value.Integer 42
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.index_access (|
                M.get_name (| "m" |),
                Some (Value.Integer 0)
              |),
              Some (Value.Integer 1)
            |),
            Some (Value.Integer 0)
          |),
          Value.Integer 42
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "this" |),
              "reenc_f2"
            |),
            [
              M.get_name (| "m" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
