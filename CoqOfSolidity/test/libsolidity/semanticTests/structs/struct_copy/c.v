(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module c_123.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            [

            ]
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                [

                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          M.call (|
            "allocate_unbounded",
            [

            ]
          |)
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "635f3132335f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "635f3132335f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "635f3132335f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module c_123_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x1ff2af2d),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_copy",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x60fe47b1),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_set",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x8f88708b),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_retrieve",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            [

            ]
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_uint256",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_uint256",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_uint256",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_uint256t_uint256",
          ["headStart"; "dataEnd"],
          ["value0";
      "value1"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 64]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                [Literal.number 0]
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset_1"],
                [Literal.number 32]
              |) in
            let _ :=
              M.declare (|
                ["value1"],
                M.call (|
                  "abi_decode_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset_1" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bool",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "iszero",
                      [
                        M.get (| "value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bool_to_bool",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_bool",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bool",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_bool_to_bool",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_copy",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"],
                M.call (|
                  "abi_decode_uint256t_uint256",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_copy",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_tuple_uint256",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                [Literal.number 0]
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_set",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"],
                M.call (|
                  "abi_decode_tuple_uint256",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_set",
                  [
                    M.get (| "param" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_uint256_uint256_uint256",
          ["headStart"; "value0"; "value1"; "value2"; "value3"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 128]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value2" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 64]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value3" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 96]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_retrieve",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"],
                M.call (|
                  "abi_decode_tuple_uint256",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"; "ret_2"; "ret_3"],
                M.call (|
                  "fun_retrieve",
                  [
                    M.get (| "param" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_uint256_uint256_uint256_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |);
                    M.get (| "ret_2" |);
                    M.get (| "ret_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_bool",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint256_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "mapping_index_access_mapping_uint256_struct_Struct_storage_of_uint256",
          ["slot"; "key"],
          ["dataSlot"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "convert_uint256_to_uint256",
                    [
                      M.get (| "key" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0x20];
                  M.get (| "slot" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["dataSlot"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x40]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_0_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_uint256",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint256",
                  [
                    M.call (|
                      "shift_right_0_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_uint256",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offsett_uint256",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_shift",
          ["value"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                M.call (|
                  "not",
                  [
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left",
                  [
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_uint256",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_uint256_to_uint256",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                M.call (|
                  "convert_uint256_to_uint256",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_shift",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.call (|
                        "prepare_store_uint256",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_struct_to_storage_from_struct_Nested__to_struct_Nested",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "slot" |);
                        M.get (| "value" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["memberSlot"],
                      M.call (|
                        "add",
                        [
                          M.get (| "slot" |);
                          [Literal.number 0]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["memberSrcPtr"],
                      M.call (|
                        "add",
                        [
                          M.get (| "value" |);
                          [Literal.number 0]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["memberValue"],
                      M.call (|
                        "read_from_storage_split_offset_uint256",
                        [
                          M.get (| "memberSrcPtr" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.call (|
                      "update_storage_value_offsett_uint256_to_uint256",
                      [
                        M.get (| "memberSlot" |);
                        M.get (| "memberValue" |)
                      ]
                    |) in
                  let _ :=
                    M.assign (|
                      ["memberSlot_1"],
                      M.call (|
                        "add",
                        [
                          M.get (| "slot" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["memberSrcPtr_1"],
                      M.call (|
                        "add",
                        [
                          M.get (| "value" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["memberValue_1"],
                      M.call (|
                        "read_from_storage_split_offset_uint256",
                        [
                          M.get (| "memberSrcPtr_1" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.call (|
                      "update_storage_value_offsett_uint256_to_uint256",
                      [
                        M.get (| "memberSlot_1" |);
                        M.get (| "memberValue_1" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_struct_Nested__to_struct_Nested",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "copy_struct_to_storage_from_struct_Nested__to_struct_Nested",
                [
                  M.get (| "slot" |);
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_struct_to_storage_from_struct_Struct__to_struct_Struct",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "slot" |);
                        M.get (| "value" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["memberSlot"],
                      M.call (|
                        "add",
                        [
                          M.get (| "slot" |);
                          [Literal.number 0]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["memberSrcPtr"],
                      M.call (|
                        "add",
                        [
                          M.get (| "value" |);
                          [Literal.number 0]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["memberValue"],
                      M.call (|
                        "read_from_storage_split_offset_uint256",
                        [
                          M.get (| "memberSrcPtr" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.call (|
                      "update_storage_value_offsett_uint256_to_uint256",
                      [
                        M.get (| "memberSlot" |);
                        M.get (| "memberValue" |)
                      ]
                    |) in
                  let _ :=
                    M.assign (|
                      ["memberSlot_1"],
                      M.call (|
                        "add",
                        [
                          M.get (| "slot" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["memberSrcPtr_1"],
                      M.call (|
                        "add",
                        [
                          M.get (| "value" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["memberValue_1"],
                      M.get (| "memberSrcPtr_1" |)
                    |) in
                  let _ :=
                    M.call (|
                      "update_storage_value_offsett_struct_Nested__to_struct_Nested",
                      [
                        M.get (| "memberSlot_1" |);
                        M.get (| "memberValue_1" |)
                      ]
                    |) in
                  let _ :=
                    M.assign (|
                      ["memberSlot_2"],
                      M.call (|
                        "add",
                        [
                          M.get (| "slot" |);
                          [Literal.number 3]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["memberSrcPtr_2"],
                      M.call (|
                        "add",
                        [
                          M.get (| "value" |);
                          [Literal.number 3]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["memberValue_2"],
                      M.call (|
                        "read_from_storage_split_offset_uint256",
                        [
                          M.get (| "memberSrcPtr_2" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.call (|
                      "update_storage_value_offsett_uint256_to_uint256",
                      [
                        M.get (| "memberSlot_2" |);
                        M.get (| "memberValue_2" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_struct_Struct__to_struct_Struct",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "copy_struct_to_storage_from_struct_Struct__to_struct_Struct",
                [
                  M.get (| "slot" |);
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_copy",
          ["var_from"; "var_to"],
          ["var_"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_t_bool"],
                M.call (|
                  "zero_value_for_split_bool",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "zero_t_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["_2_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_70_slot"],
                M.get (| "_2_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_from" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.call (|
                  "mapping_index_access_mapping_uint256_struct_Struct_storage_of_uint256",
                  [
                    M.get (| "expr_70_slot" |);
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_5_slot"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_72_slot"],
                M.get (| "_5_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_6_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_67_slot"],
                M.get (| "_6_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.get (| "var_to" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.get (| "_3" |)
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.call (|
                  "mapping_index_access_mapping_uint256_struct_Struct_storage_of_uint256",
                  [
                    M.get (| "expr_67_slot" |);
                    M.get (| "expr_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_struct_Struct__to_struct_Struct",
                [
                  M.get (| "_4" |);
                  M.get (| "expr_72_slot" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "expr_2" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_1_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_2_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_set",
          ["var_k"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                M.call (|
                  "zero_value_for_split_bool",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.call (|
                  "convert_rational_1_by_1_to_uint256",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_25_slot"],
                M.get (| "_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.get (| "var_k" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.call (|
                  "mapping_index_access_mapping_uint256_struct_Struct_storage_of_uint256",
                  [
                    M.get (| "expr_25_slot" |);
                    M.get (| "expr_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_15_slot"],
                M.get (| "_3" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_27_slot"],
                M.get (| "_15_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_27_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_uint256_to_uint256",
                [
                  M.get (| "_4" |);
                  M.get (| "_1" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.call (|
                  "convert_t_rational_by_to_t_uint256",
                  [
                    M.get (| "expr_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_18_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_32_slot"],
                M.get (| "_18_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.get (| "var_k" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.get (| "_6" |)
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                M.call (|
                  "mapping_index_access_mapping_uint256_struct_Struct_storage_of_uint256",
                  [
                    M.get (| "expr_32_slot" |);
                    M.get (| "expr_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_21_slot"],
                M.get (| "_7" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_slot"],
                M.get (| "_21_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_slot" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_23_slot"],
                M.get (| "_8" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_35_slot"],
                M.get (| "_23_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_35_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_uint256_to_uint256",
                [
                  M.get (| "_9" |);
                  M.get (| "_5" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                [Literal.number 0x04]
              |) in
            let _ :=
              M.assign (|
                ["_10"],
                M.call (|
                  "convert_rational_by_to_uint256",
                  [
                    M.get (| "expr_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_26_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_40_slot"],
                M.get (| "_26_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_11"],
                M.get (| "var_k" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                M.get (| "_11" |)
              |) in
            let _ :=
              M.assign (|
                ["_12"],
                M.call (|
                  "mapping_index_access_mapping_uint256_struct_Struct_storage_of_uint256",
                  [
                    M.get (| "expr_40_slot" |);
                    M.get (| "expr_5" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_29_slot"],
                M.get (| "_12" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_42_slot"],
                M.get (| "_29_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_13"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_42_slot" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_31_slot"],
                M.get (| "_13" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_43_slot"],
                M.get (| "_31_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_14"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_43_slot" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_uint256_to_uint256",
                [
                  M.get (| "_14" |);
                  M.get (| "_10" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_15"],
                M.call (|
                  "convert_rational_2_by_1_to_uint256",
                  [
                    M.get (| "expr_6" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_34_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_48_slot"],
                M.get (| "_34_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_16"],
                M.get (| "var_k" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                M.get (| "_16" |)
              |) in
            let _ :=
              M.assign (|
                ["_17"],
                M.call (|
                  "mapping_index_access_mapping_uint256_struct_Struct_storage_of_uint256",
                  [
                    M.get (| "expr_48_slot" |);
                    M.get (| "expr_7" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_37_slot"],
                M.get (| "_17" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_50_slot"],
                M.get (| "_37_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_18"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_50_slot" |);
                    [Literal.number 3]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_uint256_to_uint256",
                [
                  M.get (| "_18" |);
                  M.get (| "_15" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_8" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_retrieve",
          ["var_k"],
          ["var_a";
      "var_x";
      "var_y";
      "var_c"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_a"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_1"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_x"],
                M.get (| "zero_uint256_1" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_t_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_y"],
                M.get (| "zero_t_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_2"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_c"],
                M.get (| "zero_uint256_2" |)
              |) in
            let _ :=
              M.assign (|
                ["_43_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_92_slot"],
                M.get (| "_43_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_k" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.call (|
                  "mapping_index_access_mapping_uint256_struct_Struct_storage_of_uint256",
                  [
                    M.get (| "expr_92_slot" |);
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_46_slot"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_94_slot"],
                M.get (| "_46_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_94_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    M.get (| "_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.get (| "_4" |)
              |) in
            let _ :=
              M.declare (|
                ["var_a"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.assign (|
                ["_49_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_99_slot"],
                M.get (| "_49_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.get (| "var_k" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.get (| "_5" |)
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.call (|
                  "mapping_index_access_mapping_uint256_struct_Struct_storage_of_uint256",
                  [
                    M.get (| "expr_99_slot" |);
                    M.get (| "expr_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_52_slot"],
                M.get (| "_6" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_101_slot"],
                M.get (| "_52_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_101_slot" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_54_slot"],
                M.get (| "_7" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_102_slot"],
                M.get (| "_54_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_102_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    M.get (| "_8" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.get (| "_9" |)
              |) in
            let _ :=
              M.declare (|
                ["var_x"],
                M.get (| "expr_3" |)
              |) in
            let _ :=
              M.assign (|
                ["_57_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_107_slot"],
                M.get (| "_57_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_10"],
                M.get (| "var_k" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                M.get (| "_10" |)
              |) in
            let _ :=
              M.assign (|
                ["_11"],
                M.call (|
                  "mapping_index_access_mapping_uint256_struct_Struct_storage_of_uint256",
                  [
                    M.get (| "expr_107_slot" |);
                    M.get (| "expr_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_60_slot"],
                M.get (| "_11" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_109_slot"],
                M.get (| "_60_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_12"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_109_slot" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_62_slot"],
                M.get (| "_12" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_110_slot"],
                M.get (| "_62_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_13"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_110_slot" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_14"],
                M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    M.get (| "_13" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                M.get (| "_14" |)
              |) in
            let _ :=
              M.declare (|
                ["var_y"],
                M.get (| "expr_5" |)
              |) in
            let _ :=
              M.assign (|
                ["_65_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_115_slot"],
                M.get (| "_65_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_15"],
                M.get (| "var_k" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                M.get (| "_15" |)
              |) in
            let _ :=
              M.assign (|
                ["_16"],
                M.call (|
                  "mapping_index_access_mapping_uint256_struct_Struct_storage_of_uint256",
                  [
                    M.get (| "expr_115_slot" |);
                    M.get (| "expr_6" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_68_slot"],
                M.get (| "_16" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_117_slot"],
                M.get (| "_68_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_17"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_117_slot" |);
                    [Literal.number 3]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_18"],
                M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    M.get (| "_17" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                M.get (| "_18" |)
              |) in
            let _ :=
              M.declare (|
                ["var_c"],
                M.get (| "expr_7" |)
              |) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a26469706673582212205678d4b3f2ab50f2d05eacc3c2d7c73b5c3659041e12011b1c6c86250640fc3564736f6c634300081b0033".
  End c_123_deployed.
End c_123.
