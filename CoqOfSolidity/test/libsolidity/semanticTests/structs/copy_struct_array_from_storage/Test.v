(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module Test_477.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            [

            ]
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                [

                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.call (|
          "constructor_Test",
          [

          ]
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          M.call (|
            "allocate_unbounded",
            [

            ]
          |)
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "546573745f3437375f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "546573745f3437375f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "546573745f3437375f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_array_array_array_struct_S_storage_dyn_storage_dyn_storage_to_array_array_struct_S_storage_dyn__dyn_ptr",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "panic_error_0x41",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    [Literal.number 0x4e487b71]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 4];
                [Literal.number 0x41]
              ]
            |) in
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0x24]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_length_array_array_struct_S_storage_dyn__dyn_ptr",
        ["value"],
        ["length"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["length"],
              M.call (|
                "sload",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "panic_error_0x32",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    [Literal.number 0x4e487b71]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 4];
                [Literal.number 0x32]
              ]
            |) in
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0x24]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_dataslot_array_array_struct_S_storage_dyn__dyn_ptr",
        ["ptr"],
        ["data"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["data"],
              M.get (| "ptr" |)
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.get (| "ptr" |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["data"],
              M.call (|
                "keccak256",
                [
                  [Literal.number 0];
                  [Literal.number 0x20]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "storage_array_index_access_struct_S_storage_dyn__dyn_ptr",
        ["array"; "index"],
        ["slot";
    "offset"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["arrayLength"],
              M.call (|
                "array_length_array_array_struct_S_storage_dyn__dyn_ptr",
                [
                  M.get (| "array" |)
                ]
              |)
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "lt",
                    [
                      M.get (| "index" |);
                      M.get (| "arrayLength" |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x32",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["dataArea"],
              M.call (|
                "array_dataslot_array_array_struct_S_storage_dyn__dyn_ptr",
                [
                  M.get (| "array" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["slot"],
              M.call (|
                "add",
                [
                  M.get (| "dataArea" |);
                  M.call (|
                    "mul",
                    [
                      M.get (| "index" |);
                      [Literal.number 1]
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["offset"],
              [Literal.number 0]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_push_zero_array_array_struct_S_storage_dyn__dyn_ptr",
        ["array"],
        ["slot";
    "offset"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["oldLen"],
              M.call (|
                "array_length_array_array_struct_S_storage_dyn__dyn_ptr",
                [
                  M.get (| "array" |)
                ]
              |)
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "lt",
                    [
                      M.get (| "oldLen" |);
                      [Literal.number 18446744073709551616]
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x41",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.call (|
              "sstore",
              [
                M.get (| "array" |);
                M.call (|
                  "add",
                  [
                    M.get (| "oldLen" |);
                    [Literal.number 1]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["slot"; "offset"],
              M.call (|
                "storage_array_index_access_struct_S_storage_dyn__dyn_ptr",
                [
                  M.get (| "array" |);
                  M.get (| "oldLen" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_length_array_array_struct_S_storage_dyn__dyn",
        ["value"],
        ["length"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["length"],
              M.call (|
                "sload",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_dataslot_array_array_struct_S_storage_dyn__dyn",
        ["ptr"],
        ["data"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["data"],
              M.get (| "ptr" |)
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.get (| "ptr" |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["data"],
              M.call (|
                "keccak256",
                [
                  [Literal.number 0];
                  [Literal.number 0x20]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "storage_array_index_access_struct_S_storage_dyn__dyn",
        ["array"; "index"],
        ["slot";
    "offset"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["arrayLength"],
              M.call (|
                "array_length_array_array_struct_S_storage_dyn__dyn",
                [
                  M.get (| "array" |)
                ]
              |)
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "lt",
                    [
                      M.get (| "index" |);
                      M.get (| "arrayLength" |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x32",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["dataArea"],
              M.call (|
                "array_dataslot_array_array_struct_S_storage_dyn__dyn",
                [
                  M.get (| "array" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["slot"],
              M.call (|
                "add",
                [
                  M.get (| "dataArea" |);
                  M.call (|
                    "mul",
                    [
                      M.get (| "index" |);
                      [Literal.number 1]
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["offset"],
              [Literal.number 0]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_array_array_struct_S_storage_dyn_storage_to_array_struct_S__dyn_ptr",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "round_up_to_mul_of",
        ["value"],
        ["result"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["result"],
              M.call (|
                "and",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 31]
                    ]
                  |);
                  M.call (|
                    "not",
                    [
                      [Literal.number 31]
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "finalize_allocation",
        ["memPtr"; "size"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["newFreePtr"],
              M.call (|
                "add",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "round_up_to_mul_of",
                    [
                      M.get (| "size" |)
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "or",
                [
                  M.call (|
                    "gt",
                    [
                      M.get (| "newFreePtr" |);
                      M.call (|
                        "sub",
                        [
                          M.call (|
                            "shl",
                            [
                              [Literal.number 64];
                              [Literal.number 1]
                            ]
                          |);
                          [Literal.number 1]
                        ]
                      |)
                    ]
                  |);
                  M.call (|
                    "lt",
                    [
                      M.get (| "newFreePtr" |);
                      M.get (| "memPtr" |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x41",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 64];
                M.get (| "newFreePtr" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "allocate_memory",
        ["size"],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "allocate_unbounded",
                [

                ]
              |)
            |) in
          let _ :=
            M.call (|
              "finalize_allocation",
              [
                M.get (| "memPtr" |);
                M.get (| "size" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "allocate_memory_struct_struct_S_storage_ptr",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "allocate_memory",
                [
                  [Literal.number 32]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_t_rational_by_1",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_uint256",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "identity",
        ["value"],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_1_by_1_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_t_rational_by_1",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "write_to_memory_uint256",
        ["memPtr"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                M.get (| "memPtr" |);
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "value" |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_dataslot_array_struct_S_storage_dyn_ptr",
        ["ptr"],
        ["data"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["data"],
              M.get (| "ptr" |)
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.get (| "ptr" |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["data"],
              M.call (|
                "keccak256",
                [
                  [Literal.number 0];
                  [Literal.number 0x20]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_length_array_struct_S_storage_dyn_ptr",
        ["value"],
        ["length"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["length"],
              M.call (|
                "sload",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "storage_array_index_access_struct_S__dyn_ptr",
        ["array"; "index"],
        ["slot";
    "offset"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["arrayLength"],
              M.call (|
                "array_length_array_struct_S_storage_dyn_ptr",
                [
                  M.get (| "array" |)
                ]
              |)
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "lt",
                    [
                      M.get (| "index" |);
                      M.get (| "arrayLength" |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x32",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["dataArea"],
              M.call (|
                "array_dataslot_array_struct_S_storage_dyn_ptr",
                [
                  M.get (| "array" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["slot"],
              M.call (|
                "add",
                [
                  M.get (| "dataArea" |);
                  M.call (|
                    "mul",
                    [
                      M.get (| "index" |);
                      [Literal.number 1]
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["offset"],
              [Literal.number 0]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "panic_error_0x00",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    [Literal.number 0x4e487b71]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 4];
                [Literal.number 0x00]
              ]
            |) in
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0x24]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "read_from_memoryt_uint256",
        ["ptr"],
        ["returnValue"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["value"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "mload",
                    [
                      M.get (| "ptr" |)
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["returnValue"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_left",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shl",
                [
                  [Literal.number 0];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_byte_slice_shift",
        ["value"; "toInsert"],
        ["result"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["mask"],
              M.call (|
                "not",
                [
                  [Literal.number 0]
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["toInsert"],
              M.call (|
                "shift_left",
                [
                  M.get (| "toInsert" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "and",
                [
                  M.get (| "value" |);
                  M.call (|
                    "not",
                    [
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["result"],
              M.call (|
                "or",
                [
                  M.get (| "value" |);
                  M.call (|
                    "and",
                    [
                      M.get (| "toInsert" |);
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_uint256_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_uint256",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "prepare_store_uint256",
        ["value"],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_storage_value_offsett_uint256_to_uint256",
        ["slot"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["convertedValue"],
              M.call (|
                "convert_uint256_to_uint256",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "sstore",
              [
                M.get (| "slot" |);
                M.call (|
                  "update_byte_slice_shift",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |);
                    M.call (|
                      "prepare_store_uint256",
                      [
                        M.get (| "convertedValue" |)
                      ]
                    |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "copy_struct_to_storage_from_struct_S_to_struct_S",
        ["slot"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["memberSlot"],
              M.call (|
                "add",
                [
                  M.get (| "slot" |);
                  [Literal.number 0]
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["memberSrcPtr"],
              M.call (|
                "add",
                [
                  M.get (| "value" |);
                  [Literal.number 0]
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["memberValue"],
              M.call (|
                "read_from_memoryt_uint256",
                [
                  M.get (| "memberSrcPtr" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_uint256_to_uint256",
              [
                M.get (| "memberSlot" |);
                M.get (| "memberValue" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_storage_value_struct_S_to_struct_S",
        ["slot"; "offset"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.get (| "offset" |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x00",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.call (|
              "copy_struct_to_storage_from_struct_S_to_struct_S",
              [
                M.get (| "slot" |);
                M.get (| "value" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_push_from_struct_S_to_array_struct_S_storage_dyn_ptr",
        ["array"; "value0"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["oldLen"],
              M.call (|
                "sload",
                [
                  M.get (| "array" |)
                ]
              |)
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "lt",
                    [
                      M.get (| "oldLen" |);
                      [Literal.number 18446744073709551616]
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x41",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.call (|
              "sstore",
              [
                M.get (| "array" |);
                M.call (|
                  "add",
                  [
                    M.get (| "oldLen" |);
                    [Literal.number 1]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["slot"; "offset"],
              M.call (|
                "storage_array_index_access_struct_S__dyn_ptr",
                [
                  M.get (| "array" |);
                  M.get (| "oldLen" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "update_storage_value_struct_S_to_struct_S",
              [
                M.get (| "slot" |);
                M.get (| "offset" |);
                M.get (| "value0" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_2_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_2_by_1_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_2_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_3_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_3_by_1_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_3_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_t_rational_by_to_t_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_5_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_5_by_1_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_5_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_by_1",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_by_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_by_1",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_t_rational_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_7_by_1_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_t_rational_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "constructor_Test",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["_2_slot"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["expr_16_slot"],
              M.get (| "_2_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_18_self_slot"],
              M.call (|
                "convert_array_array_array_struct_S_storage_dyn_storage_dyn_storage_to_array_array_struct_S_storage_dyn__dyn_ptr",
                [
                  M.get (| "expr_16_slot" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_1"; "_2"],
              M.call (|
                "array_push_zero_array_array_struct_S_storage_dyn__dyn_ptr",
                [
                  M.get (| "expr_18_self_slot" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_6_slot"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["expr_21_slot"],
              M.get (| "_6_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["_3"; "_4"],
              M.call (|
                "storage_array_index_access_struct_S_storage_dyn__dyn",
                [
                  M.get (| "expr_21_slot" |);
                  M.get (| "expr" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_9_slot"],
              M.get (| "_3" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_23_slot"],
              M.get (| "_9_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_self_slot"],
              M.call (|
                "convert_array_array_struct_S_storage_dyn_storage_to_array_struct_S__dyn_ptr",
                [
                  M.get (| "expr_23_slot" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["expr_1"],
              [Literal.number 0x01]
            |) in
          let _ :=
            M.assign (|
              ["expr_27_mpos"],
              M.call (|
                "allocate_memory_struct_struct_S_storage_ptr",
                [

                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_5"],
              M.call (|
                "convert_rational_1_by_1_to_uint256",
                [
                  M.get (| "expr_1" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "write_to_memory_uint256",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "expr_27_mpos" |);
                    [Literal.number 0]
                  ]
                |);
                M.get (| "_5" |)
              ]
            |) in
          let _ :=
            M.call (|
              "array_push_from_struct_S_to_array_struct_S_storage_dyn_ptr",
              [
                M.get (| "expr_self_slot" |);
                M.get (| "expr_27_mpos" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["_11_slot"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["expr_30_slot"],
              M.get (| "_11_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_2"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["_6"; "_7"],
              M.call (|
                "storage_array_index_access_struct_S_storage_dyn__dyn",
                [
                  M.get (| "expr_30_slot" |);
                  M.get (| "expr_2" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_slot"],
              M.get (| "_6" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_32_slot"],
              M.get (| "_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_33_self_slot"],
              M.call (|
                "convert_array_array_struct_S_storage_dyn_storage_to_array_struct_S__dyn_ptr",
                [
                  M.get (| "expr_32_slot" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["expr_3"],
              [Literal.number 0x02]
            |) in
          let _ :=
            M.assign (|
              ["expr_36_mpos"],
              M.call (|
                "allocate_memory_struct_struct_S_storage_ptr",
                [

                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_8"],
              M.call (|
                "convert_rational_2_by_1_to_uint256",
                [
                  M.get (| "expr_3" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "write_to_memory_uint256",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "expr_36_mpos" |);
                    [Literal.number 0]
                  ]
                |);
                M.get (| "_8" |)
              ]
            |) in
          let _ :=
            M.call (|
              "array_push_from_struct_S_to_array_struct_S_storage_dyn_ptr",
              [
                M.get (| "expr_33_self_slot" |);
                M.get (| "expr_36_mpos" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["_16_slot"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["expr_39_slot"],
              M.get (| "_16_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_4"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["_9"; "_10"],
              M.call (|
                "storage_array_index_access_struct_S_storage_dyn__dyn",
                [
                  M.get (| "expr_39_slot" |);
                  M.get (| "expr_4" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_19_slot"],
              M.get (| "_9" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_41_slot"],
              M.get (| "_19_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_42_self_slot"],
              M.call (|
                "convert_array_array_struct_S_storage_dyn_storage_to_array_struct_S__dyn_ptr",
                [
                  M.get (| "expr_41_slot" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["expr_5"],
              [Literal.number 0x03]
            |) in
          let _ :=
            M.assign (|
              ["expr_45_mpos"],
              M.call (|
                "allocate_memory_struct_struct_S_storage_ptr",
                [

                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_11"],
              M.call (|
                "convert_rational_3_by_1_to_uint256",
                [
                  M.get (| "expr_5" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "write_to_memory_uint256",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "expr_45_mpos" |);
                    [Literal.number 0]
                  ]
                |);
                M.get (| "_11" |)
              ]
            |) in
          let _ :=
            M.call (|
              "array_push_from_struct_S_to_array_struct_S_storage_dyn_ptr",
              [
                M.get (| "expr_42_self_slot" |);
                M.get (| "expr_45_mpos" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["_21_slot"],
              [Literal.number 0x01]
            |) in
          let _ :=
            M.assign (|
              ["expr_48_slot"],
              M.get (| "_21_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_50_self_slot"],
              M.call (|
                "convert_array_array_struct_S_storage_dyn_storage_to_array_struct_S__dyn_ptr",
                [
                  M.get (| "expr_48_slot" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["expr_6"],
              [Literal.number 0x04]
            |) in
          let _ :=
            M.assign (|
              ["expr_53_mpos"],
              M.call (|
                "allocate_memory_struct_struct_S_storage_ptr",
                [

                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_12"],
              M.call (|
                "convert_t_rational_by_to_t_uint256",
                [
                  M.get (| "expr_6" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "write_to_memory_uint256",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "expr_53_mpos" |);
                    [Literal.number 0]
                  ]
                |);
                M.get (| "_12" |)
              ]
            |) in
          let _ :=
            M.call (|
              "array_push_from_struct_S_to_array_struct_S_storage_dyn_ptr",
              [
                M.get (| "expr_50_self_slot" |);
                M.get (| "expr_53_mpos" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["_23_slot"],
              [Literal.number 0x01]
            |) in
          let _ :=
            M.assign (|
              ["expr_56_slot"],
              M.get (| "_23_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_58_self_slot"],
              M.call (|
                "convert_array_array_struct_S_storage_dyn_storage_to_array_struct_S__dyn_ptr",
                [
                  M.get (| "expr_56_slot" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["expr_7"],
              [Literal.number 0x05]
            |) in
          let _ :=
            M.assign (|
              ["expr_mpos"],
              M.call (|
                "allocate_memory_struct_struct_S_storage_ptr",
                [

                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_13"],
              M.call (|
                "convert_rational_5_by_1_to_uint256",
                [
                  M.get (| "expr_7" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "write_to_memory_uint256",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "expr_mpos" |);
                    [Literal.number 0]
                  ]
                |);
                M.get (| "_13" |)
              ]
            |) in
          let _ :=
            M.call (|
              "array_push_from_struct_S_to_array_struct_S_storage_dyn_ptr",
              [
                M.get (| "expr_58_self_slot" |);
                M.get (| "expr_mpos" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["_25_slot"],
              [Literal.number 0x01]
            |) in
          let _ :=
            M.assign (|
              ["expr_slot"],
              M.get (| "_25_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_66_self_slot"],
              M.call (|
                "convert_array_array_struct_S_storage_dyn_storage_to_array_struct_S__dyn_ptr",
                [
                  M.get (| "expr_slot" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["expr_8"],
              [Literal.number 0x06]
            |) in
          let _ :=
            M.assign (|
              ["expr_69_mpos"],
              M.call (|
                "allocate_memory_struct_struct_S_storage_ptr",
                [

                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_14"],
              M.call (|
                "convert_rational_by_to_uint256",
                [
                  M.get (| "expr_8" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "write_to_memory_uint256",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "expr_69_mpos" |);
                    [Literal.number 0]
                  ]
                |);
                M.get (| "_14" |)
              ]
            |) in
          let _ :=
            M.call (|
              "array_push_from_struct_S_to_array_struct_S_storage_dyn_ptr",
              [
                M.get (| "expr_66_self_slot" |);
                M.get (| "expr_69_mpos" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["_27_slot"],
              [Literal.number 0x01]
            |) in
          let _ :=
            M.assign (|
              ["expr_72_slot"],
              M.get (| "_27_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_74_self_slot"],
              M.call (|
                "convert_array_array_struct_S_storage_dyn_storage_to_array_struct_S__dyn_ptr",
                [
                  M.get (| "expr_72_slot" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["expr_9"],
              [Literal.number 0x07]
            |) in
          let _ :=
            M.assign (|
              ["expr_77_mpos"],
              M.call (|
                "allocate_memory_struct_struct_S_storage_ptr",
                [

                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_15"],
              M.call (|
                "convert_rational_7_by_1_to_uint256",
                [
                  M.get (| "expr_9" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "write_to_memory_uint256",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "expr_77_mpos" |);
                    [Literal.number 0]
                  ]
                |);
                M.get (| "_15" |)
              ]
            |) in
          let _ :=
            M.call (|
              "array_push_from_struct_S_to_array_struct_S_storage_dyn_ptr",
              [
                M.get (| "expr_74_self_slot" |);
                M.get (| "expr_77_mpos" |)
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module Test_477_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x0a8e8e01),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_test3",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x66e41cb7),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_test2",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x6b59084d),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_test1",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x8f0d282d),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_test4",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            [

            ]
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bool",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "iszero",
                      [
                        M.get (| "value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bool_to_bool",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_bool",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bool",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_bool_to_bool",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_test3",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_test3",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_test2",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_test2",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_test1",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_test1",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_test4",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_test4",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_bool",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_2_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_2_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_2_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "round_up_to_mul_of",
          ["value"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "and",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 31]
                      ]
                    |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 31]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "finalize_allocation",
          ["memPtr"; "size"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["newFreePtr"],
                M.call (|
                  "add",
                  [
                    M.get (| "memPtr" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "size" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "newFreePtr" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "newFreePtr" |);
                        M.get (| "memPtr" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 64];
                  M.get (| "newFreePtr" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory",
          ["size"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "memPtr" |);
                  M.get (| "size" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_array_array_struct_S_dyn_dyn",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "mul",
                  [
                    M.get (| "length" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "add",
                  [
                    M.get (| "size" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_array_array_array_struct_S_dyn_dyn",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["allocSize"],
                M.call (|
                  "array_allocation_size_array_array_struct_S_dyn_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    M.get (| "allocSize" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.get (| "length" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_array_struct_S_dyn",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 96]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_complex_memory_array_array_array_struct_S_dyn_dyn",
          ["dataStart"; "dataSizeInBytes"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["i"],
                [Literal.number 0]
              |) in
            let _ :=
              M.for (|
                tt,
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "dataSizeInBytes" |)
                  ]
                |),
                let _ :=
                  M.declare (|
                    ["i"],
                    M.call (|
                      "add",
                      [
                        M.get (| "i" |);
                        [Literal.number 32]
                      ]
                    |)
                  |) in
                tt,
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "dataStart" |);
                          M.get (| "i" |)
                        ]
                      |);
                      M.call (|
                        "zero_value_for_array_struct_S_dyn",
                        [

                        ]
                      |)
                    ]
                  |) in
                tt
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_and_zero_memory_array_array_array_struct_S_dyn_dyn",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_array_array_array_struct_S_dyn_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["dataStart"],
                M.get (| "memPtr" |)
              |) in
            let _ :=
              M.assign (|
                ["dataSize"],
                M.call (|
                  "array_allocation_size_array_array_struct_S_dyn_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["dataStart"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["dataSize"],
                M.call (|
                  "sub",
                  [
                    M.get (| "dataSize" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "zero_complex_memory_array_array_array_struct_S_dyn_dyn",
                [
                  M.get (| "dataStart" |);
                  M.get (| "dataSize" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x32",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x32]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_array_struct_S_storage_dyn__dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_array_struct_S_storage_dyn__dyn",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.get (| "ptr" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_struct_S_storage_dyn__dyn",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                M.call (|
                  "array_length_array_array_struct_S_storage_dyn__dyn",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                M.call (|
                  "array_dataslot_array_array_struct_S_storage_dyn__dyn",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_array_struct_S_dyn_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "memory_array_index_access_struct_S_dyn_dyn",
          ["baseRef"; "index"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.call (|
                          "array_length_array_array_struct_S_dyn_dyn",
                          [
                            M.get (| "baseRef" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                M.call (|
                  "mul",
                  [
                    M.get (| "index" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "baseRef" |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_0_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_0_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_struct_S_storage_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_array_struct_S_dyn",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "mul",
                  [
                    M.get (| "length" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "add",
                  [
                    M.get (| "size" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_array_array_struct_S_dyn",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["allocSize"],
                M.call (|
                  "array_allocation_size_array_struct_S_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    M.get (| "allocSize" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.get (| "length" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_struct_S_storage_dyn",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.get (| "ptr" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_0_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_uint256",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint256",
                  [
                    M.call (|
                      "shift_right_0_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_uint256",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offsett_uint256",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "write_to_memory_uint256",
          ["memPtr"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_struct_struct_S",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    [Literal.number 32]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_reference_type_struct_S",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "allocate_memory_struct_struct_S",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memberValue"],
                M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "slot" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint256",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.get (| "memberValue" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_struct_S_storage_to_struct_S",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "read_from_storage_reference_type_struct_S",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_from_storage_to_memory_array_struct_S__dyn",
          ["slot"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                M.call (|
                  "array_length_array_struct_S_storage_dyn",
                  [
                    M.get (| "slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_array_array_struct_S_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["mpos"],
                M.get (| "memPtr" |)
              |) in
            let _ :=
              M.declare (|
                ["mpos"],
                M.call (|
                  "add",
                  [
                    M.get (| "mpos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["spos"],
                M.call (|
                  "array_dataslot_array_struct_S_storage_dyn",
                  [
                    M.get (| "slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["i"],
                [Literal.number 0]
              |) in
            let _ :=
              M.for (|
                tt,
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                let _ :=
                  M.declare (|
                    ["i"],
                    M.call (|
                      "add",
                      [
                        M.get (| "i" |);
                        [Literal.number 1]
                      ]
                    |)
                  |) in
                tt,
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.get (| "mpos" |);
                      M.call (|
                        "convert_struct_S_storage_to_struct_S",
                        [
                          M.get (| "spos" |)
                        ]
                      |)
                    ]
                  |) in
                let _ :=
                  M.declare (|
                    ["mpos"],
                    M.call (|
                      "add",
                      [
                        M.get (| "mpos" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["spos"],
                    M.call (|
                      "add",
                      [
                        M.get (| "spos" |);
                        [Literal.number 1]
                      ]
                    |)
                  |) in
                tt
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_array_array_struct_S_storage_dyn_to_array_struct_S_dyn",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "copy_array_from_storage_to_memory_array_struct_S__dyn",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_1_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x01",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x01]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "assert_helper",
          ["condition"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "condition" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x01",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_struct_S_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_3_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_3_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_3_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "memory_array_index_access_struct_S_dyn",
          ["baseRef"; "index"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.call (|
                          "array_length_array_struct_S_dyn",
                          [
                            M.get (| "baseRef" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                M.call (|
                  "mul",
                  [
                    M.get (| "index" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "baseRef" |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_memoryt_uint256",
          ["ptr"],
          ["returnValue"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["value"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "mload",
                      [
                        M.get (| "ptr" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["returnValue"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_5_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_5_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_5_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_7_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_test3",
          [],
          ["var_"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                M.call (|
                  "zero_value_for_split_bool",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.call (|
                  "convert_rational_2_by_1_to_uint256",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_281_mpos"],
                M.call (|
                  "allocate_and_zero_memory_array_array_array_struct_S_dyn_dyn",
                  [
                    M.get (| "_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["var_temp_mpos"],
                M.get (| "expr_281_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_3_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_286_slot"],
                M.get (| "_3_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_2"; "_3"],
                M.call (|
                  "storage_array_index_access_struct_S_storage_dyn__dyn",
                  [
                    M.get (| "expr_286_slot" |);
                    M.get (| "expr_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_6_slot"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_288_slot"],
                M.get (| "_6_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_mpos"],
                M.get (| "var_temp_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_283_mpos"],
                M.get (| "_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "memory_array_index_access_struct_S_dyn_dyn",
                    [
                      M.get (| "expr_283_mpos" |);
                      M.call (|
                        "convert_rational_0_by_1_to_uint256",
                        [
                          M.get (| "expr_2" |)
                        ]
                      |)
                    ]
                  |);
                  M.call (|
                    "convert_array_array_struct_S_storage_dyn_to_array_struct_S_dyn",
                    [
                      M.get (| "expr_288_slot" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "pop",
                [
                  M.call (|
                    "mload",
                    [
                      M.call (|
                        "memory_array_index_access_struct_S_dyn_dyn",
                        [
                          M.get (| "expr_283_mpos" |);
                          M.call (|
                            "convert_rational_0_by_1_to_uint256",
                            [
                              M.get (| "expr_2" |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_9_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_294_slot"],
                M.get (| "_9_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_4"; "_5"],
                M.call (|
                  "storage_array_index_access_struct_S_storage_dyn__dyn",
                  [
                    M.get (| "expr_294_slot" |);
                    M.get (| "expr_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_12_slot"],
                M.get (| "_4" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_296_slot"],
                M.get (| "_12_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_13_mpos"],
                M.get (| "var_temp_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_291_mpos"],
                M.get (| "_13_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "memory_array_index_access_struct_S_dyn_dyn",
                    [
                      M.get (| "expr_291_mpos" |);
                      M.call (|
                        "convert_rational_1_by_1_to_uint256",
                        [
                          M.get (| "expr_4" |)
                        ]
                      |)
                    ]
                  |);
                  M.call (|
                    "convert_array_array_struct_S_storage_dyn_to_array_struct_S_dyn",
                    [
                      M.get (| "expr_296_slot" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "pop",
                [
                  M.call (|
                    "mload",
                    [
                      M.call (|
                        "memory_array_index_access_struct_S_dyn_dyn",
                        [
                          M.get (| "expr_291_mpos" |);
                          M.call (|
                            "convert_rational_1_by_1_to_uint256",
                            [
                              M.get (| "expr_4" |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_15_mpos"],
                M.get (| "var_temp_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_300_mpos"],
                M.get (| "_15_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                M.call (|
                  "array_length_array_array_struct_S_dyn_dyn",
                  [
                    M.get (| "expr_300_mpos" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_5" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_2_by_1_to_uint256",
                      [
                        M.get (| "expr_6" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_7" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_16_mpos"],
                M.get (| "var_temp_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_307_mpos"],
                M.get (| "_16_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_17_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn_dyn",
                      [
                        M.get (| "expr_307_mpos" |);
                        M.call (|
                          "convert_rational_0_by_1_to_uint256",
                          [
                            M.get (| "expr_8" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_309_mpos"],
                M.get (| "_17_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                M.call (|
                  "array_length_array_struct_S_dyn",
                  [
                    M.get (| "expr_309_mpos" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_3_by_1_to_uint256",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_18_mpos"],
                M.get (| "var_temp_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_316_mpos"],
                M.get (| "_18_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_19_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn_dyn",
                      [
                        M.get (| "expr_316_mpos" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_12" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_318_mpos"],
                M.get (| "_19_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                M.call (|
                  "array_length_array_struct_S_dyn",
                  [
                    M.get (| "expr_318_mpos" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                [Literal.number 0x04]
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_13" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_14" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_15" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_20_mpos"],
                M.get (| "var_temp_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_325_mpos"],
                M.get (| "_20_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_21_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn_dyn",
                      [
                        M.get (| "expr_325_mpos" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_16" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_327_mpos"],
                M.get (| "_21_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_22_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn",
                      [
                        M.get (| "expr_327_mpos" |);
                        M.call (|
                          "convert_rational_0_by_1_to_uint256",
                          [
                            M.get (| "expr_17" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_329_mpos"],
                M.get (| "_22_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_329_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.get (| "_6" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                M.get (| "_7" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                [Literal.number 0x04]
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_18" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_19" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_20" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_25_mpos"],
                M.get (| "var_temp_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_336_mpos"],
                M.get (| "_25_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_26_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn_dyn",
                      [
                        M.get (| "expr_336_mpos" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_21" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_338_mpos"],
                M.get (| "_26_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_27_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn",
                      [
                        M.get (| "expr_338_mpos" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_22" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_340_mpos"],
                M.get (| "_27_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_340_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.get (| "_8" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                M.get (| "_9" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                [Literal.number 0x05]
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_23" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_5_by_1_to_uint256",
                      [
                        M.get (| "expr_24" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_25" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_30_mpos"],
                M.get (| "var_temp_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_347_mpos"],
                M.get (| "_30_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_31_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn_dyn",
                      [
                        M.get (| "expr_347_mpos" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_26" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_349_mpos"],
                M.get (| "_31_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_32_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn",
                      [
                        M.get (| "expr_349_mpos" |);
                        M.call (|
                          "convert_rational_2_by_1_to_uint256",
                          [
                            M.get (| "expr_27" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_351_mpos"],
                M.get (| "_32_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_10"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_351_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_11"],
                M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.get (| "_10" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                M.get (| "_11" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                [Literal.number 0x06]
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_28" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint256",
                      [
                        M.get (| "expr_29" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_30" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_35_mpos"],
                M.get (| "var_temp_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_358_mpos"],
                M.get (| "_35_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_36_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn_dyn",
                      [
                        M.get (| "expr_358_mpos" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_31" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_360_mpos"],
                M.get (| "_36_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["_37_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn",
                      [
                        M.get (| "expr_360_mpos" |);
                        M.call (|
                          "convert_rational_3_by_1_to_uint256",
                          [
                            M.get (| "expr_32" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_mpos"],
                M.get (| "_37_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_12"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_13"],
                M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.get (| "_12" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_33"],
                M.get (| "_13" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_34"],
                [Literal.number 0x07]
              |) in
            let _ :=
              M.assign (|
                ["expr_35"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_33" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_7_by_1_to_uint256",
                      [
                        M.get (| "expr_34" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_35" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_36"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "expr_36" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_from_storage_to_memory_array_array_struct_S_storage_dyn__dyn",
          ["slot"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                M.call (|
                  "array_length_array_array_struct_S_storage_dyn__dyn",
                  [
                    M.get (| "slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_array_array_array_struct_S_dyn_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["mpos"],
                M.get (| "memPtr" |)
              |) in
            let _ :=
              M.declare (|
                ["mpos"],
                M.call (|
                  "add",
                  [
                    M.get (| "mpos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["spos"],
                M.call (|
                  "array_dataslot_array_array_struct_S_storage_dyn__dyn",
                  [
                    M.get (| "slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["i"],
                [Literal.number 0]
              |) in
            let _ :=
              M.for (|
                tt,
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                let _ :=
                  M.declare (|
                    ["i"],
                    M.call (|
                      "add",
                      [
                        M.get (| "i" |);
                        [Literal.number 1]
                      ]
                    |)
                  |) in
                tt,
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.get (| "mpos" |);
                      M.call (|
                        "convert_array_array_struct_S_storage_dyn_to_array_struct_S_dyn",
                        [
                          M.get (| "spos" |)
                        ]
                      |)
                    ]
                  |) in
                let _ :=
                  M.declare (|
                    ["mpos"],
                    M.call (|
                      "add",
                      [
                        M.get (| "mpos" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["spos"],
                    M.call (|
                      "add",
                      [
                        M.get (| "spos" |);
                        [Literal.number 1]
                      ]
                    |)
                  |) in
                tt
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_array_array_array_struct_S_storage_dyn__dyn_to_array_array_struct_S_dyn_dyn",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "copy_array_from_storage_to_memory_array_array_struct_S_storage_dyn__dyn",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_test2",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                M.call (|
                  "zero_value_for_split_bool",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.call (|
                  "convert_rational_2_by_1_to_uint256",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_186_mpos"],
                M.call (|
                  "allocate_and_zero_memory_array_array_array_struct_S_dyn_dyn",
                  [
                    M.get (| "_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["var_temp_179_mpos"],
                M.get (| "expr_186_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_42_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_189_slot"],
                M.get (| "_42_slot" |)
              |) in
            let _ :=
              M.declare (|
                ["var_temp_179_mpos"],
                M.call (|
                  "convert_array_array_array_struct_S_storage_dyn__dyn_to_array_array_struct_S_dyn_dyn",
                  [
                    M.get (| "expr_189_slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_44_mpos"],
                M.get (| "var_temp_179_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_193_mpos"],
                M.get (| "_44_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "array_length_array_array_struct_S_dyn_dyn",
                  [
                    M.get (| "expr_193_mpos" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_2_by_1_to_uint256",
                      [
                        M.get (| "expr_2" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_3" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_45_mpos"],
                M.get (| "var_temp_179_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_200_mpos"],
                M.get (| "_45_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_46_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn_dyn",
                      [
                        M.get (| "expr_200_mpos" |);
                        M.call (|
                          "convert_rational_0_by_1_to_uint256",
                          [
                            M.get (| "expr_4" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_202_mpos"],
                M.get (| "_46_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                M.call (|
                  "array_length_array_struct_S_dyn",
                  [
                    M.get (| "expr_202_mpos" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_5" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_3_by_1_to_uint256",
                      [
                        M.get (| "expr_6" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_7" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_47_mpos"],
                M.get (| "var_temp_179_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_209_mpos"],
                M.get (| "_47_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_48_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn_dyn",
                      [
                        M.get (| "expr_209_mpos" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_8" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_211_mpos"],
                M.get (| "_48_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                M.call (|
                  "array_length_array_struct_S_dyn",
                  [
                    M.get (| "expr_211_mpos" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                [Literal.number 0x04]
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_49_mpos"],
                M.get (| "var_temp_179_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_218_mpos"],
                M.get (| "_49_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_50_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn_dyn",
                      [
                        M.get (| "expr_218_mpos" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_12" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_220_mpos"],
                M.get (| "_50_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_51_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn",
                      [
                        M.get (| "expr_220_mpos" |);
                        M.call (|
                          "convert_rational_0_by_1_to_uint256",
                          [
                            M.get (| "expr_13" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_222_mpos"],
                M.get (| "_51_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_222_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.get (| "_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                M.get (| "_3" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                [Literal.number 0x04]
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_14" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_15" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_16" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_54_mpos"],
                M.get (| "var_temp_179_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_229_mpos"],
                M.get (| "_54_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_55_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn_dyn",
                      [
                        M.get (| "expr_229_mpos" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_17" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_231_mpos"],
                M.get (| "_55_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_56_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn",
                      [
                        M.get (| "expr_231_mpos" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_18" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_233_mpos"],
                M.get (| "_56_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_233_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.get (| "_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                M.get (| "_5" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                [Literal.number 0x05]
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_19" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_5_by_1_to_uint256",
                      [
                        M.get (| "expr_20" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_21" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_59_mpos"],
                M.get (| "var_temp_179_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_240_mpos"],
                M.get (| "_59_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_60_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn_dyn",
                      [
                        M.get (| "expr_240_mpos" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_22" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_242_mpos"],
                M.get (| "_60_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_61_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn",
                      [
                        M.get (| "expr_242_mpos" |);
                        M.call (|
                          "convert_rational_2_by_1_to_uint256",
                          [
                            M.get (| "expr_23" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_244_mpos"],
                M.get (| "_61_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_244_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.get (| "_6" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                M.get (| "_7" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                [Literal.number 0x06]
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_24" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint256",
                      [
                        M.get (| "expr_25" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_26" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_64_mpos"],
                M.get (| "var_temp_179_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_251_mpos"],
                M.get (| "_64_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_65_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn_dyn",
                      [
                        M.get (| "expr_251_mpos" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_27" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_253_mpos"],
                M.get (| "_65_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["_66_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn",
                      [
                        M.get (| "expr_253_mpos" |);
                        M.call (|
                          "convert_rational_3_by_1_to_uint256",
                          [
                            M.get (| "expr_28" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_255_mpos"],
                M.get (| "_66_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_255_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.get (| "_8" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                M.get (| "_9" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                [Literal.number 0x07]
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_29" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_7_by_1_to_uint256",
                      [
                        M.get (| "expr_30" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_31" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_32" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_array_array_array_struct_S_storage_dyn_storage_dyn_storage_to_array_array_struct_S_storage_dyn__dyn_ptr",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_array_struct_S_storage_dyn__dyn_ptr",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_array_struct_S_storage_dyn__dyn_ptr",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.get (| "ptr" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_struct_S_storage_dyn__dyn_ptr",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                M.call (|
                  "array_length_array_array_struct_S_storage_dyn__dyn_ptr",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                M.call (|
                  "array_dataslot_array_array_struct_S_storage_dyn__dyn_ptr",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_push_zero_array_array_struct_S_storage_dyn__dyn_ptr",
          ["array"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["oldLen"],
                M.call (|
                  "array_length_array_array_struct_S_storage_dyn__dyn_ptr",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "oldLen" |);
                        [Literal.number 18446744073709551616]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "array" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "oldLen" |);
                      [Literal.number 1]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["slot"; "offset"],
                M.call (|
                  "storage_array_index_access_struct_S_storage_dyn__dyn_ptr",
                  [
                    M.get (| "array" |);
                    M.get (| "oldLen" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x00",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x00]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_convert_length_to_size_array_struct_S_storage_dyn",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["size"],
                M.get (| "length" |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "div",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "length" |);
                        M.call (|
                          "sub",
                          [
                            [Literal.number 1];
                            [Literal.number 1]
                          ]
                        |)
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_dynamic",
          ["bits"; "value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    M.get (| "bits" |);
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_dynamic32",
          ["value"; "shiftBytes"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["shiftBits"],
                M.call (|
                  "mul",
                  [
                    M.get (| "shiftBytes" |);
                    [Literal.number 8]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["mask"],
                M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint256_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_uint256",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_uint256_to_uint256",
          ["slot"; "offset"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                M.call (|
                  "convert_uint256_to_uint256",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_dynamic32",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.get (| "offset" |);
                      M.call (|
                        "prepare_store_uint256",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_set_to_zero_uint256",
          ["slot"; "offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_uint256_to_uint256",
                [
                  M.get (| "slot" |);
                  M.get (| "offset" |);
                  M.get (| "zero" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_struct_storage_struct_S",
          ["slot"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "storage_set_to_zero_uint256",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "slot" |);
                      [Literal.number 0]
                    ]
                  |);
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_set_to_zero_struct_S",
          ["slot"; "offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "offset" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x00",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "clear_struct_storage_struct_S",
                [
                  M.get (| "slot" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_storage_range_struct_S",
          ["start"; "end"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.for (|
                tt,
                M.call (|
                  "lt",
                  [
                    M.get (| "start" |);
                    M.get (| "end" |)
                  ]
                |),
                let _ :=
                  M.declare (|
                    ["start"],
                    M.call (|
                      "add",
                      [
                        M.get (| "start" |);
                        [Literal.number 1]
                      ]
                    |)
                  |) in
                tt,
                let _ :=
                  M.call (|
                    "storage_set_to_zero_struct_S",
                    [
                      M.get (| "start" |);
                      [Literal.number 0]
                    ]
                  |) in
                tt
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_storage_array_end_array_struct_S__dyn",
          ["array"; "len"; "startIndex"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "startIndex" |);
                    M.get (| "len" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["oldSlotCount"],
                      M.call (|
                        "array_convert_length_to_size_array_struct_S_storage_dyn",
                        [
                          M.get (| "len" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["newSlotCount"],
                      M.call (|
                        "array_convert_length_to_size_array_struct_S_storage_dyn",
                        [
                          M.get (| "startIndex" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["arrayDataStart"],
                      M.call (|
                        "array_dataslot_array_struct_S_storage_dyn",
                        [
                          M.get (| "array" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteStart"],
                      M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "newSlotCount" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteEnd"],
                      M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "oldSlotCount" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.call (|
                      "clear_storage_range_struct_S",
                      [
                        M.get (| "deleteStart" |);
                        M.get (| "deleteEnd" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "resize_array_array_struct_S_storage_dyn",
          ["array"; "newLen"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "newLen" |);
                    [Literal.number 18446744073709551616]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["oldLen"],
                M.call (|
                  "array_length_array_struct_S_storage_dyn",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "array" |);
                  M.get (| "newLen" |)
                ]
              |) in
            let _ :=
              M.call (|
                "cleanup_storage_array_end_array_struct_S__dyn",
                [
                  M.get (| "array" |);
                  M.get (| "oldLen" |);
                  M.get (| "newLen" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_shift",
          ["value"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                M.call (|
                  "not",
                  [
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left",
                  [
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_uint256_to_uint256",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                M.call (|
                  "convert_uint256_to_uint256",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_shift",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.call (|
                        "prepare_store_uint256",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_struct_to_storage_from_struct_S__to_struct_S",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "slot" |);
                        M.get (| "value" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["memberSlot"],
                      M.call (|
                        "add",
                        [
                          M.get (| "slot" |);
                          [Literal.number 0]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["memberSrcPtr"],
                      M.call (|
                        "add",
                        [
                          M.get (| "value" |);
                          [Literal.number 0]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["memberValue"],
                      M.call (|
                        "read_from_storage_split_offset_uint256",
                        [
                          M.get (| "memberSrcPtr" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.call (|
                      "update_storage_value_offsett_uint256_to_uint256",
                      [
                        M.get (| "memberSlot" |);
                        M.get (| "memberValue" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_struct_S__to_struct_S",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "copy_struct_to_storage_from_struct_S__to_struct_S",
                [
                  M.get (| "slot" |);
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_to_storage_from_array_struct_S_storage_dyn_storage_to_array_struct_S__dyn",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "eq",
                  [
                    M.get (| "slot" |);
                    M.get (| "value" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.leave (||) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["length"],
                M.call (|
                  "array_length_array_struct_S_storage_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "resize_array_array_struct_S_storage_dyn",
                [
                  M.get (| "slot" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                M.call (|
                  "array_dataslot_array_struct_S_storage_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["elementSlot"],
                M.call (|
                  "array_dataslot_array_struct_S_storage_dyn",
                  [
                    M.get (| "slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["i"],
                [Literal.number 0]
              |) in
            let _ :=
              M.for (|
                tt,
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                let _ :=
                  M.declare (|
                    ["i"],
                    M.call (|
                      "add",
                      [
                        M.get (| "i" |);
                        [Literal.number 1]
                      ]
                    |)
                  |) in
                tt,
                let _ :=
                  M.assign (|
                    ["stackItem"],
                    M.get (| "srcPtr" |)
                  |) in
                let _ :=
                  M.call (|
                    "update_storage_value_offsett_struct_S__to_struct_S",
                    [
                      M.get (| "elementSlot" |);
                      M.get (| "stackItem" |)
                    ]
                  |) in
                let _ :=
                  M.declare (|
                    ["srcPtr"],
                    M.call (|
                      "add",
                      [
                        M.get (| "srcPtr" |);
                        [Literal.number 1]
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["elementSlot"],
                    M.call (|
                      "add",
                      [
                        M.get (| "elementSlot" |);
                        [Literal.number 1]
                      ]
                    |)
                  |) in
                tt
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_array_struct_S_storage_dyn_storage_to_array_struct_S__dyn",
          ["slot"; "offset"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.get (| "offset" |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x00",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "copy_array_to_storage_from_array_struct_S_storage_dyn_storage_to_array_struct_S__dyn",
                [
                  M.get (| "slot" |);
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_struct_S__dyn",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                M.call (|
                  "array_length_array_struct_S_storage_dyn",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                M.call (|
                  "array_dataslot_array_struct_S_storage_dyn",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_test1",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_t_bool"],
                M.call (|
                  "zero_value_for_split_bool",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_t_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["_70_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_86_slot"],
                M.get (| "_70_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_self_slot"],
                M.call (|
                  "convert_array_array_array_struct_S_storage_dyn_storage_dyn_storage_to_array_array_struct_S_storage_dyn__dyn_ptr",
                  [
                    M.get (| "expr_86_slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_1"; "_2"],
                M.call (|
                  "array_push_zero_array_array_struct_S_storage_dyn__dyn_ptr",
                  [
                    M.get (| "expr_self_slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_74_slot"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_94_slot"],
                M.get (| "_74_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_75_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_91_slot"],
                M.get (| "_75_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_3"; "_4"],
                M.call (|
                  "storage_array_index_access_struct_S_storage_dyn__dyn",
                  [
                    M.get (| "expr_91_slot" |);
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_array_struct_S_storage_dyn_storage_to_array_struct_S__dyn",
                [
                  M.get (| "_3" |);
                  M.get (| "_4" |);
                  M.get (| "expr_94_slot" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_79_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_98_slot"],
                M.get (| "_79_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "array_length_array_array_struct_S_storage_dyn__dyn",
                  [
                    M.get (| "expr_98_slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_2_by_1_to_uint256",
                      [
                        M.get (| "expr_2" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_3" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_105_slot"],
                M.get (| "_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_5"; "_6"],
                M.call (|
                  "storage_array_index_access_struct_S_storage_dyn__dyn",
                  [
                    M.get (| "expr_105_slot" |);
                    M.get (| "expr_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_83_slot"],
                M.get (| "_5" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_107_slot"],
                M.get (| "_83_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                M.call (|
                  "array_length_array_struct_S_storage_dyn",
                  [
                    M.get (| "expr_107_slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_5" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_3_by_1_to_uint256",
                      [
                        M.get (| "expr_6" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_7" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_84_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_114_slot"],
                M.get (| "_84_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_7"; "_8"],
                M.call (|
                  "storage_array_index_access_struct_S_storage_dyn__dyn",
                  [
                    M.get (| "expr_114_slot" |);
                    M.get (| "expr_8" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_87_slot"],
                M.get (| "_7" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_116_slot"],
                M.get (| "_87_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                M.call (|
                  "array_length_array_struct_S_storage_dyn",
                  [
                    M.get (| "expr_116_slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                [Literal.number 0x04]
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_88_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_123_slot"],
                M.get (| "_88_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_9"; "_10"],
                M.call (|
                  "storage_array_index_access_struct_S_storage_dyn__dyn",
                  [
                    M.get (| "expr_123_slot" |);
                    M.get (| "expr_12" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_91_slot"],
                M.get (| "_9" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_125_slot"],
                M.get (| "_91_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_11"; "_12"],
                M.call (|
                  "storage_array_index_access_struct_S__dyn",
                  [
                    M.get (| "expr_125_slot" |);
                    M.get (| "expr_13" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_94_slot"],
                M.get (| "_11" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_127_slot"],
                M.get (| "_94_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_13"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_127_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_14"],
                M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    M.get (| "_13" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                M.get (| "_14" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                [Literal.number 0x04]
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_14" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_15" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_16" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_97_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_134_slot"],
                M.get (| "_97_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_15"; "_16"],
                M.call (|
                  "storage_array_index_access_struct_S_storage_dyn__dyn",
                  [
                    M.get (| "expr_134_slot" |);
                    M.get (| "expr_17" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_100_slot"],
                M.get (| "_15" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_136_slot"],
                M.get (| "_100_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_17"; "_18"],
                M.call (|
                  "storage_array_index_access_struct_S__dyn",
                  [
                    M.get (| "expr_136_slot" |);
                    M.get (| "expr_18" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_103_slot"],
                M.get (| "_17" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_138_slot"],
                M.get (| "_103_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_19"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_138_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_20"],
                M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    M.get (| "_19" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                M.get (| "_20" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                [Literal.number 0x05]
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_19" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_5_by_1_to_uint256",
                      [
                        M.get (| "expr_20" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_21" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_106_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_145_slot"],
                M.get (| "_106_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_21"; "_22"],
                M.call (|
                  "storage_array_index_access_struct_S_storage_dyn__dyn",
                  [
                    M.get (| "expr_145_slot" |);
                    M.get (| "expr_22" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_109_slot"],
                M.get (| "_21" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_147_slot"],
                M.get (| "_109_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_23"; "_24"],
                M.call (|
                  "storage_array_index_access_struct_S__dyn",
                  [
                    M.get (| "expr_147_slot" |);
                    M.get (| "expr_23" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_112_slot"],
                M.get (| "_23" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_149_slot"],
                M.get (| "_112_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_25"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_149_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_26"],
                M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    M.get (| "_25" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                M.get (| "_26" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                [Literal.number 0x06]
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_24" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint256",
                      [
                        M.get (| "expr_25" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_26" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_115_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_156_slot"],
                M.get (| "_115_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_27"; "_28"],
                M.call (|
                  "storage_array_index_access_struct_S_storage_dyn__dyn",
                  [
                    M.get (| "expr_156_slot" |);
                    M.get (| "expr_27" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_118_slot"],
                M.get (| "_27" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_158_slot"],
                M.get (| "_118_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["_29"; "_30"],
                M.call (|
                  "storage_array_index_access_struct_S__dyn",
                  [
                    M.get (| "expr_158_slot" |);
                    M.get (| "expr_28" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_121_slot"],
                M.get (| "_29" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_160_slot"],
                M.get (| "_121_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_31"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_160_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_32"],
                M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    M.get (| "_31" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                M.get (| "_32" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                [Literal.number 0x07]
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_29" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_7_by_1_to_uint256",
                      [
                        M.get (| "expr_30" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_31" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_32" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_test4",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                M.call (|
                  "zero_value_for_split_bool",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.call (|
                  "convert_rational_2_by_1_to_uint256",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_388_mpos"],
                M.call (|
                  "allocate_and_zero_memory_array_array_array_struct_S_dyn_dyn",
                  [
                    M.get (| "_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["var_temp_381_mpos"],
                M.get (| "expr_388_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_126_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_393_slot"],
                M.get (| "_126_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_2"; "_3"],
                M.call (|
                  "storage_array_index_access_struct_S_storage_dyn__dyn",
                  [
                    M.get (| "expr_393_slot" |);
                    M.get (| "expr_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_129_slot"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_395_slot"],
                M.get (| "_129_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_130_mpos"],
                M.get (| "var_temp_381_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_390_mpos"],
                M.get (| "_130_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "memory_array_index_access_struct_S_dyn_dyn",
                    [
                      M.get (| "expr_390_mpos" |);
                      M.call (|
                        "convert_rational_0_by_1_to_uint256",
                        [
                          M.get (| "expr_2" |)
                        ]
                      |)
                    ]
                  |);
                  M.call (|
                    "convert_array_array_struct_S_storage_dyn_to_array_struct_S_dyn",
                    [
                      M.get (| "expr_395_slot" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "pop",
                [
                  M.call (|
                    "mload",
                    [
                      M.call (|
                        "memory_array_index_access_struct_S_dyn_dyn",
                        [
                          M.get (| "expr_390_mpos" |);
                          M.call (|
                            "convert_rational_0_by_1_to_uint256",
                            [
                              M.get (| "expr_2" |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_132_slot"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_slot"],
                M.get (| "_132_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_133_mpos"],
                M.get (| "var_temp_381_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_398_mpos"],
                M.get (| "_133_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "memory_array_index_access_struct_S_dyn_dyn",
                    [
                      M.get (| "expr_398_mpos" |);
                      M.call (|
                        "convert_rational_1_by_1_to_uint256",
                        [
                          M.get (| "expr_3" |)
                        ]
                      |)
                    ]
                  |);
                  M.call (|
                    "convert_array_array_struct_S_storage_dyn_to_array_struct_S_dyn",
                    [
                      M.get (| "expr_slot" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "pop",
                [
                  M.call (|
                    "mload",
                    [
                      M.call (|
                        "memory_array_index_access_struct_S_dyn_dyn",
                        [
                          M.get (| "expr_398_mpos" |);
                          M.call (|
                            "convert_rational_1_by_1_to_uint256",
                            [
                              M.get (| "expr_3" |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_135_mpos"],
                M.get (| "var_temp_381_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_405_mpos"],
                M.get (| "_135_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                M.call (|
                  "array_length_array_array_struct_S_dyn_dyn",
                  [
                    M.get (| "expr_405_mpos" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_4" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_2_by_1_to_uint256",
                      [
                        M.get (| "expr_5" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_6" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_136_mpos"],
                M.get (| "var_temp_381_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_412_mpos"],
                M.get (| "_136_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_137_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn_dyn",
                      [
                        M.get (| "expr_412_mpos" |);
                        M.call (|
                          "convert_rational_0_by_1_to_uint256",
                          [
                            M.get (| "expr_7" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_414_mpos"],
                M.get (| "_137_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                M.call (|
                  "array_length_array_struct_S_dyn",
                  [
                    M.get (| "expr_414_mpos" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_8" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_3_by_1_to_uint256",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_10" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_138_mpos"],
                M.get (| "var_temp_381_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_421_mpos"],
                M.get (| "_138_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_139_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn_dyn",
                      [
                        M.get (| "expr_421_mpos" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_11" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_423_mpos"],
                M.get (| "_139_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                M.call (|
                  "array_length_array_struct_S_dyn",
                  [
                    M.get (| "expr_423_mpos" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                [Literal.number 0x04]
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_12" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_13" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_14" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_140_mpos"],
                M.get (| "var_temp_381_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_430_mpos"],
                M.get (| "_140_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_141_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn_dyn",
                      [
                        M.get (| "expr_430_mpos" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_15" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_432_mpos"],
                M.get (| "_141_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_142_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn",
                      [
                        M.get (| "expr_432_mpos" |);
                        M.call (|
                          "convert_rational_0_by_1_to_uint256",
                          [
                            M.get (| "expr_16" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_434_mpos"],
                M.get (| "_142_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_434_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.get (| "_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                M.get (| "_5" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                [Literal.number 0x04]
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_17" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_18" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_19" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_145_mpos"],
                M.get (| "var_temp_381_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_441_mpos"],
                M.get (| "_145_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_146_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn_dyn",
                      [
                        M.get (| "expr_441_mpos" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_20" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_443_mpos"],
                M.get (| "_146_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_147_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn",
                      [
                        M.get (| "expr_443_mpos" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_21" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_445_mpos"],
                M.get (| "_147_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_445_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.get (| "_6" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                M.get (| "_7" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                [Literal.number 0x05]
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_22" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_5_by_1_to_uint256",
                      [
                        M.get (| "expr_23" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_24" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_150_mpos"],
                M.get (| "var_temp_381_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_452_mpos"],
                M.get (| "_150_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_151_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn_dyn",
                      [
                        M.get (| "expr_452_mpos" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_25" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_454_mpos"],
                M.get (| "_151_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_152_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn",
                      [
                        M.get (| "expr_454_mpos" |);
                        M.call (|
                          "convert_rational_2_by_1_to_uint256",
                          [
                            M.get (| "expr_26" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_456_mpos"],
                M.get (| "_152_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_456_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.get (| "_8" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                M.get (| "_9" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                [Literal.number 0x06]
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_27" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint256",
                      [
                        M.get (| "expr_28" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_29" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_155_mpos"],
                M.get (| "var_temp_381_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_463_mpos"],
                M.get (| "_155_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_156_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn_dyn",
                      [
                        M.get (| "expr_463_mpos" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_30" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_465_mpos"],
                M.get (| "_156_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["_157_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S_dyn",
                      [
                        M.get (| "expr_465_mpos" |);
                        M.call (|
                          "convert_rational_3_by_1_to_uint256",
                          [
                            M.get (| "expr_31" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_467_mpos"],
                M.get (| "_157_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_10"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_467_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_11"],
                M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.get (| "_10" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                M.get (| "_11" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_33"],
                [Literal.number 0x07]
              |) in
            let _ :=
              M.assign (|
                ["expr_34"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_32" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_7_by_1_to_uint256",
                      [
                        M.get (| "expr_33" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_34" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_35"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_35" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a2646970667358221220a7c85e792d99201099279a9688490e95d3867d9c96a0c982eb76b70a63803cf564736f6c634300081b0033".
  End Test_477_deployed.
End Test_477.
