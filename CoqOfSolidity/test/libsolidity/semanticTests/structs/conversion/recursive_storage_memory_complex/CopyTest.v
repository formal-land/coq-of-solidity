(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module CopyTest_278.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            []
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                []
              |) in
            tt
          ))
        |) in
      let _ :=
        M.call (|
          "constructor_CopyTest",
          []
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          Some (M.call (|
            "allocate_unbounded",
            []
          |))
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "436f7079546573745f3237385f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "436f7079546573745f3237385f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "436f7079546573745f3237385f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_t_rational_by_1",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_uint256",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "identity",
        ["value"],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_66_by_1_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_t_rational_by_1",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_left",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shl",
                [
                  [Literal.number 0];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_byte_slice_shift",
        ["value"; "toInsert"],
        ["result"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["mask"],
              Some (M.call (|
                "not",
                [
                  [Literal.number 0]
                ]
              |))
            |) in
          let _ :=
            M.declare (|
              ["toInsert"],
              M.call (|
                "shift_left",
                [
                  M.get (| "toInsert" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "and",
                [
                  M.get (| "value" |);
                  M.call (|
                    "not",
                    [
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["result"],
              M.call (|
                "or",
                [
                  M.get (| "value" |);
                  M.call (|
                    "and",
                    [
                      M.get (| "toInsert" |);
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_uint256_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_uint256",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "prepare_store_uint256",
        ["value"],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_storage_value_offsett_uint256_to_uint256",
        ["slot"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["convertedValue"],
              Some (M.call (|
                "convert_uint256_to_uint256",
                [
                  M.get (| "value" |)
                ]
              |))
            |) in
          let _ :=
            M.call (|
              "sstore",
              [
                M.get (| "slot" |);
                M.call (|
                  "update_byte_slice_shift",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |);
                    M.call (|
                      "prepare_store_uint256",
                      [
                        M.get (| "convertedValue" |)
                      ]
                    |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_0_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_0_by_1_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_0_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "increment_wrapping_uint256",
        ["value"],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 1]
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_2_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_2_by_1_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_2_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_array_array_struct_Tree_storage_dyn_storage_to_array_struct_Tree__dyn_ptr",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "panic_error_0x41",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    [Literal.number 0x4e487b71]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 4];
                [Literal.number 0x41]
              ]
            |) in
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0x24]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_dataslot_array_struct_Tree_storage_dyn_ptr",
        ["ptr"],
        ["data"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["data"],
              M.get (| "ptr" |)
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.get (| "ptr" |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["data"],
              M.call (|
                "keccak256",
                [
                  [Literal.number 0];
                  [Literal.number 0x20]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "panic_error_0x32",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    [Literal.number 0x4e487b71]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 4];
                [Literal.number 0x32]
              ]
            |) in
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0x24]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_length_array_struct_Tree_storage_dyn_ptr",
        ["value"],
        ["length"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["length"],
              M.call (|
                "sload",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "storage_array_index_access_struct_Tree__dyn_ptr",
        ["array"; "index"],
        ["slot";
    "offset"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["arrayLength"],
              Some (M.call (|
                "array_length_array_struct_Tree_storage_dyn_ptr",
                [
                  M.get (| "array" |)
                ]
              |))
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "lt",
                    [
                      M.get (| "index" |);
                      M.get (| "arrayLength" |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x32",
                    []
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["dataArea"],
              Some (M.call (|
                "array_dataslot_array_struct_Tree_storage_dyn_ptr",
                [
                  M.get (| "array" |)
                ]
              |))
            |) in
          let _ :=
            M.declare (|
              ["slot"],
              M.call (|
                "add",
                [
                  M.get (| "dataArea" |);
                  M.call (|
                    "mul",
                    [
                      M.get (| "index" |);
                      [Literal.number 2]
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["offset"],
              [Literal.number 0]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "panic_error_0x00",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    [Literal.number 0x4e487b71]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 4];
                [Literal.number 0x00]
              ]
            |) in
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0x24]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 0];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_from_storage_uint256",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offsett_uint256",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_uint256",
                [
                  M.call (|
                    "shift_right_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "read_from_storage_split_offset_uint256",
        ["slot"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "extract_from_storage_value_offsett_uint256",
                [
                  M.call (|
                    "sload",
                    [
                      M.get (| "slot" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_dataslot_array_struct_Tree_storage_dyn",
        ["ptr"],
        ["data"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["data"],
              M.get (| "ptr" |)
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.get (| "ptr" |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["data"],
              M.call (|
                "keccak256",
                [
                  [Literal.number 0];
                  [Literal.number 0x20]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_length_array_struct_Tree_storage_dyn",
        ["value"],
        ["length"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["length"],
              M.call (|
                "sload",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "panic_error_0x11",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    [Literal.number 0x4e487b71]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 4];
                [Literal.number 0x11]
              ]
            |) in
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0x24]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "checked_mul_uint256",
        ["x"; "y"],
        ["product"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["x"],
              M.call (|
                "cleanup_uint256",
                [
                  M.get (| "x" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["y"],
              M.call (|
                "cleanup_uint256",
                [
                  M.get (| "y" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["product_raw"],
              Some (M.call (|
                "mul",
                [
                  M.get (| "x" |);
                  M.get (| "y" |)
                ]
              |))
            |) in
          let _ :=
            M.declare (|
              ["product"],
              M.call (|
                "cleanup_uint256",
                [
                  M.get (| "product_raw" |)
                ]
              |)
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "or",
                    [
                      M.call (|
                        "iszero",
                        [
                          M.get (| "x" |)
                        ]
                      |);
                      M.call (|
                        "eq",
                        [
                          M.get (| "y" |);
                          M.call (|
                            "div",
                            [
                              M.get (| "product" |);
                              M.get (| "x" |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x11",
                    []
                  |) in
                tt
              ))
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_convert_length_to_size_array_struct_Tree_storage_dyn",
        ["length"],
        ["size"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["size"],
              M.get (| "length" |)
            |) in
          let _ :=
            M.declare (|
              ["size"],
              M.call (|
                "checked_mul_uint256",
                [
                  [Literal.number 2];
                  M.get (| "length" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_left_dynamic",
        ["bits"; "value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shl",
                [
                  M.get (| "bits" |);
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_byte_slice_dynamic32",
        ["value"; "shiftBytes"; "toInsert"],
        ["result"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["shiftBits"],
              Some (M.call (|
                "mul",
                [
                  M.get (| "shiftBytes" |);
                  [Literal.number 8]
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["mask"],
              Some (M.call (|
                "shift_left_dynamic",
                [
                  M.get (| "shiftBits" |);
                  M.call (|
                    "not",
                    [
                      [Literal.number 0]
                    ]
                  |)
                ]
              |))
            |) in
          let _ :=
            M.declare (|
              ["toInsert"],
              M.call (|
                "shift_left_dynamic",
                [
                  M.get (| "shiftBits" |);
                  M.get (| "toInsert" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "and",
                [
                  M.get (| "value" |);
                  M.call (|
                    "not",
                    [
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["result"],
              M.call (|
                "or",
                [
                  M.get (| "value" |);
                  M.call (|
                    "and",
                    [
                      M.get (| "toInsert" |);
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_storage_value_uint256_to_uint256",
        ["slot"; "offset"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["convertedValue"],
              Some (M.call (|
                "convert_uint256_to_uint256",
                [
                  M.get (| "value" |)
                ]
              |))
            |) in
          let _ :=
            M.call (|
              "sstore",
              [
                M.get (| "slot" |);
                M.call (|
                  "update_byte_slice_dynamic32",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |);
                    M.get (| "offset" |);
                    M.call (|
                      "prepare_store_uint256",
                      [
                        M.get (| "convertedValue" |)
                      ]
                    |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "zero_value_for_split_uint256",
        [],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              [Literal.number 0]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "storage_set_to_zero_uint256",
        ["slot"; "offset"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["zero"],
              Some (M.call (|
                "zero_value_for_split_uint256",
                []
              |))
            |) in
          let _ :=
            M.call (|
              "update_storage_value_uint256_to_uint256",
              [
                M.get (| "slot" |);
                M.get (| "offset" |);
                M.get (| "zero" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "clear_storage_array_array_struct_Tree__dyn",
        ["slot"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "resize_array_array_struct_Tree_storage_dyn",
              [
                M.get (| "slot" |);
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "storage_set_to_zero_array_struct_Tree__dyn",
        ["slot"; "offset"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "eq",
                    [
                      M.get (| "offset" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x00",
                    []
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.call (|
              "clear_storage_array_array_struct_Tree__dyn",
              [
                M.get (| "slot" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "clear_struct_storage_struct_Tree",
        ["slot"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "storage_set_to_zero_uint256",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "slot" |);
                    [Literal.number 0]
                  ]
                |);
                [Literal.number 0]
              ]
            |) in
          let _ :=
            M.call (|
              "storage_set_to_zero_array_struct_Tree__dyn",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "slot" |);
                    [Literal.number 1]
                  ]
                |);
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "storage_set_to_zero_struct_Tree",
        ["slot"; "offset"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "eq",
                    [
                      M.get (| "offset" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x00",
                    []
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.call (|
              "clear_struct_storage_struct_Tree",
              [
                M.get (| "slot" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "clear_storage_range_struct_Tree",
        ["start"; "end"],
        [],
        ltac:(M.monadic (
          let _ :=
            let _ :=
              tt in
            M.for_ (|
              M.call (|
                "lt",
                [
                  M.get (| "start" |);
                  M.get (| "end" |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["start"],
                    M.call (|
                      "add",
                      [
                        M.get (| "start" |);
                        [Literal.number 2]
                      ]
                    |)
                  |) in
                tt
              )),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "storage_set_to_zero_struct_Tree",
                    [
                      M.get (| "start" |);
                      [Literal.number 0]
                    ]
                  |) in
                tt
              ))
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_storage_array_end_array_struct_Tree__dyn",
        ["array"; "len"; "startIndex"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "lt",
                [
                  M.get (| "startIndex" |);
                  M.get (| "len" |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["oldSlotCount"],
                    Some (M.call (|
                      "array_convert_length_to_size_array_struct_Tree_storage_dyn",
                      [
                        M.get (| "len" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["newSlotCount"],
                    Some (M.call (|
                      "array_convert_length_to_size_array_struct_Tree_storage_dyn",
                      [
                        M.get (| "startIndex" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["arrayDataStart"],
                    Some (M.call (|
                      "array_dataslot_array_struct_Tree_storage_dyn",
                      [
                        M.get (| "array" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["deleteStart"],
                    Some (M.call (|
                      "add",
                      [
                        M.get (| "arrayDataStart" |);
                        M.get (| "newSlotCount" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["deleteEnd"],
                    Some (M.call (|
                      "add",
                      [
                        M.get (| "arrayDataStart" |);
                        M.get (| "oldSlotCount" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.call (|
                    "clear_storage_range_struct_Tree",
                    [
                      M.get (| "deleteStart" |);
                      M.get (| "deleteEnd" |)
                    ]
                  |) in
                tt
              ))
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "resize_array_array_struct_Tree_storage_dyn",
        ["array"; "newLen"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "gt",
                [
                  M.get (| "newLen" |);
                  [Literal.number 18446744073709551616]
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x41",
                    []
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["oldLen"],
              Some (M.call (|
                "array_length_array_struct_Tree_storage_dyn",
                [
                  M.get (| "array" |)
                ]
              |))
            |) in
          let _ :=
            M.call (|
              "sstore",
              [
                M.get (| "array" |);
                M.get (| "newLen" |)
              ]
            |) in
          let _ :=
            M.call (|
              "cleanup_storage_array_end_array_struct_Tree__dyn",
              [
                M.get (| "array" |);
                M.get (| "oldLen" |);
                M.get (| "newLen" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_storage_value_offsett_struct_Tree__to_struct_Tree",
        ["slot"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "copy_struct_to_storage_from_struct_Tree__to_struct_Tree",
              [
                M.get (| "slot" |);
                M.get (| "value" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "copy_array_to_storage_from_array_struct_Tree_storage_dyn_storage_to_array_struct_Tree__dyn",
        ["slot"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "eq",
                [
                  M.get (| "slot" |);
                  M.get (| "value" |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.leave (||) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["length"],
              Some (M.call (|
                "array_length_array_struct_Tree_storage_dyn",
                [
                  M.get (| "value" |)
                ]
              |))
            |) in
          let _ :=
            M.call (|
              "resize_array_array_struct_Tree_storage_dyn",
              [
                M.get (| "slot" |);
                M.get (| "length" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["srcPtr"],
              Some (M.call (|
                "array_dataslot_array_struct_Tree_storage_dyn",
                [
                  M.get (| "value" |)
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["elementSlot"],
              Some (M.call (|
                "array_dataslot_array_struct_Tree_storage_dyn",
                [
                  M.get (| "slot" |)
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["i"],
              Some ([Literal.number 0])
            |) in
          let _ :=
            let _ :=
              tt in
            M.for_ (|
              M.call (|
                "lt",
                [
                  M.get (| "i" |);
                  M.get (| "length" |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["i"],
                    M.call (|
                      "add",
                      [
                        M.get (| "i" |);
                        [Literal.number 1]
                      ]
                    |)
                  |) in
                tt
              )),
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["stackItem"],
                    Some (M.get (| "srcPtr" |))
                  |) in
                let _ :=
                  M.call (|
                    "update_storage_value_offsett_struct_Tree__to_struct_Tree",
                    [
                      M.get (| "elementSlot" |);
                      M.get (| "stackItem" |)
                    ]
                  |) in
                let _ :=
                  M.declare (|
                    ["srcPtr"],
                    M.call (|
                      "add",
                      [
                        M.get (| "srcPtr" |);
                        [Literal.number 2]
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["elementSlot"],
                    M.call (|
                      "add",
                      [
                        M.get (| "elementSlot" |);
                        [Literal.number 2]
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_storage_value_offsett_array_struct_Tree_storage_dyn_storage_to_array_struct_Tree__dyn",
        ["slot"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "copy_array_to_storage_from_array_struct_Tree_storage_dyn_storage_to_array_struct_Tree__dyn",
              [
                M.get (| "slot" |);
                M.get (| "value" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "copy_struct_to_storage_from_struct_Tree__to_struct_Tree",
        ["slot"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "eq",
                    [
                      M.get (| "slot" |);
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["memberSlot"],
                    Some (M.call (|
                      "add",
                      [
                        M.get (| "slot" |);
                        [Literal.number 0]
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["memberSrcPtr"],
                    Some (M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 0]
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["memberValue"],
                    Some (M.call (|
                      "read_from_storage_split_offset_uint256",
                      [
                        M.get (| "memberSrcPtr" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.call (|
                    "update_storage_value_offsett_uint256_to_uint256",
                    [
                      M.get (| "memberSlot" |);
                      M.get (| "memberValue" |)
                    ]
                  |) in
                let _ :=
                  M.assign (|
                    ["memberSlot_1"],
                    Some (M.call (|
                      "add",
                      [
                        M.get (| "slot" |);
                        [Literal.number 1]
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["memberSrcPtr_1"],
                    Some (M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 1]
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["memberValue_1"],
                    Some (M.get (| "memberSrcPtr_1" |))
                  |) in
                let _ :=
                  M.call (|
                    "update_storage_value_offsett_array_struct_Tree_storage_dyn_storage_to_array_struct_Tree__dyn",
                    [
                      M.get (| "memberSlot_1" |);
                      M.get (| "memberValue_1" |)
                    ]
                  |) in
                tt
              ))
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_storage_value_struct_Tree__to_struct_Tree",
        ["slot"; "offset"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.get (| "offset" |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x00",
                    []
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.call (|
              "copy_struct_to_storage_from_struct_Tree__to_struct_Tree",
              [
                M.get (| "slot" |);
                M.get (| "value" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_push_from_struct_Tree_storage_to_array_struct_Tree__dyn_ptr",
        ["array"; "value0"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["oldLen"],
              Some (M.call (|
                "sload",
                [
                  M.get (| "array" |)
                ]
              |))
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "lt",
                    [
                      M.get (| "oldLen" |);
                      [Literal.number 18446744073709551616]
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x41",
                    []
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.call (|
              "sstore",
              [
                M.get (| "array" |);
                M.call (|
                  "add",
                  [
                    M.get (| "oldLen" |);
                    [Literal.number 1]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["slot"; "offset"],
              Some (M.call (|
                "storage_array_index_access_struct_Tree__dyn_ptr",
                [
                  M.get (| "array" |);
                  M.get (| "oldLen" |)
                ]
              |))
            |) in
          let _ :=
            M.call (|
              "update_storage_value_struct_Tree__to_struct_Tree",
              [
                M.get (| "slot" |);
                M.get (| "offset" |);
                M.get (| "value0" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_t_rational_by_to_t_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "storage_array_index_access_struct_Tree__dyn",
        ["array"; "index"],
        ["slot";
    "offset"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["arrayLength"],
              Some (M.call (|
                "array_length_array_struct_Tree_storage_dyn",
                [
                  M.get (| "array" |)
                ]
              |))
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "lt",
                    [
                      M.get (| "index" |);
                      M.get (| "arrayLength" |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x32",
                    []
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["dataArea"],
              Some (M.call (|
                "array_dataslot_array_struct_Tree_storage_dyn",
                [
                  M.get (| "array" |)
                ]
              |))
            |) in
          let _ :=
            M.declare (|
              ["slot"],
              M.call (|
                "add",
                [
                  M.get (| "dataArea" |);
                  M.call (|
                    "mul",
                    [
                      M.get (| "index" |);
                      [Literal.number 2]
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["offset"],
              [Literal.number 0]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_by_1",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_16897_by_1_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_by_1",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_3_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_3_by_1_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_3_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_4325376_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_by_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_4325376_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "checked_add_uint256",
        ["x"; "y"],
        ["sum"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["x"],
              M.call (|
                "cleanup_uint256",
                [
                  M.get (| "x" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["y"],
              M.call (|
                "cleanup_uint256",
                [
                  M.get (| "y" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["sum"],
              M.call (|
                "add",
                [
                  M.get (| "x" |);
                  M.get (| "y" |)
                ]
              |)
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "gt",
                [
                  M.get (| "x" |);
                  M.get (| "sum" |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x11",
                    []
                  |) in
                tt
              ))
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_t_rational_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_4_by_1_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_t_rational_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_4325632_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_4325632_by_1_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_4325632_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "constructor_CopyTest",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["expr"],
              Some ([Literal.number 0x42])
            |) in
          let _ :=
            M.assign (|
              ["_1"],
              Some (M.call (|
                "convert_rational_66_by_1_to_uint256",
                [
                  M.get (| "expr" |)
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["_3_slot"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.assign (|
              ["expr_16_slot"],
              Some (M.get (| "_3_slot" |))
            |) in
          let _ :=
            M.assign (|
              ["_2"],
              Some (M.call (|
                "add",
                [
                  M.get (| "expr_16_slot" |);
                  [Literal.number 0]
                ]
              |))
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_uint256_to_uint256",
              [
                M.get (| "_2" |);
                M.get (| "_1" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_1"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.assign (|
              ["var_i"],
              Some (M.call (|
                "convert_rational_0_by_1_to_uint256",
                [
                  M.get (| "expr_1" |)
                ]
              |))
            |) in
          let _ :=
            let _ :=
              tt in
            M.for_ (|
              [Literal.number 1],
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["_3"],
                    Some (M.get (| "var_i" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_4"],
                    Some (M.call (|
                      "increment_wrapping_uint256",
                      [
                        M.get (| "_3" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.declare (|
                    ["var_i"],
                    M.get (| "_4" |)
                  |) in
                tt
              )),
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["_5"],
                    Some (M.get (| "var_i" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_2"],
                    Some (M.get (| "_5" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_3"],
                    Some ([Literal.number 0x02])
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_4"],
                    Some (M.call (|
                      "lt",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_2" |)
                          ]
                        |);
                        M.call (|
                          "convert_rational_2_by_1_to_uint256",
                          [
                            M.get (| "expr_3" |)
                          ]
                        |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.get (| "expr_4" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.break (||) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["_8_slot"],
                    Some ([Literal.number 0x00])
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_32_slot"],
                    Some (M.get (| "_8_slot" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_6"],
                    Some (M.call (|
                      "add",
                      [
                        M.get (| "expr_32_slot" |);
                        [Literal.number 1]
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_10_slot"],
                    Some (M.get (| "_6" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_35_slot"],
                    Some (M.get (| "_10_slot" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_self_slot"],
                    Some (M.call (|
                      "convert_array_array_struct_Tree_storage_dyn_storage_to_array_struct_Tree__dyn_ptr",
                      [
                        M.get (| "expr_35_slot" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_11_slot"],
                    Some ([Literal.number 0x02])
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_37_slot"],
                    Some (M.get (| "_11_slot" |))
                  |) in
                let _ :=
                  M.call (|
                    "array_push_from_struct_Tree_storage_to_array_struct_Tree__dyn_ptr",
                    [
                      M.get (| "expr_self_slot" |);
                      M.get (| "expr_37_slot" |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["expr_5"],
              Some ([Literal.number 0x4200])
            |) in
          let _ :=
            M.assign (|
              ["_7"],
              Some (M.call (|
                "convert_t_rational_by_to_t_uint256",
                [
                  M.get (| "expr_5" |)
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["_13_slot"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.assign (|
              ["expr_41_slot"],
              Some (M.get (| "_13_slot" |))
            |) in
          let _ :=
            M.assign (|
              ["_8"],
              Some (M.call (|
                "add",
                [
                  M.get (| "expr_41_slot" |);
                  [Literal.number 1]
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["_15_slot"],
              Some (M.get (| "_8" |))
            |) in
          let _ :=
            M.assign (|
              ["expr_44_slot"],
              Some (M.get (| "_15_slot" |))
            |) in
          let _ :=
            M.assign (|
              ["expr_6"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.assign (|
              ["_9"; "_10"],
              Some (M.call (|
                "storage_array_index_access_struct_Tree__dyn",
                [
                  M.get (| "expr_44_slot" |);
                  M.get (| "expr_6" |)
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["_18_slot"],
              Some (M.get (| "_9" |))
            |) in
          let _ :=
            M.assign (|
              ["expr_45_slot"],
              Some (M.get (| "_18_slot" |))
            |) in
          let _ :=
            M.assign (|
              ["_11"],
              Some (M.call (|
                "add",
                [
                  M.get (| "expr_45_slot" |);
                  [Literal.number 0]
                ]
              |))
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_uint256_to_uint256",
              [
                M.get (| "_11" |);
                M.get (| "_7" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_7"],
              Some ([Literal.number 0x4201])
            |) in
          let _ :=
            M.assign (|
              ["_12"],
              Some (M.call (|
                "convert_rational_16897_by_1_to_uint256",
                [
                  M.get (| "expr_7" |)
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["_21_slot"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.assign (|
              ["expr_50_slot"],
              Some (M.get (| "_21_slot" |))
            |) in
          let _ :=
            M.assign (|
              ["_13"],
              Some (M.call (|
                "add",
                [
                  M.get (| "expr_50_slot" |);
                  [Literal.number 1]
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["_23_slot"],
              Some (M.get (| "_13" |))
            |) in
          let _ :=
            M.assign (|
              ["expr_53_slot"],
              Some (M.get (| "_23_slot" |))
            |) in
          let _ :=
            M.assign (|
              ["expr_8"],
              Some ([Literal.number 0x01])
            |) in
          let _ :=
            M.assign (|
              ["_14"; "_15"],
              Some (M.call (|
                "storage_array_index_access_struct_Tree__dyn",
                [
                  M.get (| "expr_53_slot" |);
                  M.get (| "expr_8" |)
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["_26_slot"],
              Some (M.get (| "_14" |))
            |) in
          let _ :=
            M.assign (|
              ["expr_54_slot"],
              Some (M.get (| "_26_slot" |))
            |) in
          let _ :=
            M.assign (|
              ["_16"],
              Some (M.call (|
                "add",
                [
                  M.get (| "expr_54_slot" |);
                  [Literal.number 0]
                ]
              |))
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_uint256_to_uint256",
              [
                M.get (| "_16" |);
                M.get (| "_12" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_9"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.assign (|
              ["var_i_1"],
              Some (M.call (|
                "convert_rational_0_by_1_to_uint256",
                [
                  M.get (| "expr_9" |)
                ]
              |))
            |) in
          let _ :=
            let _ :=
              tt in
            M.for_ (|
              [Literal.number 1],
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["_17"],
                    Some (M.get (| "var_i_1" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_18"],
                    Some (M.call (|
                      "increment_wrapping_uint256",
                      [
                        M.get (| "_17" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.declare (|
                    ["var_i_1"],
                    M.get (| "_18" |)
                  |) in
                tt
              )),
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["_19"],
                    Some (M.get (| "var_i_1" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_10"],
                    Some (M.get (| "_19" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_11"],
                    Some ([Literal.number 0x03])
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_12"],
                    Some (M.call (|
                      "lt",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_10" |)
                          ]
                        |);
                        M.call (|
                          "convert_rational_3_by_1_to_uint256",
                          [
                            M.get (| "expr_11" |)
                          ]
                        |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.get (| "expr_12" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.break (||) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["_31_slot"],
                    Some ([Literal.number 0x00])
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_69_slot"],
                    Some (M.get (| "_31_slot" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_20"],
                    Some (M.call (|
                      "add",
                      [
                        M.get (| "expr_69_slot" |);
                        [Literal.number 1]
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_33_slot"],
                    Some (M.get (| "_20" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_72_slot"],
                    Some (M.get (| "_33_slot" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_13"],
                    Some ([Literal.number 0x00])
                  |) in
                let _ :=
                  M.assign (|
                    ["_21"; "_22"],
                    Some (M.call (|
                      "storage_array_index_access_struct_Tree__dyn",
                      [
                        M.get (| "expr_72_slot" |);
                        M.get (| "expr_13" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_36_slot"],
                    Some (M.get (| "_21" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_73_slot"],
                    Some (M.get (| "_36_slot" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_23"],
                    Some (M.call (|
                      "add",
                      [
                        M.get (| "expr_73_slot" |);
                        [Literal.number 1]
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_38_slot"],
                    Some (M.get (| "_23" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_74_slot"],
                    Some (M.get (| "_38_slot" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_75_self_slot"],
                    Some (M.call (|
                      "convert_array_array_struct_Tree_storage_dyn_storage_to_array_struct_Tree__dyn_ptr",
                      [
                        M.get (| "expr_74_slot" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_39_slot"],
                    Some ([Literal.number 0x02])
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_76_slot"],
                    Some (M.get (| "_39_slot" |))
                  |) in
                let _ :=
                  M.call (|
                    "array_push_from_struct_Tree_storage_to_array_struct_Tree__dyn_ptr",
                    [
                      M.get (| "expr_75_self_slot" |);
                      M.get (| "expr_76_slot" |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["expr_14"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.assign (|
              ["var_i_2"],
              Some (M.call (|
                "convert_rational_0_by_1_to_uint256",
                [
                  M.get (| "expr_14" |)
                ]
              |))
            |) in
          let _ :=
            let _ :=
              tt in
            M.for_ (|
              [Literal.number 1],
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["_24"],
                    Some (M.get (| "var_i_2" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_25"],
                    Some (M.call (|
                      "increment_wrapping_uint256",
                      [
                        M.get (| "_24" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.declare (|
                    ["var_i_2"],
                    M.get (| "_25" |)
                  |) in
                tt
              )),
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["_26"],
                    Some (M.get (| "var_i_2" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_15"],
                    Some (M.get (| "_26" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_16"],
                    Some ([Literal.number 0x03])
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_17"],
                    Some (M.call (|
                      "lt",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_15" |)
                          ]
                        |);
                        M.call (|
                          "convert_rational_3_by_1_to_uint256",
                          [
                            M.get (| "expr_16" |)
                          ]
                        |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.get (| "expr_17" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.break (||) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_18"],
                    Some ([Literal.number 0x420000])
                  |) in
                let _ :=
                  M.assign (|
                    ["_27"],
                    Some (M.get (| "var_i_2" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_19"],
                    Some (M.get (| "_27" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_20"],
                    Some (M.call (|
                      "checked_add_uint256",
                      [
                        M.call (|
                          "convert_rational_by_to_uint256",
                          [
                            M.get (| "expr_18" |)
                          ]
                        |);
                        M.get (| "expr_19" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_44_slot"],
                    Some ([Literal.number 0x00])
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_90_slot"],
                    Some (M.get (| "_44_slot" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_28"],
                    Some (M.call (|
                      "add",
                      [
                        M.get (| "expr_90_slot" |);
                        [Literal.number 1]
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_46_slot"],
                    Some (M.get (| "_28" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_93_slot"],
                    Some (M.get (| "_46_slot" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_21"],
                    Some ([Literal.number 0x00])
                  |) in
                let _ :=
                  M.assign (|
                    ["_29"; "_30"],
                    Some (M.call (|
                      "storage_array_index_access_struct_Tree__dyn",
                      [
                        M.get (| "expr_93_slot" |);
                        M.get (| "expr_21" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_49_slot"],
                    Some (M.get (| "_29" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_94_slot"],
                    Some (M.get (| "_49_slot" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_31"],
                    Some (M.call (|
                      "add",
                      [
                        M.get (| "expr_94_slot" |);
                        [Literal.number 1]
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_51_slot"],
                    Some (M.get (| "_31" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_95_slot"],
                    Some (M.get (| "_51_slot" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_32"],
                    Some (M.get (| "var_i_2" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_22"],
                    Some (M.get (| "_32" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_33"; "_34"],
                    Some (M.call (|
                      "storage_array_index_access_struct_Tree__dyn",
                      [
                        M.get (| "expr_95_slot" |);
                        M.get (| "expr_22" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_55_slot"],
                    Some (M.get (| "_33" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_97_slot"],
                    Some (M.get (| "_55_slot" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_35"],
                    Some (M.call (|
                      "add",
                      [
                        M.get (| "expr_97_slot" |);
                        [Literal.number 0]
                      ]
                    |))
                  |) in
                let _ :=
                  M.call (|
                    "update_storage_value_offsett_uint256_to_uint256",
                    [
                      M.get (| "_35" |);
                      M.get (| "expr_20" |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["expr_23"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.assign (|
              ["var_i_3"],
              Some (M.call (|
                "convert_rational_0_by_1_to_uint256",
                [
                  M.get (| "expr_23" |)
                ]
              |))
            |) in
          let _ :=
            let _ :=
              tt in
            M.for_ (|
              [Literal.number 1],
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["_36"],
                    Some (M.get (| "var_i_3" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_37"],
                    Some (M.call (|
                      "increment_wrapping_uint256",
                      [
                        M.get (| "_36" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.declare (|
                    ["var_i_3"],
                    M.get (| "_37" |)
                  |) in
                tt
              )),
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["_38"],
                    Some (M.get (| "var_i_3" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_24"],
                    Some (M.get (| "_38" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_25"],
                    Some ([Literal.number 0x04])
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_26"],
                    Some (M.call (|
                      "lt",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_24" |)
                          ]
                        |);
                        M.call (|
                          "convert_rational_4_by_1_to_uint256",
                          [
                            M.get (| "expr_25" |)
                          ]
                        |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.get (| "expr_26" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.break (||) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["_60_slot"],
                    Some ([Literal.number 0x00])
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_115_slot"],
                    Some (M.get (| "_60_slot" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_39"],
                    Some (M.call (|
                      "add",
                      [
                        M.get (| "expr_115_slot" |);
                        [Literal.number 1]
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_62_slot"],
                    Some (M.get (| "_39" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_118_slot"],
                    Some (M.get (| "_62_slot" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_27"],
                    Some ([Literal.number 0x01])
                  |) in
                let _ :=
                  M.assign (|
                    ["_40"; "_41"],
                    Some (M.call (|
                      "storage_array_index_access_struct_Tree__dyn",
                      [
                        M.get (| "expr_118_slot" |);
                        M.get (| "expr_27" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_65_slot"],
                    Some (M.get (| "_40" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_119_slot"],
                    Some (M.get (| "_65_slot" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_42"],
                    Some (M.call (|
                      "add",
                      [
                        M.get (| "expr_119_slot" |);
                        [Literal.number 1]
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_67_slot"],
                    Some (M.get (| "_42" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_120_slot"],
                    Some (M.get (| "_67_slot" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_121_self_slot"],
                    Some (M.call (|
                      "convert_array_array_struct_Tree_storage_dyn_storage_to_array_struct_Tree__dyn_ptr",
                      [
                        M.get (| "expr_120_slot" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_68_slot"],
                    Some ([Literal.number 0x02])
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_122_slot"],
                    Some (M.get (| "_68_slot" |))
                  |) in
                let _ :=
                  M.call (|
                    "array_push_from_struct_Tree_storage_to_array_struct_Tree__dyn_ptr",
                    [
                      M.get (| "expr_121_self_slot" |);
                      M.get (| "expr_122_slot" |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["expr_28"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.assign (|
              ["var_i_4"],
              Some (M.call (|
                "convert_rational_0_by_1_to_uint256",
                [
                  M.get (| "expr_28" |)
                ]
              |))
            |) in
          let _ :=
            let _ :=
              tt in
            M.for_ (|
              [Literal.number 1],
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["_43"],
                    Some (M.get (| "var_i_4" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_44"],
                    Some (M.call (|
                      "increment_wrapping_uint256",
                      [
                        M.get (| "_43" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.declare (|
                    ["var_i_4"],
                    M.get (| "_44" |)
                  |) in
                tt
              )),
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["_45"],
                    Some (M.get (| "var_i_4" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_29"],
                    Some (M.get (| "_45" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_30"],
                    Some ([Literal.number 0x04])
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_31"],
                    Some (M.call (|
                      "lt",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_29" |)
                          ]
                        |);
                        M.call (|
                          "convert_rational_4_by_1_to_uint256",
                          [
                            M.get (| "expr_30" |)
                          ]
                        |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.get (| "expr_31" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.break (||) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_32"],
                    Some ([Literal.number 0x420100])
                  |) in
                let _ :=
                  M.assign (|
                    ["_46"],
                    Some (M.get (| "var_i_4" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_33"],
                    Some (M.get (| "_46" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_34"],
                    Some (M.call (|
                      "checked_add_uint256",
                      [
                        M.call (|
                          "convert_rational_4325632_by_1_to_uint256",
                          [
                            M.get (| "expr_32" |)
                          ]
                        |);
                        M.get (| "expr_33" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_73_slot"],
                    Some ([Literal.number 0x00])
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_slot"],
                    Some (M.get (| "_73_slot" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_47"],
                    Some (M.call (|
                      "add",
                      [
                        M.get (| "expr_slot" |);
                        [Literal.number 1]
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_75_slot"],
                    Some (M.get (| "_47" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_139_slot"],
                    Some (M.get (| "_75_slot" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_35"],
                    Some ([Literal.number 0x01])
                  |) in
                let _ :=
                  M.assign (|
                    ["_48"; "_49"],
                    Some (M.call (|
                      "storage_array_index_access_struct_Tree__dyn",
                      [
                        M.get (| "expr_139_slot" |);
                        M.get (| "expr_35" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_78_slot"],
                    Some (M.get (| "_48" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_140_slot"],
                    Some (M.get (| "_78_slot" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_50"],
                    Some (M.call (|
                      "add",
                      [
                        M.get (| "expr_140_slot" |);
                        [Literal.number 1]
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_slot"],
                    Some (M.get (| "_50" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_141_slot"],
                    Some (M.get (| "_slot" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_51"],
                    Some (M.get (| "var_i_4" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_36"],
                    Some (M.get (| "_51" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_52"; "_53"],
                    Some (M.call (|
                      "storage_array_index_access_struct_Tree__dyn",
                      [
                        M.get (| "expr_141_slot" |);
                        M.get (| "expr_36" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_84_slot"],
                    Some (M.get (| "_52" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_143_slot"],
                    Some (M.get (| "_84_slot" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_54"],
                    Some (M.call (|
                      "add",
                      [
                        M.get (| "expr_143_slot" |);
                        [Literal.number 0]
                      ]
                    |))
                  |) in
                let _ :=
                  M.call (|
                    "update_storage_value_offsett_uint256_to_uint256",
                    [
                      M.get (| "_54" |);
                      M.get (| "expr_34" |)
                    ]
                  |) in
                tt
              ))
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module CopyTest_278_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      []
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  Some (M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0xc0406226),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_run",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            []
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint256_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_array_uint256_dyn",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint256_dyn",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encodeUpdatedPos_uint256",
          ["value0"; "pos"],
          ["updatedPos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value0" |);
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updatedPos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_nextElement_array_uint256_dyn",
          ["ptr"],
          ["next"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["next"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_uint256_dyn_memory_ptr",
          ["value"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_uint256_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_uint256_dyn",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["baseRef"],
                Some (M.call (|
                  "array_dataslot_array_uint256_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.get (| "baseRef" |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["elementValue0"],
                      Some (M.call (|
                        "mload",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["pos"],
                      M.call (|
                        "abi_encodeUpdatedPos_uint256",
                        [
                          M.get (| "elementValue0" |);
                          M.get (| "pos" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["srcPtr"],
                      M.call (|
                        "array_nextElement_array_uint256_dyn",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_uint256_dyn",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_array_uint256_dyn_memory_ptr",
                  [
                    M.get (| "value0" |);
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_run",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_run",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_array_uint256_dyn",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_array_uint256_dyn",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 96]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "round_up_to_mul_of",
          ["value"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "and",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 31]
                      ]
                    |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 31]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "finalize_allocation",
          ["memPtr"; "size"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["newFreePtr"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "memPtr" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "size" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "newFreePtr" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "newFreePtr" |);
                        M.get (| "memPtr" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 64];
                  M.get (| "newFreePtr" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory",
          ["size"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_unbounded",
                  []
                |)
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "memPtr" |);
                  M.get (| "size" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_struct_struct_Tree",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_array_struct_Tree_dyn",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 96]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_and_zero_memory_struct_struct_Tree",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_struct_struct_Tree",
                  []
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some (M.get (| "memPtr" |))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "offset" |);
                  M.call (|
                    "zero_value_for_uint256",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "offset" |);
                  M.call (|
                    "zero_value_for_array_struct_Tree_dyn",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_struct_Tree",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "allocate_and_zero_memory_struct_struct_Tree",
                  []
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_0_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_uint256",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint256",
                  [
                    M.call (|
                      "shift_right_0_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_uint256",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offsett_uint256",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "write_to_memory_uint256",
          ["memPtr"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_struct_Tree_storage_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_array_struct_Tree_dyn",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "mul",
                  [
                    M.get (| "length" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "add",
                  [
                    M.get (| "size" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_array_array_struct_Tree_dyn",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["allocSize"],
                Some (M.call (|
                  "array_allocation_size_array_struct_Tree_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    M.get (| "allocSize" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.get (| "length" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_struct_Tree_storage_dyn",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.get (| "ptr" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_from_storage_to_memory_array_struct_Tree__dyn",
          ["slot"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_struct_Tree_storage_dyn",
                  [
                    M.get (| "slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_array_array_struct_Tree_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["mpos"],
                Some (M.get (| "memPtr" |))
              |) in
            let _ :=
              M.declare (|
                ["mpos"],
                M.call (|
                  "add",
                  [
                    M.get (| "mpos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["spos"],
                Some (M.call (|
                  "array_dataslot_array_struct_Tree_storage_dyn",
                  [
                    M.get (| "slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.get (| "mpos" |);
                        M.call (|
                          "convert_struct_Tree_storage_to_struct_Tree",
                          [
                            M.get (| "spos" |)
                          ]
                        |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["mpos"],
                      M.call (|
                        "add",
                        [
                          M.get (| "mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["spos"],
                      M.call (|
                        "add",
                        [
                          M.get (| "spos" |);
                          [Literal.number 2]
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "write_to_memory_array_struct_Tree_dyn",
          ["memPtr"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_reference_type_struct_Tree",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "allocate_memory_struct_struct_Tree",
                  []
                |)
              |) in
            let _ :=
              M.assign (|
                ["memberValue"],
                Some (M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "slot" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint256",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.get (| "memberValue" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["memberValue_1"],
                Some (M.call (|
                  "copy_array_from_storage_to_memory_array_struct_Tree__dyn",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "slot" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "write_to_memory_array_struct_Tree_dyn",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 32]
                    ]
                  |);
                  M.get (| "memberValue_1" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_struct_Tree_storage_to_struct_Tree",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "read_from_storage_reference_type_struct_Tree",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_array_uint256_dyn",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "mul",
                  [
                    M.get (| "length" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "add",
                  [
                    M.get (| "size" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_array_array_uint256_dyn",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["allocSize"],
                Some (M.call (|
                  "array_allocation_size_array_uint256_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    M.get (| "allocSize" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.get (| "length" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_memory_chunk_uint256",
          ["dataStart"; "dataSizeInBytes"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "calldatacopy",
                [
                  M.get (| "dataStart" |);
                  M.call (|
                    "calldatasize",
                    []
                  |);
                  M.get (| "dataSizeInBytes" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_and_zero_memory_array_array_uint256_dyn",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_array_array_uint256_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["dataStart"],
                Some (M.get (| "memPtr" |))
              |) in
            let _ :=
              M.assign (|
                ["dataSize"],
                Some (M.call (|
                  "array_allocation_size_array_uint256_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["dataStart"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["dataSize"],
                M.call (|
                  "sub",
                  [
                    M.get (| "dataSize" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "zero_memory_chunk_uint256",
                [
                  M.get (| "dataStart" |);
                  M.get (| "dataSize" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_run",
          [],
          ["var_mpos"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_array_uint256_dyn_mpos"],
                Some (M.call (|
                  "zero_value_for_split_array_uint256_dyn",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_mpos"],
                M.get (| "zero_array_uint256_dyn_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["var_memoryTree_mpos"],
                None
              |) in
            let _ :=
              M.assign (|
                ["zero_struct_Tree_mpos"],
                Some (M.call (|
                  "zero_value_for_split_struct_Tree",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_memoryTree_mpos"],
                M.get (| "zero_struct_Tree_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_slot"],
                Some (M.get (| "_slot" |))
              |) in
            let _ :=
              M.declare (|
                ["var_memoryTree_mpos"],
                M.call (|
                  "convert_struct_Tree_storage_to_struct_Tree",
                  [
                    M.get (| "expr_slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_5_mpos"],
                Some (M.get (| "var_memoryTree_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_254_mpos"],
                Some (M.get (| "_5_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.call (|
                  "fun_countData",
                  [
                    M.get (| "expr_254_mpos" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_length"],
                Some (M.get (| "expr" |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_266_mpos"],
                Some (M.call (|
                  "allocate_and_zero_memory_array_array_uint256_dyn",
                  [
                    M.get (| "expr_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_result_mpos"],
                Some (M.get (| "expr_266_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["_mpos"],
                Some (M.get (| "var_memoryTree_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_269_mpos"],
                Some (M.get (| "_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["_8_mpos"],
                Some (M.get (| "var_result_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_270_mpos"],
                Some (M.get (| "_8_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.call (|
                  "convert_t_rational_by_to_t_uint256",
                  [
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "pop",
                [
                  M.call (|
                    "fun_copyFromTree",
                    [
                      M.get (| "expr_269_mpos" |);
                      M.get (| "expr_270_mpos" |);
                      M.get (| "_2" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_10_mpos"],
                Some (M.get (| "var_result_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_274_mpos"],
                Some (M.get (| "_10_mpos" |))
              |) in
            let _ :=
              M.declare (|
                ["var_mpos"],
                M.get (| "expr_274_mpos" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "increment_wrapping_uint256",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_struct_Tree_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x32",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x32]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "memory_array_index_access_struct_Tree_dyn",
          ["baseRef"; "index"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.call (|
                          "array_length_array_struct_Tree_dyn",
                          [
                            M.get (| "baseRef" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some (M.call (|
                  "mul",
                  [
                    M.get (| "index" |);
                    [Literal.number 32]
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "baseRef" |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x11",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x11]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_add_uint256",
          ["x"; "y"],
          ["sum"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["x"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "x" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["y"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["sum"],
                M.call (|
                  "add",
                  [
                    M.get (| "x" |);
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "x" |);
                    M.get (| "sum" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_countData",
          ["var_tree_155_mpos"],
          ["var_c"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_c"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.call (|
                  "convert_rational_by_to_uint256",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_c"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["var_i"],
                Some (M.call (|
                  "convert_t_rational_by_to_t_uint256",
                  [
                    M.get (| "expr_1" |)
                  ]
                |))
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                [Literal.number 1],
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_2"],
                      Some (M.get (| "var_i" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_3"],
                      Some (M.call (|
                        "increment_wrapping_uint256",
                        [
                          M.get (| "_2" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["var_i"],
                      M.get (| "_3" |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_4"],
                      Some (M.get (| "var_i" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_2"],
                      Some (M.get (| "_4" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_16_mpos"],
                      Some (M.get (| "var_tree_155_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_169_mpos"],
                      Some (M.get (| "_16_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_5"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "expr_169_mpos" |);
                          [Literal.number 32]
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_18_mpos"],
                      Some (M.call (|
                        "mload",
                        [
                          M.get (| "_5" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_170_mpos"],
                      Some (M.get (| "_18_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_3"],
                      Some (M.call (|
                        "array_length_array_struct_Tree_dyn",
                        [
                          M.get (| "expr_170_mpos" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_4"],
                      Some (M.call (|
                        "lt",
                        [
                          M.call (|
                            "cleanup_uint256",
                            [
                              M.get (| "expr_2" |)
                            ]
                          |);
                          M.call (|
                            "cleanup_uint256",
                            [
                              M.get (| "expr_3" |)
                            ]
                          |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "iszero",
                        [
                          M.get (| "expr_4" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.break (||) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_19_mpos"],
                      Some (M.get (| "var_tree_155_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_178_mpos"],
                      Some (M.get (| "_19_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_6"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "expr_178_mpos" |);
                          [Literal.number 32]
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_21_mpos"],
                      Some (M.call (|
                        "mload",
                        [
                          M.get (| "_6" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_179_mpos"],
                      Some (M.get (| "_21_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_7"],
                      Some (M.get (| "var_i" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_5"],
                      Some (M.get (| "_7" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_23_mpos"],
                      Some (M.call (|
                        "mload",
                        [
                          M.call (|
                            "memory_array_index_access_struct_Tree_dyn",
                            [
                              M.get (| "expr_179_mpos" |);
                              M.get (| "expr_5" |)
                            ]
                          |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_181_mpos"],
                      Some (M.get (| "_23_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_6"],
                      Some (M.call (|
                        "fun_countData",
                        [
                          M.get (| "expr_181_mpos" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_8"],
                      Some (M.get (| "var_c" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_7"],
                      Some (M.call (|
                        "checked_add_uint256",
                        [
                          M.get (| "_8" |);
                          M.get (| "expr_6" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["var_c"],
                      M.get (| "expr_7" |)
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_memoryt_uint256",
          ["ptr"],
          ["returnValue"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["value"],
                Some (M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "mload",
                      [
                        M.get (| "ptr" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["returnValue"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "increment_uint256",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "eq",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "add",
                  [
                    M.get (| "value" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "memory_array_index_access_uint256_dyn",
          ["baseRef"; "index"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.call (|
                          "array_length_array_uint256_dyn",
                          [
                            M.get (| "baseRef" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some (M.call (|
                  "mul",
                  [
                    M.get (| "index" |);
                    [Literal.number 32]
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "baseRef" |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_copyFromTree",
          ["var_tree_mpos"; "var_data_mpos"; "var_offset"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_t_uint256"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_t_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["_26_mpos"],
                Some (M.get (| "var_tree_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_205_mpos"],
                Some (M.get (| "_26_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_205_mpos" |);
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.get (| "_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["_29_mpos"],
                Some (M.get (| "var_data_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_201_mpos"],
                Some (M.get (| "_29_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.get (| "var_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.call (|
                  "increment_uint256",
                  [
                    M.get (| "_3" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_offset"],
                M.get (| "_4" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_3" |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.get (| "expr" |))
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint256",
                [
                  M.call (|
                    "memory_array_index_access_uint256_dyn",
                    [
                      M.get (| "expr_201_mpos" |);
                      M.get (| "expr_1" |)
                    ]
                  |);
                  M.get (| "_5" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["var_i"],
                Some (M.call (|
                  "convert_t_rational_by_to_t_uint256",
                  [
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                [Literal.number 1],
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_6"],
                      Some (M.get (| "var_i" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_7"],
                      Some (M.call (|
                        "increment_wrapping_uint256",
                        [
                          M.get (| "_6" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["var_i"],
                      M.get (| "_7" |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_8"],
                      Some (M.get (| "var_i" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_3"],
                      Some (M.get (| "_8" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_36_mpos"],
                      Some (M.get (| "var_tree_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_214_mpos"],
                      Some (M.get (| "_36_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_9"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "expr_214_mpos" |);
                          [Literal.number 32]
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_38_mpos"],
                      Some (M.call (|
                        "mload",
                        [
                          M.get (| "_9" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_215_mpos"],
                      Some (M.get (| "_38_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_4"],
                      Some (M.call (|
                        "array_length_array_struct_Tree_dyn",
                        [
                          M.get (| "expr_215_mpos" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_5"],
                      Some (M.call (|
                        "lt",
                        [
                          M.call (|
                            "cleanup_uint256",
                            [
                              M.get (| "expr_3" |)
                            ]
                          |);
                          M.call (|
                            "cleanup_uint256",
                            [
                              M.get (| "expr_4" |)
                            ]
                          |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "iszero",
                        [
                          M.get (| "expr_5" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.break (||) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_39_mpos"],
                      Some (M.get (| "var_tree_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_223_mpos"],
                      Some (M.get (| "_39_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_10"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "expr_223_mpos" |);
                          [Literal.number 32]
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_41_mpos"],
                      Some (M.call (|
                        "mload",
                        [
                          M.get (| "_10" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_224_mpos"],
                      Some (M.get (| "_41_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_11"],
                      Some (M.get (| "var_i" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_6"],
                      Some (M.get (| "_11" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_43_mpos"],
                      Some (M.call (|
                        "mload",
                        [
                          M.call (|
                            "memory_array_index_access_struct_Tree_dyn",
                            [
                              M.get (| "expr_224_mpos" |);
                              M.get (| "expr_6" |)
                            ]
                          |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_226_mpos"],
                      Some (M.get (| "_43_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_44_mpos"],
                      Some (M.get (| "var_data_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_mpos"],
                      Some (M.get (| "_44_mpos" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["_12"],
                      Some (M.get (| "var_offset" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_7"],
                      Some (M.get (| "_12" |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_8"],
                      Some (M.call (|
                        "fun_copyFromTree",
                        [
                          M.get (| "expr_226_mpos" |);
                          M.get (| "expr_mpos" |);
                          M.get (| "expr_7" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["var_offset"],
                      M.get (| "expr_8" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["_13"],
                Some (M.get (| "var_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.get (| "_13" |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_9" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a26469706673582212209d42fa34c8cdce53017421ddee09f0c01f4fa96004b2608a68868c75301acdcc64736f6c634300081b0033".
  End CopyTest_278_deployed.
End CopyTest_278.
