(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module Test_232.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            [

            ]
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                [

                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          M.call (|
            "allocate_unbounded",
            [

            ]
          |)
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "546573745f3233325f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "546573745f3233325f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "546573745f3233325f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module Test_232_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  M.call (|
                    "shift_right_224_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x86d5c4be),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_load",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x975057e7),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_store",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            [

            ]
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_224_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_uint256_uint256_uint256_uint256_uint256",
          ["headStart"; "value0"; "value1"; "value2"; "value3"; "value4"; "value5"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 192]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value2" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 64]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value3" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 96]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value4" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 128]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value5" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 160]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_load",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"; "ret_2"; "ret_3"; "ret_4"; "ret_5"],
                M.call (|
                  "fun_load",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_uint256_uint256_uint256_uint256_uint256_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |);
                    M.get (| "ret_2" |);
                    M.get (| "ret_3" |);
                    M.get (| "ret_4" |);
                    M.get (| "ret_5" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_store",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"; "ret_2"; "ret_3"; "ret_4"; "ret_5"],
                M.call (|
                  "fun_store",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_uint256_uint256_uint256_uint256_uint256_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |);
                    M.get (| "ret_2" |);
                    M.get (| "ret_3" |);
                    M.get (| "ret_4" |);
                    M.get (| "ret_5" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint8",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_0",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_1_shift",
          ["value"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                [Literal.number 255]
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_0",
                  [
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint8_to_uint8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint8",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_uint8",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_uint8_to_uint8",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                M.call (|
                  "convert_uint8_to_uint8",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_1_shift",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.call (|
                        "prepare_store_uint8",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_2_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_2_by_1_to_uint8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_2_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_3_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint16",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint16",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint16",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_3_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 8];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_shift",
          ["value"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                [Literal.number 16776960]
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left",
                  [
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint16_to_uint16",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint16",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint16",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_uint16",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_uint16_to_uint16",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                M.call (|
                  "convert_uint16_to_uint16",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_shift",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.call (|
                        "prepare_store_uint16",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_shift_0",
          ["value"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                M.call (|
                  "not",
                  [
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_0",
                  [
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint256_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_uint256",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_uint256_to_uint256",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                M.call (|
                  "convert_uint256_to_uint256",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_shift_0",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.call (|
                        "prepare_store_uint256",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_5_by_1_to_uint8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x32",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x32]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint8_storage",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x02]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint8_storage",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_uint",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                M.call (|
                  "array_length_array_uint8_storage",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                M.call (|
                  "array_dataslot_array_uint8_storage",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "div",
                      [
                        M.get (| "index" |);
                        [Literal.number 32]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "mul",
                  [
                    M.call (|
                      "mod",
                      [
                        M.get (| "index" |);
                        [Literal.number 32]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_dynamic",
          ["bits"; "value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    M.get (| "bits" |);
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_dynamic1",
          ["value"; "shiftBytes"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["shiftBits"],
                M.call (|
                  "mul",
                  [
                    M.get (| "shiftBytes" |);
                    [Literal.number 8]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["mask"],
                M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    [Literal.number 255]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_uint8_to_uint8",
          ["slot"; "offset"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                M.call (|
                  "convert_uint8_to_uint8",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_dynamic1",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.get (| "offset" |);
                      M.call (|
                        "prepare_store_uint8",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_0_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_uint8",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_0t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_0_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_uint8",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offset_0t_uint8",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "write_to_memory_uint8",
          ["memPtr"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "cleanup_uint8",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_8_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 8];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_uint16",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_uint16",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint16",
                  [
                    M.call (|
                      "shift_right_8_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_uint16",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offsett_uint16",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "write_to_memory_uint16",
          ["memPtr"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "cleanup_uint16",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_uint256",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint256",
                  [
                    M.call (|
                      "shift_right_0_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_uint256",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offsett_uint256",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "write_to_memory_uint256",
          ["memPtr"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "round_up_to_mul_of",
          ["value"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "and",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 31]
                      ]
                    |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 31]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "finalize_allocation",
          ["memPtr"; "size"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["newFreePtr"],
                M.call (|
                  "add",
                  [
                    M.get (| "memPtr" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "size" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "newFreePtr" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "newFreePtr" |);
                        M.get (| "memPtr" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 64];
                  M.get (| "newFreePtr" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory",
          ["size"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "memPtr" |);
                  M.get (| "size" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_struct_struct_S",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    [Literal.number 96]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_reference_type_struct_S",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "allocate_memory_struct_struct_S",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memberValue"],
                M.call (|
                  "read_from_storage_split_offset_uint8",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "slot" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint8",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.get (| "memberValue" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["memberValue_1"],
                M.call (|
                  "read_from_storage_split_offset_uint16",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "slot" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint16",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 32]
                    ]
                  |);
                  M.get (| "memberValue_1" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["memberValue_2"],
                M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "slot" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint256",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 64]
                    ]
                  |);
                  M.get (| "memberValue_2" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "write_to_memory_struct_S",
          ["memPtr"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_array_uint8",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint8",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint8",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_1t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_8_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_16_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 16];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_2t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_16_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_24_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 24];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_24_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_32_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 32];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_4t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_32_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_40_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 40];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_5t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_40_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_48_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 48];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_6t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_48_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_56_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 56];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_7t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_56_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_64_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 64];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_8t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_64_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_72_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 72];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_9t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_72_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_80_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 80];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_10t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_80_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_88_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 88];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_11t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_88_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_96_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 96];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_12t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_96_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_104_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 104];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_13t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_104_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_112_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 112];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_14t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_112_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_120_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 120];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_15t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_120_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_128_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 128];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_16t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_128_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_136_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 136];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_17t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_136_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 144];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_18t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_152_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 152];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_19t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_152_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_160_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 160];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_20t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_160_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_168_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 168];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_21t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_168_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_176_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 176];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_22t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_176_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_184_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 184];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_23t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_184_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_192_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 192];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_24t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_192_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_200_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 200];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_25t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_200_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_208_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 208];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_26t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_208_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_216_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 216];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_27t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_216_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_28t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_224_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_232_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 232];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_29t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_232_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_240_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 240];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_30t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_240_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_248_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 248];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_31t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_248_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_uint8_storage",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                M.call (|
                  "array_length_array_uint8_storage",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_uint8",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                M.call (|
                  "array_dataslot_array_uint8_storage",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["itemCounter"],
                [Literal.number 0]
              |) in
            let _ :=
              M.if_ (|
                [Literal.number 0],
                ltac:(M.monadic (
                  let _ :=
                    M.for (|
                      tt,
                      M.call (|
                        "lt",
                        [
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              M.call (|
                                "sub",
                                [
                                  [Literal.number 32];
                                  [Literal.number 1]
                                ]
                              |)
                            ]
                          |);
                          M.get (| "length" |)
                        ]
                      |),
                      let _ :=
                        M.declare (|
                          ["itemCounter"],
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              [Literal.number 32]
                            ]
                          |)
                        |) in
                      tt,
                      let _ :=
                        M.assign (|
                          ["data"],
                          M.call (|
                            "sload",
                            [
                              M.get (| "srcPtr" |)
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_0t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_1t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_2t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offsett_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_4t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_5t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_6t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_7t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_8t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_9t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_10t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_11t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_12t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_13t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_14t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_15t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_16t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_17t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_18t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_19t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_20t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_21t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_22t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_23t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_24t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_25t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_26t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_27t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_28t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_29t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_30t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "abi_encode_uint8",
                          [
                            M.call (|
                              "extract_from_storage_value_offset_31t_uint8",
                              [
                                M.get (| "data" |)
                              ]
                            |);
                            M.get (| "pos" |)
                          ]
                        |) in
                      let _ :=
                        M.declare (|
                          ["pos"],
                          M.call (|
                            "add",
                            [
                              M.get (| "pos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["srcPtr"],
                          M.call (|
                            "add",
                            [
                              M.get (| "srcPtr" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.if_ (|
                [Literal.number 1],
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["data_1"],
                      M.call (|
                        "sload",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 1],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_0t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 1],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_1t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_2t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offsett_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_4t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_5t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_6t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_7t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_8t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_9t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_10t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_11t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_12t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_13t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_14t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_15t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_16t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_17t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_18t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_19t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_20t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_21t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_22t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_23t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_24t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_25t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_26t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_27t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_28t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_29t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_30t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      [Literal.number 0],
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_uint8",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_31t_uint8",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encodeUpdatedPos_array_uint8_storage",
          ["value0"; "pos"],
          ["updatedPos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "abi_encode_array_uint8_storage",
                [
                  M.get (| "value0" |);
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updatedPos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x40]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_from_storage_to_memory_array_uint",
          ["slot"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["end"],
                M.call (|
                  "abi_encodeUpdatedPos_array_uint8_storage",
                  [
                    M.get (| "slot" |);
                    M.get (| "memPtr" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "end" |);
                      M.get (| "memPtr" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "write_to_memory_array_uint8",
          ["memPtr"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_struct_struct_X",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    [Literal.number 96]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_reference_type_struct_X",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "allocate_memory_struct_struct_X",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memberValue"],
                M.call (|
                  "read_from_storage_split_offset_uint8",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "slot" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint8",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.get (| "memberValue" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["memberValue_1"],
                M.call (|
                  "read_from_storage_reference_type_struct_S",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "slot" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "write_to_memory_struct_S",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 32]
                    ]
                  |);
                  M.get (| "memberValue_1" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["memberValue_2"],
                M.call (|
                  "copy_array_from_storage_to_memory_array_uint",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "slot" |);
                        [Literal.number 3]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "write_to_memory_array_uint8",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 64]
                    ]
                  |);
                  M.get (| "memberValue_2" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_struct_X_storage_to_struct_X",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "read_from_storage_reference_type_struct_X",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_memoryt_uint8",
          ["ptr"],
          ["returnValue"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["value"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "mload",
                      [
                        M.get (| "ptr" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["returnValue"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint8_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint8",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_memoryt_uint16",
          ["ptr"],
          ["returnValue"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["value"],
                M.call (|
                  "cleanup_uint16",
                  [
                    M.call (|
                      "mload",
                      [
                        M.get (| "ptr" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["returnValue"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint16_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint16",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_memoryt_uint256",
          ["ptr"],
          ["returnValue"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["value"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "mload",
                      [
                        M.get (| "ptr" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["returnValue"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint8",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x02]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "memory_array_index_access_uint8",
          ["baseRef"; "index"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.call (|
                          "array_length_array_uint8",
                          [
                            M.get (| "baseRef" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                M.call (|
                  "mul",
                  [
                    M.get (| "index" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "baseRef" |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_0_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_0_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_load",
          [],
          ["var_a";
      "var_x";
      "var_y";
      "var_z";
      "var_a1";
      "var_a2"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_a"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_1"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_x"],
                M.get (| "zero_uint256_1" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_2"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_y"],
                M.get (| "zero_uint256_2" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_3"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_z"],
                M.get (| "zero_uint256_3" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_4"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_a1"],
                M.get (| "zero_uint256_4" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_5"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_a2"],
                M.get (| "zero_uint256_5" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.call (|
                  "convert_t_rational_by_to_t_uint8",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_8_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_35_slot"],
                M.get (| "_8_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_35_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_uint8_to_uint8",
                [
                  M.get (| "_2" |);
                  M.get (| "_1" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.call (|
                  "convert_rational_2_by_1_to_uint8",
                  [
                    M.get (| "expr_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_41_slot"],
                M.get (| "_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_41_slot" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_13_slot"],
                M.get (| "_4" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_44_slot"],
                M.get (| "_13_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_44_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_uint8_to_uint8",
                [
                  M.get (| "_5" |);
                  M.get (| "_3" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.call (|
                  "convert_rational_by_to_uint16",
                  [
                    M.get (| "expr_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_16_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_49_slot"],
                M.get (| "_16_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_49_slot" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_18_slot"],
                M.get (| "_7" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_52_slot"],
                M.get (| "_18_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_52_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_uint16_to_uint16",
                [
                  M.get (| "_8" |);
                  M.get (| "_6" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                [Literal.number 0x04]
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                M.call (|
                  "convert_rational_by_to_uint256",
                  [
                    M.get (| "expr_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_21_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_57_slot"],
                M.get (| "_21_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_10"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_57_slot" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_23_slot"],
                M.get (| "_10" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_60_slot"],
                M.get (| "_23_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_11"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_60_slot" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_uint256_to_uint256",
                [
                  M.get (| "_11" |);
                  M.get (| "_9" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                [Literal.number 0x05]
              |) in
            let _ :=
              M.assign (|
                ["_12"],
                M.call (|
                  "convert_rational_5_by_1_to_uint8",
                  [
                    M.get (| "expr_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_26_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_65_slot"],
                M.get (| "_26_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_13"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_65_slot" |);
                    [Literal.number 3]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_28_slot"],
                M.get (| "_13" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_68_slot"],
                M.get (| "_28_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_14"; "_15"],
                M.call (|
                  "storage_array_index_access_uint",
                  [
                    M.get (| "expr_68_slot" |);
                    M.get (| "expr_5" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_uint8_to_uint8",
                [
                  M.get (| "_14" |);
                  M.get (| "_15" |);
                  M.get (| "_12" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                [Literal.number 0x06]
              |) in
            let _ :=
              M.assign (|
                ["_16"],
                M.call (|
                  "convert_rational_by_to_uint8",
                  [
                    M.get (| "expr_6" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_32_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_73_slot"],
                M.get (| "_32_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_17"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_73_slot" |);
                    [Literal.number 3]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_34_slot"],
                M.get (| "_17" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_76_slot"],
                M.get (| "_34_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_18"; "_19"],
                M.call (|
                  "storage_array_index_access_uint",
                  [
                    M.get (| "expr_76_slot" |);
                    M.get (| "expr_7" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_uint8_to_uint8",
                [
                  M.get (| "_18" |);
                  M.get (| "_19" |);
                  M.get (| "_16" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_37_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_slot"],
                M.get (| "_37_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["var_d_83_mpos"],
                M.call (|
                  "convert_struct_X_storage_to_struct_X",
                  [
                    M.get (| "expr_slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_38_mpos"],
                M.get (| "var_d_83_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_87_mpos"],
                M.get (| "_38_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_20"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_87_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_21"],
                M.call (|
                  "read_from_memoryt_uint8",
                  [
                    M.get (| "_20" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                M.get (| "_21" |)
              |) in
            let _ :=
              M.assign (|
                ["_22"],
                M.call (|
                  "convert_uint8_to_uint256",
                  [
                    M.get (| "expr_8" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_a"],
                M.get (| "_22" |)
              |) in
            let _ :=
              M.assign (|
                ["_42_mpos"],
                M.get (| "var_d_83_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_92_mpos"],
                M.get (| "_42_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_23"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_92_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_44_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_23" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_93_mpos"],
                M.get (| "_44_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_24"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_93_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_25"],
                M.call (|
                  "read_from_memoryt_uint8",
                  [
                    M.get (| "_24" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                M.get (| "_25" |)
              |) in
            let _ :=
              M.assign (|
                ["_26"],
                M.call (|
                  "convert_uint8_to_uint256",
                  [
                    M.get (| "expr_9" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_x"],
                M.get (| "_26" |)
              |) in
            let _ :=
              M.assign (|
                ["_48_mpos"],
                M.get (| "var_d_83_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_98_mpos"],
                M.get (| "_48_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_27"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_98_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_50_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_27" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_99_mpos"],
                M.get (| "_50_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_28"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_99_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_29"],
                M.call (|
                  "read_from_memoryt_uint16",
                  [
                    M.get (| "_28" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                M.get (| "_29" |)
              |) in
            let _ :=
              M.assign (|
                ["_30"],
                M.call (|
                  "convert_uint16_to_uint256",
                  [
                    M.get (| "expr_10" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_y"],
                M.get (| "_30" |)
              |) in
            let _ :=
              M.assign (|
                ["_mpos"],
                M.get (| "var_d_83_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_104_mpos"],
                M.get (| "_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_31"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_104_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_56_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_31" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_105_mpos"],
                M.get (| "_56_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_32"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_105_mpos" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_33"],
                M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.get (| "_32" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                M.get (| "_33" |)
              |) in
            let _ :=
              M.declare (|
                ["var_z"],
                M.get (| "expr_11" |)
              |) in
            let _ :=
              M.assign (|
                ["_59_mpos"],
                M.get (| "var_d_83_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_110_mpos"],
                M.get (| "_59_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_34"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_110_mpos" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_61_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_34" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_111_mpos"],
                M.get (| "_61_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_35"],
                M.call (|
                  "read_from_memoryt_uint8",
                  [
                    M.call (|
                      "memory_array_index_access_uint8",
                      [
                        M.get (| "expr_111_mpos" |);
                        M.call (|
                          "convert_rational_0_by_1_to_uint256",
                          [
                            M.get (| "expr_12" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                M.get (| "_35" |)
              |) in
            let _ :=
              M.assign (|
                ["_36"],
                M.call (|
                  "convert_uint8_to_uint256",
                  [
                    M.get (| "expr_13" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_a1"],
                M.get (| "_36" |)
              |) in
            let _ :=
              M.assign (|
                ["_64_mpos"],
                M.get (| "var_d_83_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_117_mpos"],
                M.get (| "_64_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_37"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_117_mpos" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_66_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_37" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_118_mpos"],
                M.get (| "_66_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_38"],
                M.call (|
                  "read_from_memoryt_uint8",
                  [
                    M.call (|
                      "memory_array_index_access_uint8",
                      [
                        M.get (| "expr_118_mpos" |);
                        M.call (|
                          "convert_t_rational_by_to_t_uint256",
                          [
                            M.get (| "expr_14" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                M.get (| "_38" |)
              |) in
            let _ :=
              M.assign (|
                ["_39"],
                M.call (|
                  "convert_uint8_to_uint256",
                  [
                    M.get (| "expr_15" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_a2"],
                M.get (| "_39" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_uint8",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_uint16",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_and_zero_memory_struct_struct_S",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_struct_struct_S",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                M.get (| "memPtr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "offset" |);
                  M.call (|
                    "zero_value_for_uint8",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "offset" |);
                  M.call (|
                    "zero_value_for_uint16",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "offset" |);
                  M.call (|
                    "zero_value_for_uint256",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_struct_S",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "allocate_and_zero_memory_struct_struct_S",
                  [

                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_array_uint8",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "mul",
                  [
                    M.get (| "length" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_array_array_uint8",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["allocSize"],
                M.call (|
                  "array_allocation_size_array_uint8",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    M.get (| "allocSize" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_memory_chunk_uint8",
          ["dataStart"; "dataSizeInBytes"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "calldatacopy",
                [
                  M.get (| "dataStart" |);
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |);
                  M.get (| "dataSizeInBytes" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_and_zero_memory_array_array_uint8",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_array_array_uint8",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["dataStart"],
                M.get (| "memPtr" |)
              |) in
            let _ :=
              M.assign (|
                ["dataSize"],
                M.call (|
                  "array_allocation_size_array_uint8",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "zero_memory_chunk_uint8",
                [
                  M.get (| "dataStart" |);
                  M.get (| "dataSize" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_array_uint8",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "allocate_and_zero_memory_array_array_uint8",
                  [
                    [Literal.number 2]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_and_zero_memory_struct_struct_X",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_struct_struct_X",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                M.get (| "memPtr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "offset" |);
                  M.call (|
                    "zero_value_for_uint8",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "offset" |);
                  M.call (|
                    "zero_value_for_struct_S",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "offset" |);
                  M.call (|
                    "zero_value_for_array_uint8",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_struct_X",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "allocate_and_zero_memory_struct_struct_X",
                  [

                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_memoryt_struct_S",
          ["memPtr"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "mload",
                  [
                    M.get (| "memPtr" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_struct_to_storage_from_struct_S_to_struct_S",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["memberSlot"],
                M.call (|
                  "add",
                  [
                    M.get (| "slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memberSrcPtr"],
                M.call (|
                  "add",
                  [
                    M.get (| "value" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memberValue"],
                M.call (|
                  "read_from_memoryt_uint8",
                  [
                    M.get (| "memberSrcPtr" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_uint8_to_uint8",
                [
                  M.get (| "memberSlot" |);
                  M.get (| "memberValue" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["memberSlot_1"],
                M.call (|
                  "add",
                  [
                    M.get (| "slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memberSrcPtr_1"],
                M.call (|
                  "add",
                  [
                    M.get (| "value" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memberValue_1"],
                M.call (|
                  "read_from_memoryt_uint16",
                  [
                    M.get (| "memberSrcPtr_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_uint16_to_uint16",
                [
                  M.get (| "memberSlot_1" |);
                  M.get (| "memberValue_1" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["memberSlot_2"],
                M.call (|
                  "add",
                  [
                    M.get (| "slot" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memberSrcPtr_2"],
                M.call (|
                  "add",
                  [
                    M.get (| "value" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memberValue_2"],
                M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.get (| "memberSrcPtr_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_uint256_to_uint256",
                [
                  M.get (| "memberSlot_2" |);
                  M.get (| "memberValue_2" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_struct_S_to_struct_S",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "copy_struct_to_storage_from_struct_S_to_struct_S",
                [
                  M.get (| "slot" |);
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_memoryt_array_uint8",
          ["memPtr"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "mload",
                  [
                    M.get (| "memPtr" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_convert_length_to_size_array_uint8_storage",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["size"],
                M.get (| "length" |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "div",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "length" |);
                        M.call (|
                          "sub",
                          [
                            [Literal.number 32];
                            [Literal.number 1]
                          ]
                        |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_dynamic32",
          ["value"; "shiftBytes"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["shiftBits"],
                M.call (|
                  "mul",
                  [
                    M.get (| "shiftBytes" |);
                    [Literal.number 8]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["mask"],
                M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_uint256_to_uint256",
          ["slot"; "offset"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                M.call (|
                  "convert_uint256_to_uint256",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_dynamic32",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.get (| "offset" |);
                      M.call (|
                        "prepare_store_uint256",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_set_to_zero_uint256",
          ["slot"; "offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_uint256_to_uint256",
                [
                  M.get (| "slot" |);
                  M.get (| "offset" |);
                  M.get (| "zero" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_storage_range_uint8",
          ["start"; "end"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.for (|
                tt,
                M.call (|
                  "lt",
                  [
                    M.get (| "start" |);
                    M.get (| "end" |)
                  ]
                |),
                let _ :=
                  M.declare (|
                    ["start"],
                    M.call (|
                      "add",
                      [
                        M.get (| "start" |);
                        [Literal.number 1]
                      ]
                    |)
                  |) in
                tt,
                let _ :=
                  M.call (|
                    "storage_set_to_zero_uint256",
                    [
                      M.get (| "start" |);
                      [Literal.number 0]
                    ]
                  |) in
                tt
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_unsigned_dynamic",
          ["bits"; "value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    M.get (| "bits" |);
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "partial_clear_storage_slot",
          ["slot"; "offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                M.call (|
                  "shift_right_unsigned_dynamic",
                  [
                    M.call (|
                      "mul",
                      [
                        [Literal.number 8];
                        M.call (|
                          "sub",
                          [
                            [Literal.number 32];
                            M.get (| "offset" |)
                          ]
                        |)
                      ]
                    |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "and",
                    [
                      M.get (| "mask" |);
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_storage_array_end_array_uint",
          ["array"; "len"; "startIndex"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "startIndex" |);
                    M.get (| "len" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["oldSlotCount"],
                      M.call (|
                        "array_convert_length_to_size_array_uint8_storage",
                        [
                          M.get (| "len" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["newSlotCount"],
                      M.call (|
                        "array_convert_length_to_size_array_uint8_storage",
                        [
                          M.get (| "startIndex" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["arrayDataStart"],
                      M.call (|
                        "array_dataslot_array_uint8_storage",
                        [
                          M.get (| "array" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteStart"],
                      M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "newSlotCount" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteEnd"],
                      M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "oldSlotCount" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["offset"],
                      M.call (|
                        "mul",
                        [
                          M.call (|
                            "mod",
                            [
                              M.get (| "startIndex" |);
                              [Literal.number 32]
                            ]
                          |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "gt",
                        [
                          M.get (| "offset" |);
                          [Literal.number 0]
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "partial_clear_storage_slot",
                            [
                              M.call (|
                                "sub",
                                [
                                  M.get (| "deleteStart" |);
                                  [Literal.number 1]
                                ]
                              |);
                              M.get (| "offset" |)
                            ]
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "clear_storage_range_uint8",
                      [
                        M.get (| "deleteStart" |);
                        M.get (| "deleteEnd" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "resize_array_array_uint8_storage",
          ["array"; "newLen"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "newLen" |);
                    [Literal.number 18446744073709551616]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["oldLen"],
                M.call (|
                  "array_length_array_uint8_storage",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "cleanup_storage_array_end_array_uint",
                [
                  M.get (| "array" |);
                  M.get (| "oldLen" |);
                  M.get (| "newLen" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint8",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_dynamict_uint8",
          ["slot_value"; "offset"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_unsigned_dynamic",
                      [
                        M.call (|
                          "mul",
                          [
                            M.get (| "offset" |);
                            [Literal.number 8]
                          ]
                        |);
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_to_storage_from_array_uint8_to_array_uint",
          ["dst"; "src"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                M.call (|
                  "array_length_array_uint8",
                  [
                    M.get (| "src" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "resize_array_array_uint8_storage",
                [
                  M.get (| "dst" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                M.call (|
                  "array_dataslot_array_uint8",
                  [
                    M.get (| "src" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["dstSlot"],
                M.call (|
                  "array_dataslot_array_uint8_storage",
                  [
                    M.get (| "dst" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["fullSlots"],
                M.call (|
                  "div",
                  [
                    M.get (| "length" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["i"],
                [Literal.number 0]
              |) in
            let _ :=
              M.for (|
                tt,
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "fullSlots" |)
                  ]
                |),
                let _ :=
                  M.declare (|
                    ["i"],
                    M.call (|
                      "add",
                      [
                        M.get (| "i" |);
                        [Literal.number 1]
                      ]
                    |)
                  |) in
                tt,
                let _ :=
                  M.assign (|
                    ["dstSlotValue"],
                    [Literal.number 0]
                  |) in
                let _ :=
                  M.assign (|
                    ["j"],
                    [Literal.number 0]
                  |) in
                let _ :=
                  M.for (|
                    tt,
                    M.call (|
                      "lt",
                      [
                        M.get (| "j" |);
                        [Literal.number 32]
                      ]
                    |),
                    let _ :=
                      M.declare (|
                        ["j"],
                        M.call (|
                          "add",
                          [
                            M.get (| "j" |);
                            [Literal.number 1]
                          ]
                        |)
                      |) in
                    tt,
                    let _ :=
                      M.assign (|
                        ["stackItem"],
                        M.call (|
                          "read_from_memoryt_uint8",
                          [
                            M.get (| "srcPtr" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.assign (|
                        ["itemValue"],
                        M.call (|
                          "prepare_store_uint8",
                          [
                            M.get (| "stackItem" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.declare (|
                        ["dstSlotValue"],
                        M.call (|
                          "update_byte_slice_dynamic1",
                          [
                            M.get (| "dstSlotValue" |);
                            M.call (|
                              "mul",
                              [
                                [Literal.number 1];
                                M.get (| "j" |)
                              ]
                            |);
                            M.get (| "itemValue" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.declare (|
                        ["srcPtr"],
                        M.call (|
                          "add",
                          [
                            M.get (| "srcPtr" |);
                            [Literal.number 32]
                          ]
                        |)
                      |) in
                    tt
                  |) in
                let _ :=
                  M.call (|
                    "sstore",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "dstSlot" |);
                          M.get (| "i" |)
                        ]
                      |);
                      M.get (| "dstSlotValue" |)
                    ]
                  |) in
                tt
              |) in
            let _ :=
              M.assign (|
                ["spill"],
                M.call (|
                  "sub",
                  [
                    M.get (| "length" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "fullSlots" |);
                        [Literal.number 32]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "spill" |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["dstSlotValue_1"],
                      [Literal.number 0]
                    |) in
                  let _ :=
                    M.assign (|
                      ["j_1"],
                      [Literal.number 0]
                    |) in
                  let _ :=
                    M.for (|
                      tt,
                      M.call (|
                        "lt",
                        [
                          M.get (| "j_1" |);
                          M.get (| "spill" |)
                        ]
                      |),
                      let _ :=
                        M.declare (|
                          ["j_1"],
                          M.call (|
                            "add",
                            [
                              M.get (| "j_1" |);
                              [Literal.number 1]
                            ]
                          |)
                        |) in
                      tt,
                      let _ :=
                        M.assign (|
                          ["stackItem_1"],
                          M.call (|
                            "read_from_memoryt_uint8",
                            [
                              M.get (| "srcPtr" |)
                            ]
                          |)
                        |) in
                      let _ :=
                        M.assign (|
                          ["itemValue_1"],
                          M.call (|
                            "prepare_store_uint8",
                            [
                              M.get (| "stackItem_1" |)
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["dstSlotValue_1"],
                          M.call (|
                            "update_byte_slice_dynamic1",
                            [
                              M.get (| "dstSlotValue_1" |);
                              M.call (|
                                "mul",
                                [
                                  [Literal.number 1];
                                  M.get (| "j_1" |)
                                ]
                              |);
                              M.get (| "itemValue_1" |)
                            ]
                          |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["srcPtr"],
                          M.call (|
                            "add",
                            [
                              M.get (| "srcPtr" |);
                              [Literal.number 32]
                            ]
                          |)
                        |) in
                      tt
                    |) in
                  let _ :=
                    M.call (|
                      "sstore",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "dstSlot" |);
                            M.get (| "fullSlots" |)
                          ]
                        |);
                        M.get (| "dstSlotValue_1" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_array_uint8_to_array_uint",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "copy_array_to_storage_from_array_uint8_to_array_uint",
                [
                  M.get (| "slot" |);
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_struct_to_storage_from_struct_X_to_struct_X",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["memberSlot"],
                M.call (|
                  "add",
                  [
                    M.get (| "slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memberSrcPtr"],
                M.call (|
                  "add",
                  [
                    M.get (| "value" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memberValue"],
                M.call (|
                  "read_from_memoryt_uint8",
                  [
                    M.get (| "memberSrcPtr" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_uint8_to_uint8",
                [
                  M.get (| "memberSlot" |);
                  M.get (| "memberValue" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["memberSlot_1"],
                M.call (|
                  "add",
                  [
                    M.get (| "slot" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memberSrcPtr_1"],
                M.call (|
                  "add",
                  [
                    M.get (| "value" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memberValue_1"],
                M.call (|
                  "read_from_memoryt_struct_S",
                  [
                    M.get (| "memberSrcPtr_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_struct_S_to_struct_S",
                [
                  M.get (| "memberSlot_1" |);
                  M.get (| "memberValue_1" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["memberSlot_2"],
                M.call (|
                  "add",
                  [
                    M.get (| "slot" |);
                    [Literal.number 3]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memberSrcPtr_2"],
                M.call (|
                  "add",
                  [
                    M.get (| "value" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memberValue_2"],
                M.call (|
                  "read_from_memoryt_array_uint8",
                  [
                    M.get (| "memberSrcPtr_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_array_uint8_to_array_uint",
                [
                  M.get (| "memberSlot_2" |);
                  M.get (| "memberValue_2" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_struct_X_to_struct_X",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "copy_struct_to_storage_from_struct_X_to_struct_X",
                [
                  M.get (| "slot" |);
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_dynamic_uint8",
          ["slot"; "offset"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_dynamict_uint8",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_store",
          [],
          ["var_a";
      "var_x";
      "var_y";
      "var_z";
      "var_a1";
      "var_a2"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_a"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_1"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_x"],
                M.get (| "zero_uint256_1" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_2"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_y"],
                M.get (| "zero_uint256_2" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_t_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_z"],
                M.get (| "zero_t_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_3"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_a1"],
                M.get (| "zero_uint256_3" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_4"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_a2"],
                M.get (| "zero_uint256_4" |)
              |) in
            let _ :=
              M.assign (|
                ["var_d_mpos"],
                Literal.undefined
              |) in
            let _ :=
              M.assign (|
                ["zero_struct_X_mpos"],
                M.call (|
                  "zero_value_for_split_struct_X",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_d_mpos"],
                M.get (| "zero_struct_X_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.call (|
                  "convert_t_rational_by_to_t_uint8",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_77_mpos"],
                M.get (| "var_d_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_143_mpos"],
                M.get (| "_77_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_143_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint8",
                [
                  M.get (| "_2" |);
                  M.get (| "_3" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.call (|
                  "convert_rational_2_by_1_to_uint8",
                  [
                    M.get (| "expr_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_81_mpos"],
                M.get (| "var_d_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_149_mpos"],
                M.get (| "_81_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_149_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_83_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_5" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_152_mpos"],
                M.get (| "_83_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_152_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                M.get (| "_4" |)
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint8",
                [
                  M.get (| "_6" |);
                  M.get (| "_7" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                M.call (|
                  "convert_rational_by_to_uint16",
                  [
                    M.get (| "expr_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_87_mpos"],
                M.get (| "var_d_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_157_mpos"],
                M.get (| "_87_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_157_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_89_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_9" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_160_mpos"],
                M.get (| "_89_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_10"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_160_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_11"],
                M.get (| "_8" |)
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint16",
                [
                  M.get (| "_10" |);
                  M.get (| "_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                [Literal.number 0x04]
              |) in
            let _ :=
              M.assign (|
                ["_12"],
                M.call (|
                  "convert_rational_by_to_uint256",
                  [
                    M.get (| "expr_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_93_mpos"],
                M.get (| "var_d_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_165_mpos"],
                M.get (| "_93_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_13"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_165_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_95_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_13" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_mpos"],
                M.get (| "_95_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_14"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_mpos" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_15"],
                M.get (| "_12" |)
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint256",
                [
                  M.get (| "_14" |);
                  M.get (| "_15" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                [Literal.number 0x05]
              |) in
            let _ :=
              M.assign (|
                ["_16"],
                M.call (|
                  "convert_rational_5_by_1_to_uint8",
                  [
                    M.get (| "expr_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_99_mpos"],
                M.get (| "var_d_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_173_mpos"],
                M.get (| "_99_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_17"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_173_mpos" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_101_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_17" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_176_mpos"],
                M.get (| "_101_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_18"],
                M.get (| "_16" |)
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint8",
                [
                  M.call (|
                    "memory_array_index_access_uint8",
                    [
                      M.get (| "expr_176_mpos" |);
                      M.call (|
                        "convert_rational_0_by_1_to_uint256",
                        [
                          M.get (| "expr_5" |)
                        ]
                      |)
                    ]
                  |);
                  M.get (| "_18" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                [Literal.number 0x06]
              |) in
            let _ :=
              M.assign (|
                ["_19"],
                M.call (|
                  "convert_rational_by_to_uint8",
                  [
                    M.get (| "expr_6" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_104_mpos"],
                M.get (| "var_d_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_181_mpos"],
                M.get (| "_104_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_20"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_181_mpos" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_106_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_20" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_184_mpos"],
                M.get (| "_106_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_21"],
                M.get (| "_19" |)
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint8",
                [
                  M.call (|
                    "memory_array_index_access_uint8",
                    [
                      M.get (| "expr_184_mpos" |);
                      M.call (|
                        "convert_t_rational_by_to_t_uint256",
                        [
                          M.get (| "expr_7" |)
                        ]
                      |)
                    ]
                  |);
                  M.get (| "_21" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_108_mpos"],
                M.get (| "var_d_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_190_mpos"],
                M.get (| "_108_mpos" |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_struct_X_to_struct_X",
                [
                  [Literal.number 0x00];
                  M.get (| "expr_190_mpos" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_110_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_194_slot"],
                M.get (| "_110_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_22"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_194_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_23"],
                M.call (|
                  "read_from_storage_split_offset_uint8",
                  [
                    M.get (| "_22" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                M.get (| "_23" |)
              |) in
            let _ :=
              M.assign (|
                ["_24"],
                M.call (|
                  "convert_uint8_to_uint256",
                  [
                    M.get (| "expr_8" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_a"],
                M.get (| "_24" |)
              |) in
            let _ :=
              M.assign (|
                ["_114_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_199_slot"],
                M.get (| "_114_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_25"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_199_slot" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_116_slot"],
                M.get (| "_25" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_200_slot"],
                M.get (| "_116_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_26"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_200_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_27"],
                M.call (|
                  "read_from_storage_split_offset_uint8",
                  [
                    M.get (| "_26" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                M.get (| "_27" |)
              |) in
            let _ :=
              M.assign (|
                ["_28"],
                M.call (|
                  "convert_uint8_to_uint256",
                  [
                    M.get (| "expr_9" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_x"],
                M.get (| "_28" |)
              |) in
            let _ :=
              M.assign (|
                ["_120_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_205_slot"],
                M.get (| "_120_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_29"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_205_slot" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_122_slot"],
                M.get (| "_29" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_206_slot"],
                M.get (| "_122_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_30"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_206_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_31"],
                M.call (|
                  "read_from_storage_split_offset_uint16",
                  [
                    M.get (| "_30" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                M.get (| "_31" |)
              |) in
            let _ :=
              M.assign (|
                ["_32"],
                M.call (|
                  "convert_uint16_to_uint256",
                  [
                    M.get (| "expr_10" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_y"],
                M.get (| "_32" |)
              |) in
            let _ :=
              M.assign (|
                ["_126_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_211_slot"],
                M.get (| "_126_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_33"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_211_slot" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_128_slot"],
                M.get (| "_33" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_212_slot"],
                M.get (| "_128_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_34"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_212_slot" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_35"],
                M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    M.get (| "_34" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                M.get (| "_35" |)
              |) in
            let _ :=
              M.declare (|
                ["var_z"],
                M.get (| "expr_11" |)
              |) in
            let _ :=
              M.assign (|
                ["_131_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_217_slot"],
                M.get (| "_131_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_36"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_217_slot" |);
                    [Literal.number 3]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_133_slot"],
                M.get (| "_36" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_218_slot"],
                M.get (| "_133_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_37"; "_38"],
                M.call (|
                  "storage_array_index_access_uint",
                  [
                    M.get (| "expr_218_slot" |);
                    M.get (| "expr_12" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_39"],
                M.call (|
                  "read_from_storage_split_dynamic_uint8",
                  [
                    M.get (| "_37" |);
                    M.get (| "_38" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                M.get (| "_39" |)
              |) in
            let _ :=
              M.assign (|
                ["_40"],
                M.call (|
                  "convert_uint8_to_uint256",
                  [
                    M.get (| "expr_13" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_a1"],
                M.get (| "_40" |)
              |) in
            let _ :=
              M.assign (|
                ["_138_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_224_slot"],
                M.get (| "_138_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_41"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_224_slot" |);
                    [Literal.number 3]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_140_slot"],
                M.get (| "_41" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_225_slot"],
                M.get (| "_140_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_42"; "_43"],
                M.call (|
                  "storage_array_index_access_uint",
                  [
                    M.get (| "expr_225_slot" |);
                    M.get (| "expr_14" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_44"],
                M.call (|
                  "read_from_storage_split_dynamic_uint8",
                  [
                    M.get (| "_42" |);
                    M.get (| "_43" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                M.get (| "_44" |)
              |) in
            let _ :=
              M.assign (|
                ["_45"],
                M.call (|
                  "convert_uint8_to_uint256",
                  [
                    M.get (| "expr_15" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_a2"],
                M.get (| "_45" |)
              |) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a2646970667358221220448990c1ef27fa779c8f2f1222a9998aa5dd6bbff330ff0fb73b6d9b073c36ad64736f6c634300081b0033".
  End Test_232_deployed.
End Test_232.
