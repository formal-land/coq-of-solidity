(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_293.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            [

            ]
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                [

                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          M.call (|
            "allocate_unbounded",
            [

            ]
          |)
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f3239335f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3239335f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3239335f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_293_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x1db6cb95),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_h",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x305ea364),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_f",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xe62c3a6a),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_g",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            [

            ]
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_struct_S1_calldata",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "end" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    [Literal.number 64]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.get (| "offset" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint32",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_uint32",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_uint32",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_uint32",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_uint32",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_struct_S1_calldatat_uint32",
          ["headStart"; "dataEnd"],
          ["value0";
      "value1"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 64]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                M.call (|
                  "calldataload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_struct_S1_calldata",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset_1"],
                [Literal.number 32]
              |) in
            let _ :=
              M.declare (|
                ["value1"],
                M.call (|
                  "abi_decode_uint32",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset_1" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint32",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint32",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint128",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffffffffffffffffffffffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint128",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint128",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint32_uint128_uint256_uint256_uint32",
          ["headStart"; "value0"; "value1"; "value2"; "value3"; "value4"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 160]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint32",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint128",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value2" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 64]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value3" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 96]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint32",
                [
                  M.get (| "value4" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 128]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_h",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"],
                M.call (|
                  "abi_decode_struct_S1_calldatat_uint32",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"; "ret_2"; "ret_3"; "ret_4"],
                M.call (|
                  "fun_h",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_uint32_uint128_uint256_uint256_uint32",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |);
                    M.get (| "ret_2" |);
                    M.get (| "ret_3" |);
                    M.get (| "ret_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_f",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"],
                M.call (|
                  "abi_decode_struct_S1_calldatat_uint32",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"; "ret_2"; "ret_3"; "ret_4"],
                M.call (|
                  "fun_f",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_uint32_uint128_uint256_uint256_uint32",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |);
                    M.get (| "ret_2" |);
                    M.get (| "ret_3" |);
                    M.get (| "ret_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_struct_S2_calldata",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "end" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.get (| "offset" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_struct_S2_calldata_ptr",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                M.call (|
                  "calldataload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_struct_S2_calldata",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint128_uint256_uint256_uint32",
          ["headStart"; "value0"; "value1"; "value2"; "value3"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 128]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint128",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value2" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 64]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint32",
                [
                  M.get (| "value3" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 96]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_g",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"],
                M.call (|
                  "abi_decode_struct_S2_calldata_ptr",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"; "ret_2"; "ret_3"],
                M.call (|
                  "fun_g",
                  [
                    M.get (| "param" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_uint128_uint256_uint256_uint32",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |);
                    M.get (| "ret_2" |);
                    M.get (| "ret_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint32",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint128",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_356d538aaf70fba12156cc466564b792649f8f3befb07b071c91142253e175ad",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_1e55d03107e9c4f1b5e21c76a16fba166a461117ab153bcce65e6a4ea8e5fc8a",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_977805620ff29572292dee35f70b0f3f3f73d3fdd0e9f4d7a901c2e43ab18a2e",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "access_calldata_tail_struct_S_calldata",
          ["base_ref"; "ptr_to_tail"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["rel_offset_of_tail"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "ptr_to_tail" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.get (| "rel_offset_of_tail" |);
                        M.call (|
                          "sub",
                          [
                            M.call (|
                              "sub",
                              [
                                M.call (|
                                  "calldatasize",
                                  [

                                  ]
                                |);
                                M.get (| "base_ref" |)
                              ]
                            |);
                            M.call (|
                              "sub",
                              [
                                [Literal.number 0x60];
                                [Literal.number 1]
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_356d538aaf70fba12156cc466564b792649f8f3befb07b071c91142253e175ad",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "base_ref" |);
                    M.get (| "rel_offset_of_tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "round_up_to_mul_of",
          ["value"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "and",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 31]
                      ]
                    |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 31]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "finalize_allocation",
          ["memPtr"; "size"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["newFreePtr"],
                M.call (|
                  "add",
                  [
                    M.get (| "memPtr" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "size" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "newFreePtr" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "newFreePtr" |);
                        M.get (| "memPtr" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 64];
                  M.get (| "newFreePtr" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory",
          ["size"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "memPtr" |);
                  M.get (| "size" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_uint128",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_uint128",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_uint128",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_uint128",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_array_array_uint256_dyn",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "mul",
                  [
                    M.get (| "length" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_array_uint256_dyn",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "mul",
                  [
                    M.get (| "length" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "add",
                  [
                    M.get (| "size" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_uint256",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_uint256",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_uint256",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_available_length_array_uint256_dyn",
          ["offset"; "length"; "end"],
          ["array"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["array"],
                M.call (|
                  "allocate_memory",
                  [
                    M.call (|
                      "array_allocation_size_array_uint256_dyn",
                      [
                        M.get (| "length" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["dst"],
                M.get (| "array" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "array" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["dst"],
                M.call (|
                  "add",
                  [
                    M.get (| "array" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["srcEnd"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "length" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "srcEnd" |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["src"],
                M.get (| "offset" |)
              |) in
            let _ :=
              M.for (|
                tt,
                M.call (|
                  "lt",
                  [
                    M.get (| "src" |);
                    M.get (| "srcEnd" |)
                  ]
                |),
                let _ :=
                  M.declare (|
                    ["src"],
                    M.call (|
                      "add",
                      [
                        M.get (| "src" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                tt,
                let _ :=
                  M.assign (|
                    ["elementPos"],
                    M.get (| "src" |)
                  |) in
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.get (| "dst" |);
                      M.call (|
                        "abi_decode_uint256",
                        [
                          M.get (| "elementPos" |);
                          M.get (| "end" |)
                        ]
                      |)
                    ]
                  |) in
                let _ :=
                  M.declare (|
                    ["dst"],
                    M.call (|
                      "add",
                      [
                        M.get (| "dst" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                tt
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_uint256_dyn",
          ["offset"; "end"],
          ["array"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "offset" |);
                            [Literal.number 0x1f]
                          ]
                        |);
                        M.get (| "end" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["length"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["array"],
                M.call (|
                  "abi_decode_available_length_array_uint256_dyn",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "offset" |);
                        [Literal.number 0x20]
                      ]
                    |);
                    M.get (| "length" |);
                    M.get (| "end" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_available_length_array_array_uint256_dyn",
          ["offset"; "length"; "end"],
          ["array"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["array"],
                M.call (|
                  "allocate_memory",
                  [
                    M.call (|
                      "array_allocation_size_array_array_uint256_dyn",
                      [
                        M.get (| "length" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["dst"],
                M.get (| "array" |)
              |) in
            let _ :=
              M.assign (|
                ["srcEnd"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "length" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "srcEnd" |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["src"],
                M.get (| "offset" |)
              |) in
            let _ :=
              M.for (|
                tt,
                M.call (|
                  "lt",
                  [
                    M.get (| "src" |);
                    M.get (| "srcEnd" |)
                  ]
                |),
                let _ :=
                  M.declare (|
                    ["src"],
                    M.call (|
                      "add",
                      [
                        M.get (| "src" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                tt,
                let _ :=
                  M.assign (|
                    ["innerOffset"],
                    M.call (|
                      "calldataload",
                      [
                        M.get (| "src" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "gt",
                      [
                        M.get (| "innerOffset" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                          [

                          ]
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["elementPos"],
                    M.call (|
                      "add",
                      [
                        M.get (| "offset" |);
                        M.get (| "innerOffset" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.get (| "dst" |);
                      M.call (|
                        "abi_decode_array_uint256_dyn",
                        [
                          M.get (| "elementPos" |);
                          M.get (| "end" |)
                        ]
                      |)
                    ]
                  |) in
                let _ :=
                  M.declare (|
                    ["dst"],
                    M.call (|
                      "add",
                      [
                        M.get (| "dst" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                tt
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_array_uint256_dyn",
          ["offset"; "end"],
          ["array"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "offset" |);
                            [Literal.number 0x1f]
                          ]
                        |);
                        M.get (| "end" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["length"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.declare (|
                ["array"],
                M.call (|
                  "abi_decode_available_length_array_array_uint256_dyn",
                  [
                    M.get (| "offset" |);
                    M.get (| "length" |);
                    M.get (| "end" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_struct_S",
          ["headStart"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "end" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0x60]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "allocate_memory",
                  [
                    [Literal.number 0x60]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                [Literal.number 0]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 0x00]
                    ]
                  |);
                  M.call (|
                    "abi_decode_uint128",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "headStart" |);
                          M.get (| "offset" |)
                        ]
                      |);
                      M.get (| "end" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["offset_1"],
                M.call (|
                  "calldataload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 32]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "offset_1" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 0x20]
                    ]
                  |);
                  M.call (|
                    "abi_decode_array_array_uint256_dyn",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "headStart" |);
                          M.get (| "offset_1" |)
                        ]
                      |);
                      M.get (| "end" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["offset_2"],
                [Literal.number 64]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 0x40]
                    ]
                  |);
                  M.call (|
                    "abi_decode_uint32",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "headStart" |);
                          M.get (| "offset_2" |)
                        ]
                      |);
                      M.get (| "end" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_struct_S_calldata_to_struct_S",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "abi_decode_struct_S",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x32",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x32]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_array_uint256_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x02]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "memory_array_index_access_array_uint256_dyn",
          ["baseRef"; "index"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.call (|
                          "array_length_array_array_uint256_dyn",
                          [
                            M.get (| "baseRef" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                M.call (|
                  "mul",
                  [
                    M.get (| "index" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "baseRef" |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint256_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "memory_array_index_access_uint256_dyn",
          ["baseRef"; "index"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.call (|
                          "array_length_array_uint256_dyn",
                          [
                            M.get (| "baseRef" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                M.call (|
                  "mul",
                  [
                    M.get (| "index" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "baseRef" |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_memoryt_uint256",
          ["ptr"],
          ["returnValue"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["value"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "mload",
                      [
                        M.get (| "ptr" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["returnValue"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "access_calldata_tail_array_array_uint256_dyn_calldata_calldata",
          ["base_ref"; "ptr_to_tail"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["rel_offset_of_tail"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "ptr_to_tail" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.get (| "rel_offset_of_tail" |);
                        M.call (|
                          "sub",
                          [
                            M.call (|
                              "sub",
                              [
                                M.call (|
                                  "calldatasize",
                                  [

                                  ]
                                |);
                                M.get (| "base_ref" |)
                              ]
                            |);
                            M.call (|
                              "sub",
                              [
                                [Literal.number 0x40];
                                [Literal.number 1]
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_356d538aaf70fba12156cc466564b792649f8f3befb07b071c91142253e175ad",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "base_ref" |);
                    M.get (| "rel_offset_of_tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "access_calldata_tail_array_uint256_dyn_calldata",
          ["base_ref"; "ptr_to_tail"],
          ["addr";
      "length"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["rel_offset_of_tail"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "ptr_to_tail" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.get (| "rel_offset_of_tail" |);
                        M.call (|
                          "sub",
                          [
                            M.call (|
                              "sub",
                              [
                                M.call (|
                                  "calldatasize",
                                  [

                                  ]
                                |);
                                M.get (| "base_ref" |)
                              ]
                            |);
                            M.call (|
                              "sub",
                              [
                                [Literal.number 0x20];
                                [Literal.number 1]
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_356d538aaf70fba12156cc466564b792649f8f3befb07b071c91142253e175ad",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "base_ref" |);
                    M.get (| "rel_offset_of_tail" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "addr" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_1e55d03107e9c4f1b5e21c76a16fba166a461117ab153bcce65e6a4ea8e5fc8a",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "addr" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "sgt",
                  [
                    M.get (| "addr" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "calldatasize",
                          [

                          ]
                        |);
                        M.call (|
                          "mul",
                          [
                            M.get (| "length" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_977805620ff29572292dee35f70b0f3f3f73d3fdd0e9f4d7a901c2e43ab18a2e",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "calldata_array_index_access_uint256_dyn_calldata_calldata",
          ["base_ref"; "index"],
          ["addr";
      "len"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        [Literal.number 0x02]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "base_ref" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 32]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"; "len"],
                M.call (|
                  "access_calldata_tail_array_uint256_dyn_calldata",
                  [
                    M.get (| "base_ref" |);
                    M.get (| "addr" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "calldata_array_index_access_uint256_dyn_calldata",
          ["base_ref"; "length"; "index"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "length" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "base_ref" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 32]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_calldatat_uint256",
          ["ptr"],
          ["returnValue"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["value"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "ptr" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_uint256",
                [
                  M.get (| "value" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["returnValue"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x01",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x01]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "assert_helper",
          ["condition"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "condition" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x01",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_memoryt_uint128",
          ["ptr"],
          ["returnValue"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["value"],
                M.call (|
                  "cleanup_uint128",
                  [
                    M.call (|
                      "mload",
                      [
                        M.get (| "ptr" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["returnValue"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_memoryt_uint32",
          ["ptr"],
          ["returnValue"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["value"],
                M.call (|
                  "cleanup_uint32",
                  [
                    M.call (|
                      "mload",
                      [
                        M.get (| "ptr" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["returnValue"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_h",
          ["var_c_offset"; "var_p"],
          ["var";
      "var_1";
      "var_2";
      "var_3";
      "var_4"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_t_uint32"],
                M.call (|
                  "zero_value_for_split_uint32",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_t_uint32" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint128"],
                M.call (|
                  "zero_value_for_split_uint128",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_1"],
                M.get (| "zero_uint128" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_2"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_1"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_3"],
                M.get (| "zero_uint256_1" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint32"],
                M.call (|
                  "zero_value_for_split_uint32",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_4"],
                M.get (| "zero_uint32" |)
              |) in
            let _ :=
              M.assign (|
                ["_6_offset"],
                M.get (| "var_c_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_235_offset"],
                M.get (| "_6_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_235_offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_236_offset"],
                M.call (|
                  "access_calldata_tail_struct_S_calldata",
                  [
                    M.get (| "expr_235_offset" |);
                    M.get (| "_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["var_m_234_mpos"],
                M.call (|
                  "convert_struct_S_calldata_to_struct_S",
                  [
                    M.get (| "expr_236_offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_8_mpos"],
                M.get (| "var_m_234_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_239_mpos"],
                M.get (| "_8_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_239_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_10_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_240_mpos"],
                M.get (| "_10_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_11_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_array_uint256_dyn",
                      [
                        M.get (| "expr_240_mpos" |);
                        M.call (|
                          "convert_t_rational_by_to_t_uint256",
                          [
                            M.get (| "expr" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_242_mpos"],
                M.get (| "_11_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.call (|
                      "memory_array_index_access_uint256_dyn",
                      [
                        M.get (| "expr_242_mpos" |);
                        M.call (|
                          "convert_t_rational_by_to_t_uint256",
                          [
                            M.get (| "expr_1" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.get (| "_3" |)
              |) in
            let _ :=
              M.assign (|
                ["_13_offset"],
                M.get (| "var_c_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_245_offset"],
                M.get (| "_13_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_245_offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_246_offset"],
                M.call (|
                  "access_calldata_tail_struct_S_calldata",
                  [
                    M.get (| "expr_245_offset" |);
                    M.get (| "_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_246_offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_247_offset"],
                M.call (|
                  "access_calldata_tail_array_array_uint256_dyn_calldata_calldata",
                  [
                    M.get (| "expr_246_offset" |);
                    M.get (| "_5" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_249_offset"; "expr_249_length"],
                M.call (|
                  "calldata_array_index_access_uint256_dyn_calldata_calldata",
                  [
                    M.get (| "expr_247_offset" |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_3" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                M.call (|
                  "read_from_calldatat_uint256",
                  [
                    M.call (|
                      "calldata_array_index_access_uint256_dyn_calldata",
                      [
                        M.get (| "expr_249_offset" |);
                        M.get (| "expr_249_length" |);
                        M.call (|
                          "convert_t_rational_by_to_t_uint256",
                          [
                            M.get (| "expr_4" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_2" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_5" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_6" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_16_mpos"],
                M.get (| "var_m_234_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_256_mpos"],
                M.get (| "_16_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_256_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_18_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_6" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_257_mpos"],
                M.get (| "_18_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_19_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_array_uint256_dyn",
                      [
                        M.get (| "expr_257_mpos" |);
                        M.call (|
                          "convert_rational_by_to_uint256",
                          [
                            M.get (| "expr_7" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_259_mpos"],
                M.get (| "_19_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.call (|
                      "memory_array_index_access_uint256_dyn",
                      [
                        M.get (| "expr_259_mpos" |);
                        M.call (|
                          "convert_rational_by_to_uint256",
                          [
                            M.get (| "expr_8" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                M.get (| "_7" |)
              |) in
            let _ :=
              M.assign (|
                ["_21_offset"],
                M.get (| "var_c_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_262_offset"],
                M.get (| "_21_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_262_offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_263_offset"],
                M.call (|
                  "access_calldata_tail_struct_S_calldata",
                  [
                    M.get (| "expr_262_offset" |);
                    M.get (| "_8" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_263_offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_264_offset"],
                M.call (|
                  "access_calldata_tail_array_array_uint256_dyn_calldata_calldata",
                  [
                    M.get (| "expr_263_offset" |);
                    M.get (| "_9" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_266_offset"; "expr_266_length"],
                M.call (|
                  "calldata_array_index_access_uint256_dyn_calldata_calldata",
                  [
                    M.get (| "expr_264_offset" |);
                    M.call (|
                      "convert_rational_by_to_uint256",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                M.call (|
                  "read_from_calldatat_uint256",
                  [
                    M.call (|
                      "calldata_array_index_access_uint256_dyn_calldata",
                      [
                        M.get (| "expr_266_offset" |);
                        M.get (| "expr_266_length" |);
                        M.call (|
                          "convert_rational_by_to_uint256",
                          [
                            M.get (| "expr_11" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_12" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_13" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_10"],
                M.get (| "var_p" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                M.get (| "_10" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_component"],
                M.get (| "expr_14" |)
              |) in
            let _ :=
              M.assign (|
                ["_25_mpos"],
                M.get (| "var_m_234_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_273_mpos"],
                M.get (| "_25_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_11"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_273_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_12"],
                M.call (|
                  "read_from_memoryt_uint128",
                  [
                    M.get (| "_11" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                M.get (| "_12" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_component_1"],
                M.get (| "expr_15" |)
              |) in
            let _ :=
              M.assign (|
                ["_28_mpos"],
                M.get (| "var_m_234_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_275_mpos"],
                M.get (| "_28_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_13"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_275_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_30_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_13" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_276_mpos"],
                M.get (| "_30_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_31_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_array_uint256_dyn",
                      [
                        M.get (| "expr_276_mpos" |);
                        M.call (|
                          "convert_t_rational_by_to_t_uint256",
                          [
                            M.get (| "expr_16" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_278_mpos"],
                M.get (| "_31_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_14"],
                M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.call (|
                      "memory_array_index_access_uint256_dyn",
                      [
                        M.get (| "expr_278_mpos" |);
                        M.call (|
                          "convert_t_rational_by_to_t_uint256",
                          [
                            M.get (| "expr_17" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                M.get (| "_14" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_component_2"],
                M.get (| "expr_18" |)
              |) in
            let _ :=
              M.assign (|
                ["_33_mpos"],
                M.get (| "var_m_234_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_281_mpos"],
                M.get (| "_33_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_15"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_281_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_35_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_15" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_282_mpos"],
                M.get (| "_35_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_36_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_array_uint256_dyn",
                      [
                        M.get (| "expr_282_mpos" |);
                        M.call (|
                          "convert_rational_by_to_uint256",
                          [
                            M.get (| "expr_19" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_284_mpos"],
                M.get (| "_36_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_16"],
                M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.call (|
                      "memory_array_index_access_uint256_dyn",
                      [
                        M.get (| "expr_284_mpos" |);
                        M.call (|
                          "convert_rational_by_to_uint256",
                          [
                            M.get (| "expr_20" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                M.get (| "_16" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_component_3"],
                M.get (| "expr_21" |)
              |) in
            let _ :=
              M.assign (|
                ["_38_mpos"],
                M.get (| "var_m_234_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_287_mpos"],
                M.get (| "_38_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_17"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_287_mpos" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_18"],
                M.call (|
                  "read_from_memoryt_uint32",
                  [
                    M.get (| "_17" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                M.get (| "_18" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_component_4"],
                M.get (| "expr_22" |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_component" |)
              |) in
            let _ :=
              M.declare (|
                ["var_1"],
                M.get (| "expr_component_1" |)
              |) in
            let _ :=
              M.declare (|
                ["var_2"],
                M.get (| "expr_component_2" |)
              |) in
            let _ :=
              M.declare (|
                ["var_3"],
                M.get (| "expr_component_3" |)
              |) in
            let _ :=
              M.declare (|
                ["var_4"],
                M.get (| "expr_component_4" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_struct_S1",
          ["headStart"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "end" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0x40]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "allocate_memory",
                  [
                    [Literal.number 0x40]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                [Literal.number 0]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 0x00]
                    ]
                  |);
                  M.call (|
                    "abi_decode_uint128",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "headStart" |);
                          M.get (| "offset" |)
                        ]
                      |);
                      M.get (| "end" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["offset_1"],
                M.call (|
                  "calldataload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 32]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "offset_1" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 0x20]
                    ]
                  |);
                  M.call (|
                    "abi_decode_struct_S",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "headStart" |);
                          M.get (| "offset_1" |)
                        ]
                      |);
                      M.get (| "end" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_struct_S1_calldata_to_struct_S1",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "abi_decode_struct_S1",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_f",
          ["var_c_38_offset"; "var_p"],
          ["var_";
      "var";
      "var_1";
      "var_2";
      "var_3"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint32"],
                M.call (|
                  "zero_value_for_split_uint32",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "zero_uint32" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_t_uint128"],
                M.call (|
                  "zero_value_for_split_uint128",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_t_uint128" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_1"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_1"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_2"],
                M.get (| "zero_uint256_1" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint32_1"],
                M.call (|
                  "zero_value_for_split_uint32",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_3"],
                M.get (| "zero_uint32_1" |)
              |) in
            let _ :=
              M.assign (|
                ["_46_offset"],
                M.get (| "var_c_38_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_57_offset"],
                M.get (| "_46_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_58_offset"],
                M.call (|
                  "fun_f1",
                  [
                    M.get (| "expr_57_offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["var_m_55_mpos"],
                M.call (|
                  "convert_struct_S1_calldata_to_struct_S1",
                  [
                    M.get (| "expr_58_offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_47_mpos"],
                M.get (| "var_m_55_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_61_mpos"],
                M.get (| "_47_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_61_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_49_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_62_mpos"],
                M.get (| "_49_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_62_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_51_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_63_mpos"],
                M.get (| "_51_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_52_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_array_uint256_dyn",
                      [
                        M.get (| "expr_63_mpos" |);
                        M.call (|
                          "convert_t_rational_by_to_t_uint256",
                          [
                            M.get (| "expr" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_65_mpos"],
                M.get (| "_52_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.call (|
                      "memory_array_index_access_uint256_dyn",
                      [
                        M.get (| "expr_65_mpos" |);
                        M.call (|
                          "convert_t_rational_by_to_t_uint256",
                          [
                            M.get (| "expr_1" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.get (| "_3" |)
              |) in
            let _ :=
              M.assign (|
                ["_54_offset"],
                M.get (| "var_c_38_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_offset"],
                M.get (| "_54_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_69_offset"],
                M.call (|
                  "access_calldata_tail_struct_S_calldata",
                  [
                    M.get (| "expr_offset" |);
                    M.get (| "_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_69_offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_70_offset"],
                M.call (|
                  "access_calldata_tail_array_array_uint256_dyn_calldata_calldata",
                  [
                    M.get (| "expr_69_offset" |);
                    M.get (| "_5" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_72_offset"; "expr_length"],
                M.call (|
                  "calldata_array_index_access_uint256_dyn_calldata_calldata",
                  [
                    M.get (| "expr_70_offset" |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_3" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                M.call (|
                  "read_from_calldatat_uint256",
                  [
                    M.call (|
                      "calldata_array_index_access_uint256_dyn_calldata",
                      [
                        M.get (| "expr_72_offset" |);
                        M.get (| "expr_length" |);
                        M.call (|
                          "convert_t_rational_by_to_t_uint256",
                          [
                            M.get (| "expr_4" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_2" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_5" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_6" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_57_mpos"],
                M.get (| "var_m_55_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_79_mpos"],
                M.get (| "_57_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_79_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_59_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_6" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_80_mpos"],
                M.get (| "_59_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_80_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_61_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_7" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_81_mpos"],
                M.get (| "_61_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_62_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_array_uint256_dyn",
                      [
                        M.get (| "expr_81_mpos" |);
                        M.call (|
                          "convert_rational_by_to_uint256",
                          [
                            M.get (| "expr_7" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_83_mpos"],
                M.get (| "_62_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.call (|
                      "memory_array_index_access_uint256_dyn",
                      [
                        M.get (| "expr_83_mpos" |);
                        M.call (|
                          "convert_rational_by_to_uint256",
                          [
                            M.get (| "expr_8" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                M.get (| "_8" |)
              |) in
            let _ :=
              M.assign (|
                ["_64_offset"],
                M.get (| "var_c_38_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_86_offset"],
                M.get (| "_64_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_86_offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_87_offset"],
                M.call (|
                  "access_calldata_tail_struct_S_calldata",
                  [
                    M.get (| "expr_86_offset" |);
                    M.get (| "_9" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_10"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_87_offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_88_offset"],
                M.call (|
                  "access_calldata_tail_array_array_uint256_dyn_calldata_calldata",
                  [
                    M.get (| "expr_87_offset" |);
                    M.get (| "_10" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_90_offset"; "expr_90_length"],
                M.call (|
                  "calldata_array_index_access_uint256_dyn_calldata_calldata",
                  [
                    M.get (| "expr_88_offset" |);
                    M.call (|
                      "convert_rational_by_to_uint256",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                M.call (|
                  "read_from_calldatat_uint256",
                  [
                    M.call (|
                      "calldata_array_index_access_uint256_dyn_calldata",
                      [
                        M.get (| "expr_90_offset" |);
                        M.get (| "expr_90_length" |);
                        M.call (|
                          "convert_rational_by_to_uint256",
                          [
                            M.get (| "expr_11" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_12" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_13" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_11"],
                M.get (| "var_p" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                M.get (| "_11" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_117_component"],
                M.get (| "expr_14" |)
              |) in
            let _ :=
              M.assign (|
                ["_68_mpos"],
                M.get (| "var_m_55_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_97_mpos"],
                M.get (| "_68_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_12"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_97_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_70_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_12" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_98_mpos"],
                M.get (| "_70_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_13"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_98_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_14"],
                M.call (|
                  "read_from_memoryt_uint128",
                  [
                    M.get (| "_13" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                M.get (| "_14" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_117_component_1"],
                M.get (| "expr_15" |)
              |) in
            let _ :=
              M.assign (|
                ["_73_mpos"],
                M.get (| "var_m_55_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_100_mpos"],
                M.get (| "_73_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_15"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_100_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_75_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_15" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_101_mpos"],
                M.get (| "_75_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_16"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_101_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_77_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_16" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_102_mpos"],
                M.get (| "_77_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_78_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_array_uint256_dyn",
                      [
                        M.get (| "expr_102_mpos" |);
                        M.call (|
                          "convert_t_rational_by_to_t_uint256",
                          [
                            M.get (| "expr_16" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_104_mpos"],
                M.get (| "_78_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_17"],
                M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.call (|
                      "memory_array_index_access_uint256_dyn",
                      [
                        M.get (| "expr_104_mpos" |);
                        M.call (|
                          "convert_t_rational_by_to_t_uint256",
                          [
                            M.get (| "expr_17" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                M.get (| "_17" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_117_component_2"],
                M.get (| "expr_18" |)
              |) in
            let _ :=
              M.assign (|
                ["_80_mpos"],
                M.get (| "var_m_55_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_107_mpos"],
                M.get (| "_80_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_18"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_107_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_82_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_18" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_108_mpos"],
                M.get (| "_82_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_19"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_108_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_84_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_19" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_109_mpos"],
                M.get (| "_84_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_85_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_array_uint256_dyn",
                      [
                        M.get (| "expr_109_mpos" |);
                        M.call (|
                          "convert_rational_by_to_uint256",
                          [
                            M.get (| "expr_19" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_111_mpos"],
                M.get (| "_85_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_20"],
                M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.call (|
                      "memory_array_index_access_uint256_dyn",
                      [
                        M.get (| "expr_111_mpos" |);
                        M.call (|
                          "convert_rational_by_to_uint256",
                          [
                            M.get (| "expr_20" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                M.get (| "_20" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_117_component_3"],
                M.get (| "expr_21" |)
              |) in
            let _ :=
              M.assign (|
                ["_87_mpos"],
                M.get (| "var_m_55_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_114_mpos"],
                M.get (| "_87_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_21"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_114_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_89_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_21" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_115_mpos"],
                M.get (| "_89_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_22"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_115_mpos" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_23"],
                M.call (|
                  "read_from_memoryt_uint32",
                  [
                    M.get (| "_22" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                M.get (| "_23" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_117_component_4"],
                M.get (| "expr_22" |)
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "expr_117_component" |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_117_component_1" |)
              |) in
            let _ :=
              M.declare (|
                ["var_1"],
                M.get (| "expr_117_component_2" |)
              |) in
            let _ :=
              M.declare (|
                ["var_2"],
                M.get (| "expr_117_component_3" |)
              |) in
            let _ :=
              M.declare (|
                ["var_3"],
                M.get (| "expr_117_component_4" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_array_struct_S",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "mul",
                  [
                    M.get (| "length" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_available_length_array_struct_S",
          ["offset"; "length"; "end"],
          ["array"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["array"],
                M.call (|
                  "allocate_memory",
                  [
                    M.call (|
                      "array_allocation_size_array_struct_S",
                      [
                        M.get (| "length" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["dst"],
                M.get (| "array" |)
              |) in
            let _ :=
              M.assign (|
                ["srcEnd"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "length" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "srcEnd" |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["src"],
                M.get (| "offset" |)
              |) in
            let _ :=
              M.for (|
                tt,
                M.call (|
                  "lt",
                  [
                    M.get (| "src" |);
                    M.get (| "srcEnd" |)
                  ]
                |),
                let _ :=
                  M.declare (|
                    ["src"],
                    M.call (|
                      "add",
                      [
                        M.get (| "src" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                tt,
                let _ :=
                  M.assign (|
                    ["innerOffset"],
                    M.call (|
                      "calldataload",
                      [
                        M.get (| "src" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "gt",
                      [
                        M.get (| "innerOffset" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                          [

                          ]
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["elementPos"],
                    M.call (|
                      "add",
                      [
                        M.get (| "offset" |);
                        M.get (| "innerOffset" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.get (| "dst" |);
                      M.call (|
                        "abi_decode_struct_S",
                        [
                          M.get (| "elementPos" |);
                          M.get (| "end" |)
                        ]
                      |)
                    ]
                  |) in
                let _ :=
                  M.declare (|
                    ["dst"],
                    M.call (|
                      "add",
                      [
                        M.get (| "dst" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                tt
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_struct_S",
          ["offset"; "end"],
          ["array"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "offset" |);
                            [Literal.number 0x1f]
                          ]
                        |);
                        M.get (| "end" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["length"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.declare (|
                ["array"],
                M.call (|
                  "abi_decode_available_length_array_struct_S",
                  [
                    M.get (| "offset" |);
                    M.get (| "length" |);
                    M.get (| "end" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_struct_S2",
          ["headStart"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "end" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0x20]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "allocate_memory",
                  [
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                M.call (|
                  "calldataload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 0x00]
                    ]
                  |);
                  M.call (|
                    "abi_decode_array_struct_S",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "headStart" |);
                          M.get (| "offset" |)
                        ]
                      |);
                      M.get (| "end" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_struct_S2_calldata_to_struct_S2",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "abi_decode_struct_S2",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_struct_S",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x02]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "memory_array_index_access_struct_S",
          ["baseRef"; "index"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.call (|
                          "array_length_array_struct_S",
                          [
                            M.get (| "baseRef" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                M.call (|
                  "mul",
                  [
                    M.get (| "index" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "baseRef" |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "access_calldata_tail_array_struct_S_calldata_calldata",
          ["base_ref"; "ptr_to_tail"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["rel_offset_of_tail"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "ptr_to_tail" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.get (| "rel_offset_of_tail" |);
                        M.call (|
                          "sub",
                          [
                            M.call (|
                              "sub",
                              [
                                M.call (|
                                  "calldatasize",
                                  [

                                  ]
                                |);
                                M.get (| "base_ref" |)
                              ]
                            |);
                            M.call (|
                              "sub",
                              [
                                [Literal.number 0x40];
                                [Literal.number 1]
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_356d538aaf70fba12156cc466564b792649f8f3befb07b071c91142253e175ad",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "base_ref" |);
                    M.get (| "rel_offset_of_tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "calldata_array_index_access_struct_S_calldata_calldata",
          ["base_ref"; "index"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        [Literal.number 0x02]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "base_ref" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 32]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "access_calldata_tail_struct_S_calldata",
                  [
                    M.get (| "base_ref" |);
                    M.get (| "addr" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_g",
          ["var_c_123_offset"],
          ["var";
      "var_1";
      "var_2";
      "var_3"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint128"],
                M.call (|
                  "zero_value_for_split_uint128",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_uint128" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_t_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_1"],
                M.get (| "zero_t_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_2"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint32"],
                M.call (|
                  "zero_value_for_split_uint32",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_3"],
                M.get (| "zero_uint32" |)
              |) in
            let _ :=
              M.assign (|
                ["_96_offset"],
                M.get (| "var_c_123_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_137_offset"],
                M.get (| "_96_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["var_m_mpos"],
                M.call (|
                  "convert_struct_S2_calldata_to_struct_S2",
                  [
                    M.get (| "expr_137_offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_97_mpos"],
                M.get (| "var_m_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_140_mpos"],
                M.get (| "_97_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_140_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_99_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_141_mpos"],
                M.get (| "_99_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_100_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S",
                      [
                        M.get (| "expr_141_mpos" |);
                        M.call (|
                          "convert_t_rational_by_to_t_uint256",
                          [
                            M.get (| "expr" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_143_mpos"],
                M.get (| "_100_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_143_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_102_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_144_mpos"],
                M.get (| "_102_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_103_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_array_uint256_dyn",
                      [
                        M.get (| "expr_144_mpos" |);
                        M.call (|
                          "convert_t_rational_by_to_t_uint256",
                          [
                            M.get (| "expr_1" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_146_mpos"],
                M.get (| "_103_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.call (|
                      "memory_array_index_access_uint256_dyn",
                      [
                        M.get (| "expr_146_mpos" |);
                        M.call (|
                          "convert_t_rational_by_to_t_uint256",
                          [
                            M.get (| "expr_2" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.get (| "_3" |)
              |) in
            let _ :=
              M.assign (|
                ["_offset"],
                M.get (| "var_c_123_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_149_offset"],
                M.get (| "_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_149_offset" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_150_offset"],
                M.call (|
                  "access_calldata_tail_array_struct_S_calldata_calldata",
                  [
                    M.get (| "expr_149_offset" |);
                    M.get (| "_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_152_offset"],
                M.call (|
                  "calldata_array_index_access_struct_S_calldata_calldata",
                  [
                    M.get (| "expr_150_offset" |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_4" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_152_offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_153_offset"],
                M.call (|
                  "access_calldata_tail_array_array_uint256_dyn_calldata_calldata",
                  [
                    M.get (| "expr_152_offset" |);
                    M.get (| "_5" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_155_offset"; "expr_155_length"],
                M.call (|
                  "calldata_array_index_access_uint256_dyn_calldata_calldata",
                  [
                    M.get (| "expr_153_offset" |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_5" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                M.call (|
                  "read_from_calldatat_uint256",
                  [
                    M.call (|
                      "calldata_array_index_access_uint256_dyn_calldata",
                      [
                        M.get (| "expr_155_offset" |);
                        M.get (| "expr_155_length" |);
                        M.call (|
                          "convert_t_rational_by_to_t_uint256",
                          [
                            M.get (| "expr_6" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_3" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_7" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_8" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_108_mpos"],
                M.get (| "var_m_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_162_mpos"],
                M.get (| "_108_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_162_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_110_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_6" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_163_mpos"],
                M.get (| "_110_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_111_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S",
                      [
                        M.get (| "expr_163_mpos" |);
                        M.call (|
                          "convert_t_rational_by_to_t_uint256",
                          [
                            M.get (| "expr_9" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_165_mpos"],
                M.get (| "_111_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_165_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_7" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_166_mpos"],
                M.get (| "_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_114_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_array_uint256_dyn",
                      [
                        M.get (| "expr_166_mpos" |);
                        M.call (|
                          "convert_rational_by_to_uint256",
                          [
                            M.get (| "expr_10" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_mpos"],
                M.get (| "_114_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.call (|
                      "memory_array_index_access_uint256_dyn",
                      [
                        M.get (| "expr_mpos" |);
                        M.call (|
                          "convert_rational_by_to_uint256",
                          [
                            M.get (| "expr_11" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                M.get (| "_8" |)
              |) in
            let _ :=
              M.assign (|
                ["_116_offset"],
                M.get (| "var_c_123_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_171_offset"],
                M.get (| "_116_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_171_offset" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_172_offset"],
                M.call (|
                  "access_calldata_tail_array_struct_S_calldata_calldata",
                  [
                    M.get (| "expr_171_offset" |);
                    M.get (| "_9" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_174_offset"],
                M.call (|
                  "calldata_array_index_access_struct_S_calldata_calldata",
                  [
                    M.get (| "expr_172_offset" |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_13" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_10"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_174_offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_175_offset"],
                M.call (|
                  "access_calldata_tail_array_array_uint256_dyn_calldata_calldata",
                  [
                    M.get (| "expr_174_offset" |);
                    M.get (| "_10" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_177_offset"; "expr_177_length"],
                M.call (|
                  "calldata_array_index_access_uint256_dyn_calldata_calldata",
                  [
                    M.get (| "expr_175_offset" |);
                    M.call (|
                      "convert_rational_by_to_uint256",
                      [
                        M.get (| "expr_14" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                M.call (|
                  "read_from_calldatat_uint256",
                  [
                    M.call (|
                      "calldata_array_index_access_uint256_dyn_calldata",
                      [
                        M.get (| "expr_177_offset" |);
                        M.get (| "expr_177_length" |);
                        M.call (|
                          "convert_rational_by_to_uint256",
                          [
                            M.get (| "expr_15" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_12" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_16" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_17" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_119_mpos"],
                M.get (| "var_m_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_183_mpos"],
                M.get (| "_119_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_11"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_183_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_121_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_11" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_184_mpos"],
                M.get (| "_121_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_122_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S",
                      [
                        M.get (| "expr_184_mpos" |);
                        M.call (|
                          "convert_rational_by_to_uint256",
                          [
                            M.get (| "expr_18" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_186_mpos"],
                M.get (| "_122_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_12"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_186_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_13"],
                M.call (|
                  "read_from_memoryt_uint128",
                  [
                    M.get (| "_12" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                M.get (| "_13" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_211_component"],
                M.get (| "expr_19" |)
              |) in
            let _ :=
              M.assign (|
                ["_125_mpos"],
                M.get (| "var_m_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_188_mpos"],
                M.get (| "_125_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_14"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_188_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_127_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_14" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_189_mpos"],
                M.get (| "_127_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_128_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S",
                      [
                        M.get (| "expr_189_mpos" |);
                        M.call (|
                          "convert_rational_by_to_uint256",
                          [
                            M.get (| "expr_20" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_191_mpos"],
                M.get (| "_128_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_15"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_191_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_130_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_15" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_192_mpos"],
                M.get (| "_130_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_131_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_array_uint256_dyn",
                      [
                        M.get (| "expr_192_mpos" |);
                        M.call (|
                          "convert_t_rational_by_to_t_uint256",
                          [
                            M.get (| "expr_21" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_194_mpos"],
                M.get (| "_131_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_16"],
                M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.call (|
                      "memory_array_index_access_uint256_dyn",
                      [
                        M.get (| "expr_194_mpos" |);
                        M.call (|
                          "convert_t_rational_by_to_t_uint256",
                          [
                            M.get (| "expr_22" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                M.get (| "_16" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_211_component_1"],
                M.get (| "expr_23" |)
              |) in
            let _ :=
              M.assign (|
                ["_133_mpos"],
                M.get (| "var_m_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_197_mpos"],
                M.get (| "_133_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_17"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_197_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_135_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_17" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_198_mpos"],
                M.get (| "_135_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_136_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S",
                      [
                        M.get (| "expr_198_mpos" |);
                        M.call (|
                          "convert_rational_by_to_uint256",
                          [
                            M.get (| "expr_24" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_200_mpos"],
                M.get (| "_136_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_18"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_200_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_138_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_18" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_201_mpos"],
                M.get (| "_138_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_139_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_array_uint256_dyn",
                      [
                        M.get (| "expr_201_mpos" |);
                        M.call (|
                          "convert_rational_by_to_uint256",
                          [
                            M.get (| "expr_25" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_203_mpos"],
                M.get (| "_139_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_19"],
                M.call (|
                  "read_from_memoryt_uint256",
                  [
                    M.call (|
                      "memory_array_index_access_uint256_dyn",
                      [
                        M.get (| "expr_203_mpos" |);
                        M.call (|
                          "convert_rational_by_to_uint256",
                          [
                            M.get (| "expr_26" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                M.get (| "_19" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_component"],
                M.get (| "expr_27" |)
              |) in
            let _ :=
              M.assign (|
                ["_141_mpos"],
                M.get (| "var_m_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_206_mpos"],
                M.get (| "_141_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_20"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_206_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_143_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_20" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_207_mpos"],
                M.get (| "_143_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_144_mpos"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "memory_array_index_access_struct_S",
                      [
                        M.get (| "expr_207_mpos" |);
                        M.call (|
                          "convert_rational_by_to_uint256",
                          [
                            M.get (| "expr_28" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_209_mpos"],
                M.get (| "_144_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_21"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_209_mpos" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_22"],
                M.call (|
                  "read_from_memoryt_uint32",
                  [
                    M.get (| "_21" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                M.get (| "_22" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_211_component_2"],
                M.get (| "expr_29" |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_211_component" |)
              |) in
            let _ :=
              M.declare (|
                ["var_1"],
                M.get (| "expr_211_component_1" |)
              |) in
            let _ :=
              M.declare (|
                ["var_2"],
                M.get (| "expr_component" |)
              |) in
            let _ :=
              M.declare (|
                ["var_3"],
                M.get (| "expr_211_component_2" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_struct_S1_calldata",
          [],
          ["offset"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "calldatasize",
                  [

                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_f1",
          ["var_c_26_offset"],
          ["var_offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_struct_S1_calldata_offset"],
                M.call (|
                  "zero_value_for_split_struct_S1_calldata",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_offset"],
                M.get (| "zero_struct_S1_calldata_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["_148_offset"],
                M.get (| "var_c_26_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_32_offset"],
                M.get (| "_148_offset" |)
              |) in
            let _ :=
              M.declare (|
                ["var_offset"],
                M.get (| "expr_32_offset" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a2646970667358221220a4d77ff08d624504d40957a5e740dbfac0ba650de848f94a44436ca5ed96c13f64736f6c634300081b0033".
  End C_293_deployed.
End C_293.
