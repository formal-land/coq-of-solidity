(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module Test_140.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0xa0]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            []
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                []
              |) in
            tt
          ))
        |) in
      let _ :=
        M.call (|
          "constructor_Test",
          []
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          Some (M.call (|
            "allocate_unbounded",
            []
          |))
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "546573745f3134305f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "546573745f3134305f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "setimmutable",
          [
            M.get (| "_1" |);
            [Literal.string "3339"];
            M.call (|
              "mload",
              [
                [Literal.number 128]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "546573745f3134305f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "panic_error_0x41",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    [Literal.number 0x4e487b71]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 4];
                [Literal.number 0x41]
              ]
            |) in
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0x24]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_encode_tuple",
        ["headStart"],
        ["tail"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["tail"],
              M.call (|
                "add",
                [
                  M.get (| "headStart" |);
                  [Literal.number 0]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_forward",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["pos"],
              Some (M.call (|
                "allocate_unbounded",
                []
              |))
            |) in
          let _ :=
            M.call (|
              "returndatacopy",
              [
                M.get (| "pos" |);
                [Literal.number 0];
                M.call (|
                  "returndatasize",
                  []
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "revert",
              [
                M.get (| "pos" |);
                M.call (|
                  "returndatasize",
                  []
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "constructor_Test",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["_1"],
              Some (M.call (|
                "allocate_unbounded",
                []
              |))
            |) in
          let _ :=
            M.assign (|
              ["_2"],
              Some (M.call (|
                "add",
                [
                  M.get (| "_1" |);
                  M.call (|
                    "datasize",
                    [
                      [Literal.string "435f3332"]
                    ]
                  |)
                ]
              |))
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "or",
                [
                  M.call (|
                    "gt",
                    [
                      M.get (| "_2" |);
                      M.call (|
                        "sub",
                        [
                          M.call (|
                            "shl",
                            [
                              [Literal.number 64];
                              [Literal.number 1]
                            ]
                          |);
                          [Literal.number 1]
                        ]
                      |)
                    ]
                  |);
                  M.call (|
                    "lt",
                    [
                      M.get (| "_2" |);
                      M.get (| "_1" |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x41",
                    []
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.call (|
              "datacopy",
              [
                M.get (| "_1" |);
                M.call (|
                  "dataoffset",
                  [
                    [Literal.string "435f3332"]
                  ]
                |);
                M.call (|
                  "datasize",
                  [
                    [Literal.string "435f3332"]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["_2"],
              M.call (|
                "abi_encode_tuple",
                [
                  M.get (| "_2" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["expr_address"],
              Some (M.call (|
                "create",
                [
                  [Literal.number 0];
                  M.get (| "_1" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_2" |);
                      M.get (| "_1" |)
                    ]
                  |)
                ]
              |))
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.get (| "expr_address" |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "revert_forward",
                    []
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["_address"],
              Some (M.get (| "expr_address" |))
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 128];
                M.get (| "_address" |)
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module Test_140_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      []
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  Some (M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0xafb0db5f),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_random3",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xc5337ed4),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_random2",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xd24c5a36),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_random1",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xf8a8fd6d),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_test",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            []
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple",
          ["headStart"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_random3",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_tuple",
                  [
                    M.get (| "memPos" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_random2",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_tuple",
                  [
                    M.get (| "memPos" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_random1",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_tuple",
                  [
                    M.get (| "memPos" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bool",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "iszero",
                      [
                        M.get (| "value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bool_to_bool",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_bool",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bool",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_bool_to_bool",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_test",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_test",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_bool",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "round_up_to_mul_of",
          ["value"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "and",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 31]
                      ]
                    |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 31]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "finalize_allocation",
          ["memPtr"; "size"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["newFreePtr"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "memPtr" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "size" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "newFreePtr" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "newFreePtr" |);
                        M.get (| "memPtr" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 64];
                  M.get (| "newFreePtr" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory",
          ["size"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_unbounded",
                  []
                |)
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "memPtr" |);
                  M.get (| "size" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_array_function_external_nonpayable_returns_dyn",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "mul",
                  [
                    M.get (| "length" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "add",
                  [
                    M.get (| "size" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_array_array_function_external_nonpayable_returns_dyn",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["allocSize"],
                Some (M.call (|
                  "array_allocation_size_array_function_external_nonpayable_returns_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    M.get (| "allocSize" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.get (| "length" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_function_external_nonpayable_returns",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_complex_memory_array_array_function_external_nonpayable_returns_dyn",
          ["dataStart"; "dataSizeInBytes"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "dataSizeInBytes" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 32]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "dataStart" |);
                            M.get (| "i" |)
                          ]
                        |);
                        M.call (|
                          "zero_value_for_function_external_nonpayable_returns",
                          []
                        |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_and_zero_memory_array_array_function_external_nonpayable_returns_dyn",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_array_array_function_external_nonpayable_returns_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["dataStart"],
                Some (M.get (| "memPtr" |))
              |) in
            let _ :=
              M.assign (|
                ["dataSize"],
                Some (M.call (|
                  "array_allocation_size_array_function_external_nonpayable_returns_dyn",
                  [
                    M.get (| "length" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["dataStart"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["dataSize"],
                M.call (|
                  "sub",
                  [
                    M.get (| "dataSize" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "zero_complex_memory_array_array_function_external_nonpayable_returns_dyn",
                [
                  M.get (| "dataStart" |);
                  M.get (| "dataSize" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint160",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "shl",
                          [
                            [Literal.number 160];
                            [Literal.number 1]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint160_to_uint160",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint160",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint160",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint160_to_address",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_uint160",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_contract_Test_to_address",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_address",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x32",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x32]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_function_external_nonpayable_returns_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "memory_array_index_access_function_external_nonpayable_returns_dyn",
          ["baseRef"; "index"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.call (|
                          "array_length_array_function_external_nonpayable_returns_dyn",
                          [
                            M.get (| "baseRef" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some (M.call (|
                  "mul",
                  [
                    M.get (| "index" |);
                    [Literal.number 32]
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "baseRef" |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_0_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_32",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 32];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 64];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "combine_external_function_id",
          ["addr"; "selector"],
          ["combined"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["combined"],
                M.call (|
                  "shift_left",
                  [
                    M.call (|
                      "or",
                      [
                        M.call (|
                          "shift_left_32",
                          [
                            M.get (| "addr" |)
                          ]
                        |);
                        M.call (|
                          "and",
                          [
                            M.get (| "selector" |);
                            [Literal.number 0xffffffff]
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "write_to_memory_function_external_nonpayable_returns",
          ["memPtr"; "addr"; "selector"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "combine_external_function_id",
                    [
                      M.get (| "addr" |);
                      M.get (| "selector" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_2_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_contract_C_to_address",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_address",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_224",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bytes24",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_function_external_nonpayable_returns",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "cleanup_bytes24",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_function_external_nonpayable_returns",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_function_external_nonpayable_returns",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_function_external_nonpayable_returns_fromMemory",
          ["offset"; "end"],
          ["fun"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["fun"],
                M.call (|
                  "mload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_function_external_nonpayable_returns",
                [
                  M.get (| "fun" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_available_length_array_function_external_nonpayable_returns_dyn_fromMemory",
          ["offset"; "length"; "end"],
          ["array"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["array"],
                M.call (|
                  "allocate_memory",
                  [
                    M.call (|
                      "array_allocation_size_array_function_external_nonpayable_returns_dyn",
                      [
                        M.get (| "length" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["dst"],
                Some (M.get (| "array" |))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "array" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["dst"],
                M.call (|
                  "add",
                  [
                    M.get (| "array" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["srcEnd"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "length" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "srcEnd" |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["src"],
                Some (M.get (| "offset" |))
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "src" |);
                    M.get (| "srcEnd" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["src"],
                      M.call (|
                        "add",
                        [
                          M.get (| "src" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["elementPos"],
                      Some (M.get (| "src" |))
                    |) in
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.get (| "dst" |);
                        M.call (|
                          "abi_decode_function_external_nonpayable_returns_fromMemory",
                          [
                            M.get (| "elementPos" |);
                            M.get (| "end" |)
                          ]
                        |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["dst"],
                      M.call (|
                        "add",
                        [
                          M.get (| "dst" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_function_external_nonpayable_returns_dyn_fromMemory",
          ["offset"; "end"],
          ["array"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "offset" |);
                            [Literal.number 0x1f]
                          ]
                        |);
                        M.get (| "end" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "mload",
                  [
                    M.get (| "offset" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["array"],
                M.call (|
                  "abi_decode_available_length_array_function_external_nonpayable_returns_dyn_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "offset" |);
                        [Literal.number 0x20]
                      ]
                    |);
                    M.get (| "length" |);
                    M.get (| "end" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_struct_S_fromMemory",
          ["headStart"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "end" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0x20]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "allocate_memory",
                  [
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some (M.call (|
                  "mload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 0x00]
                    ]
                  |);
                  M.call (|
                    "abi_decode_array_function_external_nonpayable_returns_dyn_fromMemory",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "headStart" |);
                          M.get (| "offset" |)
                        ]
                      |);
                      M.get (| "end" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_struct_S_memory_ptr_fromMemory",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some (M.call (|
                  "mload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_struct_S_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_array_function_external_nonpayable_returns_dyn",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_function_external_nonpayable_returns_dyn",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_function_external_nonpayable_returns",
          ["addr_and_function_id"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_function_external_nonpayable_returns",
                    [
                      M.get (| "addr_and_function_id" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encodeUpdatedPos_function_external_nonpayable_returns",
          ["value0"; "pos"],
          ["updatedPos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "abi_encode_function_external_nonpayable_returns",
                [
                  M.get (| "value0" |);
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updatedPos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_nextElement_array_function_external_nonpayable_returns_dyn",
          ["ptr"],
          ["next"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["next"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_function_external_nonpayable_returns_dyn_memory_ptr",
          ["value"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_function_external_nonpayable_returns_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_function_external_nonpayable_returns_dyn",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["baseRef"],
                Some (M.call (|
                  "array_dataslot_array_function_external_nonpayable_returns_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.get (| "baseRef" |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["elementValue0"],
                      Some (M.call (|
                        "mload",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["pos"],
                      M.call (|
                        "abi_encodeUpdatedPos_function_external_nonpayable_returns",
                        [
                          M.get (| "elementValue0" |);
                          M.get (| "pos" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["srcPtr"],
                      M.call (|
                        "array_nextElement_array_function_external_nonpayable_returns_dyn",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_function_external_nonpayable_returns_dyn",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_array_function_external_nonpayable_returns_dyn_memory_ptr",
                  [
                    M.get (| "value0" |);
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_forward",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["pos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.call (|
                "returndatacopy",
                [
                  M.get (| "pos" |);
                  [Literal.number 0];
                  M.call (|
                    "returndatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "returndatasize",
                    []
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x01",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x01]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "assert_helper",
          ["condition"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "condition" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x01",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_32_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 32];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_64_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 64];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "split_external_function_id",
          ["combined"],
          ["addr";
      "selector"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["combined"],
                M.call (|
                  "shift_right_64_unsigned",
                  [
                    M.get (| "combined" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["selector"],
                M.call (|
                  "and",
                  [
                    M.get (| "combined" |);
                    [Literal.number 0xffffffff]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "shift_right_32_unsigned",
                  [
                    M.get (| "combined" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_memoryt_function_external_nonpayable_returns",
          ["ptr"],
          ["addr";
      "selector"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["value"],
                Some (M.call (|
                  "cleanup_function_external_nonpayable_returns",
                  [
                    M.call (|
                      "mload",
                      [
                        M.get (| "ptr" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["addr"; "selector"],
                M.call (|
                  "split_external_function_id",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_address",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "cleanup_uint160",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint32",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "externalFunctionPointersEqualFunction",
          ["leftAddress"; "leftSelector"; "rightAddress"; "rightSelector"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "and",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_address",
                          [
                            M.get (| "leftAddress" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_address",
                          [
                            M.get (| "rightAddress" |)
                          ]
                        |)
                      ]
                    |);
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_uint32",
                          [
                            M.get (| "leftSelector" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_uint32",
                          [
                            M.get (| "rightSelector" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_test",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0x03])
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.call (|
                  "convert_rational_by_to_uint256",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_55_mpos"],
                Some (M.call (|
                  "allocate_and_zero_memory_array_array_function_external_nonpayable_returns_dyn",
                  [
                    M.get (| "_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_functions_mpos"],
                Some (M.get (| "expr_55_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_60_address"],
                Some (M.call (|
                  "address",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_61_address"],
                Some (M.call (|
                  "convert_contract_Test_to_address",
                  [
                    M.get (| "expr_60_address" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_functionSelector"],
                Some ([Literal.number 0xd24c5a36])
              |) in
            let _ :=
              M.assign (|
                ["_3_mpos"],
                Some (M.get (| "var_functions_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_57_mpos"],
                Some (M.get (| "_3_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_4_address"],
                Some (M.get (| "expr_61_address" |))
              |) in
            let _ :=
              M.assign (|
                ["_4_functionSelector"],
                Some (M.get (| "expr_functionSelector" |))
              |) in
            let _ :=
              M.call (|
                "write_to_memory_function_external_nonpayable_returns",
                [
                  M.call (|
                    "memory_array_index_access_function_external_nonpayable_returns_dyn",
                    [
                      M.get (| "expr_57_mpos" |);
                      M.call (|
                        "convert_rational_0_by_1_to_uint256",
                        [
                          M.get (| "expr_1" |)
                        ]
                      |)
                    ]
                  |);
                  M.get (| "_4_address" |);
                  M.get (| "_4_functionSelector" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_67_address"],
                Some (M.call (|
                  "address",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_68_address"],
                Some (M.call (|
                  "convert_contract_Test_to_address",
                  [
                    M.get (| "expr_67_address" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_68_functionSelector"],
                Some ([Literal.number 0xc5337ed4])
              |) in
            let _ :=
              M.assign (|
                ["_5_mpos"],
                Some (M.get (| "var_functions_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_64_mpos"],
                Some (M.get (| "_5_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_6_address"],
                Some (M.get (| "expr_68_address" |))
              |) in
            let _ :=
              M.assign (|
                ["_6_functionSelector"],
                Some (M.get (| "expr_68_functionSelector" |))
              |) in
            let _ :=
              M.call (|
                "write_to_memory_function_external_nonpayable_returns",
                [
                  M.call (|
                    "memory_array_index_access_function_external_nonpayable_returns_dyn",
                    [
                      M.get (| "expr_64_mpos" |);
                      M.call (|
                        "convert_t_rational_by_to_t_uint256",
                        [
                          M.get (| "expr_2" |)
                        ]
                      |)
                    ]
                  |);
                  M.get (| "_6_address" |);
                  M.get (| "_6_functionSelector" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_74_address"],
                Some (M.call (|
                  "address",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_75_address"],
                Some (M.call (|
                  "convert_contract_Test_to_address",
                  [
                    M.get (| "expr_74_address" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_75_functionSelector"],
                Some ([Literal.number 0xafb0db5f])
              |) in
            let _ :=
              M.assign (|
                ["_mpos"],
                Some (M.get (| "var_functions_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_71_mpos"],
                Some (M.get (| "_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["_8_address"],
                Some (M.get (| "expr_75_address" |))
              |) in
            let _ :=
              M.assign (|
                ["_8_functionSelector"],
                Some (M.get (| "expr_75_functionSelector" |))
              |) in
            let _ :=
              M.call (|
                "write_to_memory_function_external_nonpayable_returns",
                [
                  M.call (|
                    "memory_array_index_access_function_external_nonpayable_returns_dyn",
                    [
                      M.get (| "expr_71_mpos" |);
                      M.call (|
                        "convert_rational_2_by_1_to_uint256",
                        [
                          M.get (| "expr_3" |)
                        ]
                      |)
                    ]
                  |);
                  M.get (| "_8_address" |);
                  M.get (| "_8_functionSelector" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_9_address"],
                Some (M.call (|
                  "loadimmutable",
                  [
                    [Literal.string "3339"]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_81_address"],
                Some (M.get (| "_9_address" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_82_address"],
                Some (M.call (|
                  "convert_contract_C_to_address",
                  [
                    M.get (| "expr_81_address" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_82_functionSelector"],
                Some ([Literal.number 0x2ed7fe6a])
              |) in
            let _ :=
              M.assign (|
                ["_10_mpos"],
                Some (M.get (| "var_functions_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_83_mpos"],
                Some (M.get (| "_10_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "_2" |);
                  M.call (|
                    "shift_left_224",
                    [
                      M.get (| "expr_82_functionSelector" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.call (|
                  "abi_encode_array_function_external_nonpayable_returns_dyn",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "_2" |);
                        [Literal.number 4]
                      ]
                    |);
                    M.get (| "expr_83_mpos" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.call (|
                  "call",
                  [
                    M.call (|
                      "gas",
                      []
                    |);
                    M.get (| "expr_82_address" |);
                    [Literal.number 0];
                    M.get (| "_2" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_3" |);
                        M.get (| "_2" |)
                      ]
                    |);
                    M.get (| "_2" |);
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "_4" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_forward",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_84_mpos"],
                None
              |) in
            let _ :=
              M.if_ (|
                M.get (| "_4" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_5"],
                      Some (M.call (|
                        "returndatasize",
                        []
                      |))
                    |) in
                  let _ :=
                    M.call (|
                      "returndatacopy",
                      [
                        M.get (| "_2" |);
                        [Literal.number 0];
                        M.get (| "_5" |)
                      ]
                    |) in
                  let _ :=
                    M.call (|
                      "finalize_allocation",
                      [
                        M.get (| "_2" |);
                        M.get (| "_5" |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_84_mpos"],
                      M.call (|
                        "abi_decode_struct_S_memory_ptr_fromMemory",
                        [
                          M.get (| "_2" |);
                          M.call (|
                            "add",
                            [
                              M.get (| "_2" |);
                              M.get (| "_5" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["var_ret_mpos"],
                Some (M.get (| "expr_84_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["_15_mpos"],
                Some (M.get (| "var_ret_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_87_mpos"],
                Some (M.get (| "_15_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_87_mpos" |);
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_17_mpos"],
                Some (M.call (|
                  "mload",
                  [
                    M.get (| "_6" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_88_mpos"],
                Some (M.get (| "_17_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.call (|
                  "array_length_array_function_external_nonpayable_returns_dyn",
                  [
                    M.get (| "expr_88_mpos" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some ([Literal.number 0x03])
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_4" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint256",
                      [
                        M.get (| "expr_5" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_6" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_18_mpos"],
                Some (M.get (| "var_ret_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_95_mpos"],
                Some (M.get (| "_18_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_95_mpos" |);
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_20_mpos"],
                Some (M.call (|
                  "mload",
                  [
                    M.get (| "_7" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_96_mpos"],
                Some (M.get (| "_20_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_21_address"; "_functionSelector"],
                Some (M.call (|
                  "read_from_memoryt_function_external_nonpayable_returns",
                  [
                    M.call (|
                      "memory_array_index_access_function_external_nonpayable_returns_dyn",
                      [
                        M.get (| "expr_96_mpos" |);
                        M.call (|
                          "convert_rational_0_by_1_to_uint256",
                          [
                            M.get (| "expr_7" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_98_address"],
                Some (M.get (| "_21_address" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_98_functionSelector"],
                Some (M.get (| "_functionSelector" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_99_address"],
                Some (M.call (|
                  "address",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_100_address"],
                Some (M.call (|
                  "convert_contract_Test_to_address",
                  [
                    M.get (| "expr_99_address" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_100_functionSelector"],
                Some ([Literal.number 0xd24c5a36])
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some (M.call (|
                  "externalFunctionPointersEqualFunction",
                  [
                    M.get (| "expr_98_address" |);
                    M.get (| "expr_98_functionSelector" |);
                    M.get (| "expr_100_address" |);
                    M.get (| "expr_100_functionSelector" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_8" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_22_mpos"],
                Some (M.get (| "var_ret_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_105_mpos"],
                Some (M.get (| "_22_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_105_mpos" |);
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_24_mpos"],
                Some (M.call (|
                  "mload",
                  [
                    M.get (| "_8" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_106_mpos"],
                Some (M.get (| "_24_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_address"; "_25_functionSelector"],
                Some (M.call (|
                  "read_from_memoryt_function_external_nonpayable_returns",
                  [
                    M.call (|
                      "memory_array_index_access_function_external_nonpayable_returns_dyn",
                      [
                        M.get (| "expr_106_mpos" |);
                        M.call (|
                          "convert_t_rational_by_to_t_uint256",
                          [
                            M.get (| "expr_9" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_108_address"],
                Some (M.get (| "_address" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_108_functionSelector"],
                Some (M.get (| "_25_functionSelector" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_109_address"],
                Some (M.call (|
                  "address",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_110_address"],
                Some (M.call (|
                  "convert_contract_Test_to_address",
                  [
                    M.get (| "expr_109_address" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_110_functionSelector"],
                Some ([Literal.number 0xc5337ed4])
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some (M.call (|
                  "externalFunctionPointersEqualFunction",
                  [
                    M.get (| "expr_108_address" |);
                    M.get (| "expr_108_functionSelector" |);
                    M.get (| "expr_110_address" |);
                    M.get (| "expr_110_functionSelector" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_10" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_26_mpos"],
                Some (M.get (| "var_ret_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_115_mpos"],
                Some (M.get (| "_26_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_115_mpos" |);
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_28_mpos"],
                Some (M.call (|
                  "mload",
                  [
                    M.get (| "_9" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_mpos"],
                Some (M.get (| "_28_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["_29_address"; "_29_functionSelector"],
                Some (M.call (|
                  "read_from_memoryt_function_external_nonpayable_returns",
                  [
                    M.call (|
                      "memory_array_index_access_function_external_nonpayable_returns_dyn",
                      [
                        M.get (| "expr_mpos" |);
                        M.call (|
                          "convert_rational_2_by_1_to_uint256",
                          [
                            M.get (| "expr_11" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_address"],
                Some (M.get (| "_29_address" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_118_functionSelector"],
                Some (M.get (| "_29_functionSelector" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_119_address"],
                Some (M.call (|
                  "address",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_120_address"],
                Some (M.call (|
                  "convert_contract_Test_to_address",
                  [
                    M.get (| "expr_119_address" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_120_functionSelector"],
                Some ([Literal.number 0xafb0db5f])
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some (M.call (|
                  "externalFunctionPointersEqualFunction",
                  [
                    M.get (| "expr_address" |);
                    M.get (| "expr_118_functionSelector" |);
                    M.get (| "expr_120_address" |);
                    M.get (| "expr_120_functionSelector" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_12" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_13" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a264697066735822122051d1a95a53b281a2d8492b6896b7f2a45a3bc9d8deaf13ebcef42940a141966764736f6c634300081b0033".
  End Test_140_deployed.

  Module C_32.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "callvalue",
              []
            |),
            ltac:(M.monadic (
              let _ :=
                M.call (|
                  "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                  []
                |) in
              tt
            ))
          |) in
        let _ :=
          M.assign (|
            ["_1"],
            Some (M.call (|
              "allocate_unbounded",
              []
            |))
          |) in
        let _ :=
          M.call (|
            "codecopy",
            [
              M.get (| "_1" |);
              M.call (|
                "dataoffset",
                [
                  [Literal.string "435f33325f6465706c6f796564"]
                ]
              |);
              M.call (|
                "datasize",
                [
                  [Literal.string "435f33325f6465706c6f796564"]
                ]
              |)
            ]
          |) in
        let _ :=
          M.call (|
            "return",
            [
              M.get (| "_1" |);
              M.call (|
                "datasize",
                [
                  [Literal.string "435f33325f6465706c6f796564"]
                ]
              |)
            ]
          |) in
        tt in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      tt
    )).

    Module C_32_deployed.
      Definition code : M.t unit := ltac:(M.monadic (
        let _ :=
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 64];
                M.call (|
                  "memoryguard",
                  [
                    [Literal.number 0x80]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "lt",
                    [
                      M.call (|
                        "calldatasize",
                        []
                      |);
                      [Literal.number 4]
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["selector"],
                    Some (M.call (|
                      "shift_right_unsigned",
                      [
                        M.call (|
                          "calldataload",
                          [
                            [Literal.number 0]
                          ]
                        |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.switch (|
                    M.get (| "selector" |),
                    [
                      (
                        Some (Literal.number 0x2ed7fe6a),
                        ltac:(M.monadic (
                          let _ :=
                            M.call (|
                              "external_fun_f",
                              []
                            |) in
                          tt
                        ))              );
                      (
                        None,
                        ltac:(M.monadic (
                          tt
                        ))              )            ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.call (|
              "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
              []
            |) in
          tt in
        let _ :=
          M.function (|
            "shift_right_unsigned",
            ["value"],
            ["newValue"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["newValue"],
                  M.call (|
                    "shr",
                    [
                      [Literal.number 224];
                      M.get (| "value" |)
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "allocate_unbounded",
            [],
            ["memPtr"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["memPtr"],
                  M.call (|
                    "mload",
                    [
                      [Literal.number 64]
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
            [],
            [],
            ltac:(M.monadic (
              let _ :=
                M.call (|
                  "revert",
                  [
                    [Literal.number 0];
                    [Literal.number 0]
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
            [],
            [],
            ltac:(M.monadic (
              let _ :=
                M.call (|
                  "revert",
                  [
                    [Literal.number 0];
                    [Literal.number 0]
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
            [],
            [],
            ltac:(M.monadic (
              let _ :=
                M.call (|
                  "revert",
                  [
                    [Literal.number 0];
                    [Literal.number 0]
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
            [],
            [],
            ltac:(M.monadic (
              let _ :=
                M.call (|
                  "revert",
                  [
                    [Literal.number 0];
                    [Literal.number 0]
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490",
            [],
            [],
            ltac:(M.monadic (
              let _ :=
                M.call (|
                  "revert",
                  [
                    [Literal.number 0];
                    [Literal.number 0]
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
            [],
            [],
            ltac:(M.monadic (
              let _ :=
                M.call (|
                  "revert",
                  [
                    [Literal.number 0];
                    [Literal.number 0]
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "abi_decode_array_function_external_nonpayable_returns_dyn_calldata",
            ["offset"; "end"],
            ["arrayPos";
        "length"],
            ltac:(M.monadic (
              let _ :=
                M.if_ (|
                  M.call (|
                    "iszero",
                    [
                      M.call (|
                        "slt",
                        [
                          M.call (|
                            "add",
                            [
                              M.get (| "offset" |);
                              [Literal.number 0x1f]
                            ]
                          |);
                          M.get (| "end" |)
                        ]
                      |)
                    ]
                  |),
                  ltac:(M.monadic (
                    let _ :=
                      M.call (|
                        "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                        []
                      |) in
                    tt
                  ))
                |) in
              let _ :=
                M.declare (|
                  ["length"],
                  M.call (|
                    "calldataload",
                    [
                      M.get (| "offset" |)
                    ]
                  |)
                |) in
              let _ :=
                M.if_ (|
                  M.call (|
                    "gt",
                    [
                      M.get (| "length" |);
                      [Literal.number 0xffffffffffffffff]
                    ]
                  |),
                  ltac:(M.monadic (
                    let _ :=
                      M.call (|
                        "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490",
                        []
                      |) in
                    tt
                  ))
                |) in
              let _ :=
                M.declare (|
                  ["arrayPos"],
                  M.call (|
                    "add",
                    [
                      M.get (| "offset" |);
                      [Literal.number 0x20]
                    ]
                  |)
                |) in
              let _ :=
                M.if_ (|
                  M.call (|
                    "gt",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "arrayPos" |);
                          M.call (|
                            "mul",
                            [
                              M.get (| "length" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        ]
                      |);
                      M.get (| "end" |)
                    ]
                  |),
                  ltac:(M.monadic (
                    let _ :=
                      M.call (|
                        "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                        []
                      |) in
                    tt
                  ))
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "abi_decode_array_function_external_nonpayable_returns__dyn_calldata",
            ["headStart"; "dataEnd"],
            ["value0";
        "value1"],
            ltac:(M.monadic (
              let _ :=
                M.if_ (|
                  M.call (|
                    "slt",
                    [
                      M.call (|
                        "sub",
                        [
                          M.get (| "dataEnd" |);
                          M.get (| "headStart" |)
                        ]
                      |);
                      [Literal.number 32]
                    ]
                  |),
                  ltac:(M.monadic (
                    let _ :=
                      M.call (|
                        "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                        []
                      |) in
                    tt
                  ))
                |) in
              let _ :=
                M.assign (|
                  ["offset"],
                  Some (M.call (|
                    "calldataload",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "headStart" |);
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.if_ (|
                  M.call (|
                    "gt",
                    [
                      M.get (| "offset" |);
                      [Literal.number 0xffffffffffffffff]
                    ]
                  |),
                  ltac:(M.monadic (
                    let _ :=
                      M.call (|
                        "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                        []
                      |) in
                    tt
                  ))
                |) in
              let _ :=
                M.declare (|
                  ["value0"; "value1"],
                  M.call (|
                    "abi_decode_array_function_external_nonpayable_returns_dyn_calldata",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "headStart" |);
                          M.get (| "offset" |)
                        ]
                      |);
                      M.get (| "dataEnd" |)
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "array_length_array_function_external_nonpayable_returns_dyn",
            ["value"],
            ["length"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["length"],
                  M.call (|
                    "mload",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "array_storeLengthForEncoding_array_function_external_nonpayable_returns_dyn",
            ["pos"; "length"],
            ["updated_pos"],
            ltac:(M.monadic (
              let _ :=
                M.call (|
                  "mstore",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |) in
              let _ :=
                M.declare (|
                  ["updated_pos"],
                  M.call (|
                    "add",
                    [
                      M.get (| "pos" |);
                      [Literal.number 0x20]
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "array_dataslot_array_function_external_nonpayable_returns_dyn",
            ["ptr"],
            ["data"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["data"],
                  M.get (| "ptr" |)
                |) in
              let _ :=
                M.declare (|
                  ["data"],
                  M.call (|
                    "add",
                    [
                      M.get (| "ptr" |);
                      [Literal.number 0x20]
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "cleanup_bytes24",
            ["value"],
            ["cleaned"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["cleaned"],
                  M.call (|
                    "and",
                    [
                      M.get (| "value" |);
                      M.call (|
                        "not",
                        [
                          [Literal.number 0xffffffffffffffff]
                        ]
                      |)
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "cleanup_function_external_nonpayable_returns",
            ["value"],
            ["cleaned"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["cleaned"],
                  M.call (|
                    "cleanup_bytes24",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "abi_encode_function_external_nonpayable_returns",
            ["addr_and_function_id"; "pos"],
            [],
            ltac:(M.monadic (
              let _ :=
                M.call (|
                  "mstore",
                  [
                    M.get (| "pos" |);
                    M.call (|
                      "cleanup_function_external_nonpayable_returns",
                      [
                        M.get (| "addr_and_function_id" |)
                      ]
                    |)
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "abi_encodeUpdatedPos_function_external_nonpayable_returns",
            ["value0"; "pos"],
            ["updatedPos"],
            ltac:(M.monadic (
              let _ :=
                M.call (|
                  "abi_encode_function_external_nonpayable_returns",
                  [
                    M.get (| "value0" |);
                    M.get (| "pos" |)
                  ]
                |) in
              let _ :=
                M.declare (|
                  ["updatedPos"],
                  M.call (|
                    "add",
                    [
                      M.get (| "pos" |);
                      [Literal.number 0x20]
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "array_nextElement_array_function_external_nonpayable_returns_dyn",
            ["ptr"],
            ["next"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["next"],
                  M.call (|
                    "add",
                    [
                      M.get (| "ptr" |);
                      [Literal.number 0x20]
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "abi_encode_array_function_external_nonpayable_returns_dyn",
            ["value"; "pos"],
            ["end"],
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["length"],
                  Some (M.call (|
                    "array_length_array_function_external_nonpayable_returns_dyn",
                    [
                      M.get (| "value" |)
                    ]
                  |))
                |) in
              let _ :=
                M.declare (|
                  ["pos"],
                  M.call (|
                    "array_storeLengthForEncoding_array_function_external_nonpayable_returns_dyn",
                    [
                      M.get (| "pos" |);
                      M.get (| "length" |)
                    ]
                  |)
                |) in
              let _ :=
                M.assign (|
                  ["baseRef"],
                  Some (M.call (|
                    "array_dataslot_array_function_external_nonpayable_returns_dyn",
                    [
                      M.get (| "value" |)
                    ]
                  |))
                |) in
              let _ :=
                M.assign (|
                  ["srcPtr"],
                  Some (M.get (| "baseRef" |))
                |) in
              let _ :=
                M.assign (|
                  ["i"],
                  Some ([Literal.number 0])
                |) in
              let _ :=
                let _ :=
                  tt in
                M.for_ (|
                  M.call (|
                    "lt",
                    [
                      M.get (| "i" |);
                      M.get (| "length" |)
                    ]
                  |),
                  ltac:(M.monadic (
                    let _ :=
                      M.declare (|
                        ["i"],
                        M.call (|
                          "add",
                          [
                            M.get (| "i" |);
                            [Literal.number 1]
                          ]
                        |)
                      |) in
                    tt
                  )),
                  ltac:(M.monadic (
                    let _ :=
                      M.assign (|
                        ["elementValue0"],
                        Some (M.call (|
                          "mload",
                          [
                            M.get (| "srcPtr" |)
                          ]
                        |))
                      |) in
                    let _ :=
                      M.declare (|
                        ["pos"],
                        M.call (|
                          "abi_encodeUpdatedPos_function_external_nonpayable_returns",
                          [
                            M.get (| "elementValue0" |);
                            M.get (| "pos" |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.declare (|
                        ["srcPtr"],
                        M.call (|
                          "array_nextElement_array_function_external_nonpayable_returns_dyn",
                          [
                            M.get (| "srcPtr" |)
                          ]
                        |)
                      |) in
                    tt
                  ))
                |) in
              let _ :=
                M.declare (|
                  ["end"],
                  M.get (| "pos" |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "abi_encode_struct_S_memory_ptr",
            ["value"; "pos"],
            ["end"],
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["tail"],
                  Some (M.call (|
                    "add",
                    [
                      M.get (| "pos" |);
                      [Literal.number 0x20]
                    ]
                  |))
                |) in
              let _ :=
                M.assign (|
                  ["memberValue0"],
                  Some (M.call (|
                    "mload",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "value" |);
                          [Literal.number 0x00]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.call (|
                  "mstore",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "pos" |);
                        [Literal.number 0x00]
                      ]
                    |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "tail" |);
                        M.get (| "pos" |)
                      ]
                    |)
                  ]
                |) in
              let _ :=
                M.declare (|
                  ["tail"],
                  M.call (|
                    "abi_encode_array_function_external_nonpayable_returns_dyn",
                    [
                      M.get (| "memberValue0" |);
                      M.get (| "tail" |)
                    ]
                  |)
                |) in
              let _ :=
                M.declare (|
                  ["end"],
                  M.get (| "tail" |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "abi_encode_struct_S",
            ["headStart"; "value0"],
            ["tail"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["tail"],
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                |) in
              let _ :=
                M.call (|
                  "mstore",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 0]
                      ]
                    |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "tail" |);
                        M.get (| "headStart" |)
                      ]
                    |)
                  ]
                |) in
              let _ :=
                M.declare (|
                  ["tail"],
                  M.call (|
                    "abi_encode_struct_S_memory_ptr",
                    [
                      M.get (| "value0" |);
                      M.get (| "tail" |)
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "external_fun_f",
            [],
            [],
            ltac:(M.monadic (
              let _ :=
                M.if_ (|
                  M.call (|
                    "callvalue",
                    []
                  |),
                  ltac:(M.monadic (
                    let _ :=
                      M.call (|
                        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                        []
                      |) in
                    tt
                  ))
                |) in
              let _ :=
                M.assign (|
                  ["param"; "param_1"],
                  Some (M.call (|
                    "abi_decode_array_function_external_nonpayable_returns__dyn_calldata",
                    [
                      [Literal.number 4];
                      M.call (|
                        "calldatasize",
                        []
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.assign (|
                  ["ret"],
                  Some (M.call (|
                    "fun_f",
                    [
                      M.get (| "param" |);
                      M.get (| "param_1" |)
                    ]
                  |))
                |) in
              let _ :=
                M.assign (|
                  ["memPos"],
                  Some (M.call (|
                    "allocate_unbounded",
                    []
                  |))
                |) in
              let _ :=
                M.assign (|
                  ["memEnd"],
                  Some (M.call (|
                    "abi_encode_struct_S",
                    [
                      M.get (| "memPos" |);
                      M.get (| "ret" |)
                    ]
                  |))
                |) in
              let _ :=
                M.call (|
                  "return",
                  [
                    M.get (| "memPos" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "memEnd" |);
                        M.get (| "memPos" |)
                      ]
                    |)
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            [],
            [],
            ltac:(M.monadic (
              let _ :=
                M.call (|
                  "revert",
                  [
                    [Literal.number 0];
                    [Literal.number 0]
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "round_up_to_mul_of",
            ["value"],
            ["result"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["result"],
                  M.call (|
                    "and",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "value" |);
                          [Literal.number 31]
                        ]
                      |);
                      M.call (|
                        "not",
                        [
                          [Literal.number 31]
                        ]
                      |)
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "panic_error_0x41",
            [],
            [],
            ltac:(M.monadic (
              let _ :=
                M.call (|
                  "mstore",
                  [
                    [Literal.number 0];
                    M.call (|
                      "shl",
                      [
                        [Literal.number 224];
                        [Literal.number 0x4e487b71]
                      ]
                    |)
                  ]
                |) in
              let _ :=
                M.call (|
                  "mstore",
                  [
                    [Literal.number 4];
                    [Literal.number 0x41]
                  ]
                |) in
              let _ :=
                M.call (|
                  "revert",
                  [
                    [Literal.number 0];
                    [Literal.number 0x24]
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "finalize_allocation",
            ["memPtr"; "size"],
            [],
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["newFreePtr"],
                  Some (M.call (|
                    "add",
                    [
                      M.get (| "memPtr" |);
                      M.call (|
                        "round_up_to_mul_of",
                        [
                          M.get (| "size" |)
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.if_ (|
                  M.call (|
                    "or",
                    [
                      M.call (|
                        "gt",
                        [
                          M.get (| "newFreePtr" |);
                          [Literal.number 0xffffffffffffffff]
                        ]
                      |);
                      M.call (|
                        "lt",
                        [
                          M.get (| "newFreePtr" |);
                          M.get (| "memPtr" |)
                        ]
                      |)
                    ]
                  |),
                  ltac:(M.monadic (
                    let _ :=
                      M.call (|
                        "panic_error_0x41",
                        []
                      |) in
                    tt
                  ))
                |) in
              let _ :=
                M.call (|
                  "mstore",
                  [
                    [Literal.number 64];
                    M.get (| "newFreePtr" |)
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "allocate_memory",
            ["size"],
            ["memPtr"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["memPtr"],
                  M.call (|
                    "allocate_unbounded",
                    []
                  |)
                |) in
              let _ :=
                M.call (|
                  "finalize_allocation",
                  [
                    M.get (| "memPtr" |);
                    M.get (| "size" |)
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "allocate_memory_struct_struct_S",
            [],
            ["memPtr"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["memPtr"],
                  M.call (|
                    "allocate_memory",
                    [
                      [Literal.number 32]
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "zero_value_for_array_function_external_nonpayable_returns_dyn",
            [],
            ["ret"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["ret"],
                  [Literal.number 96]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "allocate_and_zero_memory_struct_struct_S",
            [],
            ["memPtr"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["memPtr"],
                  M.call (|
                    "allocate_memory_struct_struct_S",
                    []
                  |)
                |) in
              let _ :=
                M.assign (|
                  ["offset"],
                  Some (M.get (| "memPtr" |))
                |) in
              let _ :=
                M.call (|
                  "mstore",
                  [
                    M.get (| "offset" |);
                    M.call (|
                      "zero_value_for_array_function_external_nonpayable_returns_dyn",
                      []
                    |)
                  ]
                |) in
              let _ :=
                M.declare (|
                  ["offset"],
                  M.call (|
                    "add",
                    [
                      M.get (| "offset" |);
                      [Literal.number 32]
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "zero_value_for_split_struct_S",
            [],
            ["ret"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["ret"],
                  M.call (|
                    "allocate_and_zero_memory_struct_struct_S",
                    []
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "array_allocation_size_array_function_external_nonpayable_returns_dyn",
            ["length"],
            ["size"],
            ltac:(M.monadic (
              let _ :=
                M.if_ (|
                  M.call (|
                    "gt",
                    [
                      M.get (| "length" |);
                      [Literal.number 0xffffffffffffffff]
                    ]
                  |),
                  ltac:(M.monadic (
                    let _ :=
                      M.call (|
                        "panic_error_0x41",
                        []
                      |) in
                    tt
                  ))
                |) in
              let _ :=
                M.declare (|
                  ["size"],
                  M.call (|
                    "mul",
                    [
                      M.get (| "length" |);
                      [Literal.number 0x20]
                    ]
                  |)
                |) in
              let _ :=
                M.declare (|
                  ["size"],
                  M.call (|
                    "add",
                    [
                      M.get (| "size" |);
                      [Literal.number 0x20]
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "validator_revert_function_external_nonpayable_returns",
            ["value"],
            [],
            ltac:(M.monadic (
              let _ :=
                M.if_ (|
                  M.call (|
                    "iszero",
                    [
                      M.call (|
                        "eq",
                        [
                          M.get (| "value" |);
                          M.call (|
                            "cleanup_function_external_nonpayable_returns",
                            [
                              M.get (| "value" |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |),
                  ltac:(M.monadic (
                    let _ :=
                      M.call (|
                        "revert",
                        [
                          [Literal.number 0];
                          [Literal.number 0]
                        ]
                      |) in
                    tt
                  ))
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "abi_decode_function_external_nonpayable_returns",
            ["offset"; "end"],
            ["fun"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["fun"],
                  M.call (|
                    "calldataload",
                    [
                      M.get (| "offset" |)
                    ]
                  |)
                |) in
              let _ :=
                M.call (|
                  "validator_revert_function_external_nonpayable_returns",
                  [
                    M.get (| "fun" |)
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "abi_decode_available_length_array_function_external_nonpayable_returns_dyn",
            ["offset"; "length"; "end"],
            ["array"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["array"],
                  M.call (|
                    "allocate_memory",
                    [
                      M.call (|
                        "array_allocation_size_array_function_external_nonpayable_returns_dyn",
                        [
                          M.get (| "length" |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.assign (|
                  ["dst"],
                  Some (M.get (| "array" |))
                |) in
              let _ :=
                M.call (|
                  "mstore",
                  [
                    M.get (| "array" |);
                    M.get (| "length" |)
                  ]
                |) in
              let _ :=
                M.declare (|
                  ["dst"],
                  M.call (|
                    "add",
                    [
                      M.get (| "array" |);
                      [Literal.number 0x20]
                    ]
                  |)
                |) in
              let _ :=
                M.assign (|
                  ["srcEnd"],
                  Some (M.call (|
                    "add",
                    [
                      M.get (| "offset" |);
                      M.call (|
                        "mul",
                        [
                          M.get (| "length" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.if_ (|
                  M.call (|
                    "gt",
                    [
                      M.get (| "srcEnd" |);
                      M.get (| "end" |)
                    ]
                  |),
                  ltac:(M.monadic (
                    let _ :=
                      M.call (|
                        "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                        []
                      |) in
                    tt
                  ))
                |) in
              let _ :=
                M.assign (|
                  ["src"],
                  Some (M.get (| "offset" |))
                |) in
              let _ :=
                let _ :=
                  tt in
                M.for_ (|
                  M.call (|
                    "lt",
                    [
                      M.get (| "src" |);
                      M.get (| "srcEnd" |)
                    ]
                  |),
                  ltac:(M.monadic (
                    let _ :=
                      M.declare (|
                        ["src"],
                        M.call (|
                          "add",
                          [
                            M.get (| "src" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    tt
                  )),
                  ltac:(M.monadic (
                    let _ :=
                      M.assign (|
                        ["elementPos"],
                        Some (M.get (| "src" |))
                      |) in
                    let _ :=
                      M.call (|
                        "mstore",
                        [
                          M.get (| "dst" |);
                          M.call (|
                            "abi_decode_function_external_nonpayable_returns",
                            [
                              M.get (| "elementPos" |);
                              M.get (| "end" |)
                            ]
                          |)
                        ]
                      |) in
                    let _ :=
                      M.declare (|
                        ["dst"],
                        M.call (|
                          "add",
                          [
                            M.get (| "dst" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      |) in
                    tt
                  ))
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "convert_array_array_function_external_nonpayable_returns_dyn_calldata_to_array_function_external_nonpayable_returns_dyn",
            ["value"; "length"],
            ["converted"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["converted"],
                  M.call (|
                    "abi_decode_available_length_array_function_external_nonpayable_returns_dyn",
                    [
                      M.get (| "value" |);
                      M.get (| "length" |);
                      M.call (|
                        "calldatasize",
                        []
                      |)
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "fun_f",
            ["var_functions_offset"; "var_functions_length"],
            ["var_mpos"],
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["zero_struct_S_mpos"],
                  Some (M.call (|
                    "zero_value_for_split_struct_S",
                    []
                  |))
                |) in
              let _ :=
                M.declare (|
                  ["var_mpos"],
                  M.get (| "zero_struct_S_mpos" |)
                |) in
              let _ :=
                M.assign (|
                  ["var_s_mpos"],
                  None
                |) in
              let _ :=
                M.assign (|
                  ["zero_struct_S_memory_ptr_mpos"],
                  Some (M.call (|
                    "zero_value_for_split_struct_S",
                    []
                  |))
                |) in
              let _ :=
                M.declare (|
                  ["var_s_mpos"],
                  M.get (| "zero_struct_S_memory_ptr_mpos" |)
                |) in
              let _ :=
                M.assign (|
                  ["_offset"],
                  Some (M.get (| "var_functions_offset" |))
                |) in
              let _ :=
                M.assign (|
                  ["_length"],
                  Some (M.get (| "var_functions_length" |))
                |) in
              let _ :=
                M.assign (|
                  ["expr_offset"],
                  Some (M.get (| "_offset" |))
                |) in
              let _ :=
                M.assign (|
                  ["expr_length"],
                  Some (M.get (| "_length" |))
                |) in
              let _ :=
                M.assign (|
                  ["_4_mpos"],
                  Some (M.get (| "var_s_mpos" |))
                |) in
              let _ :=
                M.assign (|
                  ["expr_mpos"],
                  Some (M.get (| "_4_mpos" |))
                |) in
              let _ :=
                M.assign (|
                  ["_1"],
                  Some (M.call (|
                    "add",
                    [
                      M.get (| "expr_mpos" |);
                      [Literal.number 0]
                    ]
                  |))
                |) in
              let _ :=
                M.call (|
                  "mstore",
                  [
                    M.get (| "_1" |);
                    M.call (|
                      "convert_array_array_function_external_nonpayable_returns_dyn_calldata_to_array_function_external_nonpayable_returns_dyn",
                      [
                        M.get (| "expr_offset" |);
                        M.get (| "expr_length" |)
                      ]
                    |)
                  ]
                |) in
              let _ :=
                M.assign (|
                  ["_mpos"],
                  Some (M.get (| "var_s_mpos" |))
                |) in
              let _ :=
                M.assign (|
                  ["expr_28_mpos"],
                  Some (M.get (| "_mpos" |))
                |) in
              let _ :=
                M.declare (|
                  ["var_mpos"],
                  M.get (| "expr_28_mpos" |)
                |) in
              let _ :=
                M.leave (||) in
              tt
            ))
          |) in
        tt
      )).

      Definition data : string :=
        "a2646970667358221220fe14695360d4575371d78e431470c3f28bf431371f9c80c3bfe9ee88885edc6464736f6c634300081b0033".
    End C_32_deployed.
  End C_32.
End Test_140.
