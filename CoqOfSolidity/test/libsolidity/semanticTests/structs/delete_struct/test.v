(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module test_149.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            [

            ]
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                [

                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.call (|
          "constructor_test",
          [

          ]
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          M.call (|
            "allocate_unbounded",
            [

            ]
          |)
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "746573745f3134395f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "746573745f3134395f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "746573745f3134395f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_t_rational_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_uint256",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "identity",
        ["value"],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_5_by_1_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_t_rational_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_left",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shl",
                [
                  [Literal.number 0];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_byte_slice_shift",
        ["value"; "toInsert"],
        ["result"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["mask"],
              M.call (|
                "not",
                [
                  [Literal.number 0]
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["toInsert"],
              M.call (|
                "shift_left",
                [
                  M.get (| "toInsert" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "and",
                [
                  M.get (| "value" |);
                  M.call (|
                    "not",
                    [
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["result"],
              M.call (|
                "or",
                [
                  M.get (| "value" |);
                  M.call (|
                    "and",
                    [
                      M.get (| "toInsert" |);
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_uint256_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_uint256",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "prepare_store_uint256",
        ["value"],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_storage_value_offsett_uint256_to_uint256",
        ["slot"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["convertedValue"],
              M.call (|
                "convert_uint256_to_uint256",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "sstore",
              [
                M.get (| "slot" |);
                M.call (|
                  "update_byte_slice_shift",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |);
                    M.call (|
                      "prepare_store_uint256",
                      [
                        M.get (| "convertedValue" |)
                      ]
                    |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_by_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_by_1",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_t_rational_by_to_t_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_by_1",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "mapping_index_access_mapping_uint256_uint256_of_rational_by",
        ["slot"; "key"],
        ["dataSlot"],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.call (|
                  "convert_t_rational_by_to_t_uint256",
                  [
                    M.get (| "key" |)
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0x20];
                M.get (| "slot" |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["dataSlot"],
              M.call (|
                "keccak256",
                [
                  [Literal.number 0];
                  [Literal.number 0x40]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_t_rational_by_1",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_2_by_1_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_t_rational_by_1",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "mapping_index_access_mapping_uint256__uint256__of_rational_by",
        ["slot"; "key"],
        ["dataSlot"],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.call (|
                  "convert_rational_by_to_uint256",
                  [
                    M.get (| "key" |)
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0x20];
                M.get (| "slot" |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["dataSlot"],
              M.call (|
                "keccak256",
                [
                  [Literal.number 0];
                  [Literal.number 0x40]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "mapping_index_access_mapping_uint256_bool_of_rational_by",
        ["slot"; "key"],
        ["dataSlot"],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.call (|
                  "convert_t_rational_by_to_t_uint256",
                  [
                    M.get (| "key" |)
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0x20];
                M.get (| "slot" |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["dataSlot"],
              M.call (|
                "keccak256",
                [
                  [Literal.number 0];
                  [Literal.number 0x40]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_byte_slice_shift_0",
        ["value"; "toInsert"],
        ["result"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["mask"],
              [Literal.number 255]
            |) in
          let _ :=
            M.declare (|
              ["toInsert"],
              M.call (|
                "shift_left",
                [
                  M.get (| "toInsert" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "and",
                [
                  M.get (| "value" |);
                  M.call (|
                    "not",
                    [
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["result"],
              M.call (|
                "or",
                [
                  M.get (| "value" |);
                  M.call (|
                    "and",
                    [
                      M.get (| "toInsert" |);
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_bool",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.call (|
                "iszero",
                [
                  M.call (|
                    "iszero",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_bool_to_bool",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_bool",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "prepare_store_bool",
        ["value"],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_storage_value_offsett_bool_to_bool",
        ["slot"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["convertedValue"],
              M.call (|
                "convert_bool_to_bool",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "sstore",
              [
                M.get (| "slot" |);
                M.call (|
                  "update_byte_slice_shift_0",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |);
                    M.call (|
                      "prepare_store_bool",
                      [
                        M.get (| "convertedValue" |)
                      ]
                    |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "mapping_index_access_mapping_uint256__bool__of_rational_by",
        ["slot"; "key"],
        ["dataSlot"],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.call (|
                  "convert_rational_by_to_uint256",
                  [
                    M.get (| "key" |)
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0x20];
                M.get (| "slot" |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["dataSlot"],
              M.call (|
                "keccak256",
                [
                  [Literal.number 0];
                  [Literal.number 0x40]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_left_dynamic",
        ["bits"; "value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shl",
                [
                  M.get (| "bits" |);
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_byte_slice_dynamic32",
        ["value"; "shiftBytes"; "toInsert"],
        ["result"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["shiftBits"],
              M.call (|
                "mul",
                [
                  M.get (| "shiftBytes" |);
                  [Literal.number 8]
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["mask"],
              M.call (|
                "shift_left_dynamic",
                [
                  M.get (| "shiftBits" |);
                  M.call (|
                    "not",
                    [
                      [Literal.number 0]
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["toInsert"],
              M.call (|
                "shift_left_dynamic",
                [
                  M.get (| "shiftBits" |);
                  M.get (| "toInsert" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "and",
                [
                  M.get (| "value" |);
                  M.call (|
                    "not",
                    [
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["result"],
              M.call (|
                "or",
                [
                  M.get (| "value" |);
                  M.call (|
                    "and",
                    [
                      M.get (| "toInsert" |);
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_storage_value_uint256_to_uint256",
        ["slot"; "offset"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["convertedValue"],
              M.call (|
                "convert_uint256_to_uint256",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "sstore",
              [
                M.get (| "slot" |);
                M.call (|
                  "update_byte_slice_dynamic32",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |);
                    M.get (| "offset" |);
                    M.call (|
                      "prepare_store_uint256",
                      [
                        M.get (| "convertedValue" |)
                      ]
                    |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "zero_value_for_split_uint256",
        [],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              [Literal.number 0]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "storage_set_to_zero_uint256",
        ["slot"; "offset"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["zero"],
              M.call (|
                "zero_value_for_split_uint256",
                [

                ]
              |)
            |) in
          let _ :=
            M.call (|
              "update_storage_value_uint256_to_uint256",
              [
                M.get (| "slot" |);
                M.get (| "offset" |);
                M.get (| "zero" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "clear_struct_storage_struct_nestedStruct",
        ["slot"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "storage_set_to_zero_uint256",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "slot" |);
                    [Literal.number 0]
                  ]
                |);
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "panic_error_0x00",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    [Literal.number 0x4e487b71]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 4];
                [Literal.number 0x00]
              ]
            |) in
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0x24]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "storage_set_to_zero_struct_nestedStruct",
        ["slot"; "offset"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "eq",
                    [
                      M.get (| "offset" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x00",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.call (|
              "clear_struct_storage_struct_nestedStruct",
              [
                M.get (| "slot" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "clear_struct_storage_struct_topStruct",
        ["slot"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "storage_set_to_zero_struct_nestedStruct",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "slot" |);
                    [Literal.number 0]
                  ]
                |);
                [Literal.number 0]
              ]
            |) in
          let _ :=
            M.call (|
              "storage_set_to_zero_uint256",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "slot" |);
                    [Literal.number 2]
                  ]
                |);
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "storage_set_to_zero_struct_topStruct",
        ["slot"; "offset"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "eq",
                    [
                      M.get (| "offset" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x00",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.call (|
              "clear_struct_storage_struct_topStruct",
              [
                M.get (| "slot" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "constructor_test",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["expr"],
              [Literal.number 0x05]
            |) in
          let _ :=
            M.assign (|
              ["_1"],
              M.call (|
                "convert_rational_5_by_1_to_uint256",
                [
                  M.get (| "expr" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_uint256_to_uint256",
              [
                [Literal.number 0x00];
                M.get (| "_1" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_1"],
              [Literal.number 0x01]
            |) in
          let _ :=
            M.assign (|
              ["_2"],
              M.call (|
                "convert_rational_by_to_uint256",
                [
                  M.get (| "expr_1" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_4_slot"],
              [Literal.number 0x01]
            |) in
          let _ :=
            M.assign (|
              ["expr_29_slot"],
              M.get (| "_4_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["_3"],
              M.call (|
                "add",
                [
                  M.get (| "expr_29_slot" |);
                  [Literal.number 2]
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_uint256_to_uint256",
              [
                M.get (| "_3" |);
                M.get (| "_2" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_2"],
              [Literal.number 0x01]
            |) in
          let _ :=
            M.assign (|
              ["_4"],
              M.call (|
                "convert_rational_by_to_uint256",
                [
                  M.get (| "expr_2" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_7_slot"],
              [Literal.number 0x01]
            |) in
          let _ :=
            M.assign (|
              ["expr_35_slot"],
              M.get (| "_7_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["_5"],
              M.call (|
                "add",
                [
                  M.get (| "expr_35_slot" |);
                  [Literal.number 3]
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_9_slot"],
              M.get (| "_5" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_38_slot"],
              M.get (| "_9_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_3"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["_6"],
              M.call (|
                "mapping_index_access_mapping_uint256_uint256_of_rational_by",
                [
                  M.get (| "expr_38_slot" |);
                  M.get (| "expr_3" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_uint256_to_uint256",
              [
                M.get (| "_6" |);
                M.get (| "_4" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_4"],
              [Literal.number 0x02]
            |) in
          let _ :=
            M.assign (|
              ["_7"],
              M.call (|
                "convert_rational_2_by_1_to_uint256",
                [
                  M.get (| "expr_4" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_12_slot"],
              [Literal.number 0x01]
            |) in
          let _ :=
            M.assign (|
              ["expr_43_slot"],
              M.get (| "_12_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["_8"],
              M.call (|
                "add",
                [
                  M.get (| "expr_43_slot" |);
                  [Literal.number 3]
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_slot"],
              M.get (| "_8" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_46_slot"],
              M.get (| "_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_5"],
              [Literal.number 0x01]
            |) in
          let _ :=
            M.assign (|
              ["_9"],
              M.call (|
                "mapping_index_access_mapping_uint256__uint256__of_rational_by",
                [
                  M.get (| "expr_46_slot" |);
                  M.get (| "expr_5" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_uint256_to_uint256",
              [
                M.get (| "_9" |);
                M.get (| "_7" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_6"],
              [Literal.number 0x02]
            |) in
          let _ :=
            M.assign (|
              ["_10"],
              M.call (|
                "convert_rational_2_by_1_to_uint256",
                [
                  M.get (| "expr_6" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_17_slot"],
              [Literal.number 0x01]
            |) in
          let _ :=
            M.assign (|
              ["expr_51_slot"],
              M.get (| "_17_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["_11"],
              M.call (|
                "add",
                [
                  M.get (| "expr_51_slot" |);
                  [Literal.number 0]
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_19_slot"],
              M.get (| "_11" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_54_slot"],
              M.get (| "_19_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["_12"],
              M.call (|
                "add",
                [
                  M.get (| "expr_54_slot" |);
                  [Literal.number 0]
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_uint256_to_uint256",
              [
                M.get (| "_12" |);
                M.get (| "_10" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_7"],
              [Literal.number 0x01]
            |) in
          let _ :=
            M.assign (|
              ["_21_slot"],
              [Literal.number 0x01]
            |) in
          let _ :=
            M.assign (|
              ["expr_59_slot"],
              M.get (| "_21_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["_13"],
              M.call (|
                "add",
                [
                  M.get (| "expr_59_slot" |);
                  [Literal.number 0]
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_23_slot"],
              M.get (| "_13" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_63_slot"],
              M.get (| "_23_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["_14"],
              M.call (|
                "add",
                [
                  M.get (| "expr_63_slot" |);
                  [Literal.number 1]
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_25_slot"],
              M.get (| "_14" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_slot"],
              M.get (| "_25_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_8"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["_15"],
              M.call (|
                "mapping_index_access_mapping_uint256_bool_of_rational_by",
                [
                  M.get (| "expr_slot" |);
                  M.get (| "expr_8" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_bool_to_bool",
              [
                M.get (| "_15" |);
                M.get (| "expr_7" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_9"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["_27_slot"],
              [Literal.number 0x01]
            |) in
          let _ :=
            M.assign (|
              ["expr_69_slot"],
              M.get (| "_27_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["_16"],
              M.call (|
                "add",
                [
                  M.get (| "expr_69_slot" |);
                  [Literal.number 0]
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_29_slot"],
              M.get (| "_16" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_73_slot"],
              M.get (| "_29_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["_17"],
              M.call (|
                "add",
                [
                  M.get (| "expr_73_slot" |);
                  [Literal.number 1]
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["_31_slot"],
              M.get (| "_17" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_74_slot"],
              M.get (| "_31_slot" |)
            |) in
          let _ :=
            M.assign (|
              ["expr_10"],
              [Literal.number 0x01]
            |) in
          let _ :=
            M.assign (|
              ["_18"],
              M.call (|
                "mapping_index_access_mapping_uint256__bool__of_rational_by",
                [
                  M.get (| "expr_74_slot" |);
                  M.get (| "expr_10" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_bool_to_bool",
              [
                M.get (| "_18" |);
                M.get (| "expr_9" |)
              ]
            |) in
          let _ :=
            M.call (|
              "storage_set_to_zero_struct_topStruct",
              [
                [Literal.number 0x01];
                [Literal.number 0]
              ]
            |) in
          let _ :=
            M.call (|
              "storage_set_to_zero_uint256",
              [
                [Literal.number 0x00];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module test_149_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x16178e1c),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_getToDelete",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x5ff76c8a),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_getNestedValue",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x79e44a38),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_getTopValue",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xe2943ff7),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_getNestedMapping",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xfc694689),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_getTopMapping",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            [

            ]
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_to_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_getToDelete",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_getToDelete",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_getNestedValue",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_getNestedValue",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_getTopValue",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_getTopValue",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_uint256",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_uint256",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_uint256",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_tuple_uint256",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                [Literal.number 0]
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bool",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "iszero",
                      [
                        M.get (| "value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bool_to_bool",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_bool",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bool",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_bool_to_bool",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_getNestedMapping",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"],
                M.call (|
                  "abi_decode_tuple_uint256",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_getNestedMapping",
                  [
                    M.get (| "param" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_getTopMapping",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"],
                M.call (|
                  "abi_decode_tuple_uint256",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_getTopMapping",
                  [
                    M.get (| "param" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_0_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_uint256",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint256",
                  [
                    M.call (|
                      "shift_right_0_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_uint256",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offsett_uint256",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_getToDelete",
          [],
          ["var_res"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_res"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    [Literal.number 0x00]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.declare (|
                ["var_res"],
                M.get (| "expr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_getNestedValue",
          [],
          ["var_nestedValue"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_nestedValue"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["_4_slot"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_113_slot"],
                M.get (| "_4_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_113_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_6_slot"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_114_slot"],
                M.get (| "_6_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_114_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    M.get (| "_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_3" |)
              |) in
            let _ :=
              M.declare (|
                ["var_nestedValue"],
                M.get (| "expr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_getTopValue",
          [],
          ["var_topValue"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_t_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_topValue"],
                M.get (| "zero_t_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["_10_slot"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_102_slot"],
                M.get (| "_10_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_102_slot" |);
                    [Literal.number 2]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    M.get (| "_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.declare (|
                ["var_topValue"],
                M.get (| "expr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_bool",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint256_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "mapping_index_access_mapping_uint256_bool_of_uint256",
          ["slot"; "key"],
          ["dataSlot"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "convert_uint256_to_uint256",
                    [
                      M.get (| "key" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0x20];
                  M.get (| "slot" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["dataSlot"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x40]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_bool",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_bool",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_bool",
                  [
                    M.call (|
                      "shift_right_0_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_bool",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offsett_bool",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_getNestedMapping",
          ["var_index"],
          ["var_ret"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                M.call (|
                  "zero_value_for_split_bool",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_ret"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["_slot"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_141_slot"],
                M.get (| "_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_141_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_16_slot"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_slot"],
                M.get (| "_16_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_slot" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_18_slot"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_143_slot"],
                M.get (| "_18_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.get (| "var_index" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_3" |)
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.call (|
                  "mapping_index_access_mapping_uint256_bool_of_uint256",
                  [
                    M.get (| "expr_143_slot" |);
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.call (|
                  "read_from_storage_split_offset_bool",
                  [
                    M.get (| "_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.get (| "_5" |)
              |) in
            let _ :=
              M.declare (|
                ["var_ret"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "mapping_index_access_mapping_uint256_uint256_of_uint256",
          ["slot"; "key"],
          ["dataSlot"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "convert_uint256_to_uint256",
                    [
                      M.get (| "key" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0x20];
                  M.get (| "slot" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["dataSlot"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x40]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_getTopMapping",
          ["var_index"],
          ["var_ret"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_ret"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["_23_slot"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_127_slot"],
                M.get (| "_23_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_127_slot" |);
                    [Literal.number 3]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_25_slot"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_128_slot"],
                M.get (| "_25_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.get (| "var_index" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.call (|
                  "mapping_index_access_mapping_uint256_uint256_of_uint256",
                  [
                    M.get (| "expr_128_slot" |);
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    M.get (| "_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.get (| "_4" |)
              |) in
            let _ :=
              M.declare (|
                ["var_ret"],
                M.get (| "expr_1" |)
              |) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a26469706673582212206ec4696ff257de6e3b14d16663ca54aa8e53f765126d377408cdb6e86f9d1bb664736f6c634300081b0033".
  End test_149_deployed.
End test_149.
