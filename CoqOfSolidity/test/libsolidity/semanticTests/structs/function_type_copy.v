(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Struct S *)
(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [functions] =>
      let _ :=
        M.define (|
          [ "s" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "s" |),
            "functions"
          |),
          M.get_name (| "functions" |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "s" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.

(* Contract *)
Module Test.
  Definition c : Value.t :=
    M.call (|
      NewExpression (* Beginning of a node! *)
id: 36
src: 293:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 35
src: 293:1:0
nodeType: IdentifierPath
name: C
nameLocations: [293:1:0, ]
referencedDeclaration: 32

referencedDeclaration: 32
typeDescriptions: typeString contract CtypeIdentifier st_contract$_C_$32

,
      []
    |).

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "functions" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 52
src: 398:21:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 51
src: 398:20:0
nodeType: FunctionTypeName
visibility: external
stateMutability: nonpayable
parameterTypes: (* Beginning of a node! *)
id: 49
src: 406:2:0
nodeType: ParameterList
parameters: 

returnParameterTypes: (* Beginning of a node! *)
id: 50
src: 417:0:0
nodeType: ParameterList
parameters: 

typeDescriptions: typeString function () externaltypeIdentifier st_function_external_nonpayable$__$returns$__$

length: 
typeDescriptions: typeString function () external[]typeIdentifier st_array$_t_function_external_nonpayable$__$returns$__$_$dyn_storage_ptr

,
            [
              Value.Integer 3
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "functions" |),
            Some (Value.Integer 0)
          |),
          M.member_access (|
            M.get_name (| "this" |),
            "random1"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "functions" |),
            Some (Value.Integer 1)
          |),
          M.member_access (|
            M.get_name (| "this" |),
            "random2"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "functions" |),
            Some (Value.Integer 2)
          |),
          M.member_access (|
            M.get_name (| "this" |),
            "random3"
          |)
        |) in
      let _ :=
        M.define (|
          [ "ret" ],
          M.call (|
            M.member_access (|
              M.get_name (| "c" |),
              "f"
            |),
            [
              M.get_name (| "functions" |)
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.member_access (|
                  M.get_name (| "ret" |),
                  "functions"
                |),
                "length"
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.member_access (|
                  M.get_name (| "ret" |),
                  "functions"
                |),
                Some (Value.Integer 0)
              |),
              M.member_access (|
                M.get_name (| "this" |),
                "random1"
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.member_access (|
                  M.get_name (| "ret" |),
                  "functions"
                |),
                Some (Value.Integer 1)
              |),
              M.member_access (|
                M.get_name (| "this" |),
                "random2"
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.member_access (|
                  M.get_name (| "ret" |),
                  "functions"
                |),
                Some (Value.Integer 2)
              |),
              M.member_access (|
                M.get_name (| "this" |),
                "random3"
              |)
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition random1 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition random2 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition random3 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Test.
