(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_96.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            []
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                []
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          Some (M.call (|
            "allocate_unbounded",
            []
          |))
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f39365f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f39365f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f39365f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_96_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      []
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  Some (M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x26121ff0),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_f",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            []
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_to_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_f",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_f",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint32",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint32",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint32",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_shift",
          ["value"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                Some ([Literal.number 0xffffffff])
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left",
                  [
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint32_to_uint32",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint32",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint32",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_uint32",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_uint32_to_uint32",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                Some (M.call (|
                  "convert_uint32_to_uint32",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_shift",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.call (|
                        "prepare_store_uint32",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_2_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_2_by_1_to_uint32",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint32",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_2_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x32",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x32]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint32_storage",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x03]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint32_storage",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_uint",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                Some (M.call (|
                  "array_length_array_uint32_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                Some (M.call (|
                  "array_dataslot_array_uint32_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "div",
                      [
                        M.get (| "index" |);
                        [Literal.number 8]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "mul",
                  [
                    M.call (|
                      "mod",
                      [
                        M.get (| "index" |);
                        [Literal.number 8]
                      ]
                    |);
                    [Literal.number 4]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_dynamic",
          ["bits"; "value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    M.get (| "bits" |);
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_dynamic4",
          ["value"; "shiftBytes"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["shiftBits"],
                Some (M.call (|
                  "mul",
                  [
                    M.get (| "shiftBytes" |);
                    [Literal.number 8]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["mask"],
                Some (M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    [Literal.number 0xffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_uint32_to_uint32",
          ["slot"; "offset"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                Some (M.call (|
                  "convert_uint32_to_uint32",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_dynamic4",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.get (| "offset" |);
                      M.call (|
                        "prepare_store_uint32",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_3_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_3_by_1_to_uint32",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint32",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_3_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_array_array_uint32_dyn_storage_to_array_uint32_dyn_ptr",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint32",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint32",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint32_dyn_storage_ptr",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.get (| "ptr" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint32_dyn_storage_ptr",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_uint32_dyn_ptr",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                Some (M.call (|
                  "array_length_array_uint32_dyn_storage_ptr",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                Some (M.call (|
                  "array_dataslot_array_uint32_dyn_storage_ptr",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "div",
                      [
                        M.get (| "index" |);
                        [Literal.number 8]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "mul",
                  [
                    M.call (|
                      "mod",
                      [
                        M.get (| "index" |);
                        [Literal.number 8]
                      ]
                    |);
                    [Literal.number 4]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_push_from_uint32_to_array_uint32_dyn_storage_ptr",
          ["array"; "value0"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["oldLen"],
                Some (M.call (|
                  "sload",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "oldLen" |);
                        [Literal.number 18446744073709551616]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "array" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "oldLen" |);
                      [Literal.number 1]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["slot"; "offset"],
                Some (M.call (|
                  "storage_array_index_access_uint32_dyn_ptr",
                  [
                    M.get (| "array" |);
                    M.get (| "oldLen" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_uint32_to_uint32",
                [
                  M.get (| "slot" |);
                  M.get (| "offset" |);
                  M.get (| "value0" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_5_by_1_to_uint32",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint32",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_dynamic32",
          ["value"; "shiftBytes"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["shiftBits"],
                Some (M.call (|
                  "mul",
                  [
                    M.get (| "shiftBytes" |);
                    [Literal.number 8]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["mask"],
                Some (M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint256_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_uint256",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_uint256_to_uint256",
          ["slot"; "offset"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                Some (M.call (|
                  "convert_uint256_to_uint256",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_dynamic32",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.get (| "offset" |);
                      M.call (|
                        "prepare_store_uint256",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_set_to_zero_uint256",
          ["slot"; "offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_uint256_to_uint256",
                [
                  M.get (| "slot" |);
                  M.get (| "offset" |);
                  M.get (| "zero" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_storage_range_uint256",
          ["start"; "end"],
          [],
          ltac:(M.monadic (
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "start" |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["start"],
                      M.call (|
                        "add",
                        [
                          M.get (| "start" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "storage_set_to_zero_uint256",
                      [
                        M.get (| "start" |);
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_convert_length_to_size_array_uint32_storage",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["size"],
                M.get (| "length" |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "div",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "length" |);
                        M.call (|
                          "sub",
                          [
                            [Literal.number 8];
                            [Literal.number 1]
                          ]
                        |)
                      ]
                    |);
                    [Literal.number 8]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_storage_array_array_uint",
          ["slot"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "clear_storage_range_uint256",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "slot" |);
                      M.call (|
                        "array_convert_length_to_size_array_uint32_storage",
                        [
                          [Literal.number 3]
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x00",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x00]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_set_to_zero_array_uint",
          ["slot"; "offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "offset" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x00",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "clear_storage_array_array_uint",
                [
                  M.get (| "slot" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_uint32_dyn_storage",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_convert_length_to_size_array_uint32_dyn_storage",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["size"],
                M.get (| "length" |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "div",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "length" |);
                        M.call (|
                          "sub",
                          [
                            [Literal.number 8];
                            [Literal.number 1]
                          ]
                        |)
                      ]
                    |);
                    [Literal.number 8]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_uint32_dyn_storage",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.get (| "ptr" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_storage_range_uint32",
          ["start"; "end"],
          [],
          ltac:(M.monadic (
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "start" |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["start"],
                      M.call (|
                        "add",
                        [
                          M.get (| "start" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "storage_set_to_zero_uint256",
                      [
                        M.get (| "start" |);
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_unsigned_dynamic",
          ["bits"; "value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    M.get (| "bits" |);
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "partial_clear_storage_slot",
          ["slot"; "offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                Some (M.call (|
                  "shift_right_unsigned_dynamic",
                  [
                    M.call (|
                      "mul",
                      [
                        [Literal.number 8];
                        M.call (|
                          "sub",
                          [
                            [Literal.number 32];
                            M.get (| "offset" |)
                          ]
                        |)
                      ]
                    |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "and",
                    [
                      M.get (| "mask" |);
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_storage_array_end_array_uint32_dyn",
          ["array"; "len"; "startIndex"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "startIndex" |);
                    M.get (| "len" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["oldSlotCount"],
                      Some (M.call (|
                        "array_convert_length_to_size_array_uint32_dyn_storage",
                        [
                          M.get (| "len" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["newSlotCount"],
                      Some (M.call (|
                        "array_convert_length_to_size_array_uint32_dyn_storage",
                        [
                          M.get (| "startIndex" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["arrayDataStart"],
                      Some (M.call (|
                        "array_dataslot_array_uint32_dyn_storage",
                        [
                          M.get (| "array" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteStart"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "newSlotCount" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteEnd"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "oldSlotCount" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["offset"],
                      Some (M.call (|
                        "mul",
                        [
                          M.call (|
                            "mod",
                            [
                              M.get (| "startIndex" |);
                              [Literal.number 8]
                            ]
                          |);
                          [Literal.number 4]
                        ]
                      |))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "gt",
                        [
                          M.get (| "offset" |);
                          [Literal.number 0]
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "partial_clear_storage_slot",
                            [
                              M.call (|
                                "sub",
                                [
                                  M.get (| "deleteStart" |);
                                  [Literal.number 1]
                                ]
                              |);
                              M.get (| "offset" |)
                            ]
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "clear_storage_range_uint32",
                      [
                        M.get (| "deleteStart" |);
                        M.get (| "deleteEnd" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "resize_array_array_uint32_dyn_storage",
          ["array"; "newLen"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "newLen" |);
                    [Literal.number 18446744073709551616]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["oldLen"],
                Some (M.call (|
                  "array_length_array_uint32_dyn_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "array" |);
                  M.get (| "newLen" |)
                ]
              |) in
            let _ :=
              M.call (|
                "cleanup_storage_array_end_array_uint32_dyn",
                [
                  M.get (| "array" |);
                  M.get (| "oldLen" |);
                  M.get (| "newLen" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_storage_array_array_uint32_dyn",
          ["slot"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "resize_array_array_uint32_dyn_storage",
                [
                  M.get (| "slot" |);
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_set_to_zero_array_uint32_dyn",
          ["slot"; "offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "offset" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x00",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "clear_storage_array_array_uint32_dyn",
                [
                  M.get (| "slot" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_struct_storage_struct_S",
          ["slot"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "sstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "slot" |);
                      [Literal.number 0]
                    ]
                  |);
                  [Literal.number 0]
                ]
              |) in
            let _ :=
              M.call (|
                "storage_set_to_zero_array_uint",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "slot" |);
                      [Literal.number 1]
                    ]
                  |);
                  [Literal.number 0]
                ]
              |) in
            let _ :=
              M.call (|
                "storage_set_to_zero_array_uint32_dyn",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "slot" |);
                      [Literal.number 2]
                    ]
                  |);
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_set_to_zero_struct_S",
          ["slot"; "offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "offset" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x00",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "clear_struct_storage_struct_S",
                [
                  M.get (| "slot" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_0_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_uint32",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_uint32",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint32",
                  [
                    M.call (|
                      "shift_right_0_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_uint32",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offsett_uint32",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_0_by_1_to_uint32",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint32",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x01",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x01]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "assert_helper",
          ["condition"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "condition" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x01",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_dynamict_uint32",
          ["slot_value"; "offset"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint32",
                  [
                    M.call (|
                      "shift_right_unsigned_dynamic",
                      [
                        M.call (|
                          "mul",
                          [
                            M.get (| "offset" |);
                            [Literal.number 8]
                          ]
                        |);
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_dynamic_uint32",
          ["slot"; "offset"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_dynamict_uint32",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_f",
          [],
          ["var_ret"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_ret"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  [Literal.number 0];
                  [Literal.number 1427247692705959881058285969449495136382746623]
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.call (|
                  "convert_rational_by_to_uint32",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_19_slot"],
                Some (M.get (| "_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_19_slot" |);
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_uint32_to_uint32",
                [
                  M.get (| "_2" |);
                  M.get (| "_1" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.call (|
                  "convert_rational_2_by_1_to_uint32",
                  [
                    M.get (| "expr_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_6_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_25_slot"],
                Some (M.get (| "_6_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_25_slot" |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_8_slot"],
                Some (M.get (| "_4" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_28_slot"],
                Some (M.get (| "_8_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_5"; "_6"],
                Some (M.call (|
                  "storage_array_index_access_uint",
                  [
                    M.get (| "expr_28_slot" |);
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_uint32_to_uint32",
                [
                  M.get (| "_5" |);
                  M.get (| "_6" |);
                  M.get (| "_3" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some ([Literal.number 0x03])
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                Some (M.call (|
                  "convert_rational_3_by_1_to_uint32",
                  [
                    M.get (| "expr_3" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_12_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_33_slot"],
                Some (M.get (| "_12_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_33_slot" |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_14_slot"],
                Some (M.get (| "_8" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_36_slot"],
                Some (M.get (| "_14_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_9"; "_10"],
                Some (M.call (|
                  "storage_array_index_access_uint",
                  [
                    M.get (| "expr_36_slot" |);
                    M.get (| "expr_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_uint32_to_uint32",
                [
                  M.get (| "_9" |);
                  M.get (| "_10" |);
                  M.get (| "_7" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_17_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_41_slot"],
                Some (M.get (| "_17_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_11"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_41_slot" |);
                    [Literal.number 2]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_19_slot"],
                Some (M.get (| "_11" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_44_slot"],
                Some (M.get (| "_19_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_self_slot"],
                Some (M.call (|
                  "convert_array_array_uint32_dyn_storage_to_array_uint32_dyn_ptr",
                  [
                    M.get (| "expr_44_slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some ([Literal.number 0x04])
              |) in
            let _ :=
              M.assign (|
                ["_12"],
                Some (M.call (|
                  "convert_t_rational_by_to_t_uint32",
                  [
                    M.get (| "expr_5" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "array_push_from_uint32_to_array_uint32_dyn_storage_ptr",
                [
                  M.get (| "expr_self_slot" |);
                  M.get (| "_12" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_21_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_49_slot"],
                Some (M.get (| "_21_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_13"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_49_slot" |);
                    [Literal.number 2]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_23_slot"],
                Some (M.get (| "_13" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_52_slot"],
                Some (M.get (| "_23_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_53_self_slot"],
                Some (M.call (|
                  "convert_array_array_uint32_dyn_storage_to_array_uint32_dyn_ptr",
                  [
                    M.get (| "expr_52_slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some ([Literal.number 0x05])
              |) in
            let _ :=
              M.assign (|
                ["_14"],
                Some (M.call (|
                  "convert_rational_5_by_1_to_uint32",
                  [
                    M.get (| "expr_6" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "array_push_from_uint32_to_array_uint32_dyn_storage_ptr",
                [
                  M.get (| "expr_53_self_slot" |);
                  M.get (| "_14" |)
                ]
              |) in
            let _ :=
              M.call (|
                "storage_set_to_zero_struct_S",
                [
                  [Literal.number 0x00];
                  [Literal.number 0]
                ]
              |) in
            let _ :=
              M.assign (|
                ["_25_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_61_slot"],
                Some (M.get (| "_25_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_15"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_61_slot" |);
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_16"],
                Some (M.call (|
                  "read_from_storage_split_offset_uint32",
                  [
                    M.get (| "_15" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some (M.get (| "_16" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint32",
                      [
                        M.get (| "expr_7" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_0_by_1_to_uint32",
                      [
                        M.get (| "expr_8" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_9" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_28_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_68_slot"],
                Some (M.get (| "_28_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_17"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_68_slot" |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_30_slot"],
                Some (M.get (| "_17" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_69_slot"],
                Some (M.get (| "_30_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_18"; "_19"],
                Some (M.call (|
                  "storage_array_index_access_uint",
                  [
                    M.get (| "expr_69_slot" |);
                    M.get (| "expr_10" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_20"],
                Some (M.call (|
                  "read_from_storage_split_dynamic_uint32",
                  [
                    M.get (| "_18" |);
                    M.get (| "_19" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some (M.get (| "_20" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint32",
                      [
                        M.get (| "expr_11" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_0_by_1_to_uint32",
                      [
                        M.get (| "expr_12" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_13" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_34_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_slot"],
                Some (M.get (| "_34_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_21"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_slot" |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_36_slot"],
                Some (M.get (| "_21" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_78_slot"],
                Some (M.get (| "_36_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_22"; "_23"],
                Some (M.call (|
                  "storage_array_index_access_uint",
                  [
                    M.get (| "expr_78_slot" |);
                    M.get (| "expr_14" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_24"],
                Some (M.call (|
                  "read_from_storage_split_dynamic_uint32",
                  [
                    M.get (| "_22" |);
                    M.get (| "_23" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some (M.get (| "_24" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint32",
                      [
                        M.get (| "expr_15" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_0_by_1_to_uint32",
                      [
                        M.get (| "expr_16" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_17" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_40_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_86_slot"],
                Some (M.get (| "_40_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_25"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_86_slot" |);
                    [Literal.number 2]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_42_slot"],
                Some (M.get (| "_25" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_87_slot"],
                Some (M.get (| "_42_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some (M.call (|
                  "array_length_array_uint32_dyn_storage",
                  [
                    M.get (| "expr_87_slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_18" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint256",
                      [
                        M.get (| "expr_19" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_20" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["var_ret"],
                M.call (|
                  "sload",
                  [
                    [Literal.number 0]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a2646970667358221220640a1bbcd30dd135df19a74cfaec781e201ff9f7c4123f4cd722a9ebce25182164736f6c634300081b0033".
  End C_96_deployed.
End C_96.
