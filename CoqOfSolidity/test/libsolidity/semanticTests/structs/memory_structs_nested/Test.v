(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module Test_147.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            [

            ]
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                [

                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          M.call (|
            "allocate_unbounded",
            [

            ]
          |)
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "546573745f3134375f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "546573745f3134375f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "546573745f3134375f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module Test_147_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0xf8a8fd6d),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_test",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            [

            ]
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_uint256_uint256_uint256",
          ["headStart"; "value0"; "value1"; "value2"; "value3"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 128]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value2" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 64]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256",
                [
                  M.get (| "value3" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 96]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_test",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"; "ret_2"; "ret_3"],
                M.call (|
                  "fun_test",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_uint256_uint256_uint256_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |);
                    M.get (| "ret_2" |);
                    M.get (| "ret_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint8",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_3_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint16",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint16",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint16",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_3_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_0_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_1_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_2_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_3_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_test",
          [],
          ["var_a";
      "var_x";
      "var_y";
      "var_z"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_a"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_1"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_x"],
                M.get (| "zero_uint256_1" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_2"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_y"],
                M.get (| "zero_uint256_2" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_t_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_z"],
                M.get (| "zero_t_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                [Literal.number 0x04]
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.call (|
                  "convert_rational_by_to_uint8",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.call (|
                  "convert_t_rational_by_to_t_uint8",
                  [
                    M.get (| "expr_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.call (|
                  "convert_rational_by_to_uint16",
                  [
                    M.get (| "expr_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.call (|
                  "convert_rational_by_to_uint256",
                  [
                    M.get (| "expr_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_32_mpos"],
                M.call (|
                  "fun_combine",
                  [
                    M.get (| "_1" |);
                    M.get (| "_2" |);
                    M.get (| "_3" |);
                    M.get (| "_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["var_d_mpos"],
                M.get (| "expr_32_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_9_mpos"],
                M.get (| "var_d_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_36_mpos"],
                M.get (| "_9_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.call (|
                  "convert_rational_0_by_1_to_uint256",
                  [
                    M.get (| "expr_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                M.call (|
                  "fun_extract",
                  [
                    M.get (| "expr_36_mpos" |);
                    M.get (| "_5" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_a"],
                M.get (| "expr_5" |)
              |) in
            let _ :=
              M.assign (|
                ["_11_mpos"],
                M.get (| "var_d_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_mpos"],
                M.get (| "_11_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.call (|
                  "convert_rational_1_by_1_to_uint256",
                  [
                    M.get (| "expr_6" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                M.call (|
                  "fun_extract",
                  [
                    M.get (| "expr_mpos" |);
                    M.get (| "_6" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_x"],
                M.get (| "expr_7" |)
              |) in
            let _ :=
              M.assign (|
                ["_13_mpos"],
                M.get (| "var_d_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_50_mpos"],
                M.get (| "_13_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                M.call (|
                  "convert_rational_2_by_1_to_uint256",
                  [
                    M.get (| "expr_8" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                M.call (|
                  "fun_extract",
                  [
                    M.get (| "expr_50_mpos" |);
                    M.get (| "_7" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_y"],
                M.get (| "expr_9" |)
              |) in
            let _ :=
              M.assign (|
                ["_15_mpos"],
                M.get (| "var_d_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_57_mpos"],
                M.get (| "_15_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                M.call (|
                  "convert_t_rational_by_to_t_uint256",
                  [
                    M.get (| "expr_10" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                M.call (|
                  "fun_extract",
                  [
                    M.get (| "expr_57_mpos" |);
                    M.get (| "_8" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_z"],
                M.get (| "expr_11" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "round_up_to_mul_of",
          ["value"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "and",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 31]
                      ]
                    |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 31]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "finalize_allocation",
          ["memPtr"; "size"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["newFreePtr"],
                M.call (|
                  "add",
                  [
                    M.get (| "memPtr" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "size" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "newFreePtr" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "newFreePtr" |);
                        M.get (| "memPtr" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 64];
                  M.get (| "newFreePtr" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory",
          ["size"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "memPtr" |);
                  M.get (| "size" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_struct_struct_X",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_uint8",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_struct_struct_S",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    [Literal.number 96]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_uint16",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_and_zero_memory_struct_struct_S",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_struct_struct_S",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                M.get (| "memPtr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "offset" |);
                  M.call (|
                    "zero_value_for_uint8",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "offset" |);
                  M.call (|
                    "zero_value_for_uint16",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "offset" |);
                  M.call (|
                    "zero_value_for_uint256",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_struct_S",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "allocate_and_zero_memory_struct_struct_S",
                  [

                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_and_zero_memory_struct_struct_X",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_struct_struct_X",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                M.get (| "memPtr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "offset" |);
                  M.call (|
                    "zero_value_for_uint8",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "offset" |);
                  M.call (|
                    "zero_value_for_struct_S",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_struct_X",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "allocate_and_zero_memory_struct_struct_X",
                  [

                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "write_to_memory_uint8",
          ["memPtr"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "cleanup_uint8",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "write_to_memory_uint16",
          ["memPtr"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "cleanup_uint16",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "write_to_memory_uint256",
          ["memPtr"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_combine",
          ["var_a"; "var_x"; "var_y"; "var_z"],
          ["var_s_mpos"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_struct_X_mpos"],
                M.call (|
                  "zero_value_for_split_struct_X",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_s_mpos"],
                M.get (| "zero_struct_X_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_a" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["_19_mpos"],
                M.get (| "var_s_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_115_mpos"],
                M.get (| "_19_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_115_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.get (| "expr" |)
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint8",
                [
                  M.get (| "_2" |);
                  M.get (| "_3" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.get (| "var_x" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.get (| "_4" |)
              |) in
            let _ :=
              M.assign (|
                ["_23_mpos"],
                M.get (| "var_s_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_121_mpos"],
                M.get (| "_23_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_121_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_25_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_5" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_124_mpos"],
                M.get (| "_25_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_124_mpos" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint8",
                [
                  M.get (| "_6" |);
                  M.get (| "_7" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                M.get (| "var_y" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.get (| "_8" |)
              |) in
            let _ :=
              M.assign (|
                ["_29_mpos"],
                M.get (| "var_s_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_129_mpos"],
                M.get (| "_29_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_129_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_31_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_9" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_132_mpos"],
                M.get (| "_31_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_10"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_132_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_11"],
                M.get (| "expr_2" |)
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint16",
                [
                  M.get (| "_10" |);
                  M.get (| "_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_12"],
                M.get (| "var_z" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.get (| "_12" |)
              |) in
            let _ :=
              M.assign (|
                ["_35_mpos"],
                M.get (| "var_s_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_137_mpos"],
                M.get (| "_35_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_13"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_137_mpos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_37_mpos"],
                M.call (|
                  "mload",
                  [
                    M.get (| "_13" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_140_mpos"],
                M.get (| "_37_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_14"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_140_mpos" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_15"],
                M.get (| "expr_3" |)
              |) in
            let _ :=
              M.call (|
                "write_to_memory_uint256",
                [
                  M.get (| "_14" |);
                  M.get (| "_15" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_memoryt_uint256",
          ["ptr"],
          ["returnValue"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["value"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "mload",
                      [
                        M.get (| "ptr" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["returnValue"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_memoryt_uint16",
          ["ptr"],
          ["returnValue"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["value"],
                M.call (|
                  "cleanup_uint16",
                  [
                    M.call (|
                      "mload",
                      [
                        M.get (| "ptr" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["returnValue"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint16_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint16",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_memoryt_uint8",
          ["ptr"],
          ["returnValue"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["value"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "mload",
                      [
                        M.get (| "ptr" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["returnValue"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint8_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint8",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_extract",
          ["var_s_66_mpos"; "var_which"],
          ["var_x"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_x"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_which" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_0_by_1_to_uint256",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.switch (|
                M.get (| "expr_2" |),
                [
                  (
                    Some (Literal.number 0),
                    ltac:(M.monadic (
                      let _ :=
                        M.assign (|
                          ["_2"],
                          M.get (| "var_which" |)
                        |) in
                      let _ :=
                        M.assign (|
                          ["expr_3"],
                          M.get (| "_2" |)
                        |) in
                      let _ :=
                        M.assign (|
                          ["expr_4"],
                          [Literal.number 0x01]
                        |) in
                      let _ :=
                        M.assign (|
                          ["expr_5"],
                          M.call (|
                            "eq",
                            [
                              M.call (|
                                "cleanup_uint256",
                                [
                                  M.get (| "expr_3" |)
                                ]
                              |);
                              M.call (|
                                "convert_rational_1_by_1_to_uint256",
                                [
                                  M.get (| "expr_4" |)
                                ]
                              |)
                            ]
                          |)
                        |) in
                      let _ :=
                        M.switch (|
                          M.get (| "expr_5" |),
                          [
                            (
                              Some (Literal.number 0),
                              ltac:(M.monadic (
                                let _ :=
                                  M.assign (|
                                    ["_3"],
                                    M.get (| "var_which" |)
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["expr_6"],
                                    M.get (| "_3" |)
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["expr_7"],
                                    [Literal.number 0x02]
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["expr_8"],
                                    M.call (|
                                      "eq",
                                      [
                                        M.call (|
                                          "cleanup_uint256",
                                          [
                                            M.get (| "expr_6" |)
                                          ]
                                        |);
                                        M.call (|
                                          "convert_rational_2_by_1_to_uint256",
                                          [
                                            M.get (| "expr_7" |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |) in
                                let _ :=
                                  M.switch (|
                                    M.get (| "expr_8" |),
                                    [
                                      (
                                        Some (Literal.number 0),
                                        ltac:(M.monadic (
                                          let _ :=
                                            M.assign (|
                                              ["_44_mpos"],
                                              M.get (| "var_s_66_mpos" |)
                                            |) in
                                          let _ :=
                                            M.assign (|
                                              ["expr_93_mpos"],
                                              M.get (| "_44_mpos" |)
                                            |) in
                                          let _ :=
                                            M.assign (|
                                              ["_4"],
                                              M.call (|
                                                "add",
                                                [
                                                  M.get (| "expr_93_mpos" |);
                                                  [Literal.number 32]
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.assign (|
                                              ["_46_mpos"],
                                              M.call (|
                                                "mload",
                                                [
                                                  M.get (| "_4" |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.assign (|
                                              ["expr_94_mpos"],
                                              M.get (| "_46_mpos" |)
                                            |) in
                                          let _ :=
                                            M.assign (|
                                              ["_5"],
                                              M.call (|
                                                "add",
                                                [
                                                  M.get (| "expr_94_mpos" |);
                                                  [Literal.number 64]
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.assign (|
                                              ["_6"],
                                              M.call (|
                                                "read_from_memoryt_uint256",
                                                [
                                                  M.get (| "_5" |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.assign (|
                                              ["expr_9"],
                                              M.get (| "_6" |)
                                            |) in
                                          let _ :=
                                            M.declare (|
                                              ["var_x"],
                                              M.get (| "expr_9" |)
                                            |) in
                                          let _ :=
                                            M.leave (||) in
                                          tt
                                        ))                                );
                                      (
                                        None,
                                        ltac:(M.monadic (
                                          let _ :=
                                            M.assign (|
                                              ["_49_mpos"],
                                              M.get (| "var_s_66_mpos" |)
                                            |) in
                                          let _ :=
                                            M.assign (|
                                              ["expr_89_mpos"],
                                              M.get (| "_49_mpos" |)
                                            |) in
                                          let _ :=
                                            M.assign (|
                                              ["_7"],
                                              M.call (|
                                                "add",
                                                [
                                                  M.get (| "expr_89_mpos" |);
                                                  [Literal.number 32]
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.assign (|
                                              ["_51_mpos"],
                                              M.call (|
                                                "mload",
                                                [
                                                  M.get (| "_7" |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.assign (|
                                              ["expr_90_mpos"],
                                              M.get (| "_51_mpos" |)
                                            |) in
                                          let _ :=
                                            M.assign (|
                                              ["_8"],
                                              M.call (|
                                                "add",
                                                [
                                                  M.get (| "expr_90_mpos" |);
                                                  [Literal.number 32]
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.assign (|
                                              ["_9"],
                                              M.call (|
                                                "read_from_memoryt_uint16",
                                                [
                                                  M.get (| "_8" |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.assign (|
                                              ["expr_10"],
                                              M.get (| "_9" |)
                                            |) in
                                          let _ :=
                                            M.declare (|
                                              ["var_x"],
                                              M.call (|
                                                "convert_uint16_to_uint256",
                                                [
                                                  M.get (| "expr_10" |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.leave (||) in
                                          tt
                                        ))                                )                              ]
                                  |) in
                                tt
                              ))                      );
                            (
                              None,
                              ltac:(M.monadic (
                                let _ :=
                                  M.assign (|
                                    ["_mpos"],
                                    M.get (| "var_s_66_mpos" |)
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["expr_82_mpos"],
                                    M.get (| "_mpos" |)
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["_10"],
                                    M.call (|
                                      "add",
                                      [
                                        M.get (| "expr_82_mpos" |);
                                        [Literal.number 32]
                                      ]
                                    |)
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["_56_mpos"],
                                    M.call (|
                                      "mload",
                                      [
                                        M.get (| "_10" |)
                                      ]
                                    |)
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["expr_83_mpos"],
                                    M.get (| "_56_mpos" |)
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["_11"],
                                    M.call (|
                                      "add",
                                      [
                                        M.get (| "expr_83_mpos" |);
                                        [Literal.number 0]
                                      ]
                                    |)
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["_12"],
                                    M.call (|
                                      "read_from_memoryt_uint8",
                                      [
                                        M.get (| "_11" |)
                                      ]
                                    |)
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["expr_11"],
                                    M.get (| "_12" |)
                                  |) in
                                let _ :=
                                  M.declare (|
                                    ["var_x"],
                                    M.call (|
                                      "convert_uint8_to_uint256",
                                      [
                                        M.get (| "expr_11" |)
                                      ]
                                    |)
                                  |) in
                                let _ :=
                                  M.leave (||) in
                                tt
                              ))                      )                    ]
                        |) in
                      tt
                    ))            );
                  (
                    None,
                    ltac:(M.monadic (
                      let _ :=
                        M.assign (|
                          ["_59_mpos"],
                          M.get (| "var_s_66_mpos" |)
                        |) in
                      let _ :=
                        M.assign (|
                          ["expr_76_mpos"],
                          M.get (| "_59_mpos" |)
                        |) in
                      let _ :=
                        M.assign (|
                          ["_13"],
                          M.call (|
                            "add",
                            [
                              M.get (| "expr_76_mpos" |);
                              [Literal.number 0]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.assign (|
                          ["_14"],
                          M.call (|
                            "read_from_memoryt_uint8",
                            [
                              M.get (| "_13" |)
                            ]
                          |)
                        |) in
                      let _ :=
                        M.assign (|
                          ["expr_12"],
                          M.get (| "_14" |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["var_x"],
                          M.call (|
                            "convert_uint8_to_uint256",
                            [
                              M.get (| "expr_12" |)
                            ]
                          |)
                        |) in
                      let _ :=
                        M.leave (||) in
                      tt
                    ))            )          ]
              |) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a26469706673582212204a52fbbaf83f634fa9513912c0bbe0037c5f4c71844d9b5f3e52f2a5738227a964736f6c634300081b0033".
  End Test_147_deployed.
End Test_147.
