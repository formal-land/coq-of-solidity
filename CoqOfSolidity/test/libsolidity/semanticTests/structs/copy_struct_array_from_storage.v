(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Struct S *)
(* Contract *)
Module Test.
  Definition a : Value.t :=
    undefined.

  Definition b : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "a" |),
            "push"
          |),
          []
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.index_access (|
              M.get_name (| "a" |),
              Some (Value.Integer 0)
            |),
            "push"
          |),
          [
            M.call (|
              M.get_name (| "S" |),
              [
                Value.Integer 1
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.index_access (|
              M.get_name (| "a" |),
              Some (Value.Integer 0)
            |),
            "push"
          |),
          [
            M.call (|
              M.get_name (| "S" |),
              [
                Value.Integer 2
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.index_access (|
              M.get_name (| "a" |),
              Some (Value.Integer 0)
            |),
            "push"
          |),
          [
            M.call (|
              M.get_name (| "S" |),
              [
                Value.Integer 3
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "b" |),
            "push"
          |),
          [
            M.call (|
              M.get_name (| "S" |),
              [
                Value.Integer 4
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "b" |),
            "push"
          |),
          [
            M.call (|
              M.get_name (| "S" |),
              [
                Value.Integer 5
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "b" |),
            "push"
          |),
          [
            M.call (|
              M.get_name (| "S" |),
              [
                Value.Integer 6
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "b" |),
            "push"
          |),
          [
            M.call (|
              M.get_name (| "S" |),
              [
                Value.Integer 7
              ]
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test1 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "a" |),
            "push"
          |),
          []
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "a" |),
            Some (Value.Integer 1)
          |),
          M.get_name (| "b" |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.get_name (| "a" |),
                "length"
              |),
              Value.Integer 2
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.get_name (| "a" |),
                  Some (Value.Integer 0)
                |),
                "length"
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.get_name (| "a" |),
                  Some (Value.Integer 1)
                |),
                "length"
              |),
              Value.Integer 4
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "a" |),
                    Some (Value.Integer 1)
                  |),
                  Some (Value.Integer 0)
                |),
                "value"
              |),
              Value.Integer 4
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "a" |),
                    Some (Value.Integer 1)
                  |),
                  Some (Value.Integer 1)
                |),
                "value"
              |),
              Value.Integer 5
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "a" |),
                    Some (Value.Integer 1)
                  |),
                  Some (Value.Integer 2)
                |),
                "value"
              |),
              Value.Integer 6
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "a" |),
                    Some (Value.Integer 1)
                  |),
                  Some (Value.Integer 3)
                |),
                "value"
              |),
              Value.Integer 7
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test2 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "temp" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 183
src: 732:5:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 182
src: 732:3:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 181
src: 732:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 180
src: 732:1:0
nodeType: IdentifierPath
name: S
nameLocations: [732:1:0, ]
referencedDeclaration: 4

referencedDeclaration: 4
typeDescriptions: typeString struct StypeIdentifier st_struct$_S_$4_storage_ptr

length: 
typeDescriptions: typeString struct S[]typeIdentifier st_array$_t_struct$_S_$4_storage_$dyn_storage_ptr

length: 
typeDescriptions: typeString struct S[][]typeIdentifier st_array$_t_array$_t_struct$_S_$4_storage_$dyn_storage_$dyn_storage_ptr

,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "temp" |),
          M.get_name (| "a" |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.get_name (| "temp" |),
                "length"
              |),
              Value.Integer 2
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.get_name (| "temp" |),
                  Some (Value.Integer 0)
                |),
                "length"
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.get_name (| "temp" |),
                  Some (Value.Integer 1)
                |),
                "length"
              |),
              Value.Integer 4
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "temp" |),
                    Some (Value.Integer 1)
                  |),
                  Some (Value.Integer 0)
                |),
                "value"
              |),
              Value.Integer 4
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "temp" |),
                    Some (Value.Integer 1)
                  |),
                  Some (Value.Integer 1)
                |),
                "value"
              |),
              Value.Integer 5
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "temp" |),
                    Some (Value.Integer 1)
                  |),
                  Some (Value.Integer 2)
                |),
                "value"
              |),
              Value.Integer 6
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "temp" |),
                    Some (Value.Integer 1)
                  |),
                  Some (Value.Integer 3)
                |),
                "value"
              |),
              Value.Integer 7
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test3 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "temp" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 278
src: 1134:5:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 277
src: 1134:3:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 276
src: 1134:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 275
src: 1134:1:0
nodeType: IdentifierPath
name: S
nameLocations: [1134:1:0, ]
referencedDeclaration: 4

referencedDeclaration: 4
typeDescriptions: typeString struct StypeIdentifier st_struct$_S_$4_storage_ptr

length: 
typeDescriptions: typeString struct S[]typeIdentifier st_array$_t_struct$_S_$4_storage_$dyn_storage_ptr

length: 
typeDescriptions: typeString struct S[][]typeIdentifier st_array$_t_array$_t_struct$_S_$4_storage_$dyn_storage_$dyn_storage_ptr

,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "temp" |),
            Some (Value.Integer 0)
          |),
          M.index_access (|
            M.get_name (| "a" |),
            Some (Value.Integer 0)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "temp" |),
            Some (Value.Integer 1)
          |),
          M.index_access (|
            M.get_name (| "a" |),
            Some (Value.Integer 1)
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.get_name (| "temp" |),
                "length"
              |),
              Value.Integer 2
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.get_name (| "temp" |),
                  Some (Value.Integer 0)
                |),
                "length"
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.get_name (| "temp" |),
                  Some (Value.Integer 1)
                |),
                "length"
              |),
              Value.Integer 4
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "temp" |),
                    Some (Value.Integer 1)
                  |),
                  Some (Value.Integer 0)
                |),
                "value"
              |),
              Value.Integer 4
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "temp" |),
                    Some (Value.Integer 1)
                  |),
                  Some (Value.Integer 1)
                |),
                "value"
              |),
              Value.Integer 5
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "temp" |),
                    Some (Value.Integer 1)
                  |),
                  Some (Value.Integer 2)
                |),
                "value"
              |),
              Value.Integer 6
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "temp" |),
                    Some (Value.Integer 1)
                  |),
                  Some (Value.Integer 3)
                |),
                "value"
              |),
              Value.Integer 7
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test4 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "temp" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 385
src: 1566:5:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 384
src: 1566:3:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 383
src: 1566:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 382
src: 1566:1:0
nodeType: IdentifierPath
name: S
nameLocations: [1566:1:0, ]
referencedDeclaration: 4

referencedDeclaration: 4
typeDescriptions: typeString struct StypeIdentifier st_struct$_S_$4_storage_ptr

length: 
typeDescriptions: typeString struct S[]typeIdentifier st_array$_t_struct$_S_$4_storage_$dyn_storage_ptr

length: 
typeDescriptions: typeString struct S[][]typeIdentifier st_array$_t_array$_t_struct$_S_$4_storage_$dyn_storage_$dyn_storage_ptr

,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "temp" |),
            Some (Value.Integer 0)
          |),
          M.index_access (|
            M.get_name (| "a" |),
            Some (Value.Integer 0)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "temp" |),
            Some (Value.Integer 1)
          |),
          M.get_name (| "b" |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.get_name (| "temp" |),
                "length"
              |),
              Value.Integer 2
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.get_name (| "temp" |),
                  Some (Value.Integer 0)
                |),
                "length"
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.get_name (| "temp" |),
                  Some (Value.Integer 1)
                |),
                "length"
              |),
              Value.Integer 4
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "temp" |),
                    Some (Value.Integer 1)
                  |),
                  Some (Value.Integer 0)
                |),
                "value"
              |),
              Value.Integer 4
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "temp" |),
                    Some (Value.Integer 1)
                  |),
                  Some (Value.Integer 1)
                |),
                "value"
              |),
              Value.Integer 5
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "temp" |),
                    Some (Value.Integer 1)
                  |),
                  Some (Value.Integer 2)
                |),
                "value"
              |),
              Value.Integer 6
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "temp" |),
                    Some (Value.Integer 1)
                  |),
                  Some (Value.Integer 3)
                |),
                "value"
              |),
              Value.Integer 7
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Test.
