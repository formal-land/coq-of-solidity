(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Error E *)
(* Contract *)
Module A.
  Definition x : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        (* Beginning of a node! *)
id: 27
src: 61:50:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          Value.Integer 100
        |)
loopExpression: M.un_op (|
          true,
          "++",
          M.get_name (| "i" |)
        |)
body: M.call (|
          M.member_access (|
            M.get_name (| "x" |),
            "push"
          |),
          [
            M.call (|
              Ty.path "uint8",
              [
                M.get_name (| "i" |)
              ]
            |)
          ]
        |)
isSimpleCounterLoop: 1
 in
      let _ :=
        M.revert (|
          M.call (|
            M.get_name (| "E" |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End A.

(* Contract *)
Module B.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            Value.Tuple [
              M.call (|
                NewExpression (* Beginning of a node! *)
id: 37
src: 175:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 36
src: 175:1:0
nodeType: IdentifierPath
name: A
nameLocations: [175:1:0, ]
referencedDeclaration: 33

referencedDeclaration: 33
typeDescriptions: typeString contract AtypeIdentifier st_contract$_A_$33

,
                []
              |)
            ],
            "f"
          |),
          []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End B.
