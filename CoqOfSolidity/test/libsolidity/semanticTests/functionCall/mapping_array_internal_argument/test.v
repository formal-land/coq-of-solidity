(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module test_149.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            []
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                []
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          Some (M.call (|
            "allocate_unbounded",
            []
          |))
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "746573745f3134395f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "746573745f3134395f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "746573745f3134395f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module test_149_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      []
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  Some (M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x1175c049),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_set",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xf72d0b3b),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_get",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            []
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint8",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_uint8",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_uint8",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_uint8",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_uint8",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_uint8t_uint8t_uint8t_uint8t_uint8",
          ["headStart"; "dataEnd"],
          ["value0";
      "value1";
      "value2";
      "value3";
      "value4"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 160]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_uint8",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset_1"],
                Some ([Literal.number 32])
              |) in
            let _ :=
              M.declare (|
                ["value1"],
                M.call (|
                  "abi_decode_uint8",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset_1" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset_2"],
                Some ([Literal.number 64])
              |) in
            let _ :=
              M.declare (|
                ["value2"],
                M.call (|
                  "abi_decode_uint8",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset_2" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset_3"],
                Some ([Literal.number 96])
              |) in
            let _ :=
              M.declare (|
                ["value3"],
                M.call (|
                  "abi_decode_uint8",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset_3" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset_4"],
                Some ([Literal.number 128])
              |) in
            let _ :=
              M.declare (|
                ["value4"],
                M.call (|
                  "abi_decode_uint8",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset_4" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint8",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint8",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint8_uint8_uint8_uint8",
          ["headStart"; "value0"; "value1"; "value2"; "value3"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 128]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint8",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint8",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint8",
                [
                  M.get (| "value2" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 64]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint8",
                [
                  M.get (| "value3" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 96]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_set",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"; "param_2"; "param_3"; "param_4"],
                Some (M.call (|
                  "abi_decode_uint8t_uint8t_uint8t_uint8t_uint8",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"; "ret_2"; "ret_3"],
                Some (M.call (|
                  "fun_set",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |);
                    M.get (| "param_2" |);
                    M.get (| "param_3" |);
                    M.get (| "param_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_uint8_uint8_uint8_uint8",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |);
                    M.get (| "ret_2" |);
                    M.get (| "ret_3" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_tuple_uint8",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_uint8",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_get",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"],
                Some (M.call (|
                  "abi_decode_tuple_uint8",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"; "ret_2"; "ret_3"],
                Some (M.call (|
                  "fun_get",
                  [
                    M.get (| "param" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_uint8_uint8_uint8_uint8",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |);
                    M.get (| "ret_2" |);
                    M.get (| "ret_3" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint8",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_array_array_mapping_uint8_uint8_storage_to_array_mapping_uint8_uint8_ptr",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_set",
          ["var_key"; "var_value_a1"; "var_value_a2"; "var_value_b1"; "var_value_b2"],
          ["var_old_a1";
      "var_old_a2";
      "var_old_b1";
      "var_old_b2"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint8"],
                Some (M.call (|
                  "zero_value_for_split_uint8",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_old_a1"],
                M.get (| "zero_uint8" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint8_1"],
                Some (M.call (|
                  "zero_value_for_split_uint8",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_old_a2"],
                M.get (| "zero_uint8_1" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint8_2"],
                Some (M.call (|
                  "zero_value_for_split_uint8",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_old_b1"],
                M.get (| "zero_uint8_2" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint8_3"],
                Some (M.call (|
                  "zero_value_for_split_uint8",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_old_b2"],
                M.get (| "zero_uint8_3" |)
              |) in
            let _ :=
              M.assign (|
                ["_5_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_93_slot"],
                Some (M.get (| "_5_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_key" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_value_a1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.get (| "var_value_a2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_3" |))
              |) in
            let _ :=
              M.assign (|
                ["_9_slot"],
                Some (M.call (|
                  "convert_array_array_mapping_uint8_uint8_storage_to_array_mapping_uint8_uint8_ptr",
                  [
                    M.get (| "expr_93_slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_97_component"; "expr_97_component_1"],
                Some (M.call (|
                  "fun_set_internal",
                  [
                    M.get (| "_9_slot" |);
                    M.get (| "expr" |);
                    M.get (| "expr_1" |);
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_old_a2"],
                M.get (| "expr_97_component_1" |)
              |) in
            let _ :=
              M.declare (|
                ["var_old_a1"],
                M.get (| "expr_97_component" |)
              |) in
            let _ :=
              M.assign (|
                ["_10_slot"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["expr_slot"],
                Some (M.get (| "_10_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.get (| "var_key" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.get (| "_4" |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.get (| "var_value_b1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.get (| "var_value_b2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.get (| "_6" |))
              |) in
            let _ :=
              M.assign (|
                ["_slot"],
                Some (M.call (|
                  "convert_array_array_mapping_uint8_uint8_storage_to_array_mapping_uint8_uint8_ptr",
                  [
                    M.get (| "expr_slot" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component"; "expr_108_component"],
                Some (M.call (|
                  "fun_set_internal",
                  [
                    M.get (| "_slot" |);
                    M.get (| "expr_3" |);
                    M.get (| "expr_4" |);
                    M.get (| "expr_5" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_old_b2"],
                M.get (| "expr_108_component" |)
              |) in
            let _ :=
              M.declare (|
                ["var_old_b1"],
                M.get (| "expr_component" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x32",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x32]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_mapping_uint8_uint8_storage",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x02]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_mapping_uint8_uint8_storage",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_mapping_uint8_uint",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                Some (M.call (|
                  "array_length_array_mapping_uint8_uint8_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                Some (M.call (|
                  "array_dataslot_array_mapping_uint8_uint8_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint8_to_uint8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint8",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "mapping_index_access_mapping_uint8_uint8_of_uint8",
          ["slot"; "key"],
          ["dataSlot"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "convert_uint8_to_uint8",
                    [
                      M.get (| "key" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0x20];
                  M.get (| "slot" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["dataSlot"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x40]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_0_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_uint8",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_0_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_uint8",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offsett_uint8",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_get",
          ["var_key"],
          ["var";
      "var_1";
      "var_2";
      "var_3"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint8"],
                Some (M.call (|
                  "zero_value_for_split_uint8",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_uint8" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint8_1"],
                Some (M.call (|
                  "zero_value_for_split_uint8",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_1"],
                M.get (| "zero_uint8_1" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint8_2"],
                Some (M.call (|
                  "zero_value_for_split_uint8",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_2"],
                M.get (| "zero_uint8_2" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint8_3"],
                Some (M.call (|
                  "zero_value_for_split_uint8",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_3"],
                M.get (| "zero_uint8_3" |)
              |) in
            let _ :=
              M.assign (|
                ["_19_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_125_slot"],
                Some (M.get (| "_19_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_1"; "_2"],
                Some (M.call (|
                  "storage_array_index_access_mapping_uint8_uint",
                  [
                    M.get (| "expr_125_slot" |);
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_22_slot"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_127_slot"],
                Some (M.get (| "_22_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.get (| "var_key" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_3" |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.call (|
                  "mapping_index_access_mapping_uint8_uint8_of_uint8",
                  [
                    M.get (| "expr_127_slot" |);
                    M.get (| "expr_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.call (|
                  "read_from_storage_split_offset_uint8",
                  [
                    M.get (| "_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_145_component"],
                Some (M.get (| "expr_2" |))
              |) in
            let _ :=
              M.assign (|
                ["_26_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_130_slot"],
                Some (M.get (| "_26_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_6"; "_7"],
                Some (M.call (|
                  "storage_array_index_access_mapping_uint8_uint",
                  [
                    M.get (| "expr_130_slot" |);
                    M.get (| "expr_3" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_29_slot"],
                Some (M.get (| "_6" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_132_slot"],
                Some (M.get (| "_29_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.get (| "var_key" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.get (| "_8" |))
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                Some (M.call (|
                  "mapping_index_access_mapping_uint8_uint8_of_uint8",
                  [
                    M.get (| "expr_132_slot" |);
                    M.get (| "expr_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_10"],
                Some (M.call (|
                  "read_from_storage_split_offset_uint8",
                  [
                    M.get (| "_9" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.get (| "_10" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_145_component_1"],
                Some (M.get (| "expr_5" |))
              |) in
            let _ :=
              M.assign (|
                ["_33_slot"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["expr_135_slot"],
                Some (M.get (| "_33_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_11"; "_12"],
                Some (M.call (|
                  "storage_array_index_access_mapping_uint8_uint",
                  [
                    M.get (| "expr_135_slot" |);
                    M.get (| "expr_6" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_36_slot"],
                Some (M.get (| "_11" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_137_slot"],
                Some (M.get (| "_36_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_13"],
                Some (M.get (| "var_key" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some (M.get (| "_13" |))
              |) in
            let _ :=
              M.assign (|
                ["_14"],
                Some (M.call (|
                  "mapping_index_access_mapping_uint8_uint8_of_uint8",
                  [
                    M.get (| "expr_137_slot" |);
                    M.get (| "expr_7" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_15"],
                Some (M.call (|
                  "read_from_storage_split_offset_uint8",
                  [
                    M.get (| "_14" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some (M.get (| "_15" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component"],
                Some (M.get (| "expr_8" |))
              |) in
            let _ :=
              M.assign (|
                ["_40_slot"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["expr_140_slot"],
                Some (M.get (| "_40_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_16"; "_17"],
                Some (M.call (|
                  "storage_array_index_access_mapping_uint8_uint",
                  [
                    M.get (| "expr_140_slot" |);
                    M.get (| "expr_9" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_43_slot"],
                Some (M.get (| "_16" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_142_slot"],
                Some (M.get (| "_43_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_18"],
                Some (M.get (| "var_key" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some (M.get (| "_18" |))
              |) in
            let _ :=
              M.assign (|
                ["_19"],
                Some (M.call (|
                  "mapping_index_access_mapping_uint8_uint8_of_uint8",
                  [
                    M.get (| "expr_142_slot" |);
                    M.get (| "expr_10" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_20"],
                Some (M.call (|
                  "read_from_storage_split_offset_uint8",
                  [
                    M.get (| "_19" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some (M.get (| "_20" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component_1"],
                Some (M.get (| "expr_11" |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_145_component" |)
              |) in
            let _ :=
              M.declare (|
                ["var_1"],
                M.get (| "expr_145_component_1" |)
              |) in
            let _ :=
              M.declare (|
                ["var_2"],
                M.get (| "expr_component" |)
              |) in
            let _ :=
              M.declare (|
                ["var_3"],
                M.get (| "expr_component_1" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_mapping_uint8_uint8_storage_ptr",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x02]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_mapping_uint8_uint8_storage_ptr",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_mapping_uint8_uint8_ptr",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                Some (M.call (|
                  "array_length_array_mapping_uint8_uint8_storage_ptr",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                Some (M.call (|
                  "array_dataslot_array_mapping_uint8_uint8_storage_ptr",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_shift",
          ["value"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                Some ([Literal.number 255])
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left",
                  [
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_uint8",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_uint8_to_uint8",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                Some (M.call (|
                  "convert_uint8_to_uint8",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_shift",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.call (|
                        "prepare_store_uint8",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_set_internal",
          ["var_m_slot"; "var_key"; "var_value1"; "var_value2"],
          ["var_";
      "var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_t_uint8"],
                Some (M.call (|
                  "zero_value_for_split_uint8",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "zero_t_uint8" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint8"],
                Some (M.call (|
                  "zero_value_for_split_uint8",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_uint8" |)
              |) in
            let _ :=
              M.assign (|
                ["_49_slot"],
                Some (M.get (| "var_m_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_33_slot"],
                Some (M.get (| "_49_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_1"; "_2"],
                Some (M.call (|
                  "storage_array_index_access_mapping_uint8_uint8_ptr",
                  [
                    M.get (| "expr_33_slot" |);
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_52_slot"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_35_slot"],
                Some (M.get (| "_52_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.get (| "var_key" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_3" |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.call (|
                  "mapping_index_access_mapping_uint8_uint8_of_uint8",
                  [
                    M.get (| "expr_35_slot" |);
                    M.get (| "expr_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.call (|
                  "read_from_storage_split_offset_uint8",
                  [
                    M.get (| "_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.assign (|
                ["var_oldValue1"],
                Some (M.get (| "expr_2" |))
              |) in
            let _ :=
              M.assign (|
                ["_56_slot"],
                Some (M.get (| "var_m_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_41_slot"],
                Some (M.get (| "_56_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_6"; "_7"],
                Some (M.call (|
                  "storage_array_index_access_mapping_uint8_uint8_ptr",
                  [
                    M.get (| "expr_41_slot" |);
                    M.get (| "expr_3" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_59_slot"],
                Some (M.get (| "_6" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_43_slot"],
                Some (M.get (| "_59_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.get (| "var_key" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.get (| "_8" |))
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                Some (M.call (|
                  "mapping_index_access_mapping_uint8_uint8_of_uint8",
                  [
                    M.get (| "expr_43_slot" |);
                    M.get (| "expr_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_10"],
                Some (M.call (|
                  "read_from_storage_split_offset_uint8",
                  [
                    M.get (| "_9" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.get (| "_10" |))
              |) in
            let _ :=
              M.assign (|
                ["var_oldValue2"],
                Some (M.get (| "expr_5" |))
              |) in
            let _ :=
              M.assign (|
                ["_11"],
                Some (M.get (| "var_value1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some (M.get (| "_11" |))
              |) in
            let _ :=
              M.assign (|
                ["_64_slot"],
                Some (M.get (| "var_m_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_47_slot"],
                Some (M.get (| "_64_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["_12"; "_13"],
                Some (M.call (|
                  "storage_array_index_access_mapping_uint8_uint8_ptr",
                  [
                    M.get (| "expr_47_slot" |);
                    M.get (| "expr_7" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_67_slot"],
                Some (M.get (| "_12" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_50_slot"],
                Some (M.get (| "_67_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_14"],
                Some (M.get (| "var_key" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some (M.get (| "_14" |))
              |) in
            let _ :=
              M.assign (|
                ["_15"],
                Some (M.call (|
                  "mapping_index_access_mapping_uint8_uint8_of_uint8",
                  [
                    M.get (| "expr_50_slot" |);
                    M.get (| "expr_8" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_uint8_to_uint8",
                [
                  M.get (| "_15" |);
                  M.get (| "expr_6" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_16"],
                Some (M.get (| "var_value2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.get (| "_16" |))
              |) in
            let _ :=
              M.assign (|
                ["_71_slot"],
                Some (M.get (| "var_m_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_55_slot"],
                Some (M.get (| "_71_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["_17"; "_18"],
                Some (M.call (|
                  "storage_array_index_access_mapping_uint8_uint8_ptr",
                  [
                    M.get (| "expr_55_slot" |);
                    M.get (| "expr_10" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_74_slot"],
                Some (M.get (| "_17" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_58_slot"],
                Some (M.get (| "_74_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_19"],
                Some (M.get (| "var_key" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some (M.get (| "_19" |))
              |) in
            let _ :=
              M.assign (|
                ["_20"],
                Some (M.call (|
                  "mapping_index_access_mapping_uint8_uint8_of_uint8",
                  [
                    M.get (| "expr_58_slot" |);
                    M.get (| "expr_11" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_uint8_to_uint8",
                [
                  M.get (| "_20" |);
                  M.get (| "expr_9" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_21"],
                Some (M.get (| "var_oldValue1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some (M.get (| "_21" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component"],
                Some (M.get (| "expr_12" |))
              |) in
            let _ :=
              M.assign (|
                ["_22"],
                Some (M.get (| "var_oldValue2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some (M.get (| "_22" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component_1"],
                Some (M.get (| "expr_13" |))
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "expr_component" |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_component_1" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a2646970667358221220d0e7f39dee8cd93cb30c7a95e1854ec79adc0f1a235ffca5fdad159c2144359a64736f6c634300081b0033".
  End test_149_deployed.
End test_149.
