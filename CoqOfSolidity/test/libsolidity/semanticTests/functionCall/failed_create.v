(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module D.
  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End D.

(* Contract *)
Module C.
  Definition x : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [amount] =>
      let _ :=
        M.un_op (|
          false,
          "++",
          M.get_name (| "x" |)
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            FunctionCallOptions Value.Tuple [
              NewExpression (* Beginning of a node! *)
id: 23
src: 162:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 22
src: 162:1:0
nodeType: IdentifierPath
name: D
nameLocations: [162:1:0, ]
referencedDeclaration: 5

referencedDeclaration: 5
typeDescriptions: typeString contract DtypeIdentifier st_contract$_D_$5


            ] [value, ] M.get_name (| "amount" |)
,
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition stack (α : list Value.t) : M :=
    match α with
    | [depth] =>
      let _ :=
        if M.bin_op (|
          ">",
          M.get_name (| "depth" |),
          Value.Integer 0
        |) then
          M.return_ (|
            M.call (|
              M.member_access (|
                M.get_name (| "this" |),
                "stack"
              |),
              [
                M.bin_op (|
                  "-",
                  M.get_name (| "depth" |),
                  Value.Integer 1
                |)
              ]
            |)
          |)
        else
          M.return_ (|
            M.call (|
              Ty.path "address",
              [
                M.call (|
                  M.get_name (| "f" |),
                  [
                    Value.Integer 0
                  ]
                |)
              ]
            |)
          |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
