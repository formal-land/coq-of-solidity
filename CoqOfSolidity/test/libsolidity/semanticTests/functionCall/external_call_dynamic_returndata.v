(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Pragma solidity>=0.6.0 *)

(* Contract *)
Module C.
  Definition d (α : list Value.t) : M :=
    match α with
    | [n] =>
      let _ :=
        M.define (|
          [ "data" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 15
src: 136:6:0
nodeType: ArrayTypeName
baseType: Ty.path "uint"
length: 
typeDescriptions: typeString uint256[]typeIdentifier st_array$_t_uint256_$dyn_storage_ptr

,
            [
              M.get_name (| "n" |)
            ]
          |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 37
src: 155:62:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          M.member_access (|
            M.get_name (| "data" |),
            "length"
          |)
        |)
loopExpression: M.un_op (|
          true,
          "++",
          M.get_name (| "i" |)
        |)
body: M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "data" |),
            Some (M.get_name (| "i" |))
          |),
          M.get_name (| "i" |)
        |)
isSimpleCounterLoop: 1
 in
      let _ :=
        M.return_ (|
          M.get_name (| "data" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition dt (α : list Value.t) : M :=
    match α with
    | [n] =>
      let _ :=
        M.define (|
          [ "data" ],
          M.call (|
            M.member_access (|
              M.get_name (| "this" |),
              "d"
            |),
            [
              M.get_name (| "n" |)
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "sum" ],
          Value.Integer 0
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 79
src: 370:65:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          M.member_access (|
            M.get_name (| "data" |),
            "length"
          |)
        |)
loopExpression: M.un_op (|
          true,
          "++",
          M.get_name (| "i" |)
        |)
body: M.assign (|
          "+=",
          M.get_name (| "sum" |),
          M.index_access (|
            M.get_name (| "data" |),
            Some (M.get_name (| "i" |))
          |)
        |)
isSimpleCounterLoop: 1
 in
      let _ :=
        M.return_ (|
          M.get_name (| "sum" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
