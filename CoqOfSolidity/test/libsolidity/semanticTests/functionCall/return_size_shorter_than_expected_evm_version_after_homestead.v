(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Interface *)
Module LongReturn.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.
End LongReturn.

(* Contract *)
Module ShortReturn.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End ShortReturn.

(* Contract *)
Module Test.
  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "shortReturn" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 24
src: 259:11:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 23
src: 259:11:0
nodeType: IdentifierPath
name: ShortReturn
nameLocations: [259:11:0, ]
referencedDeclaration: 15

referencedDeclaration: 15
typeDescriptions: typeString contract ShortReturntypeIdentifier st_contract$_ShortReturn_$15

,
            []
          |)
        |) in
      let _ :=
        M.define (|
          [ "freeMemoryBefore" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 31
src: 313:64:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 336:16:0declaration: 29isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.call (|
          M.member_access (|
            M.call (|
              M.get_name (| "LongReturn" |),
              [
                M.call (|
                  Ty.path "address",
                  [
                    M.get_name (| "shortReturn" |)
                  ]
                |)
              ]
            |),
            "f"
          |),
          []
        |) in
      let _ :=
        M.define (|
          [ "freeMemoryAfter" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 44
src: 630:63:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 653:15:0declaration: 42isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          M.bin_op (|
            "-",
            M.get_name (| "freeMemoryAfter" |),
            M.get_name (| "freeMemoryBefore" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Test.
