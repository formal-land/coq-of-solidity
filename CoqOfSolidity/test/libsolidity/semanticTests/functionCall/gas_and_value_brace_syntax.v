(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module helper.
  Definition flag : Value.t :=
    undefined.

  Definition getBalance (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.call (|
              Ty.path "address",
              [
                M.get_name (| "this" |)
              ]
            |),
            "balance"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition setFlag (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "flag" |),
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition getFlag (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.get_name (| "flag" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End helper.

(* Contract *)
Module test.
  Definition h : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "h" |),
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 39
src: 361:6:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 38
src: 361:6:0
nodeType: IdentifierPath
name: helper
nameLocations: [361:6:0, ]
referencedDeclaration: 31

referencedDeclaration: 31
typeDescriptions: typeString contract helpertypeIdentifier st_contract$_helper_$31

,
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition sendAmount (α : list Value.t) : M :=
    match α with
    | [amount] =>
      let _ :=
        M.return_ (|
          M.call (|
            FunctionCallOptions M.member_access (|
              M.get_name (| "h" |),
              "getBalance"
            |) [value, ] M.get_name (| "amount" |)
,
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition outOfGas (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          FunctionCallOptions M.member_access (|
            M.get_name (| "h" |),
            "setFlag"
          |) [gas, ] Value.Integer 2
,
          []
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition checkState (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "flagAfter" |),
          M.call (|
            M.member_access (|
              M.get_name (| "h" |),
              "getFlag"
            |),
            []
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "myBal" |),
          M.member_access (|
            M.call (|
              Ty.path "address",
              [
                M.get_name (| "this" |)
              ]
            |),
            "balance"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End test.
