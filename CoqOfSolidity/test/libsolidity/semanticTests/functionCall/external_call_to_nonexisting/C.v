(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_102.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "constructor_C",
          [

          ]
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          M.call (|
            "allocate_unbounded",
            [

            ]
          |)
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f3130325f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3130325f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3130325f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_uint160",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.call (|
                "and",
                [
                  M.get (| "value" |);
                  M.call (|
                    "sub",
                    [
                      M.call (|
                        "shl",
                        [
                          [Literal.number 160];
                          [Literal.number 1]
                        ]
                      |);
                      [Literal.number 1]
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "identity",
        ["value"],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_by_to_uint160",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint160",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_by_to_address",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "convert_rational_by_to_uint160",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_uint160_to_uint160",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint160",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_uint160",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_uint160_to_contract_I",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "convert_uint160_to_uint160",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_address_to_contract_I",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "convert_uint160_to_contract_I",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_left",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shl",
                [
                  [Literal.number 0];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_byte_slice_shift",
        ["value"; "toInsert"],
        ["result"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["mask"],
              M.call (|
                "sub",
                [
                  M.call (|
                    "shl",
                    [
                      [Literal.number 160];
                      [Literal.number 1]
                    ]
                  |);
                  [Literal.number 1]
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["toInsert"],
              M.call (|
                "shift_left",
                [
                  M.get (| "toInsert" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "and",
                [
                  M.get (| "value" |);
                  M.call (|
                    "not",
                    [
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["result"],
              M.call (|
                "or",
                [
                  M.get (| "value" |);
                  M.call (|
                    "and",
                    [
                      M.get (| "toInsert" |);
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_contract_I_to_contract_I",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "convert_uint160_to_contract_I",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "prepare_store_contract_I",
        ["value"],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_storage_value_offsett_contract_I_to_contract_I",
        ["slot"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["convertedValue"],
              M.call (|
                "convert_contract_I_to_contract_I",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "sstore",
              [
                M.get (| "slot" |);
                M.call (|
                  "update_byte_slice_shift",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |);
                    M.call (|
                      "prepare_store_contract_I",
                      [
                        M.get (| "convertedValue" |)
                      ]
                    |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "constructor_C",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["expr"],
              [Literal.number 0xcafecafe]
            |) in
          let _ :=
            M.assign (|
              ["expr_1"],
              M.call (|
                "convert_rational_by_to_address",
                [
                  M.get (| "expr" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["expr_address"],
              M.call (|
                "convert_address_to_contract_I",
                [
                  M.get (| "expr_1" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_contract_I_to_contract_I",
              [
                [Literal.number 0x00];
                M.get (| "expr_address" |)
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_102_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0xb3de648b),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_f",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            [

            ]
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_uint256",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_uint256",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_uint256",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_tuple_uint256",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                [Literal.number 0]
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_to_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_f",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"],
                M.call (|
                  "abi_decode_tuple_uint256",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_f",
                  [
                    M.get (| "param" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_0_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_1_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_2_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_2_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_2_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_3_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_3_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_5_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_0_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_contract_I",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "shl",
                          [
                            [Literal.number 160];
                            [Literal.number 1]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_contract_I",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_contract_I",
                  [
                    M.call (|
                      "shift_right_0_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_contract_I",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offsett_contract_I",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint160",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "shl",
                          [
                            [Literal.number 160];
                            [Literal.number 1]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint160_to_uint160",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint160",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint160",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint160_to_address",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_uint160",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_contract_I_to_address",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_address",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "round_up_to_mul_of",
          ["value"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "and",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 31]
                      ]
                    |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 31]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "finalize_allocation",
          ["memPtr"; "size"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["newFreePtr"],
                M.call (|
                  "add",
                  [
                    M.get (| "memPtr" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "size" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "newFreePtr" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "newFreePtr" |);
                        M.get (| "memPtr" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 64];
                  M.get (| "newFreePtr" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory",
          ["size"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "memPtr" |);
                  M.get (| "size" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_string",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "round_up_to_mul_of",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "add",
                  [
                    M.get (| "size" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_memory_to_memory_with_cleanup",
          ["src"; "dst"; "length"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mcopy",
                [
                  M.get (| "dst" |);
                  M.get (| "src" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "dst" |);
                      M.get (| "length" |)
                    ]
                  |);
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_available_length_string_fromMemory",
          ["src"; "length"; "end"],
          ["array"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["array"],
                M.call (|
                  "allocate_memory",
                  [
                    M.call (|
                      "array_allocation_size_string",
                      [
                        M.get (| "length" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "array" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["dst"],
                M.call (|
                  "add",
                  [
                    M.get (| "array" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "src" |);
                        M.get (| "length" |)
                      ]
                    |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "copy_memory_to_memory_with_cleanup",
                [
                  M.get (| "src" |);
                  M.get (| "dst" |);
                  M.get (| "length" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_string_memory_ptr_fromMemory",
          ["offset"; "end"],
          ["array"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "offset" |);
                            [Literal.number 0x1f]
                          ]
                        |);
                        M.get (| "end" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["array"],
                M.call (|
                  "abi_decode_available_length_string_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "offset" |);
                        [Literal.number 0x20]
                      ]
                    |);
                    M.get (| "length" |);
                    M.get (| "end" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_string_fromMemory",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                M.call (|
                  "mload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_string_memory_ptr_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple",
          ["headStart"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_forward",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["pos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "returndatacopy",
                [
                  M.get (| "pos" |);
                  [Literal.number 0];
                  M.call (|
                    "returndatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "returndatasize",
                    [

                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_t_uint256_fromMemory",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "mload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_uint256",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_uint256_fromMemory",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                [Literal.number 0]
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_t_uint256_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_fromMemory",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x11",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x11]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_add_uint256",
          ["x"; "y"],
          ["sum"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["x"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "x" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["y"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["sum"],
                M.call (|
                  "add",
                  [
                    M.get (| "x" |);
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "x" |);
                    M.get (| "sum" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_f",
          ["var_c"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_c" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_0_by_1_to_uint256",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.switch (|
                M.get (| "expr_2" |),
                [
                  (
                    Some (Literal.number 0),
                    ltac:(M.monadic (
                      let _ :=
                        M.assign (|
                          ["_2"],
                          M.get (| "var_c" |)
                        |) in
                      let _ :=
                        M.assign (|
                          ["expr_3"],
                          M.get (| "_2" |)
                        |) in
                      let _ :=
                        M.assign (|
                          ["expr_4"],
                          [Literal.number 0x01]
                        |) in
                      let _ :=
                        M.assign (|
                          ["expr_5"],
                          M.call (|
                            "eq",
                            [
                              M.call (|
                                "cleanup_uint256",
                                [
                                  M.get (| "expr_3" |)
                                ]
                              |);
                              M.call (|
                                "convert_rational_1_by_1_to_uint256",
                                [
                                  M.get (| "expr_4" |)
                                ]
                              |)
                            ]
                          |)
                        |) in
                      let _ :=
                        M.switch (|
                          M.get (| "expr_5" |),
                          [
                            (
                              Some (Literal.number 0),
                              ltac:(M.monadic (
                                let _ :=
                                  M.assign (|
                                    ["_3"],
                                    M.get (| "var_c" |)
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["expr_6"],
                                    M.get (| "_3" |)
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["expr_7"],
                                    [Literal.number 0x02]
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["expr_8"],
                                    M.call (|
                                      "eq",
                                      [
                                        M.call (|
                                          "cleanup_uint256",
                                          [
                                            M.get (| "expr_6" |)
                                          ]
                                        |);
                                        M.call (|
                                          "convert_rational_2_by_1_to_uint256",
                                          [
                                            M.get (| "expr_7" |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |) in
                                let _ :=
                                  M.switch (|
                                    M.get (| "expr_8" |),
                                    [
                                      (
                                        Some (Literal.number 0),
                                        ltac:(M.monadic (
                                          let _ :=
                                            M.assign (|
                                              ["_4"],
                                              M.get (| "var_c" |)
                                            |) in
                                          let _ :=
                                            M.assign (|
                                              ["expr_9"],
                                              M.get (| "_4" |)
                                            |) in
                                          let _ :=
                                            M.assign (|
                                              ["expr_10"],
                                              [Literal.number 0x03]
                                            |) in
                                          let _ :=
                                            M.assign (|
                                              ["expr_11"],
                                              M.call (|
                                                "eq",
                                                [
                                                  M.call (|
                                                    "cleanup_uint256",
                                                    [
                                                      M.get (| "expr_9" |)
                                                    ]
                                                  |);
                                                  M.call (|
                                                    "convert_t_rational_by_to_t_uint256",
                                                    [
                                                      M.get (| "expr_10" |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.switch (|
                                              M.get (| "expr_11" |),
                                              [
                                                (
                                                  Some (Literal.number 0),
                                                  ltac:(M.monadic (
                                                    let _ :=
                                                      M.assign (|
                                                        ["_5"],
                                                        M.get (| "var_c" |)
                                                      |) in
                                                    let _ :=
                                                      M.assign (|
                                                        ["expr_12"],
                                                        M.get (| "_5" |)
                                                      |) in
                                                    let _ :=
                                                      M.assign (|
                                                        ["expr_13"],
                                                        [Literal.number 0x04]
                                                      |) in
                                                    let _ :=
                                                      M.assign (|
                                                        ["expr_14"],
                                                        M.call (|
                                                          "eq",
                                                          [
                                                            M.call (|
                                                              "cleanup_uint256",
                                                              [
                                                                M.get (| "expr_12" |)
                                                              ]
                                                            |);
                                                            M.call (|
                                                              "convert_rational_by_to_uint256",
                                                              [
                                                                M.get (| "expr_13" |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    let _ :=
                                                      M.switch (|
                                                        M.get (| "expr_14" |),
                                                        [
                                                          (
                                                            Some (Literal.number 0),
                                                            ltac:(M.monadic (
                                                              let _ :=
                                                                M.assign (|
                                                                  ["_6"],
                                                                  M.get (| "var_c" |)
                                                                |) in
                                                              let _ :=
                                                                M.assign (|
                                                                  ["expr_15"],
                                                                  M.get (| "_6" |)
                                                                |) in
                                                              let _ :=
                                                                M.assign (|
                                                                  ["expr_16"],
                                                                  [Literal.number 0x05]
                                                                |) in
                                                              let _ :=
                                                                M.assign (|
                                                                  ["expr_17"],
                                                                  M.call (|
                                                                    "eq",
                                                                    [
                                                                      M.call (|
                                                                        "cleanup_uint256",
                                                                        [
                                                                          M.get (| "expr_15" |)
                                                                        ]
                                                                      |);
                                                                      M.call (|
                                                                        "convert_rational_5_by_1_to_uint256",
                                                                        [
                                                                          M.get (| "expr_16" |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |) in
                                                              let _ :=
                                                                M.if_ (|
                                                                  M.get (| "expr_17" |),
                                                                  ltac:(M.monadic (
                                                                    let _ :=
                                                                      M.assign (|
                                                                        ["_8_address"],
                                                                        M.call (|
                                                                          "read_from_storage_split_offset_contract_I",
                                                                          [
                                                                            [Literal.number 0x00]
                                                                          ]
                                                                        |)
                                                                      |) in
                                                                    let _ :=
                                                                      M.assign (|
                                                                        ["expr_85_address"],
                                                                        M.get (| "_8_address" |)
                                                                      |) in
                                                                    let _ :=
                                                                      M.assign (|
                                                                        ["expr_87_address"],
                                                                        M.call (|
                                                                          "convert_contract_I_to_address",
                                                                          [
                                                                            M.get (| "expr_85_address" |)
                                                                          ]
                                                                        |)
                                                                      |) in
                                                                    let _ :=
                                                                      M.assign (|
                                                                        ["expr_87_functionSelector"],
                                                                        [Literal.number 0xa56dfe4a]
                                                                      |) in
                                                                    let _ :=
                                                                      M.assign (|
                                                                        ["_7"],
                                                                        M.call (|
                                                                          "allocate_unbounded",
                                                                          [

                                                                          ]
                                                                        |)
                                                                      |) in
                                                                    let _ :=
                                                                      M.call (|
                                                                        "mstore",
                                                                        [
                                                                          M.get (| "_7" |);
                                                                          M.call (|
                                                                            "shift_left",
                                                                            [
                                                                              M.get (| "expr_87_functionSelector" |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |) in
                                                                    let _ :=
                                                                      M.assign (|
                                                                        ["_8"],
                                                                        M.call (|
                                                                          "abi_encode_tuple",
                                                                          [
                                                                            M.call (|
                                                                              "add",
                                                                              [
                                                                                M.get (| "_7" |);
                                                                                [Literal.number 4]
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |) in
                                                                    let _ :=
                                                                      M.assign (|
                                                                        ["_9"],
                                                                        M.call (|
                                                                          "call",
                                                                          [
                                                                            M.call (|
                                                                              "gas",
                                                                              [

                                                                              ]
                                                                            |);
                                                                            M.get (| "expr_87_address" |);
                                                                            [Literal.number 0];
                                                                            M.get (| "_7" |);
                                                                            M.call (|
                                                                              "sub",
                                                                              [
                                                                                M.get (| "_8" |);
                                                                                M.get (| "_7" |)
                                                                              ]
                                                                            |);
                                                                            M.get (| "_7" |);
                                                                            [Literal.number 0]
                                                                          ]
                                                                        |)
                                                                      |) in
                                                                    let _ :=
                                                                      M.if_ (|
                                                                        M.call (|
                                                                          "iszero",
                                                                          [
                                                                            M.get (| "_9" |)
                                                                          ]
                                                                        |),
                                                                        ltac:(M.monadic (
                                                                          let _ :=
                                                                            M.call (|
                                                                              "revert_forward",
                                                                              [

                                                                              ]
                                                                            |) in
                                                                          tt
                                                                        ))
                                                                      |) in
                                                                    let _ :=
                                                                      M.assign (|
                                                                        ["expr_mpos"],
                                                                        Literal.undefined
                                                                      |) in
                                                                    let _ :=
                                                                      M.if_ (|
                                                                        M.get (| "_9" |),
                                                                        ltac:(M.monadic (
                                                                          let _ :=
                                                                            M.assign (|
                                                                              ["_10"],
                                                                              M.call (|
                                                                                "returndatasize",
                                                                                [

                                                                                ]
                                                                              |)
                                                                            |) in
                                                                          let _ :=
                                                                            M.call (|
                                                                              "returndatacopy",
                                                                              [
                                                                                M.get (| "_7" |);
                                                                                [Literal.number 0];
                                                                                M.get (| "_10" |)
                                                                              ]
                                                                            |) in
                                                                          let _ :=
                                                                            M.call (|
                                                                              "finalize_allocation",
                                                                              [
                                                                                M.get (| "_7" |);
                                                                                M.get (| "_10" |)
                                                                              ]
                                                                            |) in
                                                                          let _ :=
                                                                            M.declare (|
                                                                              ["expr_mpos"],
                                                                              M.call (|
                                                                                "abi_decode_string_fromMemory",
                                                                                [
                                                                                  M.get (| "_7" |);
                                                                                  M.call (|
                                                                                    "add",
                                                                                    [
                                                                                      M.get (| "_7" |);
                                                                                      M.get (| "_10" |)
                                                                                    ]
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |) in
                                                                          tt
                                                                        ))
                                                                      |) in
                                                                    tt
                                                                  ))
                                                                |) in
                                                              tt
                                                            ))                                                    );
                                                          (
                                                            None,
                                                            ltac:(M.monadic (
                                                              let _ :=
                                                                M.assign (|
                                                                  ["_13_address"],
                                                                  M.call (|
                                                                    "read_from_storage_split_offset_contract_I",
                                                                    [
                                                                      [Literal.number 0x00]
                                                                    ]
                                                                  |)
                                                                |) in
                                                              let _ :=
                                                                M.assign (|
                                                                  ["expr_77_address"],
                                                                  M.get (| "_13_address" |)
                                                                |) in
                                                              let _ :=
                                                                M.assign (|
                                                                  ["expr_79_address"],
                                                                  M.call (|
                                                                    "convert_contract_I_to_address",
                                                                    [
                                                                      M.get (| "expr_77_address" |)
                                                                    ]
                                                                  |)
                                                                |) in
                                                              let _ :=
                                                                M.assign (|
                                                                  ["expr_79_functionSelector"],
                                                                  [Literal.number 0x0c55699c]
                                                                |) in
                                                              let _ :=
                                                                M.assign (|
                                                                  ["_11"],
                                                                  M.call (|
                                                                    "allocate_unbounded",
                                                                    [

                                                                    ]
                                                                  |)
                                                                |) in
                                                              let _ :=
                                                                M.call (|
                                                                  "mstore",
                                                                  [
                                                                    M.get (| "_11" |);
                                                                    M.call (|
                                                                      "shift_left",
                                                                      [
                                                                        M.get (| "expr_79_functionSelector" |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |) in
                                                              let _ :=
                                                                M.assign (|
                                                                  ["_12"],
                                                                  M.call (|
                                                                    "abi_encode_tuple",
                                                                    [
                                                                      M.call (|
                                                                        "add",
                                                                        [
                                                                          M.get (| "_11" |);
                                                                          [Literal.number 4]
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |) in
                                                              let _ :=
                                                                M.assign (|
                                                                  ["_13"],
                                                                  M.call (|
                                                                    "call",
                                                                    [
                                                                      M.call (|
                                                                        "gas",
                                                                        [

                                                                        ]
                                                                      |);
                                                                      M.get (| "expr_79_address" |);
                                                                      [Literal.number 0];
                                                                      M.get (| "_11" |);
                                                                      M.call (|
                                                                        "sub",
                                                                        [
                                                                          M.get (| "_12" |);
                                                                          M.get (| "_11" |)
                                                                        ]
                                                                      |);
                                                                      M.get (| "_11" |);
                                                                      [Literal.number 32]
                                                                    ]
                                                                  |)
                                                                |) in
                                                              let _ :=
                                                                M.if_ (|
                                                                  M.call (|
                                                                    "iszero",
                                                                    [
                                                                      M.get (| "_13" |)
                                                                    ]
                                                                  |),
                                                                  ltac:(M.monadic (
                                                                    let _ :=
                                                                      M.call (|
                                                                        "revert_forward",
                                                                        [

                                                                        ]
                                                                      |) in
                                                                    tt
                                                                  ))
                                                                |) in
                                                              let _ :=
                                                                M.assign (|
                                                                  ["expr_18"],
                                                                  Literal.undefined
                                                                |) in
                                                              let _ :=
                                                                M.if_ (|
                                                                  M.get (| "_13" |),
                                                                  ltac:(M.monadic (
                                                                    let _ :=
                                                                      M.assign (|
                                                                        ["_14"],
                                                                        [Literal.number 32]
                                                                      |) in
                                                                    let _ :=
                                                                      M.if_ (|
                                                                        M.call (|
                                                                          "gt",
                                                                          [
                                                                            M.get (| "_14" |);
                                                                            M.call (|
                                                                              "returndatasize",
                                                                              [

                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |),
                                                                        ltac:(M.monadic (
                                                                          let _ :=
                                                                            M.declare (|
                                                                              ["_14"],
                                                                              M.call (|
                                                                                "returndatasize",
                                                                                [

                                                                                ]
                                                                              |)
                                                                            |) in
                                                                          tt
                                                                        ))
                                                                      |) in
                                                                    let _ :=
                                                                      M.call (|
                                                                        "finalize_allocation",
                                                                        [
                                                                          M.get (| "_11" |);
                                                                          M.get (| "_14" |)
                                                                        ]
                                                                      |) in
                                                                    let _ :=
                                                                      M.declare (|
                                                                        ["expr_18"],
                                                                        M.call (|
                                                                          "abi_decode_uint256_fromMemory",
                                                                          [
                                                                            M.get (| "_11" |);
                                                                            M.call (|
                                                                              "add",
                                                                              [
                                                                                M.get (| "_11" |);
                                                                                M.get (| "_14" |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |) in
                                                                    tt
                                                                  ))
                                                                |) in
                                                              tt
                                                            ))                                                    )                                                  ]
                                                      |) in
                                                    tt
                                                  ))                                          );
                                                (
                                                  None,
                                                  ltac:(M.monadic (
                                                    let _ :=
                                                      M.assign (|
                                                        ["_18_address"],
                                                        M.call (|
                                                          "read_from_storage_split_offset_contract_I",
                                                          [
                                                            [Literal.number 0x00]
                                                          ]
                                                        |)
                                                      |) in
                                                    let _ :=
                                                      M.assign (|
                                                        ["expr_67_address"],
                                                        M.get (| "_18_address" |)
                                                      |) in
                                                    let _ :=
                                                      M.assign (|
                                                        ["expr_address"],
                                                        M.call (|
                                                          "convert_contract_I_to_address",
                                                          [
                                                            M.get (| "expr_67_address" |)
                                                          ]
                                                        |)
                                                      |) in
                                                    let _ :=
                                                      M.assign (|
                                                        ["expr_69_functionSelector"],
                                                        [Literal.number 0xc3da42b8]
                                                      |) in
                                                    let _ :=
                                                      M.assign (|
                                                        ["expr_19"],
                                                        [Literal.number 0x01]
                                                      |) in
                                                    let _ :=
                                                      M.assign (|
                                                        ["expr_71_address"],
                                                        M.get (| "expr_address" |)
                                                      |) in
                                                    let _ :=
                                                      M.assign (|
                                                        ["expr_71_functionSelector"],
                                                        M.get (| "expr_69_functionSelector" |)
                                                      |) in
                                                    let _ :=
                                                      M.assign (|
                                                        ["expr_value"],
                                                        M.call (|
                                                          "convert_rational_1_by_1_to_uint256",
                                                          [
                                                            M.get (| "expr_19" |)
                                                          ]
                                                        |)
                                                      |) in
                                                    let _ :=
                                                      M.if_ (|
                                                        M.call (|
                                                          "iszero",
                                                          [
                                                            M.call (|
                                                              "extcodesize",
                                                              [
                                                                M.get (| "expr_71_address" |)
                                                              ]
                                                            |)
                                                          ]
                                                        |),
                                                        ltac:(M.monadic (
                                                          let _ :=
                                                            M.call (|
                                                              "revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20",
                                                              [

                                                              ]
                                                            |) in
                                                          tt
                                                        ))
                                                      |) in
                                                    let _ :=
                                                      M.assign (|
                                                        ["_15"],
                                                        M.call (|
                                                          "allocate_unbounded",
                                                          [

                                                          ]
                                                        |)
                                                      |) in
                                                    let _ :=
                                                      M.call (|
                                                        "mstore",
                                                        [
                                                          M.get (| "_15" |);
                                                          M.call (|
                                                            "shift_left",
                                                            [
                                                              M.get (| "expr_71_functionSelector" |)
                                                            ]
                                                          |)
                                                        ]
                                                      |) in
                                                    let _ :=
                                                      M.assign (|
                                                        ["_16"],
                                                        M.call (|
                                                          "abi_encode_tuple",
                                                          [
                                                            M.call (|
                                                              "add",
                                                              [
                                                                M.get (| "_15" |);
                                                                [Literal.number 4]
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    let _ :=
                                                      M.assign (|
                                                        ["_17"],
                                                        M.call (|
                                                          "call",
                                                          [
                                                            M.call (|
                                                              "gas",
                                                              [

                                                              ]
                                                            |);
                                                            M.get (| "expr_71_address" |);
                                                            M.get (| "expr_value" |);
                                                            M.get (| "_15" |);
                                                            M.call (|
                                                              "sub",
                                                              [
                                                                M.get (| "_16" |);
                                                                M.get (| "_15" |)
                                                              ]
                                                            |);
                                                            M.get (| "_15" |);
                                                            [Literal.number 0]
                                                          ]
                                                        |)
                                                      |) in
                                                    let _ :=
                                                      M.if_ (|
                                                        M.call (|
                                                          "iszero",
                                                          [
                                                            M.get (| "_17" |)
                                                          ]
                                                        |),
                                                        ltac:(M.monadic (
                                                          let _ :=
                                                            M.call (|
                                                              "revert_forward",
                                                              [

                                                              ]
                                                            |) in
                                                          tt
                                                        ))
                                                      |) in
                                                    let _ :=
                                                      M.if_ (|
                                                        M.get (| "_17" |),
                                                        ltac:(M.monadic (
                                                          let _ :=
                                                            M.assign (|
                                                              ["_18"],
                                                              [Literal.number 0]
                                                            |) in
                                                          let _ :=
                                                            M.if_ (|
                                                              M.call (|
                                                                "gt",
                                                                [
                                                                  M.get (| "_18" |);
                                                                  M.call (|
                                                                    "returndatasize",
                                                                    [

                                                                    ]
                                                                  |)
                                                                ]
                                                              |),
                                                              ltac:(M.monadic (
                                                                let _ :=
                                                                  M.declare (|
                                                                    ["_18"],
                                                                    M.call (|
                                                                      "returndatasize",
                                                                      [

                                                                      ]
                                                                    |)
                                                                  |) in
                                                                tt
                                                              ))
                                                            |) in
                                                          let _ :=
                                                            M.call (|
                                                              "finalize_allocation",
                                                              [
                                                                M.get (| "_15" |);
                                                                M.get (| "_18" |)
                                                              ]
                                                            |) in
                                                          let _ :=
                                                            M.call (|
                                                              "abi_decode_fromMemory",
                                                              [
                                                                M.get (| "_15" |);
                                                                M.call (|
                                                                  "add",
                                                                  [
                                                                    M.get (| "_15" |);
                                                                    M.get (| "_18" |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |) in
                                                          tt
                                                        ))
                                                      |) in
                                                    tt
                                                  ))                                          )                                        ]
                                            |) in
                                          tt
                                        ))                                );
                                      (
                                        None,
                                        ltac:(M.monadic (
                                          let _ :=
                                            M.assign (|
                                              ["_address"],
                                              M.call (|
                                                "read_from_storage_split_offset_contract_I",
                                                [
                                                  [Literal.number 0x00]
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.assign (|
                                              ["expr_59_address"],
                                              M.get (| "_address" |)
                                            |) in
                                          let _ :=
                                            M.assign (|
                                              ["expr_61_address"],
                                              M.call (|
                                                "convert_contract_I_to_address",
                                                [
                                                  M.get (| "expr_59_address" |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.assign (|
                                              ["expr_functionSelector"],
                                              [Literal.number 0xc3da42b8]
                                            |) in
                                          let _ :=
                                            M.if_ (|
                                              M.call (|
                                                "iszero",
                                                [
                                                  M.call (|
                                                    "extcodesize",
                                                    [
                                                      M.get (| "expr_61_address" |)
                                                    ]
                                                  |)
                                                ]
                                              |),
                                              ltac:(M.monadic (
                                                let _ :=
                                                  M.call (|
                                                    "revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20",
                                                    [

                                                    ]
                                                  |) in
                                                tt
                                              ))
                                            |) in
                                          let _ :=
                                            M.assign (|
                                              ["_19"],
                                              M.call (|
                                                "allocate_unbounded",
                                                [

                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.call (|
                                              "mstore",
                                              [
                                                M.get (| "_19" |);
                                                M.call (|
                                                  "shift_left",
                                                  [
                                                    M.get (| "expr_functionSelector" |)
                                                  ]
                                                |)
                                              ]
                                            |) in
                                          let _ :=
                                            M.assign (|
                                              ["_20"],
                                              M.call (|
                                                "abi_encode_tuple",
                                                [
                                                  M.call (|
                                                    "add",
                                                    [
                                                      M.get (| "_19" |);
                                                      [Literal.number 4]
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.assign (|
                                              ["_21"],
                                              M.call (|
                                                "call",
                                                [
                                                  M.call (|
                                                    "gas",
                                                    [

                                                    ]
                                                  |);
                                                  M.get (| "expr_61_address" |);
                                                  [Literal.number 0];
                                                  M.get (| "_19" |);
                                                  M.call (|
                                                    "sub",
                                                    [
                                                      M.get (| "_20" |);
                                                      M.get (| "_19" |)
                                                    ]
                                                  |);
                                                  M.get (| "_19" |);
                                                  [Literal.number 0]
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.if_ (|
                                              M.call (|
                                                "iszero",
                                                [
                                                  M.get (| "_21" |)
                                                ]
                                              |),
                                              ltac:(M.monadic (
                                                let _ :=
                                                  M.call (|
                                                    "revert_forward",
                                                    [

                                                    ]
                                                  |) in
                                                tt
                                              ))
                                            |) in
                                          let _ :=
                                            M.if_ (|
                                              M.get (| "_21" |),
                                              ltac:(M.monadic (
                                                let _ :=
                                                  M.assign (|
                                                    ["_22"],
                                                    [Literal.number 0]
                                                  |) in
                                                let _ :=
                                                  M.if_ (|
                                                    M.call (|
                                                      "gt",
                                                      [
                                                        M.get (| "_22" |);
                                                        M.call (|
                                                          "returndatasize",
                                                          [

                                                          ]
                                                        |)
                                                      ]
                                                    |),
                                                    ltac:(M.monadic (
                                                      let _ :=
                                                        M.declare (|
                                                          ["_22"],
                                                          M.call (|
                                                            "returndatasize",
                                                            [

                                                            ]
                                                          |)
                                                        |) in
                                                      tt
                                                    ))
                                                  |) in
                                                let _ :=
                                                  M.call (|
                                                    "finalize_allocation",
                                                    [
                                                      M.get (| "_19" |);
                                                      M.get (| "_22" |)
                                                    ]
                                                  |) in
                                                let _ :=
                                                  M.call (|
                                                    "abi_decode_fromMemory",
                                                    [
                                                      M.get (| "_19" |);
                                                      M.call (|
                                                        "add",
                                                        [
                                                          M.get (| "_19" |);
                                                          M.get (| "_22" |)
                                                        ]
                                                      |)
                                                    ]
                                                  |) in
                                                tt
                                              ))
                                            |) in
                                          tt
                                        ))                                )                              ]
                                  |) in
                                tt
                              ))                      );
                            (
                              None,
                              ltac:(M.monadic (
                                let _ :=
                                  M.assign (|
                                    ["_28_address"],
                                    M.call (|
                                      "read_from_storage_split_offset_contract_I",
                                      [
                                        [Literal.number 0x00]
                                      ]
                                    |)
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["expr_51_address"],
                                    M.get (| "_28_address" |)
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["expr_53_address"],
                                    M.call (|
                                      "convert_contract_I_to_address",
                                      [
                                        M.get (| "expr_51_address" |)
                                      ]
                                    |)
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["expr_53_functionSelector"],
                                    [Literal.number 0x4df7e3d0]
                                  |) in
                                let _ :=
                                  M.if_ (|
                                    M.call (|
                                      "iszero",
                                      [
                                        M.call (|
                                          "extcodesize",
                                          [
                                            M.get (| "expr_53_address" |)
                                          ]
                                        |)
                                      ]
                                    |),
                                    ltac:(M.monadic (
                                      let _ :=
                                        M.call (|
                                          "revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20",
                                          [

                                          ]
                                        |) in
                                      tt
                                    ))
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["_23"],
                                    M.call (|
                                      "allocate_unbounded",
                                      [

                                      ]
                                    |)
                                  |) in
                                let _ :=
                                  M.call (|
                                    "mstore",
                                    [
                                      M.get (| "_23" |);
                                      M.call (|
                                        "shift_left",
                                        [
                                          M.get (| "expr_53_functionSelector" |)
                                        ]
                                      |)
                                    ]
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["_24"],
                                    M.call (|
                                      "abi_encode_tuple",
                                      [
                                        M.call (|
                                          "add",
                                          [
                                            M.get (| "_23" |);
                                            [Literal.number 4]
                                          ]
                                        |)
                                      ]
                                    |)
                                  |) in
                                let _ :=
                                  M.assign (|
                                    ["_25"],
                                    M.call (|
                                      "call",
                                      [
                                        M.call (|
                                          "gas",
                                          [

                                          ]
                                        |);
                                        M.get (| "expr_53_address" |);
                                        [Literal.number 0];
                                        M.get (| "_23" |);
                                        M.call (|
                                          "sub",
                                          [
                                            M.get (| "_24" |);
                                            M.get (| "_23" |)
                                          ]
                                        |);
                                        M.get (| "_23" |);
                                        [Literal.number 0]
                                      ]
                                    |)
                                  |) in
                                let _ :=
                                  M.if_ (|
                                    M.call (|
                                      "iszero",
                                      [
                                        M.get (| "_25" |)
                                      ]
                                    |),
                                    ltac:(M.monadic (
                                      let _ :=
                                        M.call (|
                                          "revert_forward",
                                          [

                                          ]
                                        |) in
                                      tt
                                    ))
                                  |) in
                                let _ :=
                                  M.if_ (|
                                    M.get (| "_25" |),
                                    ltac:(M.monadic (
                                      let _ :=
                                        M.assign (|
                                          ["_26"],
                                          [Literal.number 0]
                                        |) in
                                      let _ :=
                                        M.if_ (|
                                          M.call (|
                                            "gt",
                                            [
                                              M.get (| "_26" |);
                                              M.call (|
                                                "returndatasize",
                                                [

                                                ]
                                              |)
                                            ]
                                          |),
                                          ltac:(M.monadic (
                                            let _ :=
                                              M.declare (|
                                                ["_26"],
                                                M.call (|
                                                  "returndatasize",
                                                  [

                                                  ]
                                                |)
                                              |) in
                                            tt
                                          ))
                                        |) in
                                      let _ :=
                                        M.call (|
                                          "finalize_allocation",
                                          [
                                            M.get (| "_23" |);
                                            M.get (| "_26" |)
                                          ]
                                        |) in
                                      let _ :=
                                        M.call (|
                                          "abi_decode_fromMemory",
                                          [
                                            M.get (| "_23" |);
                                            M.call (|
                                              "add",
                                              [
                                                M.get (| "_23" |);
                                                M.get (| "_26" |)
                                              ]
                                            |)
                                          ]
                                        |) in
                                      tt
                                    ))
                                  |) in
                                tt
                              ))                      )                    ]
                        |) in
                      tt
                    ))            );
                  (
                    None,
                    ltac:(M.monadic (
                      let _ :=
                        M.assign (|
                          ["_33_address"],
                          M.call (|
                            "read_from_storage_split_offset_contract_I",
                            [
                              [Literal.number 0x00]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.assign (|
                          ["expr_43_address"],
                          M.get (| "_33_address" |)
                        |) in
                      let _ :=
                        M.assign (|
                          ["expr_45_address"],
                          M.call (|
                            "convert_contract_I_to_address",
                            [
                              M.get (| "expr_43_address" |)
                            ]
                          |)
                        |) in
                      let _ :=
                        M.assign (|
                          ["expr_45_functionSelector"],
                          [Literal.number 0x0dbe671f]
                        |) in
                      let _ :=
                        M.if_ (|
                          M.call (|
                            "iszero",
                            [
                              M.call (|
                                "extcodesize",
                                [
                                  M.get (| "expr_45_address" |)
                                ]
                              |)
                            ]
                          |),
                          ltac:(M.monadic (
                            let _ :=
                              M.call (|
                                "revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20",
                                [

                                ]
                              |) in
                            tt
                          ))
                        |) in
                      let _ :=
                        M.assign (|
                          ["_27"],
                          M.call (|
                            "allocate_unbounded",
                            [

                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "mstore",
                          [
                            M.get (| "_27" |);
                            M.call (|
                              "shift_left",
                              [
                                M.get (| "expr_45_functionSelector" |)
                              ]
                            |)
                          ]
                        |) in
                      let _ :=
                        M.assign (|
                          ["_28"],
                          M.call (|
                            "abi_encode_tuple",
                            [
                              M.call (|
                                "add",
                                [
                                  M.get (| "_27" |);
                                  [Literal.number 4]
                                ]
                              |)
                            ]
                          |)
                        |) in
                      let _ :=
                        M.assign (|
                          ["_29"],
                          M.call (|
                            "staticcall",
                            [
                              M.call (|
                                "gas",
                                [

                                ]
                              |);
                              M.get (| "expr_45_address" |);
                              M.get (| "_27" |);
                              M.call (|
                                "sub",
                                [
                                  M.get (| "_28" |);
                                  M.get (| "_27" |)
                                ]
                              |);
                              M.get (| "_27" |);
                              [Literal.number 0]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.if_ (|
                          M.call (|
                            "iszero",
                            [
                              M.get (| "_29" |)
                            ]
                          |),
                          ltac:(M.monadic (
                            let _ :=
                              M.call (|
                                "revert_forward",
                                [

                                ]
                              |) in
                            tt
                          ))
                        |) in
                      let _ :=
                        M.if_ (|
                          M.get (| "_29" |),
                          ltac:(M.monadic (
                            let _ :=
                              M.assign (|
                                ["_30"],
                                [Literal.number 0]
                              |) in
                            let _ :=
                              M.if_ (|
                                M.call (|
                                  "gt",
                                  [
                                    M.get (| "_30" |);
                                    M.call (|
                                      "returndatasize",
                                      [

                                      ]
                                    |)
                                  ]
                                |),
                                ltac:(M.monadic (
                                  let _ :=
                                    M.declare (|
                                      ["_30"],
                                      M.call (|
                                        "returndatasize",
                                        [

                                        ]
                                      |)
                                    |) in
                                  tt
                                ))
                              |) in
                            let _ :=
                              M.call (|
                                "finalize_allocation",
                                [
                                  M.get (| "_27" |);
                                  M.get (| "_30" |)
                                ]
                              |) in
                            let _ :=
                              M.call (|
                                "abi_decode_fromMemory",
                                [
                                  M.get (| "_27" |);
                                  M.call (|
                                    "add",
                                    [
                                      M.get (| "_27" |);
                                      M.get (| "_30" |)
                                    ]
                                  |)
                                ]
                              |) in
                            tt
                          ))
                        |) in
                      tt
                    ))            )          ]
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_31"],
                M.get (| "var_c" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                M.get (| "_31" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                M.call (|
                  "checked_add_uint256",
                  [
                    M.call (|
                      "convert_rational_1_by_1_to_uint256",
                      [
                        M.get (| "expr_20" |)
                      ]
                    |);
                    M.get (| "expr_21" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_22" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a2646970667358221220b309873b02b60daee8c0986f0ac4d463f866808d37ed55664792a1de91cd86e364736f6c634300081b0033".
  End C_102_deployed.
End C_102.
