(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_111.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            [

            ]
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                [

                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          M.call (|
            "allocate_unbounded",
            [

            ]
          |)
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f3131315f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3131315f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3131315f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_111_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x2c66b6c8),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_onlyPanic",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xbd689854),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_uf",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xd7f933fb),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_panicAndError",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            [

            ]
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bool",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "iszero",
                      [
                        M.get (| "value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_bool",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_bool",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_bool",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_bool",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_uint256",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_uint256",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_uint256",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_boolt_uint256t_uint256",
          ["headStart"; "dataEnd"],
          ["value0";
      "value1";
      "value2"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 96]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                [Literal.number 0]
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_bool",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset_1"],
                [Literal.number 32]
              |) in
            let _ :=
              M.declare (|
                ["value1"],
                M.call (|
                  "abi_decode_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset_1" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset_2"],
                [Literal.number 64]
              |) in
            let _ :=
              M.declare (|
                ["value2"],
                M.call (|
                  "abi_decode_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset_2" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_to_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_uint256",
          ["headStart"; "value0"; "value1"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_onlyPanic",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"; "param_2"],
                M.call (|
                  "abi_decode_boolt_uint256t_uint256",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"],
                M.call (|
                  "fun_onlyPanic",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |);
                    M.get (| "param_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_uint256_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_uf",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"; "param_2"],
                M.call (|
                  "abi_decode_boolt_uint256t_uint256",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_uf",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |);
                    M.get (| "param_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_string",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_string",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_memory_to_memory_with_cleanup",
          ["src"; "dst"; "length"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mcopy",
                [
                  M.get (| "dst" |);
                  M.get (| "src" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "dst" |);
                      M.get (| "length" |)
                    ]
                  |);
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "round_up_to_mul_of",
          ["value"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "and",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 31]
                      ]
                    |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 31]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_string",
          ["value"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                M.call (|
                  "array_length_string",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_string",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "copy_memory_to_memory_with_cleanup",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 0x20]
                    ]
                  |);
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "length" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_uint256_string",
          ["headStart"; "value0"; "value1"; "value2"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 96]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 64]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_string",
                  [
                    M.get (| "value2" |);
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_panicAndError",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"; "param_2"],
                M.call (|
                  "abi_decode_boolt_uint256t_uint256",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"; "ret_2"],
                M.call (|
                  "fun_panicAndError",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |);
                    M.get (| "param_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_uint256_uint256_string",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |);
                    M.get (| "ret_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint160",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "shl",
                          [
                            [Literal.number 160];
                            [Literal.number 1]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint160_to_uint160",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint160",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint160",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint160_to_address",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_uint160",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_contract_C_to_address",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_address",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "finalize_allocation",
          ["memPtr"; "size"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["newFreePtr"],
                M.call (|
                  "add",
                  [
                    M.get (| "memPtr" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "size" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "newFreePtr" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "newFreePtr" |);
                        M.get (| "memPtr" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 64];
                  M.get (| "newFreePtr" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_t_uint256_fromMemory",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "mload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_uint256",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_uint256_fromMemory",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                [Literal.number 0]
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_t_uint256_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bool",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_bool",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bool_uint256_uint256",
          ["headStart"; "value0"; "value1"; "value2"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 96]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_bool",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value2" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 64]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_forward",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["pos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "returndatacopy",
                [
                  M.get (| "pos" |);
                  [Literal.number 0];
                  M.call (|
                    "returndatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "returndatasize",
                    [

                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "return_data_selector",
          [],
          ["sig"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.call (|
                      "returndatasize",
                      [

                      ]
                    |);
                    [Literal.number 3]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "returndatacopy",
                      [
                        [Literal.number 0];
                        [Literal.number 0];
                        [Literal.number 4]
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["sig"],
                      M.call (|
                        "shift_right_unsigned",
                        [
                          M.call (|
                            "mload",
                            [
                              [Literal.number 0]
                            ]
                          |)
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "try_decode_panic_data",
          [],
          ["success";
      "data"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.call (|
                      "returndatasize",
                      [

                      ]
                    |);
                    [Literal.number 0x23]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "returndatacopy",
                      [
                        [Literal.number 0];
                        [Literal.number 4];
                        [Literal.number 0x20]
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["success"],
                      [Literal.number 1]
                    |) in
                  let _ :=
                    M.declare (|
                      ["data"],
                      M.call (|
                        "mload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_onlyPanic",
          ["var_b"; "var_x"; "var_y"],
          ["var_r";
      "var_code"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_r"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256_1"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_code"],
                M.get (| "zero_uint256_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_34_address"],
                M.call (|
                  "address",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_35_address"],
                M.call (|
                  "convert_contract_C_to_address",
                  [
                    M.get (| "expr_34_address" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_functionSelector"],
                [Literal.number 0xbd689854]
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_b" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.get (| "var_x" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.get (| "var_y" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.get (| "_3" |)
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "_4" |);
                  M.call (|
                    "shift_left",
                    [
                      M.get (| "expr_functionSelector" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.call (|
                  "abi_encode_bool_uint256_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "_4" |);
                        [Literal.number 4]
                      ]
                    |);
                    M.get (| "expr" |);
                    M.get (| "expr_1" |);
                    M.get (| "expr_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["trySuccessCondition"],
                M.call (|
                  "staticcall",
                  [
                    M.call (|
                      "gas",
                      [

                      ]
                    |);
                    M.get (| "expr_35_address" |);
                    M.get (| "_4" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_5" |);
                        M.get (| "_4" |)
                      ]
                    |);
                    M.get (| "_4" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Literal.undefined
              |) in
            let _ :=
              M.if_ (|
                M.get (| "trySuccessCondition" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_6"],
                      [Literal.number 32]
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "gt",
                        [
                          M.get (| "_6" |);
                          M.call (|
                            "returndatasize",
                            [

                            ]
                          |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["_6"],
                            M.call (|
                              "returndatasize",
                              [

                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "finalize_allocation",
                      [
                        M.get (| "_4" |);
                        M.get (| "_6" |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_3"],
                      M.call (|
                        "abi_decode_uint256_fromMemory",
                        [
                          M.get (| "_4" |);
                          M.call (|
                            "add",
                            [
                              M.get (| "_4" |);
                              M.get (| "_6" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.switch (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "trySuccessCondition" |)
                  ]
                |),
                [
                  (
                    Some (Literal.number 0),
                    ltac:(M.monadic (
                      let _ :=
                        M.assign (|
                          ["var_b_1"],
                          M.get (| "expr_3" |)
                        |) in
                      let _ :=
                        M.assign (|
                          ["_7"],
                          M.get (| "var_b_1" |)
                        |) in
                      let _ :=
                        M.assign (|
                          ["expr_4"],
                          M.get (| "_7" |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["var_r"],
                          M.get (| "expr_4" |)
                        |) in
                      tt
                    ))            );
                  (
                    None,
                    ltac:(M.monadic (
                      let _ :=
                        M.assign (|
                          ["_8"],
                          [Literal.number 1]
                        |) in
                      let _ :=
                        M.switch (|
                          M.call (|
                            "return_data_selector",
                            [

                            ]
                          |),
                          [
                            (
                              Some (Literal.number 1313373041),
                              ltac:(M.monadic (
                                let _ :=
                                  M.assign (|
                                    ["_9"; "_10"],
                                    M.call (|
                                      "try_decode_panic_data",
                                      [

                                      ]
                                    |)
                                  |) in
                                let _ :=
                                  M.if_ (|
                                    M.get (| "_9" |),
                                    ltac:(M.monadic (
                                      let _ :=
                                        M.declare (|
                                          ["_8"],
                                          [Literal.number 0]
                                        |) in
                                      let _ :=
                                        M.assign (|
                                          ["var_c"],
                                          M.get (| "_10" |)
                                        |) in
                                      let _ :=
                                        M.assign (|
                                          ["_11"],
                                          M.get (| "var_c" |)
                                        |) in
                                      let _ :=
                                        M.assign (|
                                          ["expr_5"],
                                          M.get (| "_11" |)
                                        |) in
                                      let _ :=
                                        M.declare (|
                                          ["var_code"],
                                          M.get (| "expr_5" |)
                                        |) in
                                      tt
                                    ))
                                  |) in
                                tt
                              ))                      )                    ]
                        |) in
                      let _ :=
                        M.if_ (|
                          M.get (| "_8" |),
                          ltac:(M.monadic (
                            let _ :=
                              M.call (|
                                "revert_forward",
                                [

                                ]
                              |) in
                            tt
                          ))
                        |) in
                      tt
                    ))            )          ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "store_literal_in_memory_d290a4e2b85dfab1366cd15541276e46b1d0a3b508391a2403f8e6f02bba68c7",
          ["memPtr"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "memPtr" |);
                      [Literal.number 0]
                    ]
                  |);
                  [Literal.string "6661696c757265"]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_stringliteral_d290a4e2b85dfab1366cd15541276e46b1d0a3b508391a2403f8e6f02bba68c7",
          ["pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_string",
                  [
                    M.get (| "pos" |);
                    [Literal.number 7]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "store_literal_in_memory_d290a4e2b85dfab1366cd15541276e46b1d0a3b508391a2403f8e6f02bba68c7",
                [
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_stringliteral_d290",
          ["headStart"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_stringliteral_d290a4e2b85dfab1366cd15541276e46b1d0a3b508391a2403f8e6f02bba68c7",
                  [
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "require_helper_stringliteral_d290",
          ["condition"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "condition" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["memPtr"],
                      M.call (|
                        "allocate_unbounded",
                        [

                        ]
                      |)
                    |) in
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.get (| "memPtr" |);
                        M.call (|
                          "shl",
                          [
                            [Literal.number 229];
                            [Literal.number 4594637]
                          ]
                        |)
                      ]
                    |) in
                  let _ :=
                    M.assign (|
                      ["end"],
                      M.call (|
                        "abi_encode_stringliteral_d290",
                        [
                          M.call (|
                            "add",
                            [
                              M.get (| "memPtr" |);
                              [Literal.number 4]
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        M.get (| "memPtr" |);
                        M.call (|
                          "sub",
                          [
                            M.get (| "end" |);
                            M.get (| "memPtr" |)
                          ]
                        |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x11",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x11]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_sub_uint256",
          ["x"; "y"],
          ["diff"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["x"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "x" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["y"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["diff"],
                M.call (|
                  "sub",
                  [
                    M.get (| "x" |);
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "diff" |);
                    M.get (| "x" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_uf",
          ["var_b"; "var_x"; "var_y"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_b" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.call (|
                "require_helper_stringliteral_d290",
                [
                  M.get (| "expr" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.get (| "var_x" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.get (| "var_y" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.get (| "_3" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.call (|
                  "checked_sub_uint256",
                  [
                    M.get (| "expr_1" |);
                    M.get (| "expr_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_3" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_string",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 96]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "try_decode_error_message",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "returndatasize",
                      [

                      ]
                    |);
                    [Literal.number 0x44]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.leave (||) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["data"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "returndatacopy",
                [
                  M.get (| "data" |);
                  [Literal.number 4];
                  M.call (|
                    "sub",
                    [
                      M.call (|
                        "returndatasize",
                        [

                        ]
                      |);
                      [Literal.number 4]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                M.call (|
                  "mload",
                  [
                    M.get (| "data" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "offset" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "gt",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "offset" |);
                            [Literal.number 0x24]
                          ]
                        |);
                        M.call (|
                          "returndatasize",
                          [

                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.leave (||) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["msg"],
                M.call (|
                  "add",
                  [
                    M.get (| "data" |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "msg" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.leave (||) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["end"],
                M.call (|
                  "add",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "msg" |);
                        [Literal.number 0x20]
                      ]
                    |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "end" |);
                    M.call (|
                      "add",
                      [
                        M.get (| "data" |);
                        M.call (|
                          "sub",
                          [
                            M.call (|
                              "returndatasize",
                              [

                              ]
                            |);
                            [Literal.number 4]
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.leave (||) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "data" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "offset" |);
                      M.call (|
                        "add",
                        [
                          [Literal.number 0x20];
                          M.get (| "length" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "msg" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_panicAndError",
          ["var_b"; "var_x"; "var_y"],
          ["var_r";
      "var_code";
      "var_msg_mpos"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_t_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_r"],
                M.get (| "zero_t_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_code"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_string_mpos"],
                M.call (|
                  "zero_value_for_split_string",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_msg_mpos"],
                M.get (| "zero_string_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_75_address"],
                M.call (|
                  "address",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_address"],
                M.call (|
                  "convert_contract_C_to_address",
                  [
                    M.get (| "expr_75_address" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_76_functionSelector"],
                [Literal.number 0xbd689854]
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_b" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.get (| "var_x" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.get (| "var_y" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.get (| "_3" |)
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "_4" |);
                  M.call (|
                    "shift_left",
                    [
                      M.get (| "expr_76_functionSelector" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.call (|
                  "abi_encode_bool_uint256_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "_4" |);
                        [Literal.number 4]
                      ]
                    |);
                    M.get (| "expr" |);
                    M.get (| "expr_1" |);
                    M.get (| "expr_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["trySuccessCondition"],
                M.call (|
                  "staticcall",
                  [
                    M.call (|
                      "gas",
                      [

                      ]
                    |);
                    M.get (| "expr_address" |);
                    M.get (| "_4" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_5" |);
                        M.get (| "_4" |)
                      ]
                    |);
                    M.get (| "_4" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Literal.undefined
              |) in
            let _ :=
              M.if_ (|
                M.get (| "trySuccessCondition" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_6"],
                      [Literal.number 32]
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "gt",
                        [
                          M.get (| "_6" |);
                          M.call (|
                            "returndatasize",
                            [

                            ]
                          |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["_6"],
                            M.call (|
                              "returndatasize",
                              [

                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "finalize_allocation",
                      [
                        M.get (| "_4" |);
                        M.get (| "_6" |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_3"],
                      M.call (|
                        "abi_decode_uint256_fromMemory",
                        [
                          M.get (| "_4" |);
                          M.call (|
                            "add",
                            [
                              M.get (| "_4" |);
                              M.get (| "_6" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.switch (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "trySuccessCondition" |)
                  ]
                |),
                [
                  (
                    Some (Literal.number 0),
                    ltac:(M.monadic (
                      let _ :=
                        M.assign (|
                          ["var_b_1"],
                          M.get (| "expr_3" |)
                        |) in
                      let _ :=
                        M.assign (|
                          ["_7"],
                          M.get (| "var_b_1" |)
                        |) in
                      let _ :=
                        M.assign (|
                          ["expr_4"],
                          M.get (| "_7" |)
                        |) in
                      let _ :=
                        M.declare (|
                          ["var_r"],
                          M.get (| "expr_4" |)
                        |) in
                      tt
                    ))            );
                  (
                    None,
                    ltac:(M.monadic (
                      let _ :=
                        M.assign (|
                          ["_8"],
                          [Literal.number 1]
                        |) in
                      let _ :=
                        M.switch (|
                          M.call (|
                            "return_data_selector",
                            [

                            ]
                          |),
                          [
                            (
                              Some (Literal.number 147028384),
                              ltac:(M.monadic (
                                let _ :=
                                  M.assign (|
                                    ["_9"],
                                    M.call (|
                                      "try_decode_error_message",
                                      [

                                      ]
                                    |)
                                  |) in
                                let _ :=
                                  M.if_ (|
                                    M.get (| "_9" |),
                                    ltac:(M.monadic (
                                      let _ :=
                                        M.declare (|
                                          ["_8"],
                                          [Literal.number 0]
                                        |) in
                                      let _ :=
                                        M.assign (|
                                          ["var_errmsg_mpos"],
                                          M.get (| "_9" |)
                                        |) in
                                      let _ :=
                                        M.assign (|
                                          ["_mpos"],
                                          M.get (| "var_errmsg_mpos" |)
                                        |) in
                                      let _ :=
                                        M.assign (|
                                          ["expr_mpos"],
                                          M.get (| "_mpos" |)
                                        |) in
                                      let _ :=
                                        M.declare (|
                                          ["var_msg_mpos"],
                                          M.get (| "expr_mpos" |)
                                        |) in
                                      tt
                                    ))
                                  |) in
                                tt
                              ))                      );
                            (
                              Some (Literal.number 1313373041),
                              ltac:(M.monadic (
                                let _ :=
                                  M.assign (|
                                    ["_10"; "_11"],
                                    M.call (|
                                      "try_decode_panic_data",
                                      [

                                      ]
                                    |)
                                  |) in
                                let _ :=
                                  M.if_ (|
                                    M.get (| "_10" |),
                                    ltac:(M.monadic (
                                      let _ :=
                                        M.declare (|
                                          ["_8"],
                                          [Literal.number 0]
                                        |) in
                                      let _ :=
                                        M.assign (|
                                          ["var_c"],
                                          M.get (| "_11" |)
                                        |) in
                                      let _ :=
                                        M.assign (|
                                          ["_12"],
                                          M.get (| "var_c" |)
                                        |) in
                                      let _ :=
                                        M.assign (|
                                          ["expr_5"],
                                          M.get (| "_12" |)
                                        |) in
                                      let _ :=
                                        M.declare (|
                                          ["var_code"],
                                          M.get (| "expr_5" |)
                                        |) in
                                      tt
                                    ))
                                  |) in
                                tt
                              ))                      )                    ]
                        |) in
                      let _ :=
                        M.if_ (|
                          M.get (| "_8" |),
                          ltac:(M.monadic (
                            let _ :=
                              M.call (|
                                "revert_forward",
                                [

                                ]
                              |) in
                            tt
                          ))
                        |) in
                      tt
                    ))            )          ]
              |) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a2646970667358221220913680f6c5d9cd8cfd21909bbcc4a838bc1ae99f278d286117048c7846f16f0064736f6c634300081b0033".
  End C_111_deployed.
End C_111.
