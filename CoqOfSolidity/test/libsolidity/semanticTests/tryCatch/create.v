(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module Reverts.
  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "revert" |),
          [
            Value.String "test message."
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Reverts.

(* Contract *)
Module Succeeds.
  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Succeeds.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "i" ],
          Value.Integer 3
        |) in
      let _ :=
        TryStatement M.call (|
          NewExpression (* Beginning of a node! *)
id: 33
src: 241:7:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 32
src: 241:7:0
nodeType: IdentifierPath
name: Reverts
nameLocations: [241:7:0, ]
referencedDeclaration: 11

referencedDeclaration: 11
typeDescriptions: typeString contract RevertstypeIdentifier st_contract$_Reverts_$11

,
          [
            M.get_name (| "i" |)
          ]
        |) TryCatchClause  (* Beginning of a node! *)
id: 40
src: 260:11:0
nodeType: ParameterList
parameters: Definition r : Value.t :=
          undefined.
 let _ :=
          M.assign (|
            "=",
            M.get_name (| "x" |),
            M.get_name (| "r" |)
          |) in
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "txt" |),
            Value.String "success"
          |) in
        Value.Tuple [], TryCatchClause Error (* Beginning of a node! *)
id: 53
src: 343:17:0
nodeType: ParameterList
parameters: Definition s : Value.t :=
          undefined.
 let _ :=
          M.assign (|
            "=",
            M.get_name (| "txt" |),
            M.get_name (| "s" |)
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "i" ],
          Value.Integer 8
        |) in
      let _ :=
        TryStatement M.call (|
          NewExpression (* Beginning of a node! *)
id: 77
src: 508:8:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 76
src: 508:8:0
nodeType: IdentifierPath
name: Succeeds
nameLocations: [508:8:0, ]
referencedDeclaration: 18

referencedDeclaration: 18
typeDescriptions: typeString contract SucceedstypeIdentifier st_contract$_Succeeds_$18

,
          [
            M.get_name (| "i" |)
          ]
        |) TryCatchClause  (* Beginning of a node! *)
id: 84
src: 528:12:0
nodeType: ParameterList
parameters: Definition r : Value.t :=
          undefined.
 let _ :=
          M.assign (|
            "=",
            M.get_name (| "x" |),
            M.get_name (| "r" |)
          |) in
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "txt" |),
            Value.String "success"
          |) in
        Value.Tuple [], TryCatchClause Error (* Beginning of a node! *)
id: 97
src: 612:17:0
nodeType: ParameterList
parameters: Definition s : Value.t :=
          undefined.
 let _ :=
          M.assign (|
            "=",
            M.get_name (| "txt" |),
            M.get_name (| "s" |)
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
