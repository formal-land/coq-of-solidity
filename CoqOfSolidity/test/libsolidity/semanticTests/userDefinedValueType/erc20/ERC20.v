(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module ERC20_493.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            []
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                []
              |) in
            tt
          ))
        |) in
      let _ :=
        M.call (|
          "constructor_ERC20",
          []
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          Some (M.call (|
            "allocate_unbounded",
            []
          |))
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "45524332305f3439335f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "45524332305f3439335f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "45524332305f3439335f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_uint256",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "identity",
        ["value"],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_by_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "constructor_ERC20",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["expr"],
              Some (M.call (|
                "caller",
                []
              |))
            |) in
          let _ :=
            M.assign (|
              ["expr_1"],
              Some ([Literal.number 0x14])
            |) in
          let _ :=
            M.assign (|
              ["expr_2"],
              Some (M.call (|
                "convert_rational_by_to_uint256",
                [
                  M.get (| "expr_1" |)
                ]
              |))
            |) in
          let _ :=
            M.call (|
              "fun_mint",
              [
                M.get (| "expr" |);
                M.get (| "expr_2" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_t_rational_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_uint160",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.call (|
                "and",
                [
                  M.get (| "value" |);
                  M.call (|
                    "sub",
                    [
                      M.call (|
                        "shl",
                        [
                          [Literal.number 160];
                          [Literal.number 1]
                        ]
                      |);
                      [Literal.number 1]
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_by_to_uint160",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint160",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_t_rational_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_by_to_address",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "convert_rational_by_to_uint160",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_address",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.call (|
                "cleanup_uint160",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_storeLengthForEncoding_string",
        ["pos"; "length"],
        ["updated_pos"],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                M.get (| "pos" |);
                M.get (| "length" |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["updated_pos"],
              M.call (|
                "add",
                [
                  M.get (| "pos" |);
                  [Literal.number 0x20]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
        ["memPtr"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "memPtr" |);
                    [Literal.number 0]
                  ]
                |);
                [Literal.string "45524332303a206d696e7420746f20746865207a65726f2061646472657373"]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_encode_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
        ["pos"],
        ["end"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["pos"],
              M.call (|
                "array_storeLengthForEncoding_string",
                [
                  M.get (| "pos" |);
                  [Literal.number 31]
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
              [
                M.get (| "pos" |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["end"],
              M.call (|
                "add",
                [
                  M.get (| "pos" |);
                  [Literal.number 32]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_encode_stringliteral_fc0b",
        ["headStart"],
        ["tail"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["tail"],
              M.call (|
                "add",
                [
                  M.get (| "headStart" |);
                  [Literal.number 32]
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 0]
                  ]
                |);
                M.call (|
                  "sub",
                  [
                    M.get (| "tail" |);
                    M.get (| "headStart" |)
                  ]
                |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["tail"],
              M.call (|
                "abi_encode_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
                [
                  M.get (| "tail" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "require_helper_stringliteral_fc0b",
        ["condition"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.get (| "condition" |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["memPtr"],
                    Some (M.call (|
                      "allocate_unbounded",
                      []
                    |))
                  |) in
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.get (| "memPtr" |);
                      M.call (|
                        "shl",
                        [
                          [Literal.number 229];
                          [Literal.number 4594637]
                        ]
                      |)
                    ]
                  |) in
                let _ :=
                  M.assign (|
                    ["end"],
                    Some (M.call (|
                      "abi_encode_stringliteral_fc0b",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "memPtr" |);
                            [Literal.number 4]
                          ]
                        |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.call (|
                    "revert",
                    [
                      M.get (| "memPtr" |);
                      M.call (|
                        "sub",
                        [
                          M.get (| "end" |);
                          M.get (| "memPtr" |)
                        ]
                      |)
                    ]
                  |) in
                tt
              ))
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 0];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_from_storage_userDefinedValueType_UFixed18",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_offsett_userDefinedValueType_UFixed18",
        ["slot_value"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_userDefinedValueType_UFixed18",
                [
                  M.call (|
                    "shift_right_unsigned",
                    [
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "read_from_storage_split_offset_userDefinedValueType_UFixed18",
        ["slot"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "extract_from_storage_value_offsett_userDefinedValueType_UFixed18",
                [
                  M.call (|
                    "sload",
                    [
                      M.get (| "slot" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_left",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shl",
                [
                  [Literal.number 0];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_byte_slice_shift",
        ["value"; "toInsert"],
        ["result"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["mask"],
              Some (M.call (|
                "not",
                [
                  [Literal.number 0]
                ]
              |))
            |) in
          let _ :=
            M.declare (|
              ["toInsert"],
              M.call (|
                "shift_left",
                [
                  M.get (| "toInsert" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "and",
                [
                  M.get (| "value" |);
                  M.call (|
                    "not",
                    [
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["result"],
              M.call (|
                "or",
                [
                  M.get (| "value" |);
                  M.call (|
                    "and",
                    [
                      M.get (| "toInsert" |);
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_uint256_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_uint256",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "prepare_store_userDefinedValueType_UFixed18",
        ["value"],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_storage_value_offsett_userDefinedValueType_UFixed18_to_userDefinedValueType_UFixed18",
        ["slot"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["convertedValue"],
              Some (M.call (|
                "convert_uint256_to_uint256",
                [
                  M.get (| "value" |)
                ]
              |))
            |) in
          let _ :=
            M.call (|
              "sstore",
              [
                M.get (| "slot" |);
                M.call (|
                  "update_byte_slice_shift",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |);
                    M.call (|
                      "prepare_store_userDefinedValueType_UFixed18",
                      [
                        M.get (| "convertedValue" |)
                      ]
                    |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_uint160_to_uint160",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint160",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_uint160",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_uint160_to_address",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "convert_uint160_to_uint160",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_address_to_address",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "convert_uint160_to_address",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "mapping_index_access_mapping_address_userDefinedValueType_UFixed18_of_address",
        ["slot"; "key"],
        ["dataSlot"],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.call (|
                  "convert_address_to_address",
                  [
                    M.get (| "key" |)
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0x20];
                M.get (| "slot" |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["dataSlot"],
              M.call (|
                "keccak256",
                [
                  [Literal.number 0];
                  [Literal.number 0x40]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_encode_userDefinedValueType_UFixed18_to_uint256",
        ["value"; "pos"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                M.get (| "pos" |);
                M.call (|
                  "convert_uint256_to_uint256",
                  [
                    M.get (| "value" |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_encode_userDefinedValueType_UFixed18",
        ["headStart"; "value0"],
        ["tail"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["tail"],
              M.call (|
                "add",
                [
                  M.get (| "headStart" |);
                  [Literal.number 32]
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "abi_encode_userDefinedValueType_UFixed18_to_uint256",
              [
                M.get (| "value0" |);
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 0]
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "fun_mint",
        ["var_account"; "var_value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["_1"],
              Some (M.get (| "var_account" |))
            |) in
          let _ :=
            M.assign (|
              ["expr"],
              Some (M.get (| "_1" |))
            |) in
          let _ :=
            M.assign (|
              ["expr_1"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.assign (|
              ["expr_2"],
              Some (M.call (|
                "convert_rational_by_to_address",
                [
                  M.get (| "expr_1" |)
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["expr_3"],
              Some (M.call (|
                "iszero",
                [
                  M.call (|
                    "eq",
                    [
                      M.call (|
                        "cleanup_address",
                        [
                          M.get (| "expr" |)
                        ]
                      |);
                      M.call (|
                        "cleanup_address",
                        [
                          M.get (| "expr_2" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |))
            |) in
          let _ :=
            M.call (|
              "require_helper_stringliteral_fc0b",
              [
                M.get (| "expr_3" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["_2"],
              Some (M.call (|
                "read_from_storage_split_offset_userDefinedValueType_UFixed18",
                [
                  [Literal.number 0x02]
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["expr_4"],
              Some (M.get (| "_2" |))
            |) in
          let _ :=
            M.assign (|
              ["expr_self"],
              Some (M.get (| "expr_4" |))
            |) in
          let _ :=
            M.assign (|
              ["_3"],
              Some (M.get (| "var_value" |))
            |) in
          let _ :=
            M.assign (|
              ["expr_5"],
              Some (M.get (| "_3" |))
            |) in
          let _ :=
            M.assign (|
              ["expr_6"],
              Some (M.call (|
                "fun_add",
                [
                  M.get (| "expr_self" |);
                  M.get (| "expr_5" |)
                ]
              |))
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_userDefinedValueType_UFixed18_to_userDefinedValueType_UFixed18",
              [
                [Literal.number 0x02];
                M.get (| "expr_6" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["_slot"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.assign (|
              ["expr_slot"],
              Some (M.get (| "_slot" |))
            |) in
          let _ :=
            M.assign (|
              ["_4"],
              Some (M.get (| "var_account" |))
            |) in
          let _ :=
            M.assign (|
              ["expr_7"],
              Some (M.get (| "_4" |))
            |) in
          let _ :=
            M.assign (|
              ["_5"],
              Some (M.call (|
                "mapping_index_access_mapping_address_userDefinedValueType_UFixed18_of_address",
                [
                  M.get (| "expr_slot" |);
                  M.get (| "expr_7" |)
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["_6"],
              Some (M.call (|
                "read_from_storage_split_offset_userDefinedValueType_UFixed18",
                [
                  M.get (| "_5" |)
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["expr_8"],
              Some (M.get (| "_6" |))
            |) in
          let _ :=
            M.assign (|
              ["expr_357_self"],
              Some (M.get (| "expr_8" |))
            |) in
          let _ :=
            M.assign (|
              ["_7"],
              Some (M.get (| "var_value" |))
            |) in
          let _ :=
            M.assign (|
              ["expr_9"],
              Some (M.get (| "_7" |))
            |) in
          let _ :=
            M.assign (|
              ["expr_10"],
              Some (M.call (|
                "fun_add",
                [
                  M.get (| "expr_357_self" |);
                  M.get (| "expr_9" |)
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["_10_slot"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.assign (|
              ["expr_351_slot"],
              Some (M.get (| "_10_slot" |))
            |) in
          let _ :=
            M.assign (|
              ["_8"],
              Some (M.get (| "var_account" |))
            |) in
          let _ :=
            M.assign (|
              ["expr_11"],
              Some (M.get (| "_8" |))
            |) in
          let _ :=
            M.assign (|
              ["_9"],
              Some (M.call (|
                "mapping_index_access_mapping_address_userDefinedValueType_UFixed18_of_address",
                [
                  M.get (| "expr_351_slot" |);
                  M.get (| "expr_11" |)
                ]
              |))
            |) in
          let _ :=
            M.call (|
              "update_storage_value_offsett_userDefinedValueType_UFixed18_to_userDefinedValueType_UFixed18",
              [
                M.get (| "_9" |);
                M.get (| "expr_10" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["expr_12"],
              Some ([Literal.number 0x00])
            |) in
          let _ :=
            M.assign (|
              ["expr_13"],
              Some (M.call (|
                "convert_rational_by_to_address",
                [
                  M.get (| "expr_12" |)
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["_10"],
              Some (M.get (| "var_account" |))
            |) in
          let _ :=
            M.assign (|
              ["expr_14"],
              Some (M.get (| "_10" |))
            |) in
          let _ :=
            M.assign (|
              ["_11"],
              Some (M.get (| "var_value" |))
            |) in
          let _ :=
            M.assign (|
              ["expr_15"],
              Some (M.get (| "_11" |))
            |) in
          let _ :=
            M.assign (|
              ["_12"],
              Some ([Literal.number 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef])
            |) in
          let _ :=
            M.assign (|
              ["_13"],
              Some (M.call (|
                "convert_address_to_address",
                [
                  M.get (| "expr_13" |)
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["_14"],
              Some (M.call (|
                "convert_address_to_address",
                [
                  M.get (| "expr_14" |)
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["_15"],
              Some (M.call (|
                "allocate_unbounded",
                []
              |))
            |) in
          let _ :=
            M.assign (|
              ["_16"],
              Some (M.call (|
                "abi_encode_userDefinedValueType_UFixed18",
                [
                  M.get (| "_15" |);
                  M.get (| "expr_15" |)
                ]
              |))
            |) in
          let _ :=
            M.call (|
              "log3",
              [
                M.get (| "_15" |);
                M.call (|
                  "sub",
                  [
                    M.get (| "_16" |);
                    M.get (| "_15" |)
                  ]
                |);
                M.get (| "_12" |);
                M.get (| "_13" |);
                M.get (| "_14" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "zero_value_for_split_userDefinedValueType_UFixed18",
        [],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              [Literal.number 0]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "panic_error_0x11",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    [Literal.number 0x4e487b71]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 4];
                [Literal.number 0x11]
              ]
            |) in
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0x24]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "checked_add_uint256",
        ["x"; "y"],
        ["sum"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["x"],
              M.call (|
                "cleanup_uint256",
                [
                  M.get (| "x" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["y"],
              M.call (|
                "cleanup_uint256",
                [
                  M.get (| "y" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["sum"],
              M.call (|
                "add",
                [
                  M.get (| "x" |);
                  M.get (| "y" |)
                ]
              |)
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "gt",
                [
                  M.get (| "x" |);
                  M.get (| "sum" |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x11",
                    []
                  |) in
                tt
              ))
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "fun_add",
        ["var_a"; "var_b"],
        ["var_c"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["zero_userDefinedValueType_UFixed18"],
              Some (M.call (|
                "zero_value_for_split_userDefinedValueType_UFixed18",
                []
              |))
            |) in
          let _ :=
            M.declare (|
              ["var_c"],
              M.get (| "zero_userDefinedValueType_UFixed18" |)
            |) in
          let _ :=
            M.assign (|
              ["_1"],
              Some (M.get (| "var_a" |))
            |) in
          let _ :=
            M.assign (|
              ["expr"],
              Some (M.get (| "_1" |))
            |) in
          let _ :=
            M.assign (|
              ["expr_1"],
              Some (M.call (|
                "convert_uint256_to_uint256",
                [
                  M.get (| "expr" |)
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["_2"],
              Some (M.get (| "var_b" |))
            |) in
          let _ :=
            M.assign (|
              ["expr_2"],
              Some (M.get (| "_2" |))
            |) in
          let _ :=
            M.assign (|
              ["expr_3"],
              Some (M.call (|
                "convert_uint256_to_uint256",
                [
                  M.get (| "expr_2" |)
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["expr_4"],
              Some (M.call (|
                "checked_add_uint256",
                [
                  M.get (| "expr_1" |);
                  M.get (| "expr_3" |)
                ]
              |))
            |) in
          let _ :=
            M.assign (|
              ["expr_5"],
              Some (M.call (|
                "convert_uint256_to_uint256",
                [
                  M.get (| "expr_4" |)
                ]
              |))
            |) in
          let _ :=
            M.declare (|
              ["var_c"],
              M.get (| "expr_5" |)
            |) in
          let _ :=
            M.leave (||) in
          tt
        ))
      |) in
    tt
  )).

  Module ERC20_493_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      []
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  Some (M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x095ea7b3),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_approve",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x18160ddd),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_totalSupply",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x23b872dd),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_transferFrom",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x39509351),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_increaseAllowance",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x70a08231),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_balanceOf",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xa457c2d7),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_decreaseAllowance",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xa9059cbb),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_transfer",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xdd62ed3e),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_allowance",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            []
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint160",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "shl",
                          [
                            [Literal.number 160];
                            [Literal.number 1]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_address",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "cleanup_uint160",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_address",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_address",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_address",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_address",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_userDefinedValueType_UFixed18",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_userDefinedValueType_UFixed18",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_userDefinedValueType_UFixed18",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_addresst_userDefinedValueType_UFixed18",
          ["headStart"; "dataEnd"],
          ["value0";
      "value1"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 64]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_address",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset_1"],
                Some ([Literal.number 32])
              |) in
            let _ :=
              M.declare (|
                ["value1"],
                M.call (|
                  "abi_decode_userDefinedValueType_UFixed18",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset_1" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bool",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "iszero",
                      [
                        M.get (| "value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bool_to_bool",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_bool",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bool",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_bool_to_bool",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_approve",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"],
                Some (M.call (|
                  "abi_decode_addresst_userDefinedValueType_UFixed18",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_approve",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint256_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_userDefinedValueType_UFixed18_to_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "convert_uint256_to_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_userDefinedValueType_UFixed18",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_userDefinedValueType_UFixed18_to_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_totalSupply",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_totalSupply",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_userDefinedValueType_UFixed18",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_addresst_addresst_userDefinedValueType_UFixed18",
          ["headStart"; "dataEnd"],
          ["value0";
      "value1";
      "value2"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 96]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_address",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset_1"],
                Some ([Literal.number 32])
              |) in
            let _ :=
              M.declare (|
                ["value1"],
                M.call (|
                  "abi_decode_address",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset_1" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset_2"],
                Some ([Literal.number 64])
              |) in
            let _ :=
              M.declare (|
                ["value2"],
                M.call (|
                  "abi_decode_userDefinedValueType_UFixed18",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset_2" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_transferFrom",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"; "param_2"],
                Some (M.call (|
                  "abi_decode_addresst_addresst_userDefinedValueType_UFixed18",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_transferFrom",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |);
                    M.get (| "param_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_increaseAllowance",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"],
                Some (M.call (|
                  "abi_decode_addresst_userDefinedValueType_UFixed18",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_increaseAllowance",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_tuple_address",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_address",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_balanceOf",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"],
                Some (M.call (|
                  "abi_decode_tuple_address",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_balanceOf",
                  [
                    M.get (| "param" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_userDefinedValueType_UFixed18",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_decreaseAllowance",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"],
                Some (M.call (|
                  "abi_decode_addresst_userDefinedValueType_UFixed18",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_decreaseAllowance",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_transfer",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"],
                Some (M.call (|
                  "abi_decode_addresst_userDefinedValueType_UFixed18",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_transfer",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_addresst_address",
          ["headStart"; "dataEnd"],
          ["value0";
      "value1"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 64]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_address",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset_1"],
                Some ([Literal.number 32])
              |) in
            let _ :=
              M.declare (|
                ["value1"],
                M.call (|
                  "abi_decode_address",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset_1" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_allowance",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"],
                Some (M.call (|
                  "abi_decode_addresst_address",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_allowance",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_userDefinedValueType_UFixed18",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_bool",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_approve",
          ["var_spender"; "var_value"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.call (|
                  "caller",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_spender" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_value" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.call (|
                "fun__approve",
                [
                  M.get (| "expr" |);
                  M.get (| "expr_1" |);
                  M.get (| "expr_2" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_3" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_userDefinedValueType_UFixed18",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_0_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_userDefinedValueType_UFixed18",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_userDefinedValueType_UFixed18",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_UFixed18",
                  [
                    M.call (|
                      "shift_right_0_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_userDefinedValueType_UFixed18",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offsett_userDefinedValueType_UFixed18",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_totalSupply",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_userDefinedValueType_UFixed18"],
                Some (M.call (|
                  "zero_value_for_split_userDefinedValueType_UFixed18",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_userDefinedValueType_UFixed18" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.call (|
                  "read_from_storage_split_offset_userDefinedValueType_UFixed18",
                  [
                    [Literal.number 0x02]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint160_to_uint160",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint160",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint160",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint160_to_address",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_uint160",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_address_to_address",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_address",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "mapping_index_access_mapping_address_mapping_address_userDefinedValueType_UFixed18_of_address",
          ["slot"; "key"],
          ["dataSlot"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "convert_address_to_address",
                    [
                      M.get (| "key" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0x20];
                  M.get (| "slot" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["dataSlot"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x40]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "mapping_index_access_mapping_address_userDefinedValueType_UFixed18_of_address",
          ["slot"; "key"],
          ["dataSlot"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "convert_address_to_address",
                    [
                      M.get (| "key" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0x20];
                  M.get (| "slot" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["dataSlot"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x40]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_transferFrom",
          ["var_from"; "var_to"; "var_value"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_from" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_to" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.get (| "var_value" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_3" |))
              |) in
            let _ :=
              M.call (|
                "fun__transfer",
                [
                  M.get (| "expr" |);
                  M.get (| "expr_1" |);
                  M.get (| "expr_2" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.get (| "var_from" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.get (| "_4" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.call (|
                  "caller",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["_11_slot"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_207_slot"],
                Some (M.get (| "_11_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.get (| "var_from" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.call (|
                  "mapping_index_access_mapping_address_mapping_address_userDefinedValueType_UFixed18_of_address",
                  [
                    M.get (| "expr_207_slot" |);
                    M.get (| "expr_5" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_slot"],
                Some (M.get (| "_6" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_209_slot"],
                Some (M.get (| "_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some (M.call (|
                  "caller",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                Some (M.call (|
                  "mapping_index_access_mapping_address_userDefinedValueType_UFixed18_of_address",
                  [
                    M.get (| "expr_209_slot" |);
                    M.get (| "expr_6" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.call (|
                  "read_from_storage_split_offset_userDefinedValueType_UFixed18",
                  [
                    M.get (| "_7" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some (M.get (| "_8" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_213_self"],
                Some (M.get (| "expr_7" |))
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                Some (M.get (| "var_value" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some (M.get (| "_9" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.call (|
                  "fun_sub",
                  [
                    M.get (| "expr_213_self" |);
                    M.get (| "expr_8" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "fun__approve",
                [
                  M.get (| "expr_3" |);
                  M.get (| "expr_4" |);
                  M.get (| "expr_9" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_10" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_increaseAllowance",
          ["var_spender"; "var_addedValue"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_t_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_t_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.call (|
                  "caller",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_spender" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["_20_slot"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_235_slot"],
                Some (M.get (| "_20_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.call (|
                  "caller",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.call (|
                  "mapping_index_access_mapping_address_mapping_address_userDefinedValueType_UFixed18_of_address",
                  [
                    M.get (| "expr_235_slot" |);
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_22_slot"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_238_slot"],
                Some (M.get (| "_22_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.get (| "var_spender" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.get (| "_3" |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.call (|
                  "mapping_index_access_mapping_address_userDefinedValueType_UFixed18_of_address",
                  [
                    M.get (| "expr_238_slot" |);
                    M.get (| "expr_3" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.call (|
                  "read_from_storage_split_offset_userDefinedValueType_UFixed18",
                  [
                    M.get (| "_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_241_self"],
                Some (M.get (| "expr_4" |))
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.get (| "var_addedValue" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.get (| "_6" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some (M.call (|
                  "fun_add",
                  [
                    M.get (| "expr_241_self" |);
                    M.get (| "expr_5" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "fun__approve",
                [
                  M.get (| "expr" |);
                  M.get (| "expr_1" |);
                  M.get (| "expr_6" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_7" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_balanceOf",
          ["var_owner"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_t_userDefinedValueType_UFixed18"],
                Some (M.call (|
                  "zero_value_for_split_userDefinedValueType_UFixed18",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_t_userDefinedValueType_UFixed18" |)
              |) in
            let _ :=
              M.assign (|
                ["_28_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_123_slot"],
                Some (M.get (| "_28_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_owner" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.call (|
                  "mapping_index_access_mapping_address_userDefinedValueType_UFixed18_of_address",
                  [
                    M.get (| "expr_123_slot" |);
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.call (|
                  "read_from_storage_split_offset_userDefinedValueType_UFixed18",
                  [
                    M.get (| "_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_3" |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_decreaseAllowance",
          ["var_spender"; "var_subtractedValue"],
          ["var_"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.call (|
                  "caller",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_spender" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["_34_slot"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_263_slot"],
                Some (M.get (| "_34_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.call (|
                  "caller",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.call (|
                  "mapping_index_access_mapping_address_mapping_address_userDefinedValueType_UFixed18_of_address",
                  [
                    M.get (| "expr_263_slot" |);
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_36_slot"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_266_slot"],
                Some (M.get (| "_36_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.get (| "var_spender" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.get (| "_3" |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.call (|
                  "mapping_index_access_mapping_address_userDefinedValueType_UFixed18_of_address",
                  [
                    M.get (| "expr_266_slot" |);
                    M.get (| "expr_3" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.call (|
                  "read_from_storage_split_offset_userDefinedValueType_UFixed18",
                  [
                    M.get (| "_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_self"],
                Some (M.get (| "expr_4" |))
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.get (| "var_subtractedValue" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.get (| "_6" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some (M.call (|
                  "fun_sub",
                  [
                    M.get (| "expr_self" |);
                    M.get (| "expr_5" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "fun__approve",
                [
                  M.get (| "expr" |);
                  M.get (| "expr_1" |);
                  M.get (| "expr_6" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "expr_7" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_transfer",
          ["var_to"; "var_value"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.call (|
                  "caller",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_to" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_value" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.call (|
                "fun__transfer",
                [
                  M.get (| "expr" |);
                  M.get (| "expr_1" |);
                  M.get (| "expr_2" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_3" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_allowance",
          ["var_owner"; "var_spender"],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_userDefinedValueType_UFixed18"],
                Some (M.call (|
                  "zero_value_for_split_userDefinedValueType_UFixed18",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_userDefinedValueType_UFixed18" |)
              |) in
            let _ :=
              M.assign (|
                ["_45_slot"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_138_slot"],
                Some (M.get (| "_45_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_owner" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.call (|
                  "mapping_index_access_mapping_address_mapping_address_userDefinedValueType_UFixed18_of_address",
                  [
                    M.get (| "expr_138_slot" |);
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_48_slot"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_140_slot"],
                Some (M.get (| "_48_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.get (| "var_spender" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_3" |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.call (|
                  "mapping_index_access_mapping_address_userDefinedValueType_UFixed18_of_address",
                  [
                    M.get (| "expr_140_slot" |);
                    M.get (| "expr_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.call (|
                  "read_from_storage_split_offset_userDefinedValueType_UFixed18",
                  [
                    M.get (| "_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_2" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint160",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint160",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_address",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_rational_by_to_uint160",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_string",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
          ["memPtr"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "memPtr" |);
                      [Literal.number 0]
                    ]
                  |);
                  [Literal.string "45524332303a20617070726f76652066726f6d20746865207a65726f20616464"]
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "memPtr" |);
                      [Literal.number 32]
                    ]
                  |);
                  [Literal.string "72657373"]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
          ["pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_string",
                  [
                    M.get (| "pos" |);
                    [Literal.number 36]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
                [
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_stringliteral_c953",
          ["headStart"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
                  [
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "require_helper_stringliteral_c953",
          ["condition"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "condition" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["memPtr"],
                      Some (M.call (|
                        "allocate_unbounded",
                        []
                      |))
                    |) in
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.get (| "memPtr" |);
                        M.call (|
                          "shl",
                          [
                            [Literal.number 229];
                            [Literal.number 4594637]
                          ]
                        |)
                      ]
                    |) in
                  let _ :=
                    M.assign (|
                      ["end"],
                      Some (M.call (|
                        "abi_encode_stringliteral_c953",
                        [
                          M.call (|
                            "add",
                            [
                              M.get (| "memPtr" |);
                              [Literal.number 4]
                            ]
                          |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        M.get (| "memPtr" |);
                        M.call (|
                          "sub",
                          [
                            M.get (| "end" |);
                            M.get (| "memPtr" |)
                          ]
                        |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
          ["memPtr"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "memPtr" |);
                      [Literal.number 0]
                    ]
                  |);
                  [Literal.string "45524332303a20617070726f766520746f20746865207a65726f206164647265"]
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "memPtr" |);
                      [Literal.number 32]
                    ]
                  |);
                  [Literal.string "7373"]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
          ["pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_string",
                  [
                    M.get (| "pos" |);
                    [Literal.number 34]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
                [
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_stringliteral",
          ["headStart"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
                  [
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "require_helper_stringliteral_2488",
          ["condition"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "condition" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["memPtr"],
                      Some (M.call (|
                        "allocate_unbounded",
                        []
                      |))
                    |) in
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.get (| "memPtr" |);
                        M.call (|
                          "shl",
                          [
                            [Literal.number 229];
                            [Literal.number 4594637]
                          ]
                        |)
                      ]
                    |) in
                  let _ :=
                    M.assign (|
                      ["end"],
                      Some (M.call (|
                        "abi_encode_stringliteral",
                        [
                          M.call (|
                            "add",
                            [
                              M.get (| "memPtr" |);
                              [Literal.number 4]
                            ]
                          |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        M.get (| "memPtr" |);
                        M.call (|
                          "sub",
                          [
                            M.get (| "end" |);
                            M.get (| "memPtr" |)
                          ]
                        |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_shift",
          ["value"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left",
                  [
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_userDefinedValueType_UFixed18",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_userDefinedValueType_UFixed18_to_userDefinedValueType_UFixed18",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                Some (M.call (|
                  "convert_uint256_to_uint256",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_shift",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.call (|
                        "prepare_store_userDefinedValueType_UFixed18",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun__approve",
          ["var_owner"; "var_spender"; "var_value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_owner" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.call (|
                  "convert_rational_by_to_address",
                  [
                    M.get (| "expr_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_address",
                          [
                            M.get (| "expr" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_address",
                          [
                            M.get (| "expr_2" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper_stringliteral_c953",
                [
                  M.get (| "expr_3" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_spender" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some (M.call (|
                  "convert_rational_by_to_address",
                  [
                    M.get (| "expr_5" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some (M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_address",
                          [
                            M.get (| "expr_4" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_address",
                          [
                            M.get (| "expr_6" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper_stringliteral_2488",
                [
                  M.get (| "expr_7" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.get (| "var_value" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some (M.get (| "_3" |))
              |) in
            let _ :=
              M.assign (|
                ["_55_slot"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_448_slot"],
                Some (M.get (| "_55_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.get (| "var_owner" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.get (| "_4" |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.call (|
                  "mapping_index_access_mapping_address_mapping_address_userDefinedValueType_UFixed18_of_address",
                  [
                    M.get (| "expr_448_slot" |);
                    M.get (| "expr_9" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_58_slot"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_451_slot"],
                Some (M.get (| "_58_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.get (| "var_spender" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some (M.get (| "_6" |))
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                Some (M.call (|
                  "mapping_index_access_mapping_address_userDefinedValueType_UFixed18_of_address",
                  [
                    M.get (| "expr_451_slot" |);
                    M.get (| "expr_10" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_userDefinedValueType_UFixed18_to_userDefinedValueType_UFixed18",
                [
                  M.get (| "_7" |);
                  M.get (| "expr_8" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.get (| "var_owner" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some (M.get (| "_8" |))
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                Some (M.get (| "var_spender" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some (M.get (| "_9" |))
              |) in
            let _ :=
              M.assign (|
                ["_10"],
                Some (M.get (| "var_value" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some (M.get (| "_10" |))
              |) in
            let _ :=
              M.assign (|
                ["_11"],
                Some ([Literal.number 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925])
              |) in
            let _ :=
              M.assign (|
                ["_12"],
                Some (M.call (|
                  "convert_address_to_address",
                  [
                    M.get (| "expr_11" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_13"],
                Some (M.call (|
                  "convert_address_to_address",
                  [
                    M.get (| "expr_12" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_14"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["_15"],
                Some (M.call (|
                  "abi_encode_userDefinedValueType_UFixed18",
                  [
                    M.get (| "_14" |);
                    M.get (| "expr_13" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "log3",
                [
                  M.get (| "_14" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_15" |);
                      M.get (| "_14" |)
                    ]
                  |);
                  M.get (| "_11" |);
                  M.get (| "_12" |);
                  M.get (| "_13" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
          ["memPtr"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "memPtr" |);
                      [Literal.number 0]
                    ]
                  |);
                  [Literal.string "45524332303a207472616e7366657220746f20746865207a65726f2061646472"]
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "memPtr" |);
                      [Literal.number 32]
                    ]
                  |);
                  [Literal.string "657373"]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_stringliteral_0557",
          ["pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_string",
                  [
                    M.get (| "pos" |);
                    [Literal.number 35]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
                [
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple_stringliteral",
          ["headStart"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_stringliteral_0557",
                  [
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "require_helper_stringliteral",
          ["condition"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "condition" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["memPtr"],
                      Some (M.call (|
                        "allocate_unbounded",
                        []
                      |))
                    |) in
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.get (| "memPtr" |);
                        M.call (|
                          "shl",
                          [
                            [Literal.number 229];
                            [Literal.number 4594637]
                          ]
                        |)
                      ]
                    |) in
                  let _ :=
                    M.assign (|
                      ["end"],
                      Some (M.call (|
                        "abi_encode_tuple_stringliteral",
                        [
                          M.call (|
                            "add",
                            [
                              M.get (| "memPtr" |);
                              [Literal.number 4]
                            ]
                          |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        M.get (| "memPtr" |);
                        M.call (|
                          "sub",
                          [
                            M.get (| "end" |);
                            M.get (| "memPtr" |)
                          ]
                        |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun__transfer",
          ["var_from"; "var_to"; "var_value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_to" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.call (|
                  "convert_rational_by_to_address",
                  [
                    M.get (| "expr_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_address",
                          [
                            M.get (| "expr" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_address",
                          [
                            M.get (| "expr_2" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper_stringliteral",
                [
                  M.get (| "expr_3" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_70_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_300_slot"],
                Some (M.get (| "_70_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_from" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.call (|
                  "mapping_index_access_mapping_address_userDefinedValueType_UFixed18_of_address",
                  [
                    M.get (| "expr_300_slot" |);
                    M.get (| "expr_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.call (|
                  "read_from_storage_split_offset_userDefinedValueType_UFixed18",
                  [
                    M.get (| "_3" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.get (| "_4" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_303_self"],
                Some (M.get (| "expr_5" |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.get (| "var_value" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some (M.call (|
                  "fun_sub",
                  [
                    M.get (| "expr_303_self" |);
                    M.get (| "expr_6" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_75_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_slot"],
                Some (M.get (| "_75_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.get (| "var_from" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some (M.get (| "_6" |))
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                Some (M.call (|
                  "mapping_index_access_mapping_address_userDefinedValueType_UFixed18_of_address",
                  [
                    M.get (| "expr_slot" |);
                    M.get (| "expr_8" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_userDefinedValueType_UFixed18_to_userDefinedValueType_UFixed18",
                [
                  M.get (| "_7" |);
                  M.get (| "expr_7" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_78_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_311_slot"],
                Some (M.get (| "_78_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.get (| "var_to" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.get (| "_8" |))
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                Some (M.call (|
                  "mapping_index_access_mapping_address_userDefinedValueType_UFixed18_of_address",
                  [
                    M.get (| "expr_311_slot" |);
                    M.get (| "expr_9" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_10"],
                Some (M.call (|
                  "read_from_storage_split_offset_userDefinedValueType_UFixed18",
                  [
                    M.get (| "_9" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some (M.get (| "_10" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_314_self"],
                Some (M.get (| "expr_10" |))
              |) in
            let _ :=
              M.assign (|
                ["_11"],
                Some (M.get (| "var_value" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some (M.get (| "_11" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some (M.call (|
                  "fun_add",
                  [
                    M.get (| "expr_314_self" |);
                    M.get (| "expr_11" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_83_slot"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_308_slot"],
                Some (M.get (| "_83_slot" |))
              |) in
            let _ :=
              M.assign (|
                ["_12"],
                Some (M.get (| "var_to" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some (M.get (| "_12" |))
              |) in
            let _ :=
              M.assign (|
                ["_13"],
                Some (M.call (|
                  "mapping_index_access_mapping_address_userDefinedValueType_UFixed18_of_address",
                  [
                    M.get (| "expr_308_slot" |);
                    M.get (| "expr_13" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_userDefinedValueType_UFixed18_to_userDefinedValueType_UFixed18",
                [
                  M.get (| "_13" |);
                  M.get (| "expr_12" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_14"],
                Some (M.get (| "var_from" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some (M.get (| "_14" |))
              |) in
            let _ :=
              M.assign (|
                ["_15"],
                Some (M.get (| "var_to" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some (M.get (| "_15" |))
              |) in
            let _ :=
              M.assign (|
                ["_16"],
                Some (M.get (| "var_value" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some (M.get (| "_16" |))
              |) in
            let _ :=
              M.assign (|
                ["_17"],
                Some ([Literal.number 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef])
              |) in
            let _ :=
              M.assign (|
                ["_18"],
                Some (M.call (|
                  "convert_address_to_address",
                  [
                    M.get (| "expr_14" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_19"],
                Some (M.call (|
                  "convert_address_to_address",
                  [
                    M.get (| "expr_15" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_20"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["_21"],
                Some (M.call (|
                  "abi_encode_userDefinedValueType_UFixed18",
                  [
                    M.get (| "_20" |);
                    M.get (| "expr_16" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "log3",
                [
                  M.get (| "_20" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_21" |);
                      M.get (| "_20" |)
                    ]
                  |);
                  M.get (| "_17" |);
                  M.get (| "_18" |);
                  M.get (| "_19" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x11",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x11]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_sub_uint256",
          ["x"; "y"],
          ["diff"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["x"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "x" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["y"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["diff"],
                M.call (|
                  "sub",
                  [
                    M.get (| "x" |);
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "diff" |);
                    M.get (| "x" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_sub",
          ["var_a"; "var_b"],
          ["var_c"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_userDefinedValueType_UFixed18"],
                Some (M.call (|
                  "zero_value_for_split_userDefinedValueType_UFixed18",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_c"],
                M.get (| "zero_userDefinedValueType_UFixed18" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_a" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "convert_uint256_to_uint256",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_b" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "convert_uint256_to_uint256",
                  [
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.call (|
                  "checked_sub_uint256",
                  [
                    M.get (| "expr_1" |);
                    M.get (| "expr_3" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.call (|
                  "convert_uint256_to_uint256",
                  [
                    M.get (| "expr_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_c"],
                M.get (| "expr_5" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_add_uint256",
          ["x"; "y"],
          ["sum"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["x"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "x" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["y"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["sum"],
                M.call (|
                  "add",
                  [
                    M.get (| "x" |);
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "x" |);
                    M.get (| "sum" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_add",
          ["var_a"; "var_b"],
          ["var_c"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_userDefinedValueType_UFixed18"],
                Some (M.call (|
                  "zero_value_for_split_userDefinedValueType_UFixed18",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_c"],
                M.get (| "zero_userDefinedValueType_UFixed18" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_a" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "convert_uint256_to_uint256",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_b" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "convert_uint256_to_uint256",
                  [
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.call (|
                  "checked_add_uint256",
                  [
                    M.get (| "expr_1" |);
                    M.get (| "expr_3" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.call (|
                  "convert_uint256_to_uint256",
                  [
                    M.get (| "expr_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_c"],
                M.get (| "expr_5" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a2646970667358221220942456dbfa191e4f579c46beb83bc6ec65d9ffe729576ab70674e073ec87efd664736f6c634300081b0033".
  End ERC20_493_deployed.
End ERC20_493.
