(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_214.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            []
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                []
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          Some (M.call (|
            "allocate_unbounded",
            []
          |))
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f3231345f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3231345f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3231345f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_214_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      []
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  Some (M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x1c008df9),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_f",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xe2179b8e),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_g",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            []
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_userDefinedValueType_MyInt",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_int256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_t_userDefinedValueType_MyInt",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_userDefinedValueType_MyInt",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_userDefinedValueType_MyInt",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_t_userDefinedValueType_MyInt",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_int256_to_int256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_int256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_userDefinedValueType_MyInt",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "convert_int256_to_int256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_userDefinedValueType_MyInt_userDefinedValueType_MyInt_userDefinedValueType_MyInt_userDefinedValueType_MyInt",
          ["headStart"; "value0"; "value1"; "value2"; "value3"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 128]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_userDefinedValueType_MyInt",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_userDefinedValueType_MyInt",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_userDefinedValueType_MyInt",
                [
                  M.get (| "value2" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 64]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_userDefinedValueType_MyInt",
                [
                  M.get (| "value3" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 96]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_f",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"],
                Some (M.call (|
                  "abi_decode_userDefinedValueType_MyInt",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"; "ret_2"; "ret_3"],
                Some (M.call (|
                  "fun_f",
                  [
                    M.get (| "param" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_userDefinedValueType_MyInt_userDefinedValueType_MyInt_userDefinedValueType_MyInt_userDefinedValueType_MyInt",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |);
                    M.get (| "ret_2" |);
                    M.get (| "ret_3" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bool",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "iszero",
                      [
                        M.get (| "value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bool_to_bool",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_bool",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bool",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_bool_to_bool",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_g",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_g",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_userDefinedValueType_MyInt",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_0_by_1_to_int256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_f",
          ["var_x"],
          ["var_a";
      "var_b";
      "var_c";
      "var_d"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_userDefinedValueType_MyInt"],
                Some (M.call (|
                  "zero_value_for_split_userDefinedValueType_MyInt",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_a"],
                M.get (| "zero_userDefinedValueType_MyInt" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_userDefinedValueType_MyInt_1"],
                Some (M.call (|
                  "zero_value_for_split_userDefinedValueType_MyInt",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_b"],
                M.get (| "zero_userDefinedValueType_MyInt_1" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_t_userDefinedValueType_MyInt"],
                Some (M.call (|
                  "zero_value_for_split_userDefinedValueType_MyInt",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_c"],
                M.get (| "zero_t_userDefinedValueType_MyInt" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_userDefinedValueType_MyInt_2"],
                Some (M.call (|
                  "zero_value_for_split_userDefinedValueType_MyInt",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_d"],
                M.get (| "zero_userDefinedValueType_MyInt_2" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "convert_rational_minus_by_to_int256",
                  [
                    M.get (| "expr" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_a"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "convert_rational_0_by_1_to_int256",
                  [
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_b"],
                M.get (| "expr_3" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.call (|
                  "convert_rational_by_to_int256",
                  [
                    M.get (| "expr_4" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_c"],
                M.get (| "expr_5" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_x" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.declare (|
                ["var_d"],
                M.get (| "expr_6" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_bool",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint160",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "shl",
                          [
                            [Literal.number 160];
                            [Literal.number 1]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint160_to_uint160",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint160",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint160",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint160_to_address",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_uint160",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_contract_C_to_address",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_address",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint32",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bytes4",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "shl",
                      [
                        [Literal.number 224];
                        [Literal.number 0xffffffff]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint32_to_bytes4",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes4",
                  [
                    M.call (|
                      "shift_left",
                      [
                        M.call (|
                          "cleanup_uint32",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_int256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple_userDefinedValueType_MyInt",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_userDefinedValueType_MyInt",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "round_up_to_mul_of",
          ["value"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "and",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 31]
                      ]
                    |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 31]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "finalize_allocation",
          ["memPtr"; "size"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["newFreePtr"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "memPtr" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "size" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "newFreePtr" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "newFreePtr" |);
                        M.get (| "memPtr" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 64];
                  M.get (| "newFreePtr" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory",
          ["size"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_unbounded",
                  []
                |)
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "memPtr" |);
                  M.get (| "size" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_bytes",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "round_up_to_mul_of",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "add",
                  [
                    M.get (| "size" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_array_bytes",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["allocSize"],
                Some (M.call (|
                  "array_allocation_size_bytes",
                  [
                    M.get (| "length" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    M.get (| "allocSize" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.get (| "length" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_bytes",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 96]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_returndata",
          [],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.switch (|
                M.call (|
                  "returndatasize",
                  []
                |),
                [
                  (
                    Some (Literal.number 0),
                    ltac:(M.monadic (
                      let _ :=
                        M.declare (|
                          ["data"],
                          M.call (|
                            "zero_value_for_split_bytes",
                            []
                          |)
                        |) in
                      tt
                    ))            );
                  (
                    None,
                    ltac:(M.monadic (
                      let _ :=
                        M.declare (|
                          ["data"],
                          M.call (|
                            "allocate_memory_array_bytes",
                            [
                              M.call (|
                                "returndatasize",
                                []
                              |)
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "returndatacopy",
                          [
                            M.call (|
                              "add",
                              [
                                M.get (| "data" |);
                                [Literal.number 0x20]
                              ]
                            |);
                            [Literal.number 0];
                            M.call (|
                              "returndatasize",
                              []
                            |)
                          ]
                        |) in
                      tt
                    ))            )          ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x01",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x01]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "assert_helper",
          ["condition"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "condition" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x01",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_userDefinedValueType_MyInt_fromMemory",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "mload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_userDefinedValueType_MyInt",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_userDefinedValueType_MyIntt_userDefinedValueType_MyIntt_userDefinedValueType_MyIntt_userDefinedValueType_MyInt_fromMemory",
          ["headStart"; "dataEnd"],
          ["value0";
      "value1";
      "value2";
      "value3"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 128]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_userDefinedValueType_MyInt_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset_1"],
                Some ([Literal.number 32])
              |) in
            let _ :=
              M.declare (|
                ["value1"],
                M.call (|
                  "abi_decode_userDefinedValueType_MyInt_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset_1" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset_2"],
                Some ([Literal.number 64])
              |) in
            let _ :=
              M.declare (|
                ["value2"],
                M.call (|
                  "abi_decode_userDefinedValueType_MyInt_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset_2" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset_3"],
                Some ([Literal.number 96])
              |) in
            let _ :=
              M.declare (|
                ["value3"],
                M.call (|
                  "abi_decode_userDefinedValueType_MyInt_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset_3" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_bytes",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_minus_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_minus_by_to_t_int256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_minus_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_int256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_int256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple_int256",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_int256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_int256",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_int256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_int256_fromMemory",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "mload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_int256",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_int256t_int256t_int256t_int256_fromMemory",
          ["headStart"; "dataEnd"],
          ["value0";
      "value1";
      "value2";
      "value3"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 128]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_int256_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset_1"],
                Some ([Literal.number 32])
              |) in
            let _ :=
              M.declare (|
                ["value1"],
                M.call (|
                  "abi_decode_int256_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset_1" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset_2"],
                Some ([Literal.number 64])
              |) in
            let _ :=
              M.declare (|
                ["value2"],
                M.call (|
                  "abi_decode_int256_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset_2" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset_3"],
                Some ([Literal.number 96])
              |) in
            let _ :=
              M.declare (|
                ["value3"],
                M.call (|
                  "abi_decode_int256_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset_3" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_g",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_58_address"],
                Some (M.call (|
                  "address",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.call (|
                  "convert_contract_C_to_address",
                  [
                    M.get (| "expr_58_address" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_address"],
                Some (M.get (| "expr" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_64_functionSelector"],
                Some ([Literal.number 0x1c008df9])
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.call (|
                  "convert_uint32_to_bytes4",
                  [
                    M.get (| "expr_64_functionSelector" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some ([Literal.number 0x05])
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "convert_t_rational_by_to_t_int256",
                  [
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_70_mpos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_70_mpos" |);
                    [Literal.number 0x20]
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "_1" |);
                  M.get (| "expr_1" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["_1"],
                M.call (|
                  "add",
                  [
                    M.get (| "_1" |);
                    [Literal.number 4]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.call (|
                  "abi_encode_tuple_userDefinedValueType_MyInt",
                  [
                    M.get (| "_1" |);
                    M.get (| "expr_3" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "expr_70_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_2" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_70_mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "expr_70_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_2" |);
                      M.get (| "expr_70_mpos" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_70_mpos" |);
                    [Literal.number 0x20]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.call (|
                  "mload",
                  [
                    M.get (| "expr_70_mpos" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component"],
                Some (M.call (|
                  "call",
                  [
                    M.call (|
                      "gas",
                      []
                    |);
                    M.get (| "expr_address" |);
                    [Literal.number 0];
                    M.get (| "_3" |);
                    M.get (| "_4" |);
                    [Literal.number 0];
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component_mpos"],
                Some (M.call (|
                  "extract_returndata",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_success1"],
                Some (M.get (| "expr_component" |))
              |) in
            let _ :=
              M.assign (|
                ["var_ret1_mpos"],
                Some (M.get (| "expr_component_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.get (| "var_success1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_4" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_12_mpos"],
                Some (M.get (| "var_ret1_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_91_mpos"],
                Some (M.get (| "_12_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_component_1"; "expr_component_2"; "expr_component_3"; "expr_component_4"],
                Some (M.call (|
                  "abi_decode_userDefinedValueType_MyIntt_userDefinedValueType_MyIntt_userDefinedValueType_MyIntt_userDefinedValueType_MyInt_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "expr_91_mpos" |);
                        [Literal.number 32]
                      ]
                    |);
                    M.call (|
                      "add",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "expr_91_mpos" |);
                            [Literal.number 32]
                          ]
                        |);
                        M.call (|
                          "array_length_bytes",
                          [
                            M.get (| "expr_91_mpos" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_a1"],
                Some (M.get (| "expr_component_1" |))
              |) in
            let _ :=
              M.assign (|
                ["var_b1"],
                Some (M.get (| "expr_component_2" |))
              |) in
            let _ :=
              M.assign (|
                ["var_c1"],
                Some (M.get (| "expr_component_3" |))
              |) in
            let _ :=
              M.assign (|
                ["var_d1"],
                Some (M.get (| "expr_component_4" |))
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.get (| "var_a1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.get (| "_6" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some (M.call (|
                  "convert_int256_to_int256",
                  [
                    M.get (| "expr_5" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int256",
                      [
                        M.get (| "expr_6" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int256",
                      [
                        M.get (| "expr_7" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_8" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                Some (M.get (| "var_b1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.get (| "_7" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some (M.call (|
                  "convert_int256_to_int256",
                  [
                    M.get (| "expr_9" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int256",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_0_by_1_to_int256",
                      [
                        M.get (| "expr_11" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_12" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.get (| "var_c1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some (M.get (| "_8" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some (M.call (|
                  "convert_int256_to_int256",
                  [
                    M.get (| "expr_13" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int256",
                      [
                        M.get (| "expr_14" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int256",
                      [
                        M.get (| "expr_15" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_16" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                Some (M.get (| "var_d1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some (M.get (| "_9" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some (M.call (|
                  "convert_int256_to_int256",
                  [
                    M.get (| "expr_17" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some ([Literal.number 0x05])
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int256",
                      [
                        M.get (| "expr_18" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_int256",
                      [
                        M.get (| "expr_19" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_20" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_142_address"],
                Some (M.call (|
                  "address",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                Some (M.call (|
                  "convert_contract_C_to_address",
                  [
                    M.get (| "expr_142_address" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_144_address"],
                Some (M.get (| "expr_21" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_functionSelector"],
                Some ([Literal.number 0x1c008df9])
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                Some (M.call (|
                  "convert_uint32_to_bytes4",
                  [
                    M.get (| "expr_functionSelector" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 4]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                Some (M.call (|
                  "convert_t_rational_minus_by_to_t_int256",
                  [
                    M.get (| "expr_23" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_155_mpos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["_10"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_155_mpos" |);
                    [Literal.number 0x20]
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "_10" |);
                  M.get (| "expr_22" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["_10"],
                M.call (|
                  "add",
                  [
                    M.get (| "_10" |);
                    [Literal.number 4]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_11"],
                Some (M.call (|
                  "abi_encode_tuple_int256",
                  [
                    M.get (| "_10" |);
                    M.get (| "expr_24" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "expr_155_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_11" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_155_mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "expr_155_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_11" |);
                      M.get (| "expr_155_mpos" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_12"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "expr_155_mpos" |);
                    [Literal.number 0x20]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_13"],
                Some (M.call (|
                  "mload",
                  [
                    M.get (| "expr_155_mpos" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_156_component"],
                Some (M.call (|
                  "call",
                  [
                    M.call (|
                      "gas",
                      []
                    |);
                    M.get (| "expr_144_address" |);
                    [Literal.number 0];
                    M.get (| "_12" |);
                    M.get (| "_13" |);
                    [Literal.number 0];
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_156_component_2_mpos"],
                Some (M.call (|
                  "extract_returndata",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_success2"],
                Some (M.get (| "expr_156_component" |))
              |) in
            let _ :=
              M.assign (|
                ["var_ret2_mpos"],
                Some (M.get (| "expr_156_component_2_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["_14"],
                Some (M.get (| "var_success2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                Some (M.get (| "_14" |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_25" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_mpos"],
                Some (M.get (| "var_ret2_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_mpos"],
                Some (M.get (| "_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_182_component"; "expr_182_component_1"; "expr_182_component_2"; "expr_182_component_3"],
                Some (M.call (|
                  "abi_decode_int256t_int256t_int256t_int256_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "expr_mpos" |);
                        [Literal.number 32]
                      ]
                    |);
                    M.call (|
                      "add",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "expr_mpos" |);
                            [Literal.number 32]
                          ]
                        |);
                        M.call (|
                          "array_length_bytes",
                          [
                            M.get (| "expr_mpos" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_a2"],
                Some (M.get (| "expr_182_component" |))
              |) in
            let _ :=
              M.assign (|
                ["var_b2"],
                Some (M.get (| "expr_182_component_1" |))
              |) in
            let _ :=
              M.assign (|
                ["var_c2"],
                Some (M.get (| "expr_182_component_2" |))
              |) in
            let _ :=
              M.assign (|
                ["var_d2"],
                Some (M.get (| "expr_182_component_3" |))
              |) in
            let _ :=
              M.assign (|
                ["_15"],
                Some (M.get (| "var_a2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                Some (M.get (| "_15" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int256",
                      [
                        M.get (| "expr_26" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int256",
                      [
                        M.get (| "expr_27" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_28" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_16"],
                Some (M.get (| "var_b2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                Some (M.get (| "_16" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int256",
                      [
                        M.get (| "expr_29" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_0_by_1_to_int256",
                      [
                        M.get (| "expr_30" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_31" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_17"],
                Some (M.get (| "var_c2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                Some (M.get (| "_17" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_33"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_34"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int256",
                      [
                        M.get (| "expr_32" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int256",
                      [
                        M.get (| "expr_33" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_34" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_18"],
                Some (M.get (| "var_d2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_35"],
                Some (M.get (| "_18" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_36"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 4]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_37"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int256",
                      [
                        M.get (| "expr_35" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_minus_by_to_t_int256",
                      [
                        M.get (| "expr_36" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_37" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_38"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_38" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a264697066735822122005fe8af4b62d8d8fee221f418d7d7af50a96829a33ee03782d5c8480c853da9464736f6c634300081b0033".
  End C_214_deployed.
End C_214.
