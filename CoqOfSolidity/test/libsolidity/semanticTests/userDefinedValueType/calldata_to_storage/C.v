(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_75.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            []
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                []
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          Some (M.call (|
            "allocate_unbounded",
            []
          |))
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f37355f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f37355f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f37355f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_75_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      []
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  Some (M.call (|
                    "shift_right_224_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x199a41a0),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_h",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x54bb1361),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_l",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x75d838c3),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_small",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x86b714e2),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_s",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x8f8af815),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_g",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xdeb22c11),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_f",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            []
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_224_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_userDefinedValueType_Left_dyn_calldata_ptr",
          ["offset"; "end"],
          ["arrayPos";
      "length"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "offset" |);
                            [Literal.number 0x1f]
                          ]
                        |);
                        M.get (| "end" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["arrayPos"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "arrayPos" |);
                        M.call (|
                          "mul",
                          [
                            M.get (| "length" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      ]
                    |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_userDefinedValueType_Left_dyn_calldata",
          ["headStart"; "dataEnd"],
          ["value0";
      "value1"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value0"; "value1"],
                M.call (|
                  "abi_decode_array_userDefinedValueType_Left_dyn_calldata_ptr",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_userDefinedValueType_Left_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_array_bytes2_dyn_fromStack",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_userDefinedValueType_Left_dyn",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bytes2",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "shl",
                      [
                        [Literal.number 240];
                        [Literal.number 65535]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_bytes2_to_bytes2",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes2",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_userDefinedValueType_Left",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "convert_bytes2_to_bytes2",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encodeUpdatedPos_userDefinedValueType_Left",
          ["value0"; "pos"],
          ["updatedPos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "abi_encode_userDefinedValueType_Left",
                [
                  M.get (| "value0" |);
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updatedPos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_nextElement_array_userDefinedValueType_Left_dyn",
          ["ptr"],
          ["next"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["next"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_userDefinedValueType_Left_dyn",
          ["value"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_userDefinedValueType_Left_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_bytes2_dyn_fromStack",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["baseRef"],
                Some (M.call (|
                  "array_dataslot_array_userDefinedValueType_Left_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.get (| "baseRef" |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["elementValue0"],
                      Some (M.call (|
                        "mload",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["pos"],
                      M.call (|
                        "abi_encodeUpdatedPos_userDefinedValueType_Left",
                        [
                          M.get (| "elementValue0" |);
                          M.get (| "pos" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["srcPtr"],
                      M.call (|
                        "array_nextElement_array_userDefinedValueType_Left_dyn",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_userDefinedValueType_Left_dyn_memory_ptr",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_array_userDefinedValueType_Left_dyn",
                  [
                    M.get (| "value0" |);
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_h",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"],
                Some (M.call (|
                  "abi_decode_array_userDefinedValueType_Left_dyn_calldata",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_h",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_array_userDefinedValueType_Left_dyn_memory_ptr",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_uint256",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_uint256",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_uint256",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_tuple_uint256",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x32",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x32]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_userDefinedValueType_Left_dyn_storage",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_userDefinedValueType_Left_dyn_storage",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.get (| "ptr" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_userDefinedValueType_Left_dyn",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                Some (M.call (|
                  "array_length_array_userDefinedValueType_Left_dyn_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                Some (M.call (|
                  "array_dataslot_array_userDefinedValueType_Left_dyn_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "div",
                      [
                        M.get (| "index" |);
                        [Literal.number 16]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "mul",
                  [
                    M.call (|
                      "mod",
                      [
                        M.get (| "index" |);
                        [Literal.number 16]
                      ]
                    |);
                    [Literal.number 2]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_unsigned_dynamic",
          ["bits"; "value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    M.get (| "bits" |);
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_240",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 240];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_userDefinedValueType_Left",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "shift_left_240",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_dynamict_userDefinedValueType_Left",
          ["slot_value"; "offset"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Left",
                  [
                    M.call (|
                      "shift_right_unsigned_dynamic",
                      [
                        M.call (|
                          "mul",
                          [
                            M.get (| "offset" |);
                            [Literal.number 8]
                          ]
                        |);
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_dynamic_userDefinedValueType_Left",
          ["slot"; "offset"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_dynamict_userDefinedValueType_Left",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "getter_fun_l",
          ["key"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["slot"],
                Some ([Literal.number 2])
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "key" |);
                        M.call (|
                          "array_length_array_userDefinedValueType_Left_dyn_storage",
                          [
                            M.get (| "slot" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["slot"; "offset"],
                M.call (|
                  "storage_array_index_access_userDefinedValueType_Left_dyn",
                  [
                    M.get (| "slot" |);
                    M.get (| "key" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "read_from_storage_split_dynamic_userDefinedValueType_Left",
                  [
                    M.get (| "slot" |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_userDefinedValueType_Left_to_bytes2",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "convert_bytes2_to_bytes2",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple_userDefinedValueType_Left",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_userDefinedValueType_Left_to_bytes2",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_l",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"],
                Some (M.call (|
                  "abi_decode_tuple_uint256",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "getter_fun_l",
                  [
                    M.get (| "param" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_tuple_userDefinedValueType_Left",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_userDefinedValueType_Small_dyn_storage",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "sload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_userDefinedValueType_Small_dyn_storage",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.get (| "ptr" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "keccak256",
                  [
                    [Literal.number 0];
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_userDefinedValueType_Small_dyn",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                Some (M.call (|
                  "array_length_array_userDefinedValueType_Small_dyn_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                Some (M.call (|
                  "array_dataslot_array_userDefinedValueType_Small_dyn_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "div",
                      [
                        M.get (| "index" |);
                        [Literal.number 16]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "mul",
                  [
                    M.call (|
                      "mod",
                      [
                        M.get (| "index" |);
                        [Literal.number 16]
                      ]
                    |);
                    [Literal.number 2]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_userDefinedValueType_Small",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_dynamict_userDefinedValueType_Small",
          ["slot_value"; "offset"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Small",
                  [
                    M.call (|
                      "shift_right_unsigned_dynamic",
                      [
                        M.call (|
                          "mul",
                          [
                            M.get (| "offset" |);
                            [Literal.number 8]
                          ]
                        |);
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_dynamic_userDefinedValueType_Small",
          ["slot"; "offset"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_dynamict_userDefinedValueType_Small",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "getter_fun_small",
          ["key"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["slot"],
                Some ([Literal.number 1])
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "key" |);
                        M.call (|
                          "array_length_array_userDefinedValueType_Small_dyn_storage",
                          [
                            M.get (| "slot" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["slot"; "offset"],
                M.call (|
                  "storage_array_index_access_userDefinedValueType_Small_dyn",
                  [
                    M.get (| "slot" |);
                    M.get (| "key" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "read_from_storage_split_dynamic_userDefinedValueType_Small",
                  [
                    M.get (| "slot" |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint16",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint16_to_uint16",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint16",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint16",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_userDefinedValueType_Small_to_uint16",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "convert_uint16_to_uint16",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple_userDefinedValueType_Small",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_userDefinedValueType_Small_to_uint16",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_small",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"],
                Some (M.call (|
                  "abi_decode_tuple_uint256",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "getter_fun_small",
                  [
                    M.get (| "param" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_tuple_userDefinedValueType_Small",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_0_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_uint8",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_0_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_uint8",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offsett_uint8",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_8_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 8];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_1t_userDefinedValueType_Small",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Small",
                  [
                    M.call (|
                      "shift_right_8_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_userDefinedValueType_Small",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offset_1t_userDefinedValueType_Small",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_24_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 24];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_3t_userDefinedValueType_Left",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Left",
                  [
                    M.call (|
                      "shift_right_24_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_userDefinedValueType_Left",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offset_3t_userDefinedValueType_Left",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_40_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 40];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_5t_uint8",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint8",
                  [
                    M.call (|
                      "shift_right_40_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_t_uint8",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offset_5t_uint8",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "getter_fun_s",
          [],
          ["ret";
      "ret_1";
      "ret_2";
      "ret_3"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["slot"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "read_from_storage_split_offset_uint8",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "slot" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["ret_1"],
                M.call (|
                  "read_from_storage_split_offset_userDefinedValueType_Small",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "slot" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["ret_2"],
                M.call (|
                  "read_from_storage_split_offset_userDefinedValueType_Left",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "slot" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["ret_3"],
                M.call (|
                  "read_from_storage_split_offset_t_uint8",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "slot" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint8",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint8",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint8",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint8_userDefinedValueType_Small_userDefinedValueType_Left_uint8",
          ["headStart"; "value0"; "value1"; "value2"; "value3"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 128]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint8",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_userDefinedValueType_Small_to_uint16",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_userDefinedValueType_Left_to_bytes2",
                [
                  M.get (| "value2" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 64]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint8",
                [
                  M.get (| "value3" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 96]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_s",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"; "ret_2"; "ret_3"],
                Some (M.call (|
                  "getter_fun_s",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_uint8_userDefinedValueType_Small_userDefinedValueType_Left_uint8",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |);
                    M.get (| "ret_2" |);
                    M.get (| "ret_3" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_userDefinedValueType_Small_dyn_calldata",
          ["offset"; "end"],
          ["arrayPos";
      "length"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "offset" |);
                            [Literal.number 0x1f]
                          ]
                        |);
                        M.get (| "end" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["arrayPos"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "arrayPos" |);
                        M.call (|
                          "mul",
                          [
                            M.get (| "length" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      ]
                    |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_array_userDefinedValueType_Small_dyn_calldata_ptr",
          ["headStart"; "dataEnd"],
          ["value0";
      "value1"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value0"; "value1"],
                M.call (|
                  "abi_decode_array_userDefinedValueType_Small_dyn_calldata",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_userDefinedValueType_Small_dyn",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_array_uint16_dyn",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_userDefinedValueType_Small_dyn",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            let _ :=
              M.declare (|
                ["data"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_userDefinedValueType_Small",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "convert_uint16_to_uint16",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encodeUpdatedPos_userDefinedValueType_Small",
          ["value0"; "pos"],
          ["updatedPos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "abi_encode_userDefinedValueType_Small",
                [
                  M.get (| "value0" |);
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updatedPos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_nextElement_array_userDefinedValueType_Small_dyn",
          ["ptr"],
          ["next"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["next"],
                M.call (|
                  "add",
                  [
                    M.get (| "ptr" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_userDefinedValueType_Small_dyn_memory_ptr",
          ["value"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_userDefinedValueType_Small_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_uint16_dyn",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["baseRef"],
                Some (M.call (|
                  "array_dataslot_array_userDefinedValueType_Small_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.get (| "baseRef" |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["elementValue0"],
                      Some (M.call (|
                        "mload",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.declare (|
                      ["pos"],
                      M.call (|
                        "abi_encodeUpdatedPos_userDefinedValueType_Small",
                        [
                          M.get (| "elementValue0" |);
                          M.get (| "pos" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["srcPtr"],
                      M.call (|
                        "array_nextElement_array_userDefinedValueType_Small_dyn",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_userDefinedValueType_Small_dyn",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_array_userDefinedValueType_Small_dyn_memory_ptr",
                  [
                    M.get (| "value0" |);
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_g",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"],
                Some (M.call (|
                  "abi_decode_array_userDefinedValueType_Small_dyn_calldata_ptr",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_g",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_array_userDefinedValueType_Small_dyn",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_struct_S_calldata_ptr",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "end" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    [Literal.number 128]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.get (| "offset" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_struct_S_calldata",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 128]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_struct_S_calldata_ptr",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple",
          ["headStart"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_f",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"],
                Some (M.call (|
                  "abi_decode_struct_S_calldata",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "fun_f",
                [
                  M.get (| "param" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_tuple",
                  [
                    M.get (| "memPos" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_array_userDefinedValueType_Left_dyn",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 96]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_convert_length_to_size_array_userDefinedValueType_Left_dyn_storage",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["size"],
                M.get (| "length" |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "div",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "length" |);
                        M.call (|
                          "sub",
                          [
                            [Literal.number 16];
                            [Literal.number 1]
                          ]
                        |)
                      ]
                    |);
                    [Literal.number 16]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_dynamic",
          ["bits"; "value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    M.get (| "bits" |);
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_dynamic32",
          ["value"; "shiftBytes"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["shiftBits"],
                Some (M.call (|
                  "mul",
                  [
                    M.get (| "shiftBytes" |);
                    [Literal.number 8]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["mask"],
                Some (M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint256_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_uint256",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_uint256_to_uint256",
          ["slot"; "offset"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                Some (M.call (|
                  "convert_uint256_to_uint256",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_dynamic32",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.get (| "offset" |);
                      M.call (|
                        "prepare_store_uint256",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_set_to_zero_uint256",
          ["slot"; "offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_uint256_to_uint256",
                [
                  M.get (| "slot" |);
                  M.get (| "offset" |);
                  M.get (| "zero" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_storage_range_userDefinedValueType_Left",
          ["start"; "end"],
          [],
          ltac:(M.monadic (
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "start" |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["start"],
                      M.call (|
                        "add",
                        [
                          M.get (| "start" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "storage_set_to_zero_uint256",
                      [
                        M.get (| "start" |);
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "partial_clear_storage_slot",
          ["slot"; "offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                Some (M.call (|
                  "shift_right_unsigned_dynamic",
                  [
                    M.call (|
                      "mul",
                      [
                        [Literal.number 8];
                        M.call (|
                          "sub",
                          [
                            [Literal.number 32];
                            M.get (| "offset" |)
                          ]
                        |)
                      ]
                    |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "and",
                    [
                      M.get (| "mask" |);
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_storage_array_end_array_userDefinedValueType_Left_dyn",
          ["array"; "len"; "startIndex"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "startIndex" |);
                    M.get (| "len" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["oldSlotCount"],
                      Some (M.call (|
                        "array_convert_length_to_size_array_userDefinedValueType_Left_dyn_storage",
                        [
                          M.get (| "len" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["newSlotCount"],
                      Some (M.call (|
                        "array_convert_length_to_size_array_userDefinedValueType_Left_dyn_storage",
                        [
                          M.get (| "startIndex" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["arrayDataStart"],
                      Some (M.call (|
                        "array_dataslot_array_userDefinedValueType_Left_dyn_storage",
                        [
                          M.get (| "array" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteStart"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "newSlotCount" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteEnd"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "oldSlotCount" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["offset"],
                      Some (M.call (|
                        "mul",
                        [
                          M.call (|
                            "mod",
                            [
                              M.get (| "startIndex" |);
                              [Literal.number 16]
                            ]
                          |);
                          [Literal.number 2]
                        ]
                      |))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "gt",
                        [
                          M.get (| "offset" |);
                          [Literal.number 0]
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "partial_clear_storage_slot",
                            [
                              M.call (|
                                "sub",
                                [
                                  M.get (| "deleteStart" |);
                                  [Literal.number 1]
                                ]
                              |);
                              M.get (| "offset" |)
                            ]
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "clear_storage_range_userDefinedValueType_Left",
                      [
                        M.get (| "deleteStart" |);
                        M.get (| "deleteEnd" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "resize_array_array_userDefinedValueType_Left_dyn_storage",
          ["array"; "newLen"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "newLen" |);
                    [Literal.number 18446744073709551616]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["oldLen"],
                Some (M.call (|
                  "array_length_array_userDefinedValueType_Left_dyn_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "array" |);
                  M.get (| "newLen" |)
                ]
              |) in
            let _ :=
              M.call (|
                "cleanup_storage_array_end_array_userDefinedValueType_Left_dyn",
                [
                  M.get (| "array" |);
                  M.get (| "oldLen" |);
                  M.get (| "newLen" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_userDefinedValueType_Left_dyn_calldata",
          ["value"; "len"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.get (| "len" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_userDefinedValueType_Left",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_bytes2",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_calldatat_userDefinedValueType_Left",
          ["ptr"],
          ["returnValue"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["value"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.get (| "ptr" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "validator_revert_userDefinedValueType_Left",
                [
                  M.get (| "value" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["returnValue"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_userDefinedValueType_Left_dyn_calldata",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_dynamic2",
          ["value"; "shiftBytes"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["shiftBits"],
                Some (M.call (|
                  "mul",
                  [
                    M.get (| "shiftBytes" |);
                    [Literal.number 8]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["mask"],
                Some (M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    [Literal.number 65535]
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_240_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 240];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_userDefinedValueType_Left",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "shift_right_240_unsigned",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_to_storage_from_array_userDefinedValueType_Left_dyn_calldata_to_array_userDefinedValueType_Left_dyn",
          ["dst"; "src"; "len"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_userDefinedValueType_Left_dyn_calldata",
                  [
                    M.get (| "src" |);
                    M.get (| "len" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "resize_array_array_userDefinedValueType_Left_dyn_storage",
                [
                  M.get (| "dst" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.call (|
                  "array_dataslot_array_userDefinedValueType_Left_dyn_calldata",
                  [
                    M.get (| "src" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["dstSlot"],
                Some (M.call (|
                  "array_dataslot_array_userDefinedValueType_Left_dyn_storage",
                  [
                    M.get (| "dst" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["fullSlots"],
                Some (M.call (|
                  "div",
                  [
                    M.get (| "length" |);
                    [Literal.number 16]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "fullSlots" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["dstSlotValue"],
                      Some ([Literal.number 0])
                    |) in
                  let _ :=
                    M.assign (|
                      ["j"],
                      Some ([Literal.number 0])
                    |) in
                  let _ :=
                    let _ :=
                      tt in
                    M.for_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "j" |);
                          [Literal.number 16]
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["j"],
                            M.call (|
                              "add",
                              [
                                M.get (| "j" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      )),
                      ltac:(M.monadic (
                        let _ :=
                          M.assign (|
                            ["stackItem"],
                            Some (M.call (|
                              "read_from_calldatat_userDefinedValueType_Left",
                              [
                                M.get (| "srcPtr" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["itemValue"],
                            Some (M.call (|
                              "prepare_store_userDefinedValueType_Left",
                              [
                                M.get (| "stackItem" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.declare (|
                            ["dstSlotValue"],
                            M.call (|
                              "update_byte_slice_dynamic2",
                              [
                                M.get (| "dstSlotValue" |);
                                M.call (|
                                  "mul",
                                  [
                                    [Literal.number 2];
                                    M.get (| "j" |)
                                  ]
                                |);
                                M.get (| "itemValue" |)
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["srcPtr"],
                            M.call (|
                              "add",
                              [
                                M.get (| "srcPtr" |);
                                [Literal.number 32]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "sstore",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "dstSlot" |);
                            M.get (| "i" |)
                          ]
                        |);
                        M.get (| "dstSlotValue" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["spill"],
                Some (M.call (|
                  "sub",
                  [
                    M.get (| "length" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "fullSlots" |);
                        [Literal.number 16]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "spill" |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["dstSlotValue_1"],
                      Some ([Literal.number 0])
                    |) in
                  let _ :=
                    M.assign (|
                      ["j_1"],
                      Some ([Literal.number 0])
                    |) in
                  let _ :=
                    let _ :=
                      tt in
                    M.for_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "j_1" |);
                          M.get (| "spill" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["j_1"],
                            M.call (|
                              "add",
                              [
                                M.get (| "j_1" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      )),
                      ltac:(M.monadic (
                        let _ :=
                          M.assign (|
                            ["stackItem_1"],
                            Some (M.call (|
                              "read_from_calldatat_userDefinedValueType_Left",
                              [
                                M.get (| "srcPtr" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["itemValue_1"],
                            Some (M.call (|
                              "prepare_store_userDefinedValueType_Left",
                              [
                                M.get (| "stackItem_1" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.declare (|
                            ["dstSlotValue_1"],
                            M.call (|
                              "update_byte_slice_dynamic2",
                              [
                                M.get (| "dstSlotValue_1" |);
                                M.call (|
                                  "mul",
                                  [
                                    [Literal.number 2];
                                    M.get (| "j_1" |)
                                  ]
                                |);
                                M.get (| "itemValue_1" |)
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["srcPtr"],
                            M.call (|
                              "add",
                              [
                                M.get (| "srcPtr" |);
                                [Literal.number 32]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "sstore",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "dstSlot" |);
                            M.get (| "fullSlots" |)
                          ]
                        |);
                        M.get (| "dstSlotValue_1" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_array_userDefinedValueType_Left_dyn_calldata_to_array_userDefinedValueType_Left_dyn",
          ["slot"; "value"; "value_1"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "copy_array_to_storage_from_array_userDefinedValueType_Left_dyn_calldata_to_array_userDefinedValueType_Left_dyn",
                [
                  M.get (| "slot" |);
                  M.get (| "value" |);
                  M.get (| "value_1" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_array_bytes2_dyn",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_0t_userDefinedValueType_Left",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Left",
                  [
                    M.call (|
                      "shift_right_0_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_16_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 16];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_2t_userDefinedValueType_Left",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Left",
                  [
                    M.call (|
                      "shift_right_16_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_32_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 32];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_4t_userDefinedValueType_Left",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Left",
                  [
                    M.call (|
                      "shift_right_32_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_48_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 48];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_6t_userDefinedValueType_Left",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Left",
                  [
                    M.call (|
                      "shift_right_48_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_64_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 64];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_8t_userDefinedValueType_Left",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Left",
                  [
                    M.call (|
                      "shift_right_64_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_80_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 80];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_10t_userDefinedValueType_Left",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Left",
                  [
                    M.call (|
                      "shift_right_80_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_96_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 96];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_userDefinedValueType_Left_5",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Left",
                  [
                    M.call (|
                      "shift_right_96_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_112_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 112];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_14t_userDefinedValueType_Left",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Left",
                  [
                    M.call (|
                      "shift_right_112_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_128_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 128];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_16t_userDefinedValueType_Left",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Left",
                  [
                    M.call (|
                      "shift_right_128_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 144];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_18t_userDefinedValueType_Left",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Left",
                  [
                    M.call (|
                      "shift_right_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_160_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 160];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_userDefinedValueType_Left",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Left",
                  [
                    M.call (|
                      "shift_right_160_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_176_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 176];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_22t_userDefinedValueType_Left",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Left",
                  [
                    M.call (|
                      "shift_right_176_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_192_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 192];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_24t_userDefinedValueType_Left",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Left",
                  [
                    M.call (|
                      "shift_right_192_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_208_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 208];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_26t_userDefinedValueType_Left",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Left",
                  [
                    M.call (|
                      "shift_right_208_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_28t_userDefinedValueType_Left",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Left",
                  [
                    M.call (|
                      "shift_right_224_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_30t_userDefinedValueType_Left",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Left",
                  [
                    M.call (|
                      "shift_right_240_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_userDefinedValueType_Left_dyn_storage",
          ["value"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_userDefinedValueType_Left_dyn_storage",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_bytes2_dyn",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.call (|
                  "array_dataslot_array_userDefinedValueType_Left_dyn_storage",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["itemCounter"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.if_ (|
                [Literal.number 1],
                ltac:(M.monadic (
                  let _ :=
                    let _ :=
                      tt in
                    M.for_ (|
                      M.call (|
                        "lt",
                        [
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              M.call (|
                                "sub",
                                [
                                  [Literal.number 16];
                                  [Literal.number 1]
                                ]
                              |)
                            ]
                          |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 16]
                              ]
                            |)
                          |) in
                        tt
                      )),
                      ltac:(M.monadic (
                        let _ :=
                          M.assign (|
                            ["data"],
                            Some (M.call (|
                              "sload",
                              [
                                M.get (| "srcPtr" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_0t_userDefinedValueType_Left",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_2t_userDefinedValueType_Left",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_4t_userDefinedValueType_Left",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_6t_userDefinedValueType_Left",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_8t_userDefinedValueType_Left",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_10t_userDefinedValueType_Left",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offsett_userDefinedValueType_Left_5",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_14t_userDefinedValueType_Left",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_16t_userDefinedValueType_Left",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_18t_userDefinedValueType_Left",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offsett_userDefinedValueType_Left",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_22t_userDefinedValueType_Left",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_24t_userDefinedValueType_Left",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_26t_userDefinedValueType_Left",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_28t_userDefinedValueType_Left",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_30t_userDefinedValueType_Left",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["srcPtr"],
                            M.call (|
                              "add",
                              [
                                M.get (| "srcPtr" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.if_ (|
                [Literal.number 1],
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["data_1"],
                      Some (M.call (|
                        "sload",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_0t_userDefinedValueType_Left",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_2t_userDefinedValueType_Left",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_4t_userDefinedValueType_Left",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_6t_userDefinedValueType_Left",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_8t_userDefinedValueType_Left",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_10t_userDefinedValueType_Left",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offsett_userDefinedValueType_Left_5",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_14t_userDefinedValueType_Left",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_16t_userDefinedValueType_Left",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_18t_userDefinedValueType_Left",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offsett_userDefinedValueType_Left",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_22t_userDefinedValueType_Left",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_24t_userDefinedValueType_Left",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_26t_userDefinedValueType_Left",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_28t_userDefinedValueType_Left",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Left",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_30t_userDefinedValueType_Left",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encodeUpdatedPos_array_userDefinedValueType_Left_dyn_storage",
          ["value0"; "pos"],
          ["updatedPos"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["updatedPos"],
                M.call (|
                  "abi_encode_array_userDefinedValueType_Left_dyn_storage",
                  [
                    M.get (| "value0" |);
                    M.get (| "pos" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "round_up_to_mul_of",
          ["value"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "and",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 31]
                      ]
                    |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 31]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "finalize_allocation",
          ["memPtr"; "size"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["newFreePtr"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "memPtr" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "size" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "newFreePtr" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "newFreePtr" |);
                        M.get (| "memPtr" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 64];
                  M.get (| "newFreePtr" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_from_storage_to_memory_array_userDefinedValueType_Left_dyn",
          ["slot"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_unbounded",
                  []
                |)
              |) in
            let _ :=
              M.assign (|
                ["end"],
                Some (M.call (|
                  "abi_encodeUpdatedPos_array_userDefinedValueType_Left_dyn_storage",
                  [
                    M.get (| "slot" |);
                    M.get (| "memPtr" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "end" |);
                      M.get (| "memPtr" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_array_array_userDefinedValueType_Left_dyn_storage_to_array_userDefinedValueType_Left_dyn",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "copy_array_from_storage_to_memory_array_userDefinedValueType_Left_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_h",
          ["var_left_offset"; "var_left_length"],
          ["var__mpos"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_array_userDefinedValueType_Left_dyn_mpos"],
                Some (M.call (|
                  "zero_value_for_split_array_userDefinedValueType_Left_dyn",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var__mpos"],
                M.get (| "zero_array_userDefinedValueType_Left_dyn_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_2_offset"],
                Some (M.get (| "var_left_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["_length"],
                Some (M.get (| "var_left_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_68_offset"],
                Some (M.get (| "_2_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_68_length"],
                Some (M.get (| "_length" |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_array_userDefinedValueType_Left_dyn_calldata_to_array_userDefinedValueType_Left_dyn",
                [
                  [Literal.number 0x02];
                  M.get (| "expr_68_offset" |);
                  M.get (| "expr_68_length" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_slot"],
                Some ([Literal.number 0x02])
              |) in
            let _ :=
              M.assign (|
                ["expr_slot"],
                Some (M.get (| "_slot" |))
              |) in
            let _ :=
              M.declare (|
                ["var__mpos"],
                M.call (|
                  "convert_array_array_userDefinedValueType_Left_dyn_storage_to_array_userDefinedValueType_Left_dyn",
                  [
                    M.get (| "expr_slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_array_userDefinedValueType_Small_dyn",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 96]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_convert_length_to_size_array_userDefinedValueType_Small_dyn_storage",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["size"],
                M.get (| "length" |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "div",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "length" |);
                        M.call (|
                          "sub",
                          [
                            [Literal.number 16];
                            [Literal.number 1]
                          ]
                        |)
                      ]
                    |);
                    [Literal.number 16]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "clear_storage_range_userDefinedValueType_Small",
          ["start"; "end"],
          [],
          ltac:(M.monadic (
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "start" |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["start"],
                      M.call (|
                        "add",
                        [
                          M.get (| "start" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "storage_set_to_zero_uint256",
                      [
                        M.get (| "start" |);
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_storage_array_end_array_userDefinedValueType_Small_dyn",
          ["array"; "len"; "startIndex"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "startIndex" |);
                    M.get (| "len" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["oldSlotCount"],
                      Some (M.call (|
                        "array_convert_length_to_size_array_userDefinedValueType_Small_dyn_storage",
                        [
                          M.get (| "len" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["newSlotCount"],
                      Some (M.call (|
                        "array_convert_length_to_size_array_userDefinedValueType_Small_dyn_storage",
                        [
                          M.get (| "startIndex" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["arrayDataStart"],
                      Some (M.call (|
                        "array_dataslot_array_userDefinedValueType_Small_dyn_storage",
                        [
                          M.get (| "array" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteStart"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "newSlotCount" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["deleteEnd"],
                      Some (M.call (|
                        "add",
                        [
                          M.get (| "arrayDataStart" |);
                          M.get (| "oldSlotCount" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.assign (|
                      ["offset"],
                      Some (M.call (|
                        "mul",
                        [
                          M.call (|
                            "mod",
                            [
                              M.get (| "startIndex" |);
                              [Literal.number 16]
                            ]
                          |);
                          [Literal.number 2]
                        ]
                      |))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "gt",
                        [
                          M.get (| "offset" |);
                          [Literal.number 0]
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "partial_clear_storage_slot",
                            [
                              M.call (|
                                "sub",
                                [
                                  M.get (| "deleteStart" |);
                                  [Literal.number 1]
                                ]
                              |);
                              M.get (| "offset" |)
                            ]
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "clear_storage_range_userDefinedValueType_Small",
                      [
                        M.get (| "deleteStart" |);
                        M.get (| "deleteEnd" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "resize_array_array_userDefinedValueType_Small_dyn_storage",
          ["array"; "newLen"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "newLen" |);
                    [Literal.number 18446744073709551616]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["oldLen"],
                Some (M.call (|
                  "array_length_array_userDefinedValueType_Small_dyn_storage",
                  [
                    M.get (| "array" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "array" |);
                  M.get (| "newLen" |)
                ]
              |) in
            let _ :=
              M.call (|
                "cleanup_storage_array_end_array_userDefinedValueType_Small_dyn",
                [
                  M.get (| "array" |);
                  M.get (| "oldLen" |);
                  M.get (| "newLen" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_userDefinedValueType_Small_dyn_calldata",
          ["value"; "len"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.get (| "len" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_userDefinedValueType_Small",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_uint16",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_calldatat_userDefinedValueType_Small",
          ["ptr"],
          ["returnValue"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["value"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.get (| "ptr" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "validator_revert_userDefinedValueType_Small",
                [
                  M.get (| "value" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["returnValue"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_userDefinedValueType_Small_dyn_calldata",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_userDefinedValueType_Small",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_to_storage_from_array_userDefinedValueType_Small_dyn_calldata_to_array_userDefinedValueType_Small_dyn",
          ["dst"; "src"; "len"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_userDefinedValueType_Small_dyn_calldata",
                  [
                    M.get (| "src" |);
                    M.get (| "len" |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "resize_array_array_userDefinedValueType_Small_dyn_storage",
                [
                  M.get (| "dst" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.call (|
                  "array_dataslot_array_userDefinedValueType_Small_dyn_calldata",
                  [
                    M.get (| "src" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["dstSlot"],
                Some (M.call (|
                  "array_dataslot_array_userDefinedValueType_Small_dyn_storage",
                  [
                    M.get (| "dst" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["fullSlots"],
                Some (M.call (|
                  "div",
                  [
                    M.get (| "length" |);
                    [Literal.number 16]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["i"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              let _ :=
                tt in
              M.for_ (|
                M.call (|
                  "lt",
                  [
                    M.get (| "i" |);
                    M.get (| "fullSlots" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.declare (|
                      ["i"],
                      M.call (|
                        "add",
                        [
                          M.get (| "i" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  tt
                )),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["dstSlotValue"],
                      Some ([Literal.number 0])
                    |) in
                  let _ :=
                    M.assign (|
                      ["j"],
                      Some ([Literal.number 0])
                    |) in
                  let _ :=
                    let _ :=
                      tt in
                    M.for_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "j" |);
                          [Literal.number 16]
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["j"],
                            M.call (|
                              "add",
                              [
                                M.get (| "j" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      )),
                      ltac:(M.monadic (
                        let _ :=
                          M.assign (|
                            ["stackItem"],
                            Some (M.call (|
                              "read_from_calldatat_userDefinedValueType_Small",
                              [
                                M.get (| "srcPtr" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["itemValue"],
                            Some (M.call (|
                              "prepare_store_userDefinedValueType_Small",
                              [
                                M.get (| "stackItem" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.declare (|
                            ["dstSlotValue"],
                            M.call (|
                              "update_byte_slice_dynamic2",
                              [
                                M.get (| "dstSlotValue" |);
                                M.call (|
                                  "mul",
                                  [
                                    [Literal.number 2];
                                    M.get (| "j" |)
                                  ]
                                |);
                                M.get (| "itemValue" |)
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["srcPtr"],
                            M.call (|
                              "add",
                              [
                                M.get (| "srcPtr" |);
                                [Literal.number 32]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "sstore",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "dstSlot" |);
                            M.get (| "i" |)
                          ]
                        |);
                        M.get (| "dstSlotValue" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["spill"],
                Some (M.call (|
                  "sub",
                  [
                    M.get (| "length" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "fullSlots" |);
                        [Literal.number 16]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "spill" |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["dstSlotValue_1"],
                      Some ([Literal.number 0])
                    |) in
                  let _ :=
                    M.assign (|
                      ["j_1"],
                      Some ([Literal.number 0])
                    |) in
                  let _ :=
                    let _ :=
                      tt in
                    M.for_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "j_1" |);
                          M.get (| "spill" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["j_1"],
                            M.call (|
                              "add",
                              [
                                M.get (| "j_1" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      )),
                      ltac:(M.monadic (
                        let _ :=
                          M.assign (|
                            ["stackItem_1"],
                            Some (M.call (|
                              "read_from_calldatat_userDefinedValueType_Small",
                              [
                                M.get (| "srcPtr" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["itemValue_1"],
                            Some (M.call (|
                              "prepare_store_userDefinedValueType_Small",
                              [
                                M.get (| "stackItem_1" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.declare (|
                            ["dstSlotValue_1"],
                            M.call (|
                              "update_byte_slice_dynamic2",
                              [
                                M.get (| "dstSlotValue_1" |);
                                M.call (|
                                  "mul",
                                  [
                                    [Literal.number 2];
                                    M.get (| "j_1" |)
                                  ]
                                |);
                                M.get (| "itemValue_1" |)
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["srcPtr"],
                            M.call (|
                              "add",
                              [
                                M.get (| "srcPtr" |);
                                [Literal.number 32]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "sstore",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "dstSlot" |);
                            M.get (| "fullSlots" |)
                          ]
                        |);
                        M.get (| "dstSlotValue_1" |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_array_userDefinedValueType_Small_dyn_calldata_to_array_userDefinedValueType_Small_dyn",
          ["slot"; "value"; "value_1"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "copy_array_to_storage_from_array_userDefinedValueType_Small_dyn_calldata_to_array_userDefinedValueType_Small_dyn",
                [
                  M.get (| "slot" |);
                  M.get (| "value" |);
                  M.get (| "value_1" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_array_uint16_dyn_memory_ptr",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_0t_userDefinedValueType_Small",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Small",
                  [
                    M.call (|
                      "shift_right_0_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_2t_userDefinedValueType_Small",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Small",
                  [
                    M.call (|
                      "shift_right_16_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_userDefinedValueType_Small_3",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Small",
                  [
                    M.call (|
                      "shift_right_32_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_6t_userDefinedValueType_Small",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Small",
                  [
                    M.call (|
                      "shift_right_48_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_8t_userDefinedValueType_Small",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Small",
                  [
                    M.call (|
                      "shift_right_64_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_userDefinedValueType_Small",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Small",
                  [
                    M.call (|
                      "shift_right_80_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_12t_userDefinedValueType_Small",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Small",
                  [
                    M.call (|
                      "shift_right_96_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_14t_userDefinedValueType_Small",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Small",
                  [
                    M.call (|
                      "shift_right_112_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_16t_userDefinedValueType_Small",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Small",
                  [
                    M.call (|
                      "shift_right_128_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_18t_userDefinedValueType_Small",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Small",
                  [
                    M.call (|
                      "shift_right_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_20t_userDefinedValueType_Small",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Small",
                  [
                    M.call (|
                      "shift_right_160_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_22t_userDefinedValueType_Small",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Small",
                  [
                    M.call (|
                      "shift_right_176_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_24t_userDefinedValueType_Small",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Small",
                  [
                    M.call (|
                      "shift_right_192_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_26t_userDefinedValueType_Small",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Small",
                  [
                    M.call (|
                      "shift_right_208_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_28t_userDefinedValueType_Small",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Small",
                  [
                    M.call (|
                      "shift_right_224_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_30t_userDefinedValueType_Small",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_userDefinedValueType_Small",
                  [
                    M.call (|
                      "shift_right_240_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_array_userDefinedValueType_Small_dyn_storage",
          ["value"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_array_userDefinedValueType_Small_dyn_storage",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_array_uint16_dyn_memory_ptr",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["srcPtr"],
                Some (M.call (|
                  "array_dataslot_array_userDefinedValueType_Small_dyn_storage",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["itemCounter"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.if_ (|
                [Literal.number 1],
                ltac:(M.monadic (
                  let _ :=
                    let _ :=
                      tt in
                    M.for_ (|
                      M.call (|
                        "lt",
                        [
                          M.call (|
                            "add",
                            [
                              M.get (| "itemCounter" |);
                              M.call (|
                                "sub",
                                [
                                  [Literal.number 16];
                                  [Literal.number 1]
                                ]
                              |)
                            ]
                          |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 16]
                              ]
                            |)
                          |) in
                        tt
                      )),
                      ltac:(M.monadic (
                        let _ :=
                          M.assign (|
                            ["data"],
                            Some (M.call (|
                              "sload",
                              [
                                M.get (| "srcPtr" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_0t_userDefinedValueType_Small",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_2t_userDefinedValueType_Small",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offsett_userDefinedValueType_Small_3",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_6t_userDefinedValueType_Small",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_8t_userDefinedValueType_Small",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offsett_userDefinedValueType_Small",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_12t_userDefinedValueType_Small",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_14t_userDefinedValueType_Small",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_16t_userDefinedValueType_Small",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_18t_userDefinedValueType_Small",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_20t_userDefinedValueType_Small",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_22t_userDefinedValueType_Small",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_24t_userDefinedValueType_Small",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_26t_userDefinedValueType_Small",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_28t_userDefinedValueType_Small",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_30t_userDefinedValueType_Small",
                                [
                                  M.get (| "data" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["srcPtr"],
                            M.call (|
                              "add",
                              [
                                M.get (| "srcPtr" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.if_ (|
                [Literal.number 1],
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["data_1"],
                      Some (M.call (|
                        "sload",
                        [
                          M.get (| "srcPtr" |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_0t_userDefinedValueType_Small",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_2t_userDefinedValueType_Small",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offsett_userDefinedValueType_Small_3",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_6t_userDefinedValueType_Small",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_8t_userDefinedValueType_Small",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offsett_userDefinedValueType_Small",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_12t_userDefinedValueType_Small",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_14t_userDefinedValueType_Small",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_16t_userDefinedValueType_Small",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_18t_userDefinedValueType_Small",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_20t_userDefinedValueType_Small",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_22t_userDefinedValueType_Small",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_24t_userDefinedValueType_Small",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_26t_userDefinedValueType_Small",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_28t_userDefinedValueType_Small",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "lt",
                        [
                          M.get (| "itemCounter" |);
                          M.get (| "length" |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "abi_encode_userDefinedValueType_Small",
                            [
                              M.call (|
                                "extract_from_storage_value_offset_30t_userDefinedValueType_Small",
                                [
                                  M.get (| "data_1" |)
                                ]
                              |);
                              M.get (| "pos" |)
                            ]
                          |) in
                        let _ :=
                          M.declare (|
                            ["pos"],
                            M.call (|
                              "add",
                              [
                                M.get (| "pos" |);
                                [Literal.number 0x20]
                              ]
                            |)
                          |) in
                        let _ :=
                          M.declare (|
                            ["itemCounter"],
                            M.call (|
                              "add",
                              [
                                M.get (| "itemCounter" |);
                                [Literal.number 1]
                              ]
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encodeUpdatedPos_array_userDefinedValueType_Small_dyn_storage",
          ["value0"; "pos"],
          ["updatedPos"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["updatedPos"],
                M.call (|
                  "abi_encode_array_userDefinedValueType_Small_dyn_storage",
                  [
                    M.get (| "value0" |);
                    M.get (| "pos" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_array_from_storage_to_memory_array_userDefinedValueType_Small_dyn",
          ["slot"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_unbounded",
                  []
                |)
              |) in
            let _ :=
              M.assign (|
                ["end"],
                Some (M.call (|
                  "abi_encodeUpdatedPos_array_userDefinedValueType_Small_dyn_storage",
                  [
                    M.get (| "slot" |);
                    M.get (| "memPtr" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "end" |);
                      M.get (| "memPtr" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_array_array_userDefinedValueType_Small_dyn_storage_to_array_userDefinedValueType_Small_dyn",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "copy_array_from_storage_to_memory_array_userDefinedValueType_Small_dyn",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_g",
          ["var_small_offset"; "var_small_length"],
          ["var_mpos"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_array_userDefinedValueType_Small_dyn_mpos"],
                Some (M.call (|
                  "zero_value_for_split_array_userDefinedValueType_Small_dyn",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_mpos"],
                M.get (| "zero_array_userDefinedValueType_Small_dyn_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_6_offset"],
                Some (M.get (| "var_small_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["_6_length"],
                Some (M.get (| "var_small_length" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_offset"],
                Some (M.get (| "_6_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_length"],
                Some (M.get (| "_6_length" |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_array_userDefinedValueType_Small_dyn_calldata_to_array_userDefinedValueType_Small_dyn",
                [
                  [Literal.number 0x01];
                  M.get (| "expr_offset" |);
                  M.get (| "expr_length" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_8_slot"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.assign (|
                ["expr_53_slot"],
                Some (M.get (| "_8_slot" |))
              |) in
            let _ :=
              M.declare (|
                ["var_mpos"],
                M.call (|
                  "convert_array_array_userDefinedValueType_Small_dyn_storage_to_array_userDefinedValueType_Small_dyn",
                  [
                    M.get (| "expr_53_slot" |)
                  ]
                |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_uint8",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_uint8",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_calldatat_uint8",
          ["ptr"],
          ["returnValue"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["value"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.get (| "ptr" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "validator_revert_uint8",
                [
                  M.get (| "value" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["returnValue"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_0",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_shift_0",
          ["value"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                Some ([Literal.number 255])
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_0",
                  [
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint8_to_uint8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint8",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_uint8",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_uint8_to_uint8",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                Some (M.call (|
                  "convert_uint8_to_uint8",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_shift_0",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.call (|
                        "prepare_store_uint8",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 8];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_shift_1",
          ["value"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                Some ([Literal.number 16776960])
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left",
                  [
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_userDefinedValueType_Small_to_userDefinedValueType_Small",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                Some (M.call (|
                  "convert_uint16_to_uint16",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_shift_1",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.call (|
                        "prepare_store_userDefinedValueType_Small",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_24",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 24];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_shift",
          ["value"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                Some ([Literal.number 0xffff000000])
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_24",
                  [
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_userDefinedValueType_Left_to_userDefinedValueType_Left",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                Some (M.call (|
                  "convert_bytes2_to_bytes2",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_shift",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.call (|
                        "prepare_store_userDefinedValueType_Left",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_40",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 40];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_shift_5",
          ["value"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                Some ([Literal.number 0xff0000000000])
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_40",
                  [
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_uint8_to_t_uint8",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                Some (M.call (|
                  "convert_uint8_to_uint8",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_shift_5",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.call (|
                        "prepare_store_uint8",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_struct_to_storage_from_struct_S_calldata_to_struct_S",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["memberSlot"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "slot" |);
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memberSrcPtr"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "value" |);
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memberValue"],
                Some (M.get (| "memberSrcPtr" |))
              |) in
            let _ :=
              M.declare (|
                ["memberValue"],
                M.call (|
                  "read_from_calldatat_uint8",
                  [
                    M.get (| "memberValue" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_uint8_to_uint8",
                [
                  M.get (| "memberSlot" |);
                  M.get (| "memberValue" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["memberSlot_1"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "slot" |);
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memberSrcPtr_1"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "value" |);
                    [Literal.number 32]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memberValue_1"],
                Some (M.get (| "memberSrcPtr_1" |))
              |) in
            let _ :=
              M.declare (|
                ["memberValue_1"],
                M.call (|
                  "read_from_calldatat_userDefinedValueType_Small",
                  [
                    M.get (| "memberValue_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_userDefinedValueType_Small_to_userDefinedValueType_Small",
                [
                  M.get (| "memberSlot_1" |);
                  M.get (| "memberValue_1" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["memberSlot_2"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "slot" |);
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memberSrcPtr_2"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "value" |);
                    [Literal.number 64]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memberValue_2"],
                Some (M.get (| "memberSrcPtr_2" |))
              |) in
            let _ :=
              M.declare (|
                ["memberValue_2"],
                M.call (|
                  "read_from_calldatat_userDefinedValueType_Left",
                  [
                    M.get (| "memberValue_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_userDefinedValueType_Left_to_userDefinedValueType_Left",
                [
                  M.get (| "memberSlot_2" |);
                  M.get (| "memberValue_2" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["memberSlot_3"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "slot" |);
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memberSrcPtr_3"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "value" |);
                    [Literal.number 96]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memberValue_3"],
                Some (M.get (| "memberSrcPtr_3" |))
              |) in
            let _ :=
              M.declare (|
                ["memberValue_3"],
                M.call (|
                  "read_from_calldatat_uint8",
                  [
                    M.get (| "memberValue_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_uint8_to_t_uint8",
                [
                  M.get (| "memberSlot_3" |);
                  M.get (| "memberValue_3" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_struct_S_calldata_to_struct_S",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "copy_struct_to_storage_from_struct_S_calldata_to_struct_S",
                [
                  M.get (| "slot" |);
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_f",
          ["var_s_offset"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["_offset"],
                Some (M.get (| "var_s_offset" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_34_offset"],
                Some (M.get (| "_offset" |))
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_struct_S_calldata_to_struct_S",
                [
                  [Literal.number 0x00];
                  M.get (| "expr_34_offset" |)
                ]
              |) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a2646970667358221220a0584b8abb7b3b73652322d2f4783e92e20f2cf4c7617a70e96a525b913c612464736f6c634300081b0033".
  End C_75_deployed.
End C_75.
