(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  (* Struct S *)

  Definition src : Value.t :=
    undefined.

  Definition dst : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "d" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 31
src: 227:7:0
nodeType: ArrayTypeName
baseType: Ty.path "uint8"
length: 
typeDescriptions: typeString uint8[]typeIdentifier st_array$_t_uint8_$dyn_storage_ptr

,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "d" |),
            Some (Value.Integer 0)
          |),
          Value.Integer 3
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "d" |),
            Some (Value.Integer 1)
          |),
          Value.Integer 4
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 56
src: 309:9:0
nodeType: ArrayTypeName
baseType: (* Beginning of a node! *)
id: 55
src: 309:7:0
nodeType: ArrayTypeName
baseType: Ty.path "uint8"
length: 
typeDescriptions: typeString uint8[]typeIdentifier st_array$_t_uint8_$dyn_storage_ptr

length: 
typeDescriptions: typeString uint8[][]typeIdentifier st_array$_t_array$_t_uint8_$dyn_storage_$dyn_storage_ptr

,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "y" |),
            Some (Value.Integer 0)
          |),
          M.get_name (| "d" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "y" |),
            Some (Value.Integer 1)
          |),
          M.get_name (| "d" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "src" |),
            Some (Value.Integer 0)
          |),
          M.call (|
            M.get_name (| "S" |),
            [
              Value.Array [
                Value.Integer 7,
                Value.Integer 8,
                Value.Integer 9
              ],
              M.get_name (| "y" |),
              Value.Integer 13
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "dst" |),
            Some (Value.Integer 0)
          |),
          M.index_access (|
            M.get_name (| "src" |),
            Some (Value.Integer 0)
          |)
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "dst" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
