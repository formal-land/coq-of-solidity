(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_160.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            [

            ]
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                [

                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          M.call (|
            "allocate_unbounded",
            [

            ]
          |)
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f3136305f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3136305f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3136305f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_160_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  M.call (|
                    "shift_right_224_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0xf8a8fd6d),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_test",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            [

            ]
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_224_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bool",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "iszero",
                      [
                        M.get (| "value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bool_to_bool",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_bool",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bool",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_bool_to_bool",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_test",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_test",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_bool",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bytes1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "shl",
                      [
                        [Literal.number 248];
                        [Literal.number 255]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_248",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 248];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_1_by_1_to_bytes1",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "shift_left_248",
                      [
                        M.call (|
                          "cleanup_t_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_0",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_shift_0",
          ["value"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                [Literal.number 255]
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_0",
                  [
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_bytes1_to_bytes1",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes1",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_248_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 248];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_bytes1",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "shift_right_248_unsigned",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_bytes1_to_bytes1",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                M.call (|
                  "convert_bytes1_to_bytes1",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_shift_0",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.call (|
                        "prepare_store_bytes1",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_2_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_2_by_1_to_bytes1",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "shift_left_248",
                      [
                        M.call (|
                          "cleanup_rational_2_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_3_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_3_by_1_to_bytes1",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "shift_left_248",
                      [
                        M.call (|
                          "cleanup_rational_3_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_4_by_1_to_bytes1",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "shift_left_248",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 8];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_shift_1",
          ["value"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                [Literal.number 65280]
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left",
                  [
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_bytes1_to_t_bytes1",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                M.call (|
                  "convert_bytes1_to_bytes1",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_shift_1",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.call (|
                        "prepare_store_bytes1",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_stringliteral_to_bytes10",
          [],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 180];
                    [Literal.number 0x03132333435363738393]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_16",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 16];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_shift_2",
          ["value"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                [Literal.number 0xffffffffffffffffffff0000]
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_16",
                  [
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bytes10",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "shl",
                      [
                        [Literal.number 176];
                        [Literal.number 0xffffffffffffffffffff]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_bytes10_to_bytes10",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes10",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_176_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 176];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_bytes10",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "shift_right_176_unsigned",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_bytes10_to_t_bytes10",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                M.call (|
                  "convert_bytes10_to_bytes10",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_shift_2",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.call (|
                        "prepare_store_bytes10",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_stringliteral_2a35_to_bytes9",
          [],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 184];
                    [Literal.number 0x313233343536373839]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_96",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 96];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_shift_12",
          ["value"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 96];
                    [Literal.number 0xffffffffffffffffff]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_96",
                  [
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bytes9",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "shl",
                      [
                        [Literal.number 184];
                        [Literal.number 0xffffffffffffffffff]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_bytes9_to_bytes9",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes9",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 184];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_bytes9",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "shift_right_unsigned",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_bytes9_to_bytes9",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                M.call (|
                  "convert_bytes9_to_bytes9",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_shift_12",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.call (|
                        "prepare_store_bytes9",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_stringliteral_f8da_to_bytes10",
          [],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 177];
                    [Literal.number 0x30b131b232b333b434b5]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_168",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 168];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_shift",
          ["value"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 168];
                    [Literal.number 0xffffffffffffffffffff]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_168",
                  [
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_bytes10_to_bytes10",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                M.call (|
                  "convert_bytes10_to_bytes10",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_shift",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.call (|
                        "prepare_store_bytes10",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_5_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_bytes1",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "shift_left_248",
                      [
                        M.call (|
                          "cleanup_rational_5_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_6_by_1_to_bytes1",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "shift_left_248",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_bytes1",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes1",
                  [
                    M.call (|
                      "shift_left_248",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_0_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_bytes1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "shift_left_248",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_0t_bytes1",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_bytes1",
                  [
                    M.call (|
                      "shift_right_0_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_bytes1",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offset_0t_bytes1",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_8_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 8];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_bytes1",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_bytes1",
                  [
                    M.call (|
                      "shift_right_8_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_t_bytes1",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offsett_bytes1",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_16_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 16];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_176",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 176];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_bytes10",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "shift_left_176",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offset_2t_bytes10",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_bytes10",
                  [
                    M.call (|
                      "shift_right_16_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_t_bytes10",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offset_2t_bytes10",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_96_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 96];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_184",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 184];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_bytes9",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "shift_left_184",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_bytes9",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_bytes9",
                  [
                    M.call (|
                      "shift_right_96_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_bytes9",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offsett_bytes9",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_168_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 168];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_bytes10",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_bytes10",
                  [
                    M.call (|
                      "shift_right_168_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_bytes10",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offsett_bytes10",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_test",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                M.call (|
                  "zero_value_for_split_bool",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.call (|
                  "convert_rational_1_by_1_to_bytes1",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_bytes1_to_bytes1",
                [
                  [Literal.number 0x00];
                  M.get (| "_1" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.call (|
                  "convert_rational_2_by_1_to_bytes1",
                  [
                    M.get (| "expr_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_4_slot"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_37_slot"],
                M.get (| "_4_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_37_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_bytes1_to_bytes1",
                [
                  M.get (| "_3" |);
                  M.get (| "_2" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.call (|
                  "convert_rational_3_by_1_to_bytes1",
                  [
                    M.get (| "expr_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_7_slot"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_43_slot"],
                M.get (| "_7_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_43_slot" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_9_slot"],
                M.get (| "_5" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_46_slot"],
                M.get (| "_9_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_46_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_bytes1_to_bytes1",
                [
                  M.get (| "_6" |);
                  M.get (| "_4" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                [Literal.number 0x04]
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                M.call (|
                  "convert_rational_4_by_1_to_bytes1",
                  [
                    M.get (| "expr_3" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_12_slot"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_51_slot"],
                M.get (| "_12_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_51_slot" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_slot"],
                M.get (| "_8" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_54_slot"],
                M.get (| "_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_54_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_bytes1_to_t_bytes1",
                [
                  M.get (| "_9" |);
                  M.get (| "_7" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_10"],
                M.call (|
                  "convert_stringliteral_to_bytes10",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_17_slot"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_59_slot"],
                M.get (| "_17_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_11"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_59_slot" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_19_slot"],
                M.get (| "_11" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_62_slot"],
                M.get (| "_19_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_12"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_62_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_bytes10_to_t_bytes10",
                [
                  M.get (| "_12" |);
                  M.get (| "_10" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_13"],
                M.call (|
                  "convert_stringliteral_2a35_to_bytes9",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_22_slot"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_67_slot"],
                M.get (| "_22_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_14"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_67_slot" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_24_slot"],
                M.get (| "_14" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_70_slot"],
                M.get (| "_24_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_15"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_70_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_bytes9_to_bytes9",
                [
                  M.get (| "_15" |);
                  M.get (| "_13" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_16"],
                M.call (|
                  "convert_stringliteral_f8da_to_bytes10",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_27_slot"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_75_slot"],
                M.get (| "_27_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_17"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_75_slot" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_29_slot"],
                M.get (| "_17" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_78_slot"],
                M.get (| "_29_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_18"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_78_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_bytes10_to_bytes10",
                [
                  M.get (| "_18" |);
                  M.get (| "_16" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                [Literal.number 0x05]
              |) in
            let _ :=
              M.assign (|
                ["_19"],
                M.call (|
                  "convert_t_rational_by_to_t_bytes1",
                  [
                    M.get (| "expr_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_32_slot"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_83_slot"],
                M.get (| "_32_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_20"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_83_slot" |);
                    [Literal.number 2]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_bytes1_to_bytes1",
                [
                  M.get (| "_20" |);
                  M.get (| "_19" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                [Literal.number 0x06]
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                M.call (|
                  "convert_rational_6_by_1_to_bytes1",
                  [
                    M.get (| "expr_5" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_34_slot"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_89_slot"],
                M.get (| "_34_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_21"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_89_slot" |);
                    [Literal.number 2]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_bytes1_to_t_bytes1",
                [
                  M.get (| "_21" |);
                  M.get (| "expr_6" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                [Literal.number 0x07]
              |) in
            let _ :=
              M.assign (|
                ["_22"],
                M.call (|
                  "convert_rational_by_to_bytes1",
                  [
                    M.get (| "expr_7" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_bytes1_to_bytes1",
                [
                  [Literal.number 0x04];
                  M.get (| "_22" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_23"],
                M.call (|
                  "read_from_storage_split_offset_bytes1",
                  [
                    [Literal.number 0x00]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                M.get (| "_23" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_bytes1",
                      [
                        M.get (| "expr_8" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_1_by_1_to_bytes1",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                M.get (| "expr_10" |)
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_11" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_38_slot"],
                      [Literal.number 0x01]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_105_slot"],
                      M.get (| "_38_slot" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["_24"],
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_105_slot" |);
                          [Literal.number 0]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["_25"],
                      M.call (|
                        "read_from_storage_split_offset_bytes1",
                        [
                          M.get (| "_24" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_12"],
                      M.get (| "_25" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_13"],
                      [Literal.number 0x02]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_14"],
                      M.call (|
                        "eq",
                        [
                          M.call (|
                            "cleanup_bytes1",
                            [
                              M.get (| "expr_12" |)
                            ]
                          |);
                          M.call (|
                            "convert_rational_2_by_1_to_bytes1",
                            [
                              M.get (| "expr_13" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_11"],
                      M.get (| "expr_14" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                M.get (| "expr_11" |)
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_15" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_41_slot"],
                      [Literal.number 0x01]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_110_slot"],
                      M.get (| "_41_slot" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["_26"],
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_110_slot" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["_43_slot"],
                      M.get (| "_26" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_111_slot"],
                      M.get (| "_43_slot" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["_27"],
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_111_slot" |);
                          [Literal.number 0]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["_28"],
                      M.call (|
                        "read_from_storage_split_offset_bytes1",
                        [
                          M.get (| "_27" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_16"],
                      M.get (| "_28" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_17"],
                      [Literal.number 0x03]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_18"],
                      M.call (|
                        "eq",
                        [
                          M.call (|
                            "cleanup_bytes1",
                            [
                              M.get (| "expr_16" |)
                            ]
                          |);
                          M.call (|
                            "convert_rational_3_by_1_to_bytes1",
                            [
                              M.get (| "expr_17" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_15"],
                      M.get (| "expr_18" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                M.get (| "expr_15" |)
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_19" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_46_slot"],
                      [Literal.number 0x01]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_116_slot"],
                      M.get (| "_46_slot" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["_29"],
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_116_slot" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["_48_slot"],
                      M.get (| "_29" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_117_slot"],
                      M.get (| "_48_slot" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["_30"],
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_117_slot" |);
                          [Literal.number 0]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["_31"],
                      M.call (|
                        "read_from_storage_split_offset_t_bytes1",
                        [
                          M.get (| "_30" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_20"],
                      M.get (| "_31" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_21"],
                      [Literal.number 0x04]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_22"],
                      M.call (|
                        "eq",
                        [
                          M.call (|
                            "cleanup_bytes1",
                            [
                              M.get (| "expr_20" |)
                            ]
                          |);
                          M.call (|
                            "convert_rational_4_by_1_to_bytes1",
                            [
                              M.get (| "expr_21" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_19"],
                      M.get (| "expr_22" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                M.get (| "expr_19" |)
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_23" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_51_slot"],
                      [Literal.number 0x01]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_122_slot"],
                      M.get (| "_51_slot" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["_32"],
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_122_slot" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["_53_slot"],
                      M.get (| "_32" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_123_slot"],
                      M.get (| "_53_slot" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["_33"],
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_123_slot" |);
                          [Literal.number 0]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["_34"],
                      M.call (|
                        "read_from_storage_split_offset_t_bytes10",
                        [
                          M.get (| "_33" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_24"],
                      M.get (| "_34" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_25"],
                      M.call (|
                        "eq",
                        [
                          M.call (|
                            "cleanup_bytes10",
                            [
                              M.get (| "expr_24" |)
                            ]
                          |);
                          M.call (|
                            "convert_stringliteral_to_bytes10",
                            [

                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_23"],
                      M.get (| "expr_25" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                M.get (| "expr_23" |)
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_26" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_56_slot"],
                      [Literal.number 0x01]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_128_slot"],
                      M.get (| "_56_slot" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["_35"],
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_128_slot" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["_58_slot"],
                      M.get (| "_35" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_129_slot"],
                      M.get (| "_58_slot" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["_36"],
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_129_slot" |);
                          [Literal.number 0]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["_37"],
                      M.call (|
                        "read_from_storage_split_offset_bytes9",
                        [
                          M.get (| "_36" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_27"],
                      M.get (| "_37" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_28"],
                      M.call (|
                        "eq",
                        [
                          M.call (|
                            "cleanup_bytes9",
                            [
                              M.get (| "expr_27" |)
                            ]
                          |);
                          M.call (|
                            "convert_stringliteral_2a35_to_bytes9",
                            [

                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_26"],
                      M.get (| "expr_28" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                M.get (| "expr_26" |)
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_29" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_61_slot"],
                      [Literal.number 0x01]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_slot"],
                      M.get (| "_61_slot" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["_38"],
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_slot" |);
                          [Literal.number 1]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["_63_slot"],
                      M.get (| "_38" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_135_slot"],
                      M.get (| "_63_slot" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["_39"],
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_135_slot" |);
                          [Literal.number 0]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["_40"],
                      M.call (|
                        "read_from_storage_split_offset_bytes10",
                        [
                          M.get (| "_39" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_30"],
                      M.get (| "_40" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_31"],
                      M.call (|
                        "eq",
                        [
                          M.call (|
                            "cleanup_bytes10",
                            [
                              M.get (| "expr_30" |)
                            ]
                          |);
                          M.call (|
                            "convert_stringliteral_f8da_to_bytes10",
                            [

                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_29"],
                      M.get (| "expr_31" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                M.get (| "expr_29" |)
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_32" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_66_slot"],
                      [Literal.number 0x01]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_140_slot"],
                      M.get (| "_66_slot" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["_41"],
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_140_slot" |);
                          [Literal.number 2]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["_42"],
                      M.call (|
                        "read_from_storage_split_offset_bytes1",
                        [
                          M.get (| "_41" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_33"],
                      M.get (| "_42" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_34"],
                      [Literal.number 0x05]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_35"],
                      M.call (|
                        "eq",
                        [
                          M.call (|
                            "cleanup_bytes1",
                            [
                              M.get (| "expr_33" |)
                            ]
                          |);
                          M.call (|
                            "convert_t_rational_by_to_t_bytes1",
                            [
                              M.get (| "expr_34" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_32"],
                      M.get (| "expr_35" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_36"],
                M.get (| "expr_32" |)
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_36" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_69_slot"],
                      [Literal.number 0x01]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_145_slot"],
                      M.get (| "_69_slot" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["_43"],
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_145_slot" |);
                          [Literal.number 2]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["_44"],
                      M.call (|
                        "read_from_storage_split_offset_t_bytes1",
                        [
                          M.get (| "_43" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_37"],
                      M.get (| "_44" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_38"],
                      [Literal.number 0x06]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_39"],
                      M.call (|
                        "convert_rational_6_by_1_to_bytes1",
                        [
                          M.get (| "expr_38" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_40"],
                      M.call (|
                        "eq",
                        [
                          M.call (|
                            "cleanup_bytes1",
                            [
                              M.get (| "expr_37" |)
                            ]
                          |);
                          M.call (|
                            "cleanup_bytes1",
                            [
                              M.get (| "expr_39" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_36"],
                      M.get (| "expr_40" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_41"],
                M.get (| "expr_36" |)
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_41" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_45"],
                      M.call (|
                        "read_from_storage_split_offset_bytes1",
                        [
                          [Literal.number 0x04]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_42"],
                      M.get (| "_45" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_43"],
                      [Literal.number 0x07]
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_44"],
                      M.call (|
                        "eq",
                        [
                          M.call (|
                            "cleanup_bytes1",
                            [
                              M.get (| "expr_42" |)
                            ]
                          |);
                          M.call (|
                            "convert_rational_by_to_bytes1",
                            [
                              M.get (| "expr_43" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_41"],
                      M.get (| "expr_44" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_41" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a26469706673582212207f3d011bc4ffe66292c64bfba93cc21ca22406ce676f99fc000aacdf71dba1dd64736f6c634300081b0033".
  End C_160_deployed.
End C_160.
