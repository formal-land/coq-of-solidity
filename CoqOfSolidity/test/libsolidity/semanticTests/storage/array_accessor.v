(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module test.
  Definition data : Value.t :=
    undefined.

  Definition dynamicData : Value.t :=
    undefined.

  Definition smallTypeData : Value.t :=
    undefined.

  (* Struct st *)

  Definition multiple_map : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "data" |),
            Some (Value.Integer 0)
          |),
          Value.Integer 8
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "dynamicData" |),
            "push"
          |),
          []
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "dynamicData" |),
            "push"
          |),
          []
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "dynamicData" |),
            "push"
          |),
          [
            Value.Integer 8
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "smallTypeData" |),
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 52
src: 380:8:0
nodeType: ArrayTypeName
baseType: Ty.path "uint24"
length: 
typeDescriptions: typeString uint24[]typeIdentifier st_array$_t_uint24_$dyn_storage_ptr

,
            [
              Value.Integer 128
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "smallTypeData" |),
            Some (Value.Integer 1)
          |),
          Value.Integer 22
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "smallTypeData" |),
            Some (Value.Integer 127)
          |),
          Value.Integer 2
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.index_access (|
                M.index_access (|
                  M.get_name (| "multiple_map" |),
                  Some (Value.Integer 2)
                |),
                Some (Value.Integer 1)
              |),
              Some (Value.Integer 2)
            |),
            "a"
          |),
          Value.Integer 3
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 102
src: 504:80:0
nodeType: ForStatement
initializationExpression: M.define (|
          [ "i" ],
          Value.Integer 0
        |)
condition: M.bin_op (|
          "<",
          M.get_name (| "i" |),
          Value.Integer 4
        |)
loopExpression: M.un_op (|
          false,
          "++",
          M.get_name (| "i" |)
        |)
body: M.call (|
          M.member_access (|
            M.member_access (|
              M.index_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "multiple_map" |),
                    Some (Value.Integer 2)
                  |),
                  Some (Value.Integer 1)
                |),
                Some (Value.Integer 2)
              |),
              "finalArray"
            |),
            "push"
          |),
          []
        |)
isSimpleCounterLoop: 1
 in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.member_access (|
              M.index_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "multiple_map" |),
                    Some (Value.Integer 2)
                  |),
                  Some (Value.Integer 1)
                |),
                Some (Value.Integer 2)
              |),
              "finalArray"
            |),
            Some (Value.Integer 3)
          |),
          Value.Integer 5
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End test.
