(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module C_150.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            [

            ]
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                [

                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          M.call (|
            "allocate_unbounded",
            [

            ]
          |)
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "435f3135305f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3135305f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "435f3135305f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module C_150_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  M.call (|
                    "shift_right_224_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0xf8a8fd6d),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_test",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            [

            ]
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_224_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_to_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_test",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_test",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_uint256",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_0",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_shift",
          ["value"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                [Literal.number 255]
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_0",
                  [
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x21",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x21]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_assert_enum_small",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "value" |);
                        [Literal.number 4]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x21",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_enum_small",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            let _ :=
              M.call (|
                "validator_assert_enum_small",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_enum_small_to_enum_small",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_enum_small",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_enum_small",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_enum_small_to_enum_small",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                M.call (|
                  "convert_enum_small_to_enum_small",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_shift",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.call (|
                        "prepare_store_enum_small",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_0_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_enum_small",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_enum_small_5",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_enum_small",
                  [
                    M.call (|
                      "shift_right_0_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_t_enum_small",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offsett_enum_small_5",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_2_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_2_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_2_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 8];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_shift_1",
          ["value"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                [Literal.number 65280]
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left",
                  [
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_enum_small_to_t_enum_small",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                M.call (|
                  "convert_enum_small_to_enum_small",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_shift_1",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.call (|
                        "prepare_store_enum_small",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_8_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 8];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_enum_small",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_enum_small",
                  [
                    M.call (|
                      "shift_right_8_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_enum_small",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offsett_enum_small",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_3_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_3_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_3_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_16",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 16];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_shift_2",
          ["value"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                [Literal.number 16711680]
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_16",
                  [
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_assert_enum_larger",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "value" |);
                        [Literal.number 5]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x21",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_enum_larger",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            let _ :=
              M.call (|
                "validator_assert_enum_larger",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_enum_larger_to_enum_larger",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_enum_larger",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_enum_larger",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_enum_larger_to_enum_larger",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                M.call (|
                  "convert_enum_larger_to_enum_larger",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_shift_2",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.call (|
                        "prepare_store_enum_larger",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 16];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_enum_larger",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_enum_larger",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_enum_larger",
                  [
                    M.call (|
                      "shift_right_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_enum_larger",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offsett_enum_larger",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_4_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_5_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_5_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_5_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_7_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_8_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_9_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_9_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_9_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_10_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_10_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_1_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_1_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_1_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_test",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                M.call (|
                  "zero_value_for_split_uint256",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 1]
              |) in
            let _ :=
              M.assign (|
                ["_2_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_32_slot"],
                M.get (| "_2_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_32_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_enum_small_to_enum_small",
                [
                  M.get (| "_1" |);
                  M.get (| "expr" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_4_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_39_slot"],
                M.get (| "_4_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_39_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.call (|
                  "read_from_storage_split_offset_t_enum_small",
                  [
                    M.get (| "_2" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.get (| "_3" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                [Literal.number 1]
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_enum_small",
                          [
                            M.get (| "expr_1" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_enum_small",
                          [
                            M.get (| "expr_2" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_3" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["expr_4"],
                      [Literal.number 0x02]
                    |) in
                  let _ :=
                    M.declare (|
                      ["var"],
                      M.call (|
                        "convert_rational_2_by_1_to_uint256",
                        [
                          M.get (| "expr_4" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.leave (||) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                [Literal.number 2]
              |) in
            let _ :=
              M.assign (|
                ["_7_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_47_slot"],
                M.get (| "_7_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_47_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_enum_small_to_t_enum_small",
                [
                  M.get (| "_4" |);
                  M.get (| "expr_5" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_9_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_54_slot"],
                M.get (| "_9_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_54_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.call (|
                  "read_from_storage_split_offset_enum_small",
                  [
                    M.get (| "_5" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                M.get (| "_6" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                [Literal.number 2]
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_enum_small",
                          [
                            M.get (| "expr_6" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_enum_small",
                          [
                            M.get (| "expr_7" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_8" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["expr_9"],
                      [Literal.number 0x03]
                    |) in
                  let _ :=
                    M.declare (|
                      ["var"],
                      M.call (|
                        "convert_rational_3_by_1_to_uint256",
                        [
                          M.get (| "expr_9" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.leave (||) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                [Literal.number 3]
              |) in
            let _ :=
              M.assign (|
                ["_12_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_62_slot"],
                M.get (| "_12_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_62_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_enum_larger_to_enum_larger",
                [
                  M.get (| "_7" |);
                  M.get (| "expr_10" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_69_slot"],
                M.get (| "_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_69_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                M.call (|
                  "read_from_storage_split_offset_enum_larger",
                  [
                    M.get (| "_8" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                M.get (| "_9" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                [Literal.number 3]
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_enum_larger",
                          [
                            M.get (| "expr_11" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_enum_larger",
                          [
                            M.get (| "expr_12" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_13" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["expr_14"],
                      [Literal.number 0x04]
                    |) in
                  let _ :=
                    M.declare (|
                      ["var"],
                      M.call (|
                        "convert_rational_4_by_1_to_uint256",
                        [
                          M.get (| "expr_14" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.leave (||) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["_17_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_slot"],
                M.get (| "_17_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_10"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_11"],
                M.call (|
                  "read_from_storage_split_offset_t_enum_small",
                  [
                    M.get (| "_10" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                M.get (| "_11" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                [Literal.number 1]
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_enum_small",
                          [
                            M.get (| "expr_15" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_enum_small",
                          [
                            M.get (| "expr_16" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_17" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["expr_18"],
                      [Literal.number 0x05]
                    |) in
                  let _ :=
                    M.declare (|
                      ["var"],
                      M.call (|
                        "convert_rational_5_by_1_to_uint256",
                        [
                          M.get (| "expr_18" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.leave (||) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                [Literal.number 2]
              |) in
            let _ :=
              M.assign (|
                ["_20_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_85_slot"],
                M.get (| "_20_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_12"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_85_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_enum_small_to_enum_small",
                [
                  M.get (| "_12" |);
                  M.get (| "expr_19" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_22_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_92_slot"],
                M.get (| "_22_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_13"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_92_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_14"],
                M.call (|
                  "read_from_storage_split_offset_t_enum_small",
                  [
                    M.get (| "_13" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                M.get (| "_14" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                [Literal.number 2]
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_enum_small",
                          [
                            M.get (| "expr_20" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_enum_small",
                          [
                            M.get (| "expr_21" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_22" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["expr_23"],
                      [Literal.number 0x06]
                    |) in
                  let _ :=
                    M.declare (|
                      ["var"],
                      M.call (|
                        "convert_rational_by_to_uint256",
                        [
                          M.get (| "expr_23" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.leave (||) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["_25_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_100_slot"],
                M.get (| "_25_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_15"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_100_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_16"],
                M.call (|
                  "read_from_storage_split_offset_enum_small",
                  [
                    M.get (| "_15" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                M.get (| "_16" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                [Literal.number 2]
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_enum_small",
                          [
                            M.get (| "expr_24" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_enum_small",
                          [
                            M.get (| "expr_25" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_26" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["expr_27"],
                      [Literal.number 0x07]
                    |) in
                  let _ :=
                    M.declare (|
                      ["var"],
                      M.call (|
                        "convert_rational_7_by_1_to_uint256",
                        [
                          M.get (| "expr_27" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.leave (||) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                [Literal.number 3]
              |) in
            let _ :=
              M.assign (|
                ["_28_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_108_slot"],
                M.get (| "_28_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_17"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_108_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_enum_small_to_t_enum_small",
                [
                  M.get (| "_17" |);
                  M.get (| "expr_28" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_30_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_115_slot"],
                M.get (| "_30_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_18"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_115_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_19"],
                M.call (|
                  "read_from_storage_split_offset_enum_small",
                  [
                    M.get (| "_18" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                M.get (| "_19" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                [Literal.number 3]
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_enum_small",
                          [
                            M.get (| "expr_29" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_enum_small",
                          [
                            M.get (| "expr_30" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_31" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["expr_32"],
                      [Literal.number 0x08]
                    |) in
                  let _ :=
                    M.declare (|
                      ["var"],
                      M.call (|
                        "convert_rational_8_by_1_to_uint256",
                        [
                          M.get (| "expr_32" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.leave (||) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["_33_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_123_slot"],
                M.get (| "_33_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_20"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_123_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_21"],
                M.call (|
                  "read_from_storage_split_offset_enum_larger",
                  [
                    M.get (| "_20" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_33"],
                M.get (| "_21" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_34"],
                [Literal.number 3]
              |) in
            let _ :=
              M.assign (|
                ["expr_35"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_enum_larger",
                          [
                            M.get (| "expr_33" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_enum_larger",
                          [
                            M.get (| "expr_34" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_35" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["expr_36"],
                      [Literal.number 0x09]
                    |) in
                  let _ :=
                    M.declare (|
                      ["var"],
                      M.call (|
                        "convert_rational_9_by_1_to_uint256",
                        [
                          M.get (| "expr_36" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.leave (||) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_37"],
                [Literal.number 1]
              |) in
            let _ :=
              M.assign (|
                ["_36_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_131_slot"],
                M.get (| "_36_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_22"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_131_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_enum_larger_to_enum_larger",
                [
                  M.get (| "_22" |);
                  M.get (| "expr_37" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_38_slot"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_138_slot"],
                M.get (| "_38_slot" |)
              |) in
            let _ :=
              M.assign (|
                ["_23"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_138_slot" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_24"],
                M.call (|
                  "read_from_storage_split_offset_enum_larger",
                  [
                    M.get (| "_23" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_38"],
                M.get (| "_24" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_39"],
                [Literal.number 1]
              |) in
            let _ :=
              M.assign (|
                ["expr_40"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_enum_larger",
                          [
                            M.get (| "expr_38" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_enum_larger",
                          [
                            M.get (| "expr_39" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.get (| "expr_40" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["expr_41"],
                      [Literal.number 0x0a]
                    |) in
                  let _ :=
                    M.declare (|
                      ["var"],
                      M.call (|
                        "convert_t_rational_by_to_t_uint256",
                        [
                          M.get (| "expr_41" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.leave (||) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_42"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.call (|
                  "convert_rational_1_by_1_to_uint256",
                  [
                    M.get (| "expr_42" |)
                  ]
                |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a2646970667358221220eebeee4b8290f892f4e38911c01c101d7e1875e0552f4c6cc7fe056ee2b4690264736f6c634300081b0033".
  End C_150_deployed.
End C_150.
