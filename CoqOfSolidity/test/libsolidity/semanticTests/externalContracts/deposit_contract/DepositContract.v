(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module DepositContract_541.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            [

            ]
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                [

                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.call (|
          "constructor_DepositContract",
          [

          ]
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          M.call (|
            "allocate_unbounded",
            [

            ]
          |)
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "4465706f736974436f6e74726163745f3534315f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "4465706f736974436f6e74726163745f3534315f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "4465706f736974436f6e74726163745f3534315f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_by_1",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_uint256",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "identity",
        ["value"],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_0_by_1_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_by_1",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "increment_wrapping_uint256",
        ["value"],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 1]
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_rational_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_rational_by_to_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_rational_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "constant_DEPOSIT_CONTRACT_TREE_DEPTH",
        [],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["expr"],
              [Literal.number 0x20]
            |) in
          let _ :=
            M.assign (|
              ["_1"],
              M.call (|
                "convert_rational_by_to_uint256",
                [
                  M.get (| "expr" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["ret"],
              M.get (| "_1" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_t_rational_by",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_t_rational_by_to_t_uint256",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_uint256",
                [
                  M.call (|
                    "identity",
                    [
                      M.call (|
                        "cleanup_t_rational_by",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "panic_error_0x11",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    [Literal.number 0x4e487b71]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 4];
                [Literal.number 0x11]
              ]
            |) in
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0x24]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "checked_sub_uint256",
        ["x"; "y"],
        ["diff"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["x"],
              M.call (|
                "cleanup_uint256",
                [
                  M.get (| "x" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["y"],
              M.call (|
                "cleanup_uint256",
                [
                  M.get (| "y" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["diff"],
              M.call (|
                "sub",
                [
                  M.get (| "x" |);
                  M.get (| "y" |)
                ]
              |)
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "gt",
                [
                  M.get (| "diff" |);
                  M.get (| "x" |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x11",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "panic_error_0x32",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    [Literal.number 0x4e487b71]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 4];
                [Literal.number 0x32]
              ]
            |) in
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0x24]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_length_array_bytes32_storage",
        ["value"],
        ["length"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["length"],
              [Literal.number 0x20]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_dataslot_array_bytes32_storage",
        ["ptr"],
        ["data"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["data"],
              M.get (| "ptr" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "storage_array_index_access_bytes",
        ["array"; "index"],
        ["slot";
    "offset"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["arrayLength"],
              M.call (|
                "array_length_array_bytes32_storage",
                [
                  M.get (| "array" |)
                ]
              |)
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "iszero",
                [
                  M.call (|
                    "lt",
                    [
                      M.get (| "index" |);
                      M.get (| "arrayLength" |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x32",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["dataArea"],
              M.call (|
                "array_dataslot_array_bytes32_storage",
                [
                  M.get (| "array" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["slot"],
              M.call (|
                "add",
                [
                  M.get (| "dataArea" |);
                  M.call (|
                    "mul",
                    [
                      M.get (| "index" |);
                      [Literal.number 1]
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["offset"],
              [Literal.number 0]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_unsigned_dynamic",
        ["bits"; "value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  M.get (| "bits" |);
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_from_storage_bytes32",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "extract_from_storage_value_dynamict_bytes32",
        ["slot_value"; "offset"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "cleanup_from_storage_bytes32",
                [
                  M.call (|
                    "shift_right_unsigned_dynamic",
                    [
                      M.call (|
                        "mul",
                        [
                          M.get (| "offset" |);
                          [Literal.number 8]
                        ]
                      |);
                      M.get (| "slot_value" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "read_from_storage_split_dynamic_bytes32",
        ["slot"; "offset"],
        ["value"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "extract_from_storage_value_dynamict_bytes32",
                [
                  M.call (|
                    "sload",
                    [
                      M.get (| "slot" |)
                    ]
                  |);
                  M.get (| "offset" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "cleanup_bytes32",
        ["value"],
        ["cleaned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["cleaned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "leftAlign_bytes32",
        ["value"],
        ["aligned"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["aligned"],
              M.get (| "value" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_encode_bytes32",
        ["value"; "pos"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                M.get (| "pos" |);
                M.call (|
                  "leftAlign_bytes32",
                  [
                    M.call (|
                      "cleanup_bytes32",
                      [
                        M.get (| "value" |)
                      ]
                    |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_encode_packed_bytes32_bytes32",
        ["pos"; "value0"; "value1"],
        ["end"],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "abi_encode_bytes32",
              [
                M.get (| "value0" |);
                M.get (| "pos" |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["pos"],
              M.call (|
                "add",
                [
                  M.get (| "pos" |);
                  [Literal.number 32]
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "abi_encode_bytes32",
              [
                M.get (| "value1" |);
                M.get (| "pos" |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["pos"],
              M.call (|
                "add",
                [
                  M.get (| "pos" |);
                  [Literal.number 32]
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["end"],
              M.get (| "pos" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "round_up_to_mul_of",
        ["value"],
        ["result"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["result"],
              M.call (|
                "and",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 31]
                    ]
                  |);
                  M.call (|
                    "not",
                    [
                      [Literal.number 31]
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "panic_error_0x41",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 0];
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    [Literal.number 0x4e487b71]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 4];
                [Literal.number 0x41]
              ]
            |) in
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0x24]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "finalize_allocation",
        ["memPtr"; "size"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["newFreePtr"],
              M.call (|
                "add",
                [
                  M.get (| "memPtr" |);
                  M.call (|
                    "round_up_to_mul_of",
                    [
                      M.get (| "size" |)
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "or",
                [
                  M.call (|
                    "gt",
                    [
                      M.get (| "newFreePtr" |);
                      M.call (|
                        "sub",
                        [
                          M.call (|
                            "shl",
                            [
                              [Literal.number 64];
                              [Literal.number 1]
                            ]
                          |);
                          [Literal.number 1]
                        ]
                      |)
                    ]
                  |);
                  M.call (|
                    "lt",
                    [
                      M.get (| "newFreePtr" |);
                      M.get (| "memPtr" |)
                    ]
                  |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x41",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 64];
                M.get (| "newFreePtr" |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_left",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shl",
                [
                  [Literal.number 0];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_length_bytes",
        ["value"],
        ["length"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["length"],
              M.call (|
                "mload",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "array_storeLengthForEncoding_bytes_nonPadded_inplace",
        ["pos"; "length"],
        ["updated_pos"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["updated_pos"],
              M.get (| "pos" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "copy_memory_to_memory_with_cleanup",
        ["src"; "dst"; "length"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "mcopy",
              [
                M.get (| "dst" |);
                M.get (| "src" |);
                M.get (| "length" |)
              ]
            |) in
          let _ :=
            M.call (|
              "mstore",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "dst" |);
                    M.get (| "length" |)
                  ]
                |);
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_encode_bytes",
        ["value"; "pos"],
        ["end"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["length"],
              M.call (|
                "array_length_bytes",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["pos"],
              M.call (|
                "array_storeLengthForEncoding_bytes_nonPadded_inplace",
                [
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "copy_memory_to_memory_with_cleanup",
              [
                M.call (|
                  "add",
                  [
                    M.get (| "value" |);
                    [Literal.number 0x20]
                  ]
                |);
                M.get (| "pos" |);
                M.get (| "length" |)
              ]
            |) in
          let _ :=
            M.declare (|
              ["end"],
              M.call (|
                "add",
                [
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "abi_encode_packed_bytes",
        ["pos"; "value0"],
        ["end"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["pos"],
              M.call (|
                "abi_encode_bytes",
                [
                  M.get (| "value0" |);
                  M.get (| "pos" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["end"],
              M.get (| "pos" |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_forward",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["pos"],
              M.call (|
                "allocate_unbounded",
                [

                ]
              |)
            |) in
          let _ :=
            M.call (|
              "returndatacopy",
              [
                M.get (| "pos" |);
                [Literal.number 0];
                M.call (|
                  "returndatasize",
                  [

                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "revert",
              [
                M.get (| "pos" |);
                M.call (|
                  "returndatasize",
                  [

                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "checked_add_uint256",
        ["x"; "y"],
        ["sum"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["x"],
              M.call (|
                "cleanup_uint256",
                [
                  M.get (| "x" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["y"],
              M.call (|
                "cleanup_uint256",
                [
                  M.get (| "y" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["sum"],
              M.call (|
                "add",
                [
                  M.get (| "x" |);
                  M.get (| "y" |)
                ]
              |)
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "gt",
                [
                  M.get (| "x" |);
                  M.get (| "sum" |)
                ]
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "panic_error_0x11",
                    [

                    ]
                  |) in
                tt
              ))
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_left_dynamic",
        ["bits"; "value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shl",
                [
                  M.get (| "bits" |);
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_byte_slice_dynamic32",
        ["value"; "shiftBytes"; "toInsert"],
        ["result"],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["shiftBits"],
              M.call (|
                "mul",
                [
                  M.get (| "shiftBytes" |);
                  [Literal.number 8]
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              ["mask"],
              M.call (|
                "shift_left_dynamic",
                [
                  M.get (| "shiftBits" |);
                  M.call (|
                    "not",
                    [
                      [Literal.number 0]
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["toInsert"],
              M.call (|
                "shift_left_dynamic",
                [
                  M.get (| "shiftBits" |);
                  M.get (| "toInsert" |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["value"],
              M.call (|
                "and",
                [
                  M.get (| "value" |);
                  M.call (|
                    "not",
                    [
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          let _ :=
            M.declare (|
              ["result"],
              M.call (|
                "or",
                [
                  M.get (| "value" |);
                  M.call (|
                    "and",
                    [
                      M.get (| "toInsert" |);
                      M.get (| "mask" |)
                    ]
                  |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "convert_bytes32_to_bytes32",
        ["value"],
        ["converted"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["converted"],
              M.call (|
                "cleanup_bytes32",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "shift_right_unsigned",
        ["value"],
        ["newValue"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["newValue"],
              M.call (|
                "shr",
                [
                  [Literal.number 0];
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "prepare_store_bytes32",
        ["value"],
        ["ret"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["ret"],
              M.call (|
                "shift_right_unsigned",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "update_storage_value_bytes32_to_bytes32",
        ["slot"; "offset"; "value"],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["convertedValue"],
              M.call (|
                "convert_bytes32_to_bytes32",
                [
                  M.get (| "value" |)
                ]
              |)
            |) in
          let _ :=
            M.call (|
              "sstore",
              [
                M.get (| "slot" |);
                M.call (|
                  "update_byte_slice_dynamic32",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |);
                    M.get (| "offset" |);
                    M.call (|
                      "prepare_store_bytes32",
                      [
                        M.get (| "convertedValue" |)
                      ]
                    |)
                  ]
                |)
              ]
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "constructor_DepositContract",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.assign (|
              ["expr"],
              [Literal.number 0x00]
            |) in
          let _ :=
            M.assign (|
              ["var_height"],
              M.call (|
                "convert_rational_0_by_1_to_uint256",
                [
                  M.get (| "expr" |)
                ]
              |)
            |) in
          let _ :=
            M.for (|
              tt,
              [Literal.number 1],
              let _ :=
                M.assign (|
                  ["_1"],
                  M.get (| "var_height" |)
                |) in
              let _ :=
                M.assign (|
                  ["_2"],
                  M.call (|
                    "increment_wrapping_uint256",
                    [
                      M.get (| "_1" |)
                    ]
                  |)
                |) in
              let _ :=
                M.declare (|
                  ["var_height"],
                  M.get (| "_2" |)
                |) in
              tt,
              let _ :=
                M.assign (|
                  ["_3"],
                  M.get (| "var_height" |)
                |) in
              let _ :=
                M.assign (|
                  ["expr_1"],
                  M.get (| "_3" |)
                |) in
              let _ :=
                M.assign (|
                  ["expr_2"],
                  M.call (|
                    "constant_DEPOSIT_CONTRACT_TREE_DEPTH",
                    [

                    ]
                  |)
                |) in
              let _ :=
                M.assign (|
                  ["expr_3"],
                  [Literal.number 0x01]
                |) in
              let _ :=
                M.assign (|
                  ["expr_4"],
                  M.call (|
                    "checked_sub_uint256",
                    [
                      M.get (| "expr_2" |);
                      M.call (|
                        "convert_t_rational_by_to_t_uint256",
                        [
                          M.get (| "expr_3" |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.assign (|
                  ["expr_5"],
                  M.call (|
                    "lt",
                    [
                      M.call (|
                        "cleanup_uint256",
                        [
                          M.get (| "expr_1" |)
                        ]
                      |);
                      M.call (|
                        "cleanup_uint256",
                        [
                          M.get (| "expr_4" |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.if_ (|
                  M.call (|
                    "iszero",
                    [
                      M.get (| "expr_5" |)
                    ]
                  |),
                  ltac:(M.monadic (
                    let _ :=
                      M.break (||) in
                    tt
                  ))
                |) in
              let _ :=
                M.assign (|
                  ["_6_slot"],
                  [Literal.number 0x21]
                |) in
              let _ :=
                M.assign (|
                  ["expr_slot"],
                  M.get (| "_6_slot" |)
                |) in
              let _ :=
                M.assign (|
                  ["_4"],
                  M.get (| "var_height" |)
                |) in
              let _ :=
                M.assign (|
                  ["expr_6"],
                  M.get (| "_4" |)
                |) in
              let _ :=
                M.assign (|
                  ["_5"; "_6"],
                  M.call (|
                    "storage_array_index_access_bytes",
                    [
                      M.get (| "expr_slot" |);
                      M.get (| "expr_6" |)
                    ]
                  |)
                |) in
              let _ :=
                M.assign (|
                  ["_7"],
                  M.call (|
                    "read_from_storage_split_dynamic_bytes32",
                    [
                      M.get (| "_5" |);
                      M.get (| "_6" |)
                    ]
                  |)
                |) in
              let _ :=
                M.assign (|
                  ["expr_7"],
                  M.get (| "_7" |)
                |) in
              let _ :=
                M.assign (|
                  ["_slot"],
                  [Literal.number 0x21]
                |) in
              let _ :=
                M.assign (|
                  ["expr_99_slot"],
                  M.get (| "_slot" |)
                |) in
              let _ :=
                M.assign (|
                  ["_8"],
                  M.get (| "var_height" |)
                |) in
              let _ :=
                M.assign (|
                  ["expr_8"],
                  M.get (| "_8" |)
                |) in
              let _ :=
                M.assign (|
                  ["_9"; "_10"],
                  M.call (|
                    "storage_array_index_access_bytes",
                    [
                      M.get (| "expr_99_slot" |);
                      M.get (| "expr_8" |)
                    ]
                  |)
                |) in
              let _ :=
                M.assign (|
                  ["_11"],
                  M.call (|
                    "read_from_storage_split_dynamic_bytes32",
                    [
                      M.get (| "_9" |);
                      M.get (| "_10" |)
                    ]
                  |)
                |) in
              let _ :=
                M.assign (|
                  ["expr_9"],
                  M.get (| "_11" |)
                |) in
              let _ :=
                M.assign (|
                  ["expr_mpos"],
                  M.call (|
                    "allocate_unbounded",
                    [

                    ]
                  |)
                |) in
              let _ :=
                M.assign (|
                  ["_12"],
                  M.call (|
                    "add",
                    [
                      M.get (| "expr_mpos" |);
                      [Literal.number 0x20]
                    ]
                  |)
                |) in
              let _ :=
                M.assign (|
                  ["_13"],
                  M.call (|
                    "abi_encode_packed_bytes32_bytes32",
                    [
                      M.get (| "_12" |);
                      M.get (| "expr_7" |);
                      M.get (| "expr_9" |)
                    ]
                  |)
                |) in
              let _ :=
                M.call (|
                  "mstore",
                  [
                    M.get (| "expr_mpos" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_13" |);
                        M.call (|
                          "add",
                          [
                            M.get (| "expr_mpos" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      ]
                    |)
                  ]
                |) in
              let _ :=
                M.call (|
                  "finalize_allocation",
                  [
                    M.get (| "expr_mpos" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_13" |);
                        M.get (| "expr_mpos" |)
                      ]
                    |)
                  ]
                |) in
              let _ :=
                M.assign (|
                  ["_14"],
                  M.call (|
                    "allocate_unbounded",
                    [

                    ]
                  |)
                |) in
              let _ :=
                M.assign (|
                  ["_15"],
                  M.call (|
                    "abi_encode_packed_bytes",
                    [
                      M.get (| "_14" |);
                      M.get (| "expr_mpos" |)
                    ]
                  |)
                |) in
              let _ :=
                M.assign (|
                  ["_16"],
                  M.call (|
                    "staticcall",
                    [
                      M.call (|
                        "gas",
                        [

                        ]
                      |);
                      [Literal.number 2];
                      M.get (| "_14" |);
                      M.call (|
                        "sub",
                        [
                          M.get (| "_15" |);
                          M.get (| "_14" |)
                        ]
                      |);
                      [Literal.number 0];
                      [Literal.number 32]
                    ]
                  |)
                |) in
              let _ :=
                M.if_ (|
                  M.call (|
                    "iszero",
                    [
                      M.get (| "_16" |)
                    ]
                  |),
                  ltac:(M.monadic (
                    let _ :=
                      M.call (|
                        "revert_forward",
                        [

                        ]
                      |) in
                    tt
                  ))
                |) in
              let _ :=
                M.assign (|
                  ["expr_10"],
                  M.call (|
                    "shift_left",
                    [
                      M.call (|
                        "mload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.assign (|
                  ["_21_slot"],
                  [Literal.number 0x21]
                |) in
              let _ :=
                M.assign (|
                  ["expr_88_slot"],
                  M.get (| "_21_slot" |)
                |) in
              let _ :=
                M.assign (|
                  ["_17"],
                  M.get (| "var_height" |)
                |) in
              let _ :=
                M.assign (|
                  ["expr_11"],
                  M.get (| "_17" |)
                |) in
              let _ :=
                M.assign (|
                  ["expr_12"],
                  [Literal.number 0x01]
                |) in
              let _ :=
                M.assign (|
                  ["expr_13"],
                  M.call (|
                    "checked_add_uint256",
                    [
                      M.get (| "expr_11" |);
                      M.call (|
                        "convert_t_rational_by_to_t_uint256",
                        [
                          M.get (| "expr_12" |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.assign (|
                  ["_18"; "_19"],
                  M.call (|
                    "storage_array_index_access_bytes",
                    [
                      M.get (| "expr_88_slot" |);
                      M.get (| "expr_13" |)
                    ]
                  |)
                |) in
              let _ :=
                M.call (|
                  "update_storage_value_bytes32_to_bytes32",
                  [
                    M.get (| "_18" |);
                    M.get (| "_19" |);
                    M.get (| "expr_10" |)
                  ]
                |) in
              tt
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module DepositContract_541_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x01ffc9a7),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_supportsInterface",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x22895118),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_deposit",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x621fd130),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_get_deposit_count",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xc5f2892f),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_get_deposit_root",
                            [

                            ]
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            [

            ]
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bytes4",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "shl",
                      [
                        [Literal.number 224];
                        [Literal.number 0xffffffff]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_bytes4",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_bytes4",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_t_bytes4",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_bytes4",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_bytes4",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                [Literal.number 0]
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_t_bytes4",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bool",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "iszero",
                      [
                        M.get (| "value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bool_to_bool",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_bool",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bool",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_bool_to_bool",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_supportsInterface",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"],
                M.call (|
                  "abi_decode_bytes4",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_supportsInterface",
                  [
                    M.get (| "param" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_bytes_calldata",
          ["offset"; "end"],
          ["arrayPos";
      "length"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "offset" |);
                            [Literal.number 0x1f]
                          ]
                        |);
                        M.get (| "end" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["arrayPos"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "arrayPos" |);
                        M.call (|
                          "mul",
                          [
                            M.get (| "length" |);
                            [Literal.number 0x01]
                          ]
                        |)
                      ]
                    |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bytes32",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_bytes32",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_bytes32",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_bytes32",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_bytes32",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_bytes_calldatat_bytes_calldatat_bytes_calldatat_bytes32",
          ["headStart"; "dataEnd"],
          ["value0";
      "value1";
      "value2";
      "value3";
      "value4";
      "value5";
      "value6"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 128]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                M.call (|
                  "calldataload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "offset" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value0"; "value1"],
                M.call (|
                  "abi_decode_bytes_calldata",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset_1"],
                M.call (|
                  "calldataload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 32]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "offset_1" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value2"; "value3"],
                M.call (|
                  "abi_decode_bytes_calldata",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset_1" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset_2"],
                M.call (|
                  "calldataload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 64]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "offset_2" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value4"; "value5"],
                M.call (|
                  "abi_decode_bytes_calldata",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset_2" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset_3"],
                [Literal.number 96]
              |) in
            let _ :=
              M.declare (|
                ["value6"],
                M.call (|
                  "abi_decode_bytes32",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset_3" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple",
          ["headStart"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_deposit",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["param"; "param_1"; "param_2"; "param_3"; "param_4"; "param_5"; "param_6"],
                M.call (|
                  "abi_decode_bytes_calldatat_bytes_calldatat_bytes_calldatat_bytes32",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      [

                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "fun_deposit",
                [
                  M.get (| "param" |);
                  M.get (| "param_1" |);
                  M.get (| "param_2" |);
                  M.get (| "param_3" |);
                  M.get (| "param_4" |);
                  M.get (| "param_5" |);
                  M.get (| "param_6" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_tuple",
                  [
                    M.get (| "memPos" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_bytes",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_bytes",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_memory_to_memory_with_cleanup",
          ["src"; "dst"; "length"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mcopy",
                [
                  M.get (| "dst" |);
                  M.get (| "src" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "dst" |);
                      M.get (| "length" |)
                    ]
                  |);
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "round_up_to_mul_of",
          ["value"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "and",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 31]
                      ]
                    |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 31]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bytes_to_bytes",
          ["value"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                M.call (|
                  "array_length_bytes",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_bytes",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "copy_memory_to_memory_with_cleanup",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 0x20]
                    ]
                  |);
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "length" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bytes",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_bytes_to_bytes",
                  [
                    M.get (| "value0" |);
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_get_deposit_count",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_get_deposit_count",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_bytes",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bytes32_to_bytes32",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_bytes32",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple_bytes32",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_bytes32_to_bytes32",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_get_deposit_root",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  [

                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                M.call (|
                  "fun_get_deposit_root",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                M.call (|
                  "abi_encode_tuple_bytes32",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_bool",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_supportsInterface",
          ["var_interfaceId"],
          ["var_"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                M.call (|
                  "zero_value_for_split_bool",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_interfaceId" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    [Literal.number 0x01ffc9a7]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_bytes4",
                      [
                        M.get (| "expr" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_bytes4",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.get (| "expr_2" |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "expr_3" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_2"],
                      M.get (| "var_interfaceId" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_4"],
                      M.get (| "_2" |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_5"],
                      M.call (|
                        "shl",
                        [
                          [Literal.number 224];
                          [Literal.number 0x85640907]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.assign (|
                      ["expr_6"],
                      M.call (|
                        "eq",
                        [
                          M.call (|
                            "cleanup_bytes4",
                            [
                              M.get (| "expr_4" |)
                            ]
                          |);
                          M.call (|
                            "cleanup_bytes4",
                            [
                              M.get (| "expr_5" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_3"],
                      M.get (| "expr_6" |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "expr_3" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_bytes_calldata",
          ["value"; "len"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.get (| "len" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_48_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_string",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "store_literal_in_memory_c3b50b094eada99b5a9dfa8cfadfa82355edd40e0591c544071d0112172c4c5e",
          ["memPtr"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "memPtr" |);
                      [Literal.number 0]
                    ]
                  |);
                  [Literal.string "4465706f736974436f6e74726163743a20696e76616c6964207075626b657920"]
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "memPtr" |);
                      [Literal.number 32]
                    ]
                  |);
                  [Literal.string "6c656e677468"]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_stringliteral_c3b5",
          ["pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_string",
                  [
                    M.get (| "pos" |);
                    [Literal.number 38]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "store_literal_in_memory_c3b50b094eada99b5a9dfa8cfadfa82355edd40e0591c544071d0112172c4c5e",
                [
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple_stringliteral_c3b5",
          ["headStart"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_stringliteral_c3b5",
                  [
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "require_helper_stringliteral_c3b5",
          ["condition"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "condition" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["memPtr"],
                      M.call (|
                        "allocate_unbounded",
                        [

                        ]
                      |)
                    |) in
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.get (| "memPtr" |);
                        M.call (|
                          "shl",
                          [
                            [Literal.number 229];
                            [Literal.number 4594637]
                          ]
                        |)
                      ]
                    |) in
                  let _ :=
                    M.assign (|
                      ["end"],
                      M.call (|
                        "abi_encode_tuple_stringliteral_c3b5",
                        [
                          M.call (|
                            "add",
                            [
                              M.get (| "memPtr" |);
                              [Literal.number 4]
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        M.get (| "memPtr" |);
                        M.call (|
                          "sub",
                          [
                            M.get (| "end" |);
                            M.get (| "memPtr" |)
                          ]
                        |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_32_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "store_literal_in_memory_747182c86d19950fc1e3554e7b3e3a1972fcfdcf01419aa5598a57f4869840e0",
          ["memPtr"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "memPtr" |);
                      [Literal.number 0]
                    ]
                  |);
                  [Literal.string "4465706f736974436f6e74726163743a20696e76616c69642077697468647261"]
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "memPtr" |);
                      [Literal.number 32]
                    ]
                  |);
                  [Literal.string "77616c5f63726564656e7469616c73206c656e677468"]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_stringliteral_7471",
          ["pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_string",
                  [
                    M.get (| "pos" |);
                    [Literal.number 54]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "store_literal_in_memory_747182c86d19950fc1e3554e7b3e3a1972fcfdcf01419aa5598a57f4869840e0",
                [
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_stringliteral",
          ["headStart"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_stringliteral_7471",
                  [
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "require_helper_stringliteral",
          ["condition"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "condition" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["memPtr"],
                      M.call (|
                        "allocate_unbounded",
                        [

                        ]
                      |)
                    |) in
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.get (| "memPtr" |);
                        M.call (|
                          "shl",
                          [
                            [Literal.number 229];
                            [Literal.number 4594637]
                          ]
                        |)
                      ]
                    |) in
                  let _ :=
                    M.assign (|
                      ["end"],
                      M.call (|
                        "abi_encode_stringliteral",
                        [
                          M.call (|
                            "add",
                            [
                              M.get (| "memPtr" |);
                              [Literal.number 4]
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        M.get (| "memPtr" |);
                        M.call (|
                          "sub",
                          [
                            M.get (| "end" |);
                            M.get (| "memPtr" |)
                          ]
                        |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_96_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_96_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_96_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "store_literal_in_memory_e15de1a983e2181dc403952307f19cbe1ac366f85accb46ba7ec34e71736287b",
          ["memPtr"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "memPtr" |);
                      [Literal.number 0]
                    ]
                  |);
                  [Literal.string "4465706f736974436f6e74726163743a20696e76616c6964207369676e617475"]
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "memPtr" |);
                      [Literal.number 32]
                    ]
                  |);
                  [Literal.string "7265206c656e677468"]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_stringliteral_e15d",
          ["pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_string",
                  [
                    M.get (| "pos" |);
                    [Literal.number 41]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "store_literal_in_memory_e15de1a983e2181dc403952307f19cbe1ac366f85accb46ba7ec34e71736287b",
                [
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple_stringliteral_e15d",
          ["headStart"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_stringliteral_e15d",
                  [
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "require_helper_stringliteral_e15d",
          ["condition"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "condition" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["memPtr"],
                      M.call (|
                        "allocate_unbounded",
                        [

                        ]
                      |)
                    |) in
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.get (| "memPtr" |);
                        M.call (|
                          "shl",
                          [
                            [Literal.number 229];
                            [Literal.number 4594637]
                          ]
                        |)
                      ]
                    |) in
                  let _ :=
                    M.assign (|
                      ["end"],
                      M.call (|
                        "abi_encode_tuple_stringliteral_e15d",
                        [
                          M.call (|
                            "add",
                            [
                              M.get (| "memPtr" |);
                              [Literal.number 4]
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        M.get (| "memPtr" |);
                        M.call (|
                          "sub",
                          [
                            M.get (| "end" |);
                            M.get (| "memPtr" |)
                          ]
                        |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_1000000000000000000_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_1000000000000000000_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "store_literal_in_memory_d4d9a14975cc31a7dc18afc82ee6e59efa15377b990098eeaab4cc403f9d1217",
          ["memPtr"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "memPtr" |);
                      [Literal.number 0]
                    ]
                  |);
                  [Literal.string "4465706f736974436f6e74726163743a206465706f7369742076616c75652074"]
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "memPtr" |);
                      [Literal.number 32]
                    ]
                  |);
                  [Literal.string "6f6f206c6f77"]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_stringliteral_d4d9a14975cc31a7dc18afc82ee6e59efa15377b990098eeaab4cc403f9d1217",
          ["pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_string",
                  [
                    M.get (| "pos" |);
                    [Literal.number 38]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "store_literal_in_memory_d4d9a14975cc31a7dc18afc82ee6e59efa15377b990098eeaab4cc403f9d1217",
                [
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_stringliteral_d4d9",
          ["headStart"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_stringliteral_d4d9a14975cc31a7dc18afc82ee6e59efa15377b990098eeaab4cc403f9d1217",
                  [
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "require_helper_stringliteral_d4d9",
          ["condition"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "condition" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["memPtr"],
                      M.call (|
                        "allocate_unbounded",
                        [

                        ]
                      |)
                    |) in
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.get (| "memPtr" |);
                        M.call (|
                          "shl",
                          [
                            [Literal.number 229];
                            [Literal.number 4594637]
                          ]
                        |)
                      ]
                    |) in
                  let _ :=
                    M.assign (|
                      ["end"],
                      M.call (|
                        "abi_encode_stringliteral_d4d9",
                        [
                          M.call (|
                            "add",
                            [
                              M.get (| "memPtr" |);
                              [Literal.number 4]
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        M.get (| "memPtr" |);
                        M.call (|
                          "sub",
                          [
                            M.get (| "end" |);
                            M.get (| "memPtr" |)
                          ]
                        |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_1000000000_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_1000000000_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_1000000000_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x12",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x12]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "mod_uint256",
          ["x"; "y"],
          ["r"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["x"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "x" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["y"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "y" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x12",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["r"],
                M.call (|
                  "mod",
                  [
                    M.get (| "x" |);
                    M.get (| "y" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_0_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_0_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "store_literal_in_memory_7db03c60fbfd1382397614fc537e65f67f687dbb18307bed297bda7f864590e0",
          ["memPtr"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "memPtr" |);
                      [Literal.number 0]
                    ]
                  |);
                  [Literal.string "4465706f736974436f6e74726163743a206465706f7369742076616c7565206e"]
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "memPtr" |);
                      [Literal.number 32]
                    ]
                  |);
                  [Literal.string "6f74206d756c7469706c65206f662067776569"]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_stringliteral_7db03c60fbfd1382397614fc537e65f67f687dbb18307bed297bda7f864590e0",
          ["pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_string",
                  [
                    M.get (| "pos" |);
                    [Literal.number 51]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "store_literal_in_memory_7db03c60fbfd1382397614fc537e65f67f687dbb18307bed297bda7f864590e0",
                [
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_stringliteral_7db0",
          ["headStart"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_stringliteral_7db03c60fbfd1382397614fc537e65f67f687dbb18307bed297bda7f864590e0",
                  [
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "require_helper_stringliteral_7db0",
          ["condition"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "condition" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["memPtr"],
                      M.call (|
                        "allocate_unbounded",
                        [

                        ]
                      |)
                    |) in
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.get (| "memPtr" |);
                        M.call (|
                          "shl",
                          [
                            [Literal.number 229];
                            [Literal.number 4594637]
                          ]
                        |)
                      ]
                    |) in
                  let _ :=
                    M.assign (|
                      ["end"],
                      M.call (|
                        "abi_encode_stringliteral_7db0",
                        [
                          M.call (|
                            "add",
                            [
                              M.get (| "memPtr" |);
                              [Literal.number 4]
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        M.get (| "memPtr" |);
                        M.call (|
                          "sub",
                          [
                            M.get (| "end" |);
                            M.get (| "memPtr" |)
                          ]
                        |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x11",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x11]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_div_uint256",
          ["x"; "y"],
          ["r"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["x"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "x" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["y"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "y" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x12",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["r"],
                M.call (|
                  "div",
                  [
                    M.get (| "x" |);
                    M.get (| "y" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint64",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint64_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint64",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "store_literal_in_memory_c445cee017c8884423c583c4e1697a8e774197f1748cc887aa73775ef891882f",
          ["memPtr"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "memPtr" |);
                      [Literal.number 0]
                    ]
                  |);
                  [Literal.string "4465706f736974436f6e74726163743a206465706f7369742076616c75652074"]
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "memPtr" |);
                      [Literal.number 32]
                    ]
                  |);
                  [Literal.string "6f6f2068696768"]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_stringliteral_c445",
          ["pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_string",
                  [
                    M.get (| "pos" |);
                    [Literal.number 39]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "store_literal_in_memory_c445cee017c8884423c583c4e1697a8e774197f1748cc887aa73775ef891882f",
                [
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple_stringliteral_c445",
          ["headStart"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_stringliteral_c445",
                  [
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "require_helper_stringliteral_c445",
          ["condition"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "condition" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["memPtr"],
                      M.call (|
                        "allocate_unbounded",
                        [

                        ]
                      |)
                    |) in
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.get (| "memPtr" |);
                        M.call (|
                          "shl",
                          [
                            [Literal.number 229];
                            [Literal.number 4594637]
                          ]
                        |)
                      ]
                    |) in
                  let _ :=
                    M.assign (|
                      ["end"],
                      M.call (|
                        "abi_encode_tuple_stringliteral_c445",
                        [
                          M.call (|
                            "add",
                            [
                              M.get (| "memPtr" |);
                              [Literal.number 4]
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        M.get (| "memPtr" |);
                        M.call (|
                          "sub",
                          [
                            M.get (| "end" |);
                            M.get (| "memPtr" |)
                          ]
                        |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint256_to_uint64",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint64",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_0_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_offsett_uint256",
          ["slot_value"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_uint256",
                  [
                    M.call (|
                      "shift_right_0_unsigned",
                      [
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_offset_uint256",
          ["slot"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_offsett_uint256",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_calldata_to_memory_with_cleanup",
          ["src"; "dst"; "length"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "calldatacopy",
                [
                  M.get (| "dst" |);
                  M.get (| "src" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "dst" |);
                      M.get (| "length" |)
                    ]
                  |);
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bytes_calldata_ptr",
          ["start"; "length"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_bytes",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "copy_calldata_to_memory_with_cleanup",
                [
                  M.get (| "start" |);
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "length" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bytes_calldata_bytes_calldata_bytes_bytes_calldata_bytes",
          ["headStart"; "value0"; "value1"; "value2"; "value3"; "value4"; "value5"; "value6"; "value7"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 160]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_bytes_calldata_ptr",
                  [
                    M.get (| "value0" |);
                    M.get (| "value1" |);
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_bytes_calldata_ptr",
                  [
                    M.get (| "value2" |);
                    M.get (| "value3" |);
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 64]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_bytes_to_bytes",
                  [
                    M.get (| "value4" |);
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 96]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_bytes_calldata_ptr",
                  [
                    M.get (| "value5" |);
                    M.get (| "value6" |);
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 128]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_bytes_to_bytes",
                  [
                    M.get (| "value7" |);
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bytes16",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 0xffffffffffffffffffffffffffffffff]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_128",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 128];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_bytes16",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes16",
                  [
                    M.call (|
                      "shift_left_128",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_bytes_nonPadded_inplace",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bytes_calldata",
          ["start"; "length"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_bytes_nonPadded_inplace",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "copy_calldata_to_memory_with_cleanup",
                [
                  M.get (| "start" |);
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "leftAlign_bytes16",
          ["value"],
          ["aligned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["aligned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bytes16",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "leftAlign_bytes16",
                    [
                      M.call (|
                        "cleanup_bytes16",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_packed_bytes_calldata_bytes16",
          ["pos"; "value0"; "value1"; "value2"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "abi_encode_bytes_calldata",
                  [
                    M.get (| "value0" |);
                    M.get (| "value1" |);
                    M.get (| "pos" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_bytes16",
                [
                  M.get (| "value2" |);
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 16]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "finalize_allocation",
          ["memPtr"; "size"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["newFreePtr"],
                M.call (|
                  "add",
                  [
                    M.get (| "memPtr" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "size" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "newFreePtr" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "newFreePtr" |);
                        M.get (| "memPtr" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 64];
                  M.get (| "newFreePtr" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bytes_memory_ptr",
          ["value"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                M.call (|
                  "array_length_bytes",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_bytes_nonPadded_inplace",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "copy_memory_to_memory_with_cleanup",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 0x20]
                    ]
                  |);
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_packed_bytes",
          ["pos"; "value0"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "abi_encode_bytes_memory_ptr",
                  [
                    M.get (| "value0" |);
                    M.get (| "pos" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_forward",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["pos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "returndatacopy",
                [
                  M.get (| "pos" |);
                  [Literal.number 0];
                  M.call (|
                    "returndatasize",
                    [

                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "returndatasize",
                    [

                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_64_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_64_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_64_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_7678404c0552a58cf14944d1a786cf4c81aab3563e2735cb332aee47bbb57c4a",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_46e3e63c93837e9efa638abb3b4e76ced8c11259a873f1381a0abdf6ae6a823c",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "calldata_array_index_range_access_bytes_calldata",
          ["offset"; "length"; "startIndex"; "endIndex"],
          ["offsetOut";
      "lengthOut"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "startIndex" |);
                    M.get (| "endIndex" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_7678404c0552a58cf14944d1a786cf4c81aab3563e2735cb332aee47bbb57c4a",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "endIndex" |);
                    M.get (| "length" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_46e3e63c93837e9efa638abb3b4e76ced8c11259a873f1381a0abdf6ae6a823c",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["offsetOut"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "startIndex" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["lengthOut"],
                M.call (|
                  "sub",
                  [
                    M.get (| "endIndex" |);
                    M.get (| "startIndex" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_packed_bytes_calldata_slice",
          ["pos"; "value0"; "value1"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "abi_encode_bytes_calldata",
                  [
                    M.get (| "value0" |);
                    M.get (| "value1" |);
                    M.get (| "pos" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_bytes32",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes32",
                  [
                    M.call (|
                      "shift_left",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "leftAlign_bytes32",
          ["value"],
          ["aligned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["aligned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bytes32",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "leftAlign_bytes32",
                    [
                      M.call (|
                        "cleanup_bytes32",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_packed_bytes_calldata_slice_bytes32",
          ["pos"; "value0"; "value1"; "value2"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "abi_encode_bytes_calldata",
                  [
                    M.get (| "value0" |);
                    M.get (| "value1" |);
                    M.get (| "pos" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_bytes32",
                [
                  M.get (| "value2" |);
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_packed_bytes32_bytes32",
          ["pos"; "value0"; "value1"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "abi_encode_bytes32",
                [
                  M.get (| "value0" |);
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_bytes32",
                [
                  M.get (| "value1" |);
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_packed_bytes32_bytes_calldata",
          ["pos"; "value0"; "value1"; "value2"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "abi_encode_bytes32",
                [
                  M.get (| "value0" |);
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "abi_encode_bytes_calldata",
                  [
                    M.get (| "value1" |);
                    M.get (| "value2" |);
                    M.get (| "pos" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bytes24",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_64",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 64];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_bytes24",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes24",
                  [
                    M.call (|
                      "shift_left_64",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "leftAlign_bytes24",
          ["value"],
          ["aligned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["aligned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bytes24",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "leftAlign_bytes24",
                    [
                      M.call (|
                        "cleanup_bytes24",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_packed_bytes_bytes24_bytes32",
          ["pos"; "value0"; "value1"; "value2"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "abi_encode_bytes_memory_ptr",
                  [
                    M.get (| "value0" |);
                    M.get (| "pos" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_bytes24",
                [
                  M.get (| "value1" |);
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 24]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_bytes32",
                [
                  M.get (| "value2" |);
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "store_literal_in_memory_18a67971568b2dbad4353dfdc385098cc004c2a5070a439e010bb919d851babb",
          ["memPtr"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "memPtr" |);
                      [Literal.number 0]
                    ]
                  |);
                  [Literal.string "4465706f736974436f6e74726163743a207265636f6e73747275637465642044"]
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "memPtr" |);
                      [Literal.number 32]
                    ]
                  |);
                  [Literal.string "65706f7369744461746120646f6573206e6f74206d6174636820737570706c69"]
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "memPtr" |);
                      [Literal.number 64]
                    ]
                  |);
                  [Literal.string "6564206465706f7369745f646174615f726f6f74"]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_stringliteral_18a67971568b2dbad4353dfdc385098cc004c2a5070a439e010bb919d851babb",
          ["pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_string",
                  [
                    M.get (| "pos" |);
                    [Literal.number 84]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "store_literal_in_memory_18a67971568b2dbad4353dfdc385098cc004c2a5070a439e010bb919d851babb",
                [
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 96]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_stringliteral_18a6",
          ["headStart"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_stringliteral_18a67971568b2dbad4353dfdc385098cc004c2a5070a439e010bb919d851babb",
                  [
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "require_helper_stringliteral_18a6",
          ["condition"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "condition" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["memPtr"],
                      M.call (|
                        "allocate_unbounded",
                        [

                        ]
                      |)
                    |) in
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.get (| "memPtr" |);
                        M.call (|
                          "shl",
                          [
                            [Literal.number 229];
                            [Literal.number 4594637]
                          ]
                        |)
                      ]
                    |) in
                  let _ :=
                    M.assign (|
                      ["end"],
                      M.call (|
                        "abi_encode_stringliteral_18a6",
                        [
                          M.call (|
                            "add",
                            [
                              M.get (| "memPtr" |);
                              [Literal.number 4]
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        M.get (| "memPtr" |);
                        M.call (|
                          "sub",
                          [
                            M.get (| "end" |);
                            M.get (| "memPtr" |)
                          ]
                        |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "constant_DEPOSIT_CONTRACT_TREE_DEPTH",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x20]
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.call (|
                  "convert_rational_32_by_1_to_uint256",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "_1" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_2_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_2_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_2_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_exp_rational_by_uint256",
          ["exponent"],
          ["power"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["exponent"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "exponent" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "exponent" |);
                    [Literal.number 255]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["power"],
                M.call (|
                  "exp",
                  [
                    [Literal.number 2];
                    M.get (| "exponent" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_1_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_1_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_1_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_sub_uint256",
          ["x"; "y"],
          ["diff"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["x"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "x" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["y"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["diff"],
                M.call (|
                  "sub",
                  [
                    M.get (| "x" |);
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "diff" |);
                    M.get (| "x" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "constant_MAX_DEPOSIT_COUNT",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["expr"],
                M.call (|
                  "constant_DEPOSIT_CONTRACT_TREE_DEPTH",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "checked_exp_rational_by_uint256",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.call (|
                  "checked_sub_uint256",
                  [
                    M.get (| "expr_1" |);
                    M.call (|
                      "convert_rational_1_by_1_to_uint256",
                      [
                        M.get (| "expr_2" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "expr_3" |)
              |) in
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "_1" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "store_literal_in_memory_122aa4bcac592fd535cb6d2558ebbf28083cd32a46ad577d847ea313cd3a6be7",
          ["memPtr"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "memPtr" |);
                      [Literal.number 0]
                    ]
                  |);
                  [Literal.string "4465706f736974436f6e74726163743a206d65726b6c6520747265652066756c"]
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "memPtr" |);
                      [Literal.number 32]
                    ]
                  |);
                  [Literal.string "6c"]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_stringliteral_122a",
          ["pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_string",
                  [
                    M.get (| "pos" |);
                    [Literal.number 33]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "store_literal_in_memory_122aa4bcac592fd535cb6d2558ebbf28083cd32a46ad577d847ea313cd3a6be7",
                [
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple_stringliteral_122a",
          ["headStart"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_stringliteral_122a",
                  [
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "require_helper_stringliteral_122a",
          ["condition"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "condition" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["memPtr"],
                      M.call (|
                        "allocate_unbounded",
                        [

                        ]
                      |)
                    |) in
                  let _ :=
                    M.call (|
                      "mstore",
                      [
                        M.get (| "memPtr" |);
                        M.call (|
                          "shl",
                          [
                            [Literal.number 229];
                            [Literal.number 4594637]
                          ]
                        |)
                      ]
                    |) in
                  let _ :=
                    M.assign (|
                      ["end"],
                      M.call (|
                        "abi_encode_tuple_stringliteral_122a",
                        [
                          M.call (|
                            "add",
                            [
                              M.get (| "memPtr" |);
                              [Literal.number 4]
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        M.get (| "memPtr" |);
                        M.call (|
                          "sub",
                          [
                            M.get (| "end" |);
                            M.get (| "memPtr" |)
                          ]
                        |)
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "checked_add_uint256",
          ["x"; "y"],
          ["sum"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["x"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "x" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["y"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["sum"],
                M.call (|
                  "add",
                  [
                    M.get (| "x" |);
                    M.get (| "y" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "x" |);
                    M.get (| "sum" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x11",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_shift",
          ["value"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["mask"],
                M.call (|
                  "not",
                  [
                    [Literal.number 0]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left",
                  [
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint256_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_uint256",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_offsett_uint256_to_uint256",
          ["slot"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                M.call (|
                  "convert_uint256_to_uint256",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_shift",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.call (|
                        "prepare_store_uint256",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "increment_wrapping_uint256",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x32",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x32]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_array_bytes32_storage",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                [Literal.number 0x20]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_dataslot_array_bytes32_storage",
          ["ptr"],
          ["data"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["data"],
                M.get (| "ptr" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "storage_array_index_access_bytes",
          ["array"; "index"],
          ["slot";
      "offset"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["arrayLength"],
                M.call (|
                  "array_length_array_bytes32_storage",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.get (| "arrayLength" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["dataArea"],
                M.call (|
                  "array_dataslot_array_bytes32_storage",
                  [
                    M.get (| "array" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["slot"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataArea" |);
                    M.call (|
                      "mul",
                      [
                        M.get (| "index" |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_dynamic",
          ["bits"; "value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    M.get (| "bits" |);
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_byte_slice_dynamic32",
          ["value"; "shiftBytes"; "toInsert"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["shiftBits"],
                M.call (|
                  "mul",
                  [
                    M.get (| "shiftBytes" |);
                    [Literal.number 8]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["mask"],
                M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["toInsert"],
                M.call (|
                  "shift_left_dynamic",
                  [
                    M.get (| "shiftBits" |);
                    M.get (| "toInsert" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "not",
                      [
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "or",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "and",
                      [
                        M.get (| "toInsert" |);
                        M.get (| "mask" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_bytes32_to_bytes32",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes32",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "prepare_store_bytes32",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.call (|
                  "shift_right_0_unsigned",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "update_storage_value_bytes32_to_bytes32",
          ["slot"; "offset"; "value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["convertedValue"],
                M.call (|
                  "convert_bytes32_to_bytes32",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "sstore",
                [
                  M.get (| "slot" |);
                  M.call (|
                    "update_byte_slice_dynamic32",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |);
                      M.get (| "offset" |);
                      M.call (|
                        "prepare_store_bytes32",
                        [
                          M.get (| "convertedValue" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_right_unsigned_dynamic",
          ["bits"; "value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    M.get (| "bits" |);
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_from_storage_bytes32",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "extract_from_storage_value_dynamict_bytes32",
          ["slot_value"; "offset"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "cleanup_from_storage_bytes32",
                  [
                    M.call (|
                      "shift_right_unsigned_dynamic",
                      [
                        M.call (|
                          "mul",
                          [
                            M.get (| "offset" |);
                            [Literal.number 8]
                          ]
                        |);
                        M.get (| "slot_value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "read_from_storage_split_dynamic_bytes32",
          ["slot"; "offset"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "extract_from_storage_value_dynamict_bytes32",
                  [
                    M.call (|
                      "sload",
                      [
                        M.get (| "slot" |)
                      ]
                    |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x01",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x01]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "assert_helper",
          ["condition"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "condition" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x01",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_deposit",
          ["var_pubkey_offset"; "var_pubkey_length"; "var_withdrawal_credentials_offset"; "var_withdrawal_credentials_length"; "var_signature_offset"; "var_signature_length"; "var_deposit_data_root"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["_4_offset"],
                M.get (| "var_pubkey_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["_4_length"],
                M.get (| "var_pubkey_length" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_213_offset"],
                M.get (| "_4_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_213_length"],
                M.get (| "_4_length" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.call (|
                  "array_length_bytes_calldata",
                  [
                    M.get (| "expr_213_offset" |);
                    M.get (| "expr_213_length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                [Literal.number 0x30]
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_48_by_1_to_uint256",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "require_helper_stringliteral_c3b5",
                [
                  M.get (| "expr_2" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_5_offset"],
                M.get (| "var_withdrawal_credentials_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["_5_length"],
                M.get (| "var_withdrawal_credentials_length" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_221_offset"],
                M.get (| "_5_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_221_length"],
                M.get (| "_5_length" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.call (|
                  "array_length_bytes_calldata",
                  [
                    M.get (| "expr_221_offset" |);
                    M.get (| "expr_221_length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                [Literal.number 0x20]
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_3" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_32_by_1_to_uint256",
                      [
                        M.get (| "expr_4" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "require_helper_stringliteral",
                [
                  M.get (| "expr_5" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_6_offset"],
                M.get (| "var_signature_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["_6_length"],
                M.get (| "var_signature_length" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_229_offset"],
                M.get (| "_6_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_229_length"],
                M.get (| "_6_length" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                M.call (|
                  "array_length_bytes_calldata",
                  [
                    M.get (| "expr_229_offset" |);
                    M.get (| "expr_229_length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                [Literal.number 0x60]
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_6" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_96_by_1_to_uint256",
                      [
                        M.get (| "expr_7" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "require_helper_stringliteral_e15d",
                [
                  M.get (| "expr_8" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                M.call (|
                  "callvalue",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                [Literal.number 0x0de0b6b3a7640000]
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_9" |)
                          ]
                        |);
                        M.call (|
                          "convert_rational_by_to_uint256",
                          [
                            M.get (| "expr_10" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "require_helper_stringliteral_d4d9",
                [
                  M.get (| "expr_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                M.call (|
                  "callvalue",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                [Literal.number 0x3b9aca00]
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                M.call (|
                  "mod_uint256",
                  [
                    M.get (| "expr_12" |);
                    M.call (|
                      "convert_rational_1000000000_by_1_to_uint256",
                      [
                        M.get (| "expr_13" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_14" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_0_by_1_to_uint256",
                      [
                        M.get (| "expr_15" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "require_helper_stringliteral_7db0",
                [
                  M.get (| "expr_16" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                M.call (|
                  "callvalue",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                [Literal.number 0x3b9aca00]
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                M.call (|
                  "checked_div_uint256",
                  [
                    M.get (| "expr_17" |);
                    M.call (|
                      "convert_rational_1000000000_by_1_to_uint256",
                      [
                        M.get (| "expr_18" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["var_deposit_amount"],
                M.get (| "expr_19" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.get (| "var_deposit_amount" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                [Literal.number 0xffffffffffffffff]
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "gt",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_20" |)
                          ]
                        |);
                        M.call (|
                          "convert_uint64_to_uint256",
                          [
                            M.get (| "expr_21" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "require_helper_stringliteral_c445",
                [
                  M.get (| "expr_22" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.get (| "var_deposit_amount" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                M.call (|
                  "convert_uint256_to_uint64",
                  [
                    M.get (| "expr_23" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_279_mpos"],
                M.call (|
                  "fun_to_little_endian",
                  [
                    M.get (| "expr_24" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["var_amount_mpos"],
                M.get (| "expr_279_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_offset"],
                M.get (| "var_pubkey_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["_9_length"],
                M.get (| "var_pubkey_length" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_282_offset"],
                M.get (| "_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_282_length"],
                M.get (| "_9_length" |)
              |) in
            let _ :=
              M.assign (|
                ["_10_offset"],
                M.get (| "var_withdrawal_credentials_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["_10_length"],
                M.get (| "var_withdrawal_credentials_length" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_283_offset"],
                M.get (| "_10_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_283_length"],
                M.get (| "_10_length" |)
              |) in
            let _ :=
              M.assign (|
                ["_11_mpos"],
                M.get (| "var_amount_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_284_mpos"],
                M.get (| "_11_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_12_offset"],
                M.get (| "var_signature_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["_12_length"],
                M.get (| "var_signature_length" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_285_offset"],
                M.get (| "_12_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_285_length"],
                M.get (| "_12_length" |)
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                M.get (| "_3" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                M.call (|
                  "convert_uint256_to_uint64",
                  [
                    M.get (| "expr_25" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_291_mpos"],
                M.call (|
                  "fun_to_little_endian",
                  [
                    M.get (| "expr_26" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                [Literal.number 0x649bbc62d0e31342afea4e5cd82d4049e7e1ee912fc0889aa790803be39038c5]
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.call (|
                  "abi_encode_bytes_calldata_bytes_calldata_bytes_bytes_calldata_bytes",
                  [
                    M.get (| "_5" |);
                    M.get (| "expr_282_offset" |);
                    M.get (| "expr_282_length" |);
                    M.get (| "expr_283_offset" |);
                    M.get (| "expr_283_length" |);
                    M.get (| "expr_284_mpos" |);
                    M.get (| "expr_285_offset" |);
                    M.get (| "expr_285_length" |);
                    M.get (| "expr_291_mpos" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "log1",
                [
                  M.get (| "_5" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_6" |);
                      M.get (| "_5" |)
                    ]
                  |);
                  M.get (| "_4" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_17_offset"],
                M.get (| "var_pubkey_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["_17_length"],
                M.get (| "var_pubkey_length" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_299_offset"],
                M.get (| "_17_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_299_length"],
                M.get (| "_17_length" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                M.call (|
                  "convert_rational_by_to_bytes16",
                  [
                    M.get (| "expr_27" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_304_mpos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_304_mpos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                M.call (|
                  "abi_encode_packed_bytes_calldata_bytes16",
                  [
                    M.get (| "_7" |);
                    M.get (| "expr_299_offset" |);
                    M.get (| "expr_299_length" |);
                    M.get (| "expr_28" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "expr_304_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_8" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_304_mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "expr_304_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_8" |);
                      M.get (| "expr_304_mpos" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_10"],
                M.call (|
                  "abi_encode_packed_bytes",
                  [
                    M.get (| "_9" |);
                    M.get (| "expr_304_mpos" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_11"],
                M.call (|
                  "staticcall",
                  [
                    M.call (|
                      "gas",
                      [

                      ]
                    |);
                    [Literal.number 2];
                    M.get (| "_9" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_10" |);
                        M.get (| "_9" |)
                      ]
                    |);
                    [Literal.number 0];
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "_11" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_forward",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                M.call (|
                  "shift_left",
                  [
                    M.call (|
                      "mload",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["var_pubkey_root"],
                M.get (| "expr_29" |)
              |) in
            let _ :=
              M.assign (|
                ["_23_offset"],
                M.get (| "var_signature_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["_23_length"],
                M.get (| "var_signature_length" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_315_offset"],
                M.get (| "_23_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_315_length"],
                M.get (| "_23_length" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                [Literal.number 0x40]
              |) in
            let _ :=
              M.assign (|
                ["_12"],
                [Literal.number 0]
              |) in
            let _ :=
              M.assign (|
                ["_13"],
                M.call (|
                  "convert_rational_64_by_1_to_uint256",
                  [
                    M.get (| "expr_30" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_317_offset"; "expr_length"],
                M.call (|
                  "calldata_array_index_range_access_bytes_calldata",
                  [
                    M.get (| "expr_315_offset" |);
                    M.get (| "expr_315_length" |);
                    M.get (| "_12" |);
                    M.get (| "_13" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_mpos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_14"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_mpos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_15"],
                M.call (|
                  "abi_encode_packed_bytes_calldata_slice",
                  [
                    M.get (| "_14" |);
                    M.get (| "expr_317_offset" |);
                    M.get (| "expr_length" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "expr_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_15" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "expr_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_15" |);
                      M.get (| "expr_mpos" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_16"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_17"],
                M.call (|
                  "abi_encode_packed_bytes",
                  [
                    M.get (| "_16" |);
                    M.get (| "expr_mpos" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_18"],
                M.call (|
                  "staticcall",
                  [
                    M.call (|
                      "gas",
                      [

                      ]
                    |);
                    [Literal.number 2];
                    M.get (| "_16" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_17" |);
                        M.get (| "_16" |)
                      ]
                    |);
                    [Literal.number 0];
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "_18" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_forward",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                M.call (|
                  "shift_left",
                  [
                    M.call (|
                      "mload",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_31_offset"],
                M.get (| "var_signature_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["_31_length"],
                M.get (| "var_signature_length" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_323_offset"],
                M.get (| "_31_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_323_length"],
                M.get (| "_31_length" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                [Literal.number 0x40]
              |) in
            let _ :=
              M.assign (|
                ["_19"],
                M.call (|
                  "convert_rational_64_by_1_to_uint256",
                  [
                    M.get (| "expr_32" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_20"],
                M.get (| "expr_323_length" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_offset"; "expr_325_length"],
                M.call (|
                  "calldata_array_index_range_access_bytes_calldata",
                  [
                    M.get (| "expr_323_offset" |);
                    M.get (| "expr_323_length" |);
                    M.get (| "_19" |);
                    M.get (| "_20" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_33"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_34"],
                M.call (|
                  "convert_rational_by_to_bytes32",
                  [
                    M.get (| "expr_33" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_330_mpos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_21"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_330_mpos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_22"],
                M.call (|
                  "abi_encode_packed_bytes_calldata_slice_bytes32",
                  [
                    M.get (| "_21" |);
                    M.get (| "expr_offset" |);
                    M.get (| "expr_325_length" |);
                    M.get (| "expr_34" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "expr_330_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_22" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_330_mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "expr_330_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_22" |);
                      M.get (| "expr_330_mpos" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_23"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_24"],
                M.call (|
                  "abi_encode_packed_bytes",
                  [
                    M.get (| "_23" |);
                    M.get (| "expr_330_mpos" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_25"],
                M.call (|
                  "staticcall",
                  [
                    M.call (|
                      "gas",
                      [

                      ]
                    |);
                    [Literal.number 2];
                    M.get (| "_23" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_24" |);
                        M.get (| "_23" |)
                      ]
                    |);
                    [Literal.number 0];
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "_25" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_forward",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_35"],
                M.call (|
                  "shift_left",
                  [
                    M.call (|
                      "mload",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_332_mpos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_26"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_332_mpos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_27"],
                M.call (|
                  "abi_encode_packed_bytes32_bytes32",
                  [
                    M.get (| "_26" |);
                    M.get (| "expr_31" |);
                    M.get (| "expr_35" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "expr_332_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_27" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_332_mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "expr_332_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_27" |);
                      M.get (| "expr_332_mpos" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_28"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_29"],
                M.call (|
                  "abi_encode_packed_bytes",
                  [
                    M.get (| "_28" |);
                    M.get (| "expr_332_mpos" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_30"],
                M.call (|
                  "staticcall",
                  [
                    M.call (|
                      "gas",
                      [

                      ]
                    |);
                    [Literal.number 2];
                    M.get (| "_28" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_29" |);
                        M.get (| "_28" |)
                      ]
                    |);
                    [Literal.number 0];
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "_30" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_forward",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_36"],
                M.call (|
                  "shift_left",
                  [
                    M.call (|
                      "mload",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["var_signature_root"],
                M.get (| "expr_36" |)
              |) in
            let _ :=
              M.assign (|
                ["_31"],
                M.get (| "var_pubkey_root" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_37"],
                M.get (| "_31" |)
              |) in
            let _ :=
              M.assign (|
                ["_45_offset"],
                M.get (| "var_withdrawal_credentials_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["_length"],
                M.get (| "var_withdrawal_credentials_length" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_344_offset"],
                M.get (| "_45_offset" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_344_length"],
                M.get (| "_length" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_345_mpos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_32"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_345_mpos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_33"],
                M.call (|
                  "abi_encode_packed_bytes32_bytes_calldata",
                  [
                    M.get (| "_32" |);
                    M.get (| "expr_37" |);
                    M.get (| "expr_344_offset" |);
                    M.get (| "expr_344_length" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "expr_345_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_33" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_345_mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "expr_345_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_33" |);
                      M.get (| "expr_345_mpos" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_34"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_35"],
                M.call (|
                  "abi_encode_packed_bytes",
                  [
                    M.get (| "_34" |);
                    M.get (| "expr_345_mpos" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_36"],
                M.call (|
                  "staticcall",
                  [
                    M.call (|
                      "gas",
                      [

                      ]
                    |);
                    [Literal.number 2];
                    M.get (| "_34" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_35" |);
                        M.get (| "_34" |)
                      ]
                    |);
                    [Literal.number 0];
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "_36" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_forward",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_38"],
                M.call (|
                  "shift_left",
                  [
                    M.call (|
                      "mload",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_51_mpos"],
                M.get (| "var_amount_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_350_mpos"],
                M.get (| "_51_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_39"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_40"],
                M.call (|
                  "convert_rational_by_to_bytes24",
                  [
                    M.get (| "expr_39" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_37"],
                M.get (| "var_signature_root" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_41"],
                M.get (| "_37" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_356_mpos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_38"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_356_mpos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_39"],
                M.call (|
                  "abi_encode_packed_bytes_bytes24_bytes32",
                  [
                    M.get (| "_38" |);
                    M.get (| "expr_350_mpos" |);
                    M.get (| "expr_40" |);
                    M.get (| "expr_41" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "expr_356_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_39" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_356_mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "expr_356_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_39" |);
                      M.get (| "expr_356_mpos" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_40"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_41"],
                M.call (|
                  "abi_encode_packed_bytes",
                  [
                    M.get (| "_40" |);
                    M.get (| "expr_356_mpos" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_42"],
                M.call (|
                  "staticcall",
                  [
                    M.call (|
                      "gas",
                      [

                      ]
                    |);
                    [Literal.number 2];
                    M.get (| "_40" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_41" |);
                        M.get (| "_40" |)
                      ]
                    |);
                    [Literal.number 0];
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "_42" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_forward",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_42"],
                M.call (|
                  "shift_left",
                  [
                    M.call (|
                      "mload",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_358_mpos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_43"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_358_mpos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_44"],
                M.call (|
                  "abi_encode_packed_bytes32_bytes32",
                  [
                    M.get (| "_43" |);
                    M.get (| "expr_38" |);
                    M.get (| "expr_42" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "expr_358_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_44" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_358_mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "expr_358_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_44" |);
                      M.get (| "expr_358_mpos" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_45"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_46"],
                M.call (|
                  "abi_encode_packed_bytes",
                  [
                    M.get (| "_45" |);
                    M.get (| "expr_358_mpos" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_47"],
                M.call (|
                  "staticcall",
                  [
                    M.call (|
                      "gas",
                      [

                      ]
                    |);
                    [Literal.number 2];
                    M.get (| "_45" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_46" |);
                        M.get (| "_45" |)
                      ]
                    |);
                    [Literal.number 0];
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "_47" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_forward",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_43"],
                M.call (|
                  "shift_left",
                  [
                    M.call (|
                      "mload",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["var_node"],
                M.get (| "expr_43" |)
              |) in
            let _ :=
              M.assign (|
                ["_48"],
                M.get (| "var_node" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_44"],
                M.get (| "_48" |)
              |) in
            let _ :=
              M.assign (|
                ["_49"],
                M.get (| "var_deposit_data_root" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_45"],
                M.get (| "_49" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_46"],
                M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_bytes32",
                      [
                        M.get (| "expr_44" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_bytes32",
                      [
                        M.get (| "expr_45" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "require_helper_stringliteral_18a6",
                [
                  M.get (| "expr_46" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_50"],
                M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_47"],
                M.get (| "_50" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_48"],
                M.call (|
                  "constant_MAX_DEPOSIT_COUNT",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_49"],
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_47" |)
                      ]
                    |);
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_48" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "require_helper_stringliteral_122a",
                [
                  M.get (| "expr_49" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_50"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_51"],
                M.call (|
                  "convert_rational_1_by_1_to_uint256",
                  [
                    M.get (| "expr_50" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_52"],
                M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_51"],
                M.call (|
                  "checked_add_uint256",
                  [
                    M.get (| "_52" |);
                    M.get (| "_51" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "update_storage_value_offsett_uint256_to_uint256",
                [
                  [Literal.number 0x20];
                  M.get (| "expr_51" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_53"],
                M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_52"],
                M.get (| "_53" |)
              |) in
            let _ :=
              M.assign (|
                ["var_size"],
                M.get (| "expr_52" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_53"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["var_height"],
                M.call (|
                  "convert_rational_0_by_1_to_uint256",
                  [
                    M.get (| "expr_53" |)
                  ]
                |)
              |) in
            let _ :=
              M.for (|
                tt,
                [Literal.number 1],
                let _ :=
                  M.assign (|
                    ["_54"],
                    M.get (| "var_height" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_55"],
                    M.call (|
                      "increment_wrapping_uint256",
                      [
                        M.get (| "_54" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["var_height"],
                    M.get (| "_55" |)
                  |) in
                tt,
                let _ :=
                  M.assign (|
                    ["_56"],
                    M.get (| "var_height" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_54"],
                    M.get (| "_56" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_55"],
                    M.call (|
                      "constant_DEPOSIT_CONTRACT_TREE_DEPTH",
                      [

                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_56"],
                    M.call (|
                      "lt",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_54" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_55" |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.get (| "expr_56" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.break (||) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["_57"],
                    M.get (| "var_size" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_57"],
                    M.get (| "_57" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_58"],
                    [Literal.number 0x01]
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_59"],
                    M.call (|
                      "and",
                      [
                        M.get (| "expr_57" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_58" |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_60"],
                    M.get (| "expr_59" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_61"],
                    [Literal.number 0x01]
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_62"],
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_60" |)
                          ]
                        |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_61" |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.if_ (|
                    M.get (| "expr_62" |),
                    ltac:(M.monadic (
                      let _ :=
                        M.assign (|
                          ["_58"],
                          M.get (| "var_node" |)
                        |) in
                      let _ :=
                        M.assign (|
                          ["expr_63"],
                          M.get (| "_58" |)
                        |) in
                      let _ :=
                        M.assign (|
                          ["_77_slot"],
                          [Literal.number 0x00]
                        |) in
                      let _ :=
                        M.assign (|
                          ["expr_399_slot"],
                          M.get (| "_77_slot" |)
                        |) in
                      let _ :=
                        M.assign (|
                          ["_59"],
                          M.get (| "var_height" |)
                        |) in
                      let _ :=
                        M.assign (|
                          ["expr_64"],
                          M.get (| "_59" |)
                        |) in
                      let _ :=
                        M.assign (|
                          ["_60"; "_61"],
                          M.call (|
                            "storage_array_index_access_bytes",
                            [
                              M.get (| "expr_399_slot" |);
                              M.get (| "expr_64" |)
                            ]
                          |)
                        |) in
                      let _ :=
                        M.call (|
                          "update_storage_value_bytes32_to_bytes32",
                          [
                            M.get (| "_60" |);
                            M.get (| "_61" |);
                            M.get (| "expr_63" |)
                          ]
                        |) in
                      let _ :=
                        M.leave (||) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["_81_slot"],
                    [Literal.number 0x00]
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_412_slot"],
                    M.get (| "_81_slot" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_62"],
                    M.get (| "var_height" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_65"],
                    M.get (| "_62" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_63"; "_64"],
                    M.call (|
                      "storage_array_index_access_bytes",
                      [
                        M.get (| "expr_412_slot" |);
                        M.get (| "expr_65" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_65"],
                    M.call (|
                      "read_from_storage_split_dynamic_bytes32",
                      [
                        M.get (| "_63" |);
                        M.get (| "_64" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_66"],
                    M.get (| "_65" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_66"],
                    M.get (| "var_node" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_67"],
                    M.get (| "_66" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_416_mpos"],
                    M.call (|
                      "allocate_unbounded",
                      [

                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_67"],
                    M.call (|
                      "add",
                      [
                        M.get (| "expr_416_mpos" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_68"],
                    M.call (|
                      "abi_encode_packed_bytes32_bytes32",
                      [
                        M.get (| "_67" |);
                        M.get (| "expr_66" |);
                        M.get (| "expr_67" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.get (| "expr_416_mpos" |);
                      M.call (|
                        "sub",
                        [
                          M.get (| "_68" |);
                          M.call (|
                            "add",
                            [
                              M.get (| "expr_416_mpos" |);
                              [Literal.number 0x20]
                            ]
                          |)
                        ]
                      |)
                    ]
                  |) in
                let _ :=
                  M.call (|
                    "finalize_allocation",
                    [
                      M.get (| "expr_416_mpos" |);
                      M.call (|
                        "sub",
                        [
                          M.get (| "_68" |);
                          M.get (| "expr_416_mpos" |)
                        ]
                      |)
                    ]
                  |) in
                let _ :=
                  M.assign (|
                    ["_69"],
                    M.call (|
                      "allocate_unbounded",
                      [

                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_70"],
                    M.call (|
                      "abi_encode_packed_bytes",
                      [
                        M.get (| "_69" |);
                        M.get (| "expr_416_mpos" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_71"],
                    M.call (|
                      "staticcall",
                      [
                        M.call (|
                          "gas",
                          [

                          ]
                        |);
                        [Literal.number 2];
                        M.get (| "_69" |);
                        M.call (|
                          "sub",
                          [
                            M.get (| "_70" |);
                            M.get (| "_69" |)
                          ]
                        |);
                        [Literal.number 0];
                        [Literal.number 32]
                      ]
                    |)
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.get (| "_71" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "revert_forward",
                          [

                          ]
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_68"],
                    M.call (|
                      "shift_left",
                      [
                        M.call (|
                          "mload",
                          [
                            [Literal.number 0]
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["var_node"],
                    M.get (| "expr_68" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_69"],
                    [Literal.number 0x02]
                  |) in
                let _ :=
                  M.assign (|
                    ["_72"],
                    M.call (|
                      "convert_rational_2_by_1_to_uint256",
                      [
                        M.get (| "expr_69" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_73"],
                    M.get (| "var_size" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_70"],
                    M.call (|
                      "checked_div_uint256",
                      [
                        M.get (| "_73" |);
                        M.get (| "_72" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["var_size"],
                    M.get (| "expr_70" |)
                  |) in
                tt
              |) in
            let _ :=
              M.assign (|
                ["expr_71"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.call (|
                "assert_helper",
                [
                  M.get (| "expr_71" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_bytes",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 96]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_get_deposit_count",
          [],
          ["var_mpos"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bytes_mpos"],
                M.call (|
                  "zero_value_for_split_bytes",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_mpos"],
                M.get (| "zero_bytes_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.call (|
                  "convert_uint256_to_uint64",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_197_mpos"],
                M.call (|
                  "fun_to_little_endian",
                  [
                    M.get (| "expr_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_mpos"],
                M.get (| "expr_197_mpos" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_bytes32",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_packed_bytes32_bytes_bytes24",
          ["pos"; "value0"; "value1"; "value2"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "abi_encode_bytes32",
                [
                  M.get (| "value0" |);
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "abi_encode_bytes_memory_ptr",
                  [
                    M.get (| "value1" |);
                    M.get (| "pos" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_bytes24",
                [
                  M.get (| "value2" |);
                  M.get (| "pos" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 24]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.get (| "pos" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_get_deposit_root",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_t_bytes32"],
                M.call (|
                  "zero_value_for_split_bytes32",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_t_bytes32" |)
              |) in
            let _ :=
              M.assign (|
                ["var_node"],
                Literal.undefined
              |) in
            let _ :=
              M.assign (|
                ["zero_bytes32"],
                M.call (|
                  "zero_value_for_split_bytes32",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_node"],
                M.get (| "zero_bytes32" |)
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                M.get (| "_1" |)
              |) in
            let _ :=
              M.assign (|
                ["var_size"],
                M.get (| "expr" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["var_height"],
                M.call (|
                  "convert_rational_0_by_1_to_uint256",
                  [
                    M.get (| "expr_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.for (|
                tt,
                [Literal.number 1],
                let _ :=
                  M.assign (|
                    ["_2"],
                    M.get (| "var_height" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_3"],
                    M.call (|
                      "increment_wrapping_uint256",
                      [
                        M.get (| "_2" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["var_height"],
                    M.get (| "_3" |)
                  |) in
                tt,
                let _ :=
                  M.assign (|
                    ["_4"],
                    M.get (| "var_height" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_2"],
                    M.get (| "_4" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_3"],
                    M.call (|
                      "constant_DEPOSIT_CONTRACT_TREE_DEPTH",
                      [

                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_4"],
                    M.call (|
                      "lt",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_2" |)
                          ]
                        |);
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_3" |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.get (| "expr_4" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.break (||) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["_5"],
                    M.get (| "var_size" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_5"],
                    M.get (| "_5" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_6"],
                    [Literal.number 0x01]
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_7"],
                    M.call (|
                      "and",
                      [
                        M.get (| "expr_5" |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_6" |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_8"],
                    M.get (| "expr_7" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_9"],
                    [Literal.number 0x01]
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_10"],
                    M.call (|
                      "eq",
                      [
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "expr_8" |)
                          ]
                        |);
                        M.call (|
                          "convert_rational_1_by_1_to_uint256",
                          [
                            M.get (| "expr_9" |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.switch (|
                    M.get (| "expr_10" |),
                    [
                      (
                        Some (Literal.number 0),
                        ltac:(M.monadic (
                          let _ :=
                            M.assign (|
                              ["_6"],
                              M.get (| "var_node" |)
                            |) in
                          let _ :=
                            M.assign (|
                              ["expr_11"],
                              M.get (| "_6" |)
                            |) in
                          let _ :=
                            M.assign (|
                              ["_104_slot"],
                              [Literal.number 0x21]
                            |) in
                          let _ :=
                            M.assign (|
                              ["expr_154_slot"],
                              M.get (| "_104_slot" |)
                            |) in
                          let _ :=
                            M.assign (|
                              ["_7"],
                              M.get (| "var_height" |)
                            |) in
                          let _ :=
                            M.assign (|
                              ["expr_12"],
                              M.get (| "_7" |)
                            |) in
                          let _ :=
                            M.assign (|
                              ["_8"; "_9"],
                              M.call (|
                                "storage_array_index_access_bytes",
                                [
                                  M.get (| "expr_154_slot" |);
                                  M.get (| "expr_12" |)
                                ]
                              |)
                            |) in
                          let _ :=
                            M.assign (|
                              ["_10"],
                              M.call (|
                                "read_from_storage_split_dynamic_bytes32",
                                [
                                  M.get (| "_8" |);
                                  M.get (| "_9" |)
                                ]
                              |)
                            |) in
                          let _ :=
                            M.assign (|
                              ["expr_13"],
                              M.get (| "_10" |)
                            |) in
                          let _ :=
                            M.assign (|
                              ["expr_157_mpos"],
                              M.call (|
                                "allocate_unbounded",
                                [

                                ]
                              |)
                            |) in
                          let _ :=
                            M.assign (|
                              ["_11"],
                              M.call (|
                                "add",
                                [
                                  M.get (| "expr_157_mpos" |);
                                  [Literal.number 0x20]
                                ]
                              |)
                            |) in
                          let _ :=
                            M.assign (|
                              ["_12"],
                              M.call (|
                                "abi_encode_packed_bytes32_bytes32",
                                [
                                  M.get (| "_11" |);
                                  M.get (| "expr_11" |);
                                  M.get (| "expr_13" |)
                                ]
                              |)
                            |) in
                          let _ :=
                            M.call (|
                              "mstore",
                              [
                                M.get (| "expr_157_mpos" |);
                                M.call (|
                                  "sub",
                                  [
                                    M.get (| "_12" |);
                                    M.call (|
                                      "add",
                                      [
                                        M.get (| "expr_157_mpos" |);
                                        [Literal.number 0x20]
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |) in
                          let _ :=
                            M.call (|
                              "finalize_allocation",
                              [
                                M.get (| "expr_157_mpos" |);
                                M.call (|
                                  "sub",
                                  [
                                    M.get (| "_12" |);
                                    M.get (| "expr_157_mpos" |)
                                  ]
                                |)
                              ]
                            |) in
                          let _ :=
                            M.assign (|
                              ["_13"],
                              M.call (|
                                "allocate_unbounded",
                                [

                                ]
                              |)
                            |) in
                          let _ :=
                            M.assign (|
                              ["_14"],
                              M.call (|
                                "abi_encode_packed_bytes",
                                [
                                  M.get (| "_13" |);
                                  M.get (| "expr_157_mpos" |)
                                ]
                              |)
                            |) in
                          let _ :=
                            M.assign (|
                              ["_15"],
                              M.call (|
                                "staticcall",
                                [
                                  M.call (|
                                    "gas",
                                    [

                                    ]
                                  |);
                                  [Literal.number 2];
                                  M.get (| "_13" |);
                                  M.call (|
                                    "sub",
                                    [
                                      M.get (| "_14" |);
                                      M.get (| "_13" |)
                                    ]
                                  |);
                                  [Literal.number 0];
                                  [Literal.number 32]
                                ]
                              |)
                            |) in
                          let _ :=
                            M.if_ (|
                              M.call (|
                                "iszero",
                                [
                                  M.get (| "_15" |)
                                ]
                              |),
                              ltac:(M.monadic (
                                let _ :=
                                  M.call (|
                                    "revert_forward",
                                    [

                                    ]
                                  |) in
                                tt
                              ))
                            |) in
                          let _ :=
                            M.assign (|
                              ["expr_14"],
                              M.call (|
                                "shift_left",
                                [
                                  M.call (|
                                    "mload",
                                    [
                                      [Literal.number 0]
                                    ]
                                  |)
                                ]
                              |)
                            |) in
                          let _ :=
                            M.declare (|
                              ["var_node"],
                              M.get (| "expr_14" |)
                            |) in
                          tt
                        ))                );
                      (
                        None,
                        ltac:(M.monadic (
                          let _ :=
                            M.assign (|
                              ["_slot"],
                              [Literal.number 0x00]
                            |) in
                          let _ :=
                            M.assign (|
                              ["expr_slot"],
                              M.get (| "_slot" |)
                            |) in
                          let _ :=
                            M.assign (|
                              ["_16"],
                              M.get (| "var_height" |)
                            |) in
                          let _ :=
                            M.assign (|
                              ["expr_15"],
                              M.get (| "_16" |)
                            |) in
                          let _ :=
                            M.assign (|
                              ["_17"; "_18"],
                              M.call (|
                                "storage_array_index_access_bytes",
                                [
                                  M.get (| "expr_slot" |);
                                  M.get (| "expr_15" |)
                                ]
                              |)
                            |) in
                          let _ :=
                            M.assign (|
                              ["_19"],
                              M.call (|
                                "read_from_storage_split_dynamic_bytes32",
                                [
                                  M.get (| "_17" |);
                                  M.get (| "_18" |)
                                ]
                              |)
                            |) in
                          let _ :=
                            M.assign (|
                              ["expr_16"],
                              M.get (| "_19" |)
                            |) in
                          let _ :=
                            M.assign (|
                              ["_20"],
                              M.get (| "var_node" |)
                            |) in
                          let _ :=
                            M.assign (|
                              ["expr_17"],
                              M.get (| "_20" |)
                            |) in
                          let _ :=
                            M.assign (|
                              ["expr_145_mpos"],
                              M.call (|
                                "allocate_unbounded",
                                [

                                ]
                              |)
                            |) in
                          let _ :=
                            M.assign (|
                              ["_21"],
                              M.call (|
                                "add",
                                [
                                  M.get (| "expr_145_mpos" |);
                                  [Literal.number 0x20]
                                ]
                              |)
                            |) in
                          let _ :=
                            M.assign (|
                              ["_22"],
                              M.call (|
                                "abi_encode_packed_bytes32_bytes32",
                                [
                                  M.get (| "_21" |);
                                  M.get (| "expr_16" |);
                                  M.get (| "expr_17" |)
                                ]
                              |)
                            |) in
                          let _ :=
                            M.call (|
                              "mstore",
                              [
                                M.get (| "expr_145_mpos" |);
                                M.call (|
                                  "sub",
                                  [
                                    M.get (| "_22" |);
                                    M.call (|
                                      "add",
                                      [
                                        M.get (| "expr_145_mpos" |);
                                        [Literal.number 0x20]
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |) in
                          let _ :=
                            M.call (|
                              "finalize_allocation",
                              [
                                M.get (| "expr_145_mpos" |);
                                M.call (|
                                  "sub",
                                  [
                                    M.get (| "_22" |);
                                    M.get (| "expr_145_mpos" |)
                                  ]
                                |)
                              ]
                            |) in
                          let _ :=
                            M.assign (|
                              ["_23"],
                              M.call (|
                                "allocate_unbounded",
                                [

                                ]
                              |)
                            |) in
                          let _ :=
                            M.assign (|
                              ["_24"],
                              M.call (|
                                "abi_encode_packed_bytes",
                                [
                                  M.get (| "_23" |);
                                  M.get (| "expr_145_mpos" |)
                                ]
                              |)
                            |) in
                          let _ :=
                            M.assign (|
                              ["_25"],
                              M.call (|
                                "staticcall",
                                [
                                  M.call (|
                                    "gas",
                                    [

                                    ]
                                  |);
                                  [Literal.number 2];
                                  M.get (| "_23" |);
                                  M.call (|
                                    "sub",
                                    [
                                      M.get (| "_24" |);
                                      M.get (| "_23" |)
                                    ]
                                  |);
                                  [Literal.number 0];
                                  [Literal.number 32]
                                ]
                              |)
                            |) in
                          let _ :=
                            M.if_ (|
                              M.call (|
                                "iszero",
                                [
                                  M.get (| "_25" |)
                                ]
                              |),
                              ltac:(M.monadic (
                                let _ :=
                                  M.call (|
                                    "revert_forward",
                                    [

                                    ]
                                  |) in
                                tt
                              ))
                            |) in
                          let _ :=
                            M.assign (|
                              ["expr_18"],
                              M.call (|
                                "shift_left",
                                [
                                  M.call (|
                                    "mload",
                                    [
                                      [Literal.number 0]
                                    ]
                                  |)
                                ]
                              |)
                            |) in
                          let _ :=
                            M.declare (|
                              ["var_node"],
                              M.get (| "expr_18" |)
                            |) in
                          tt
                        ))                )              ]
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_19"],
                    [Literal.number 0x02]
                  |) in
                let _ :=
                  M.assign (|
                    ["_26"],
                    M.call (|
                      "convert_rational_2_by_1_to_uint256",
                      [
                        M.get (| "expr_19" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_27"],
                    M.get (| "var_size" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_20"],
                    M.call (|
                      "checked_div_uint256",
                      [
                        M.get (| "_27" |);
                        M.get (| "_26" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["var_size"],
                    M.get (| "expr_20" |)
                  |) in
                tt
              |) in
            let _ :=
              M.assign (|
                ["_28"],
                M.get (| "var_node" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                M.get (| "_28" |)
              |) in
            let _ :=
              M.assign (|
                ["_29"],
                M.call (|
                  "read_from_storage_split_offset_uint256",
                  [
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                M.get (| "_29" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                M.call (|
                  "convert_uint256_to_uint64",
                  [
                    M.get (| "expr_22" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_177_mpos"],
                M.call (|
                  "fun_to_little_endian",
                  [
                    M.get (| "expr_23" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                M.call (|
                  "convert_rational_by_to_bytes24",
                  [
                    M.get (| "expr_24" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_182_mpos"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_30"],
                M.call (|
                  "add",
                  [
                    M.get (| "expr_182_mpos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_31"],
                M.call (|
                  "abi_encode_packed_bytes32_bytes_bytes24",
                  [
                    M.get (| "_30" |);
                    M.get (| "expr_21" |);
                    M.get (| "expr_177_mpos" |);
                    M.get (| "expr_25" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "expr_182_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_31" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "expr_182_mpos" |);
                          [Literal.number 0x20]
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "expr_182_mpos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "_31" |);
                      M.get (| "expr_182_mpos" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_32"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_33"],
                M.call (|
                  "abi_encode_packed_bytes",
                  [
                    M.get (| "_32" |);
                    M.get (| "expr_182_mpos" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_34"],
                M.call (|
                  "staticcall",
                  [
                    M.call (|
                      "gas",
                      [

                      ]
                    |);
                    [Literal.number 2];
                    M.get (| "_32" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_33" |);
                        M.get (| "_32" |)
                      ]
                    |);
                    [Literal.number 0];
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "_34" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_forward",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                M.call (|
                  "shift_left",
                  [
                    M.call (|
                      "mload",
                      [
                        [Literal.number 0]
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_26" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_8_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_8_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_8_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory",
          ["size"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_unbounded",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "memPtr" |);
                  M.get (| "size" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_bytes",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "round_up_to_mul_of",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "add",
                  [
                    M.get (| "size" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory_array_bytes",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["allocSize"],
                M.call (|
                  "array_allocation_size_bytes",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory",
                  [
                    M.get (| "allocSize" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "memPtr" |);
                  M.get (| "length" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_memory_chunk_bytes1",
          ["dataStart"; "dataSizeInBytes"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "calldatacopy",
                [
                  M.get (| "dataStart" |);
                  M.call (|
                    "calldatasize",
                    [

                    ]
                  |);
                  M.get (| "dataSizeInBytes" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_and_zero_memory_array_bytes",
          ["length"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_memory_array_bytes",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["dataStart"],
                M.get (| "memPtr" |)
              |) in
            let _ :=
              M.assign (|
                ["dataSize"],
                M.call (|
                  "array_allocation_size_bytes",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["dataStart"],
                M.call (|
                  "add",
                  [
                    M.get (| "dataStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["dataSize"],
                M.call (|
                  "sub",
                  [
                    M.get (| "dataSize" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "zero_memory_chunk_bytes1",
                [
                  M.get (| "dataStart" |);
                  M.get (| "dataSize" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bytes8",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "shl",
                      [
                        [Literal.number 192];
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_192",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 192];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint64_to_bytes8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_bytes8",
                  [
                    M.call (|
                      "shift_left_192",
                      [
                        M.call (|
                          "cleanup_uint64",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_7_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left_248",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 248];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "memory_array_index_access_bytes",
          ["baseRef"; "index"],
          ["addr"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "index" |);
                        M.call (|
                          "array_length_bytes",
                          [
                            M.get (| "baseRef" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                M.call (|
                  "mul",
                  [
                    M.get (| "index" |);
                    [Literal.number 1]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["offset"],
                M.call (|
                  "add",
                  [
                    M.get (| "offset" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["addr"],
                M.call (|
                  "add",
                  [
                    M.get (| "baseRef" |);
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_6_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_6_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_5_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_5_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_5_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_4_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_3_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_3_by_1_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_3_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_to_little_endian",
          ["var_value"],
          ["var_ret_mpos"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bytes_memory_ptr_mpos"],
                M.call (|
                  "zero_value_for_split_bytes",
                  [

                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_ret_mpos"],
                M.get (| "zero_bytes_memory_ptr_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                [Literal.number 0x08]
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                M.call (|
                  "convert_rational_8_by_1_to_uint256",
                  [
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_465_mpos"],
                M.call (|
                  "allocate_and_zero_memory_array_bytes",
                  [
                    M.get (| "_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["var_ret_mpos"],
                M.get (| "expr_465_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                M.get (| "var_value" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                M.get (| "_2" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                M.call (|
                  "convert_uint64_to_bytes8",
                  [
                    M.get (| "expr_1" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["var_bytesValue"],
                M.get (| "expr_2" |)
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                M.get (| "var_bytesValue" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                M.get (| "_3" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                [Literal.number 0x07]
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                M.call (|
                  "convert_rational_7_by_1_to_uint256",
                  [
                    M.get (| "expr_4" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "_4" |);
                        [Literal.number 8]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                M.call (|
                  "shift_left_248",
                  [
                    M.call (|
                      "byte",
                      [
                        M.get (| "_4" |);
                        M.get (| "expr_3" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_140_mpos"],
                M.get (| "var_ret_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_475_mpos"],
                M.get (| "_140_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                M.get (| "expr_5" |)
              |) in
            let _ :=
              M.call (|
                "mstore8",
                [
                  M.call (|
                    "memory_array_index_access_bytes",
                    [
                      M.get (| "expr_475_mpos" |);
                      M.call (|
                        "convert_rational_0_by_1_to_uint256",
                        [
                          M.get (| "expr_6" |)
                        ]
                      |)
                    ]
                  |);
                  M.call (|
                    "byte",
                    [
                      [Literal.number 0];
                      M.get (| "_5" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                M.get (| "var_bytesValue" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                M.get (| "_6" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                [Literal.number 0x06]
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                M.call (|
                  "convert_t_rational_by_to_t_uint256",
                  [
                    M.get (| "expr_8" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "_7" |);
                        [Literal.number 8]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                M.call (|
                  "shift_left_248",
                  [
                    M.call (|
                      "byte",
                      [
                        M.get (| "_7" |);
                        M.get (| "expr_7" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_144_mpos"],
                M.get (| "var_ret_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_483_mpos"],
                M.get (| "_144_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                M.get (| "expr_9" |)
              |) in
            let _ :=
              M.call (|
                "mstore8",
                [
                  M.call (|
                    "memory_array_index_access_bytes",
                    [
                      M.get (| "expr_483_mpos" |);
                      M.call (|
                        "convert_rational_1_by_1_to_uint256",
                        [
                          M.get (| "expr_10" |)
                        ]
                      |)
                    ]
                  |);
                  M.call (|
                    "byte",
                    [
                      [Literal.number 0];
                      M.get (| "_8" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                M.get (| "var_bytesValue" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                M.get (| "_9" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                [Literal.number 0x05]
              |) in
            let _ :=
              M.assign (|
                ["_10"],
                M.call (|
                  "convert_rational_5_by_1_to_uint256",
                  [
                    M.get (| "expr_12" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "_10" |);
                        [Literal.number 8]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                M.call (|
                  "shift_left_248",
                  [
                    M.call (|
                      "byte",
                      [
                        M.get (| "_10" |);
                        M.get (| "expr_11" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_148_mpos"],
                M.get (| "var_ret_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_491_mpos"],
                M.get (| "_148_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_11"],
                M.get (| "expr_13" |)
              |) in
            let _ :=
              M.call (|
                "mstore8",
                [
                  M.call (|
                    "memory_array_index_access_bytes",
                    [
                      M.get (| "expr_491_mpos" |);
                      M.call (|
                        "convert_rational_2_by_1_to_uint256",
                        [
                          M.get (| "expr_14" |)
                        ]
                      |)
                    ]
                  |);
                  M.call (|
                    "byte",
                    [
                      [Literal.number 0];
                      M.get (| "_11" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_12"],
                M.get (| "var_bytesValue" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                M.get (| "_12" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                [Literal.number 0x04]
              |) in
            let _ :=
              M.assign (|
                ["_13"],
                M.call (|
                  "convert_rational_4_by_1_to_uint256",
                  [
                    M.get (| "expr_16" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "_13" |);
                        [Literal.number 8]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                M.call (|
                  "shift_left_248",
                  [
                    M.call (|
                      "byte",
                      [
                        M.get (| "_13" |);
                        M.get (| "expr_15" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_152_mpos"],
                M.get (| "var_ret_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_499_mpos"],
                M.get (| "_152_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["_14"],
                M.get (| "expr_17" |)
              |) in
            let _ :=
              M.call (|
                "mstore8",
                [
                  M.call (|
                    "memory_array_index_access_bytes",
                    [
                      M.get (| "expr_499_mpos" |);
                      M.call (|
                        "convert_rational_3_by_1_to_uint256",
                        [
                          M.get (| "expr_18" |)
                        ]
                      |)
                    ]
                  |);
                  M.call (|
                    "byte",
                    [
                      [Literal.number 0];
                      M.get (| "_14" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_15"],
                M.get (| "var_bytesValue" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                M.get (| "_15" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                [Literal.number 0x03]
              |) in
            let _ :=
              M.assign (|
                ["_16"],
                M.call (|
                  "convert_rational_3_by_1_to_uint256",
                  [
                    M.get (| "expr_20" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "_16" |);
                        [Literal.number 8]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                M.call (|
                  "shift_left_248",
                  [
                    M.call (|
                      "byte",
                      [
                        M.get (| "_16" |);
                        M.get (| "expr_19" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_mpos"],
                M.get (| "var_ret_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_507_mpos"],
                M.get (| "_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                [Literal.number 0x04]
              |) in
            let _ :=
              M.assign (|
                ["_17"],
                M.get (| "expr_21" |)
              |) in
            let _ :=
              M.call (|
                "mstore8",
                [
                  M.call (|
                    "memory_array_index_access_bytes",
                    [
                      M.get (| "expr_507_mpos" |);
                      M.call (|
                        "convert_rational_4_by_1_to_uint256",
                        [
                          M.get (| "expr_22" |)
                        ]
                      |)
                    ]
                  |);
                  M.call (|
                    "byte",
                    [
                      [Literal.number 0];
                      M.get (| "_17" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_18"],
                M.get (| "var_bytesValue" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                M.get (| "_18" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                [Literal.number 0x02]
              |) in
            let _ :=
              M.assign (|
                ["_19"],
                M.call (|
                  "convert_rational_2_by_1_to_uint256",
                  [
                    M.get (| "expr_24" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "_19" |);
                        [Literal.number 8]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                M.call (|
                  "shift_left_248",
                  [
                    M.call (|
                      "byte",
                      [
                        M.get (| "_19" |);
                        M.get (| "expr_23" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_160_mpos"],
                M.get (| "var_ret_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_515_mpos"],
                M.get (| "_160_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                [Literal.number 0x05]
              |) in
            let _ :=
              M.assign (|
                ["_20"],
                M.get (| "expr_25" |)
              |) in
            let _ :=
              M.call (|
                "mstore8",
                [
                  M.call (|
                    "memory_array_index_access_bytes",
                    [
                      M.get (| "expr_515_mpos" |);
                      M.call (|
                        "convert_rational_5_by_1_to_uint256",
                        [
                          M.get (| "expr_26" |)
                        ]
                      |)
                    ]
                  |);
                  M.call (|
                    "byte",
                    [
                      [Literal.number 0];
                      M.get (| "_20" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_21"],
                M.get (| "var_bytesValue" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                M.get (| "_21" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                [Literal.number 0x01]
              |) in
            let _ :=
              M.assign (|
                ["_22"],
                M.call (|
                  "convert_rational_1_by_1_to_uint256",
                  [
                    M.get (| "expr_28" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "_22" |);
                        [Literal.number 8]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                M.call (|
                  "shift_left_248",
                  [
                    M.call (|
                      "byte",
                      [
                        M.get (| "_22" |);
                        M.get (| "expr_27" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_164_mpos"],
                M.get (| "var_ret_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_523_mpos"],
                M.get (| "_164_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                [Literal.number 0x06]
              |) in
            let _ :=
              M.assign (|
                ["_23"],
                M.get (| "expr_29" |)
              |) in
            let _ :=
              M.call (|
                "mstore8",
                [
                  M.call (|
                    "memory_array_index_access_bytes",
                    [
                      M.get (| "expr_523_mpos" |);
                      M.call (|
                        "convert_t_rational_by_to_t_uint256",
                        [
                          M.get (| "expr_30" |)
                        ]
                      |)
                    ]
                  |);
                  M.call (|
                    "byte",
                    [
                      [Literal.number 0];
                      M.get (| "_23" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_24"],
                M.get (| "var_bytesValue" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                M.get (| "_24" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                [Literal.number 0x00]
              |) in
            let _ :=
              M.assign (|
                ["_25"],
                M.call (|
                  "convert_rational_0_by_1_to_uint256",
                  [
                    M.get (| "expr_32" |)
                  ]
                |)
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.get (| "_25" |);
                        [Literal.number 8]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x32",
                      [

                      ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_33"],
                M.call (|
                  "shift_left_248",
                  [
                    M.call (|
                      "byte",
                      [
                        M.get (| "_25" |);
                        M.get (| "expr_31" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["_168_mpos"],
                M.get (| "var_ret_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_531_mpos"],
                M.get (| "_168_mpos" |)
              |) in
            let _ :=
              M.assign (|
                ["expr_34"],
                [Literal.number 0x07]
              |) in
            let _ :=
              M.assign (|
                ["_26"],
                M.get (| "expr_33" |)
              |) in
            let _ :=
              M.call (|
                "mstore8",
                [
                  M.call (|
                    "memory_array_index_access_bytes",
                    [
                      M.get (| "expr_531_mpos" |);
                      M.call (|
                        "convert_rational_7_by_1_to_uint256",
                        [
                          M.get (| "expr_34" |)
                        ]
                      |)
                    ]
                  |);
                  M.call (|
                    "byte",
                    [
                      [Literal.number 0];
                      M.get (| "_26" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a26469706673582212207dbdfac963fe40d15b5a5cb92ad4ab6bd017b45b1c07f04aa4a82fe85f794a5e64736f6c634300081b0033".
  End DepositContract_541_deployed.
End DepositContract_541.
