(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module D.
  Definition x : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [g] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          M.call (|
            M.get_name (| "g" |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End D.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "d" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 27
src: 193:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 26
src: 193:1:0
nodeType: IdentifierPath
name: D
nameLocations: [193:1:0, ]
referencedDeclaration: 18

referencedDeclaration: 18
typeDescriptions: typeString contract DtypeIdentifier st_contract$_D_$18

,
            [
              M.member_access (|
                M.get_name (| "this" |),
                "sixteen"
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "r" |),
          M.call (|
            M.member_access (|
              M.get_name (| "d" |),
              "x"
            |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition sixteen (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Integer 16
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
