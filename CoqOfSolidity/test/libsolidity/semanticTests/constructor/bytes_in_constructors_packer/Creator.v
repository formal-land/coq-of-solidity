(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module Creator_96.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            []
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                []
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          Some (M.call (|
            "allocate_unbounded",
            []
          |))
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "43726561746f725f39365f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "43726561746f725f39365f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "43726561746f725f39365f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module Creator_96_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      []
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  Some (M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0xcdc9dc79),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_f",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            []
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_uint256",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_uint256",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_uint256",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_uint256",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "round_up_to_mul_of",
          ["value"],
          ["result"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["result"],
                M.call (|
                  "and",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "value" |);
                        [Literal.number 31]
                      ]
                    |);
                    M.call (|
                      "not",
                      [
                        [Literal.number 31]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "panic_error_0x41",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 0];
                  M.call (|
                    "shl",
                    [
                      [Literal.number 224];
                      [Literal.number 0x4e487b71]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 4];
                  [Literal.number 0x41]
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0x24]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "finalize_allocation",
          ["memPtr"; "size"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["newFreePtr"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "memPtr" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "size" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "newFreePtr" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "newFreePtr" |);
                        M.get (| "memPtr" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 64];
                  M.get (| "newFreePtr" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_memory",
          ["size"],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "allocate_unbounded",
                  []
                |)
              |) in
            let _ :=
              M.call (|
                "finalize_allocation",
                [
                  M.get (| "memPtr" |);
                  M.get (| "size" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_allocation_size_bytes",
          ["length"],
          ["size"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "length" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "round_up_to_mul_of",
                  [
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.declare (|
                ["size"],
                M.call (|
                  "add",
                  [
                    M.get (| "size" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_calldata_to_memory_with_cleanup",
          ["src"; "dst"; "length"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "calldatacopy",
                [
                  M.get (| "dst" |);
                  M.get (| "src" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "dst" |);
                      M.get (| "length" |)
                    ]
                  |);
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_available_length_bytes",
          ["src"; "length"; "end"],
          ["array"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["array"],
                M.call (|
                  "allocate_memory",
                  [
                    M.call (|
                      "array_allocation_size_bytes",
                      [
                        M.get (| "length" |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "array" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["dst"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "array" |);
                    [Literal.number 0x20]
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "src" |);
                        M.get (| "length" |)
                      ]
                    |);
                    M.get (| "end" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "copy_calldata_to_memory_with_cleanup",
                [
                  M.get (| "src" |);
                  M.get (| "dst" |);
                  M.get (| "length" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_bytes",
          ["offset"; "end"],
          ["array"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "slt",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "offset" |);
                            [Literal.number 0x1f]
                          ]
                        |);
                        M.get (| "end" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.get (| "offset" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["array"],
                M.call (|
                  "abi_decode_available_length_bytes",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "offset" |);
                        [Literal.number 0x20]
                      ]
                    |);
                    M.get (| "length" |);
                    M.get (| "end" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_uint256t_bytes",
          ["headStart"; "dataEnd"],
          ["value0";
      "value1"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 64]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["offset_1"],
                Some (M.call (|
                  "calldataload",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 32]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "gt",
                  [
                    M.get (| "offset_1" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["value1"],
                M.call (|
                  "abi_decode_bytes",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset_1" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_to_uint256",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bytes1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "shl",
                      [
                        [Literal.number 248];
                        [Literal.number 255]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bytes1",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_bytes1",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256_bytes1",
          ["headStart"; "value0"; "value1"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "abi_encode_bytes1",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_f",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["param"; "param_1"],
                Some (M.call (|
                  "abi_decode_uint256t_bytes",
                  [
                    [Literal.number 4];
                    M.call (|
                      "calldatasize",
                      []
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["ret"; "ret_1"],
                Some (M.call (|
                  "fun_f",
                  [
                    M.get (| "param" |);
                    M.get (| "param_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_uint256_bytes1",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |);
                    M.get (| "ret_1" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_uint256",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_bytes1",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_length_bytes",
          ["value"],
          ["length"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["length"],
                M.call (|
                  "mload",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "array_storeLengthForEncoding_bytes",
          ["pos"; "length"],
          ["updated_pos"],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["updated_pos"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    [Literal.number 0x20]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "copy_memory_to_memory_with_cleanup",
          ["src"; "dst"; "length"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mcopy",
                [
                  M.get (| "dst" |);
                  M.get (| "src" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "dst" |);
                      M.get (| "length" |)
                    ]
                  |);
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bytes",
          ["value"; "pos"],
          ["end"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["length"],
                Some (M.call (|
                  "array_length_bytes",
                  [
                    M.get (| "value" |)
                  ]
                |))
              |) in
            let _ :=
              M.declare (|
                ["pos"],
                M.call (|
                  "array_storeLengthForEncoding_bytes",
                  [
                    M.get (| "pos" |);
                    M.get (| "length" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "copy_memory_to_memory_with_cleanup",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "value" |);
                      [Literal.number 0x20]
                    ]
                  |);
                  M.get (| "pos" |);
                  M.get (| "length" |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["end"],
                M.call (|
                  "add",
                  [
                    M.get (| "pos" |);
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "length" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bytes_uint256",
          ["headStart"; "value0"; "value1"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 64]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "tail" |);
                      M.get (| "headStart" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "abi_encode_bytes",
                  [
                    M.get (| "value0" |);
                    M.get (| "tail" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value1" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 32]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_forward",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["pos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.call (|
                "returndatacopy",
                [
                  M.get (| "pos" |);
                  [Literal.number 0];
                  M.call (|
                    "returndatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                "revert",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "returndatasize",
                    []
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint160",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "shl",
                          [
                            [Literal.number 160];
                            [Literal.number 1]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint160_to_uint160",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint160",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_uint160",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_uint160_to_address",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_uint160",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_contract_Main_to_address",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "convert_uint160_to_address",
                  [
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "shift_left",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shl",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_t_uint256_fromMemory",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "mload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_uint256",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_uint256_fromMemory",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_t_uint256_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_tuple",
          ["headStart"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 0]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "validator_revert_bytes1",
          ["value"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "eq",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "cleanup_bytes1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_t_bytes1_fromMemory",
          ["offset"; "end"],
          ["value"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["value"],
                M.call (|
                  "mload",
                  [
                    M.get (| "offset" |)
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "validator_revert_bytes1",
                [
                  M.get (| "value" |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode_bytes1_fromMemory",
          ["headStart"; "dataEnd"],
          ["value0"],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 32]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["offset"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.declare (|
                ["value0"],
                M.call (|
                  "abi_decode_t_bytes1_fromMemory",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        M.get (| "offset" |)
                      ]
                    |);
                    M.get (| "dataEnd" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_uint256",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_uint256_to_uint256",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_f",
          ["var_x"; "var_s_mpos"],
          ["var_r";
      "var_ch"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_uint256"],
                Some (M.call (|
                  "zero_value_for_split_uint256",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_r"],
                M.get (| "zero_uint256" |)
              |) in
            let _ :=
              M.assign (|
                ["zero_bytes1"],
                Some (M.call (|
                  "zero_value_for_split_bytes1",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_ch"],
                M.get (| "zero_bytes1" |)
              |) in
            let _ :=
              M.assign (|
                ["_mpos"],
                Some (M.get (| "var_s_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_mpos"],
                Some (M.get (| "_mpos" |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_x" |))
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.call (|
                  "add",
                  [
                    M.get (| "_2" |);
                    M.call (|
                      "datasize",
                      [
                        [Literal.string "4d61696e5f3630"]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "or",
                  [
                    M.call (|
                      "gt",
                      [
                        M.get (| "_3" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |);
                    M.call (|
                      "lt",
                      [
                        M.get (| "_3" |);
                        M.get (| "_2" |)
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "panic_error_0x41",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "datacopy",
                [
                  M.get (| "_2" |);
                  M.call (|
                    "dataoffset",
                    [
                      [Literal.string "4d61696e5f3630"]
                    ]
                  |);
                  M.call (|
                    "datasize",
                    [
                      [Literal.string "4d61696e5f3630"]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.declare (|
                ["_3"],
                M.call (|
                  "abi_encode_bytes_uint256",
                  [
                    M.get (| "_3" |);
                    M.get (| "expr_mpos" |);
                    M.get (| "expr" |)
                  ]
                |)
              |) in
            let _ :=
              M.assign (|
                ["expr_79_address"],
                Some (M.call (|
                  "create",
                  [
                    [Literal.number 0];
                    M.get (| "_2" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_3" |);
                        M.get (| "_2" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "expr_79_address" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_forward",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["var_c_address"],
                Some (M.get (| "expr_79_address" |))
              |) in
            let _ :=
              M.assign (|
                ["_7_address"],
                Some (M.get (| "var_c_address" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_82_address"],
                Some (M.get (| "_7_address" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_83_address"],
                Some (M.call (|
                  "convert_contract_Main_to_address",
                  [
                    M.get (| "expr_82_address" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_83_functionSelector"],
                Some ([Literal.number 0x5d6d4751])
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "_4" |);
                  M.call (|
                    "shift_left",
                    [
                      M.get (| "expr_83_functionSelector" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.call (|
                  "abi_encode_tuple",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "_4" |);
                        [Literal.number 4]
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.call (|
                  "staticcall",
                  [
                    M.call (|
                      "gas",
                      []
                    |);
                    M.get (| "expr_83_address" |);
                    M.get (| "_4" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_5" |);
                        M.get (| "_4" |)
                      ]
                    |);
                    M.get (| "_4" |);
                    [Literal.number 32]
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "_6" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_forward",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                None
              |) in
            let _ :=
              M.if_ (|
                M.get (| "_6" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_7"],
                      Some ([Literal.number 32])
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "gt",
                        [
                          M.get (| "_7" |);
                          M.call (|
                            "returndatasize",
                            []
                          |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["_7"],
                            M.call (|
                              "returndatasize",
                              []
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "finalize_allocation",
                      [
                        M.get (| "_4" |);
                        M.get (| "_7" |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_1"],
                      M.call (|
                        "abi_decode_uint256_fromMemory",
                        [
                          M.get (| "_4" |);
                          M.call (|
                            "add",
                            [
                              M.get (| "_4" |);
                              M.get (| "_7" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["var_r"],
                M.get (| "expr_1" |)
              |) in
            let _ :=
              M.assign (|
                ["_address"],
                Some (M.get (| "var_c_address" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_88_address"],
                Some (M.get (| "_address" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_address"],
                Some (M.call (|
                  "convert_contract_Main_to_address",
                  [
                    M.get (| "expr_88_address" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_functionSelector"],
                Some ([Literal.number 0x85164c99])
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.get (| "var_x" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.get (| "_8" |))
              |) in
            let _ :=
              M.assign (|
                ["_9"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "_9" |);
                  M.call (|
                    "shift_left",
                    [
                      M.get (| "expr_functionSelector" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["_10"],
                Some (M.call (|
                  "abi_encode_uint256",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "_9" |);
                        [Literal.number 4]
                      ]
                    |);
                    M.get (| "expr_2" |)
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["_11"],
                Some (M.call (|
                  "call",
                  [
                    M.call (|
                      "gas",
                      []
                    |);
                    M.get (| "expr_address" |);
                    [Literal.number 0];
                    M.get (| "_9" |);
                    M.call (|
                      "sub",
                      [
                        M.get (| "_10" |);
                        M.get (| "_9" |)
                      ]
                    |);
                    M.get (| "_9" |);
                    [Literal.number 32]
                  ]
                |))
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "_11" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_forward",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                None
              |) in
            let _ :=
              M.if_ (|
                M.get (| "_11" |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["_12"],
                      Some ([Literal.number 32])
                    |) in
                  let _ :=
                    M.if_ (|
                      M.call (|
                        "gt",
                        [
                          M.get (| "_12" |);
                          M.call (|
                            "returndatasize",
                            []
                          |)
                        ]
                      |),
                      ltac:(M.monadic (
                        let _ :=
                          M.declare (|
                            ["_12"],
                            M.call (|
                              "returndatasize",
                              []
                            |)
                          |) in
                        tt
                      ))
                    |) in
                  let _ :=
                    M.call (|
                      "finalize_allocation",
                      [
                        M.get (| "_9" |);
                        M.get (| "_12" |)
                      ]
                    |) in
                  let _ :=
                    M.declare (|
                      ["expr_3"],
                      M.call (|
                        "abi_decode_bytes1_fromMemory",
                        [
                          M.get (| "_9" |);
                          M.call (|
                            "add",
                            [
                              M.get (| "_9" |);
                              M.get (| "_12" |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.declare (|
                ["var_ch"],
                M.get (| "expr_3" |)
              |) in
            tt
          ))
        |) in
      tt
    )).

    Module Main_60.
      Definition code : M.t unit := ltac:(M.monadic (
        let _ :=
          let _ :=
            M.call (|
              "mstore",
              [
                [Literal.number 64];
                M.call (|
                  "memoryguard",
                  [
                    [Literal.number 0x80]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.if_ (|
              M.call (|
                "callvalue",
                []
              |),
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                    []
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.assign (|
              ["_1"; "_2"],
              Some (M.call (|
                "copy_arguments_for_constructor_object_Main",
                []
              |))
            |) in
          let _ :=
            M.call (|
              "constructor_Main",
              [
                M.get (| "_1" |);
                M.get (| "_2" |)
              ]
            |) in
          let _ :=
            M.assign (|
              ["_3"],
              Some (M.call (|
                "allocate_unbounded",
                []
              |))
            |) in
          let _ :=
            M.call (|
              "codecopy",
              [
                M.get (| "_3" |);
                M.call (|
                  "dataoffset",
                  [
                    [Literal.string "4d61696e5f36305f6465706c6f796564"]
                  ]
                |);
                M.call (|
                  "datasize",
                  [
                    [Literal.string "4d61696e5f36305f6465706c6f796564"]
                  ]
                |)
              ]
            |) in
          let _ :=
            M.call (|
              "return",
              [
                M.get (| "_3" |);
                M.call (|
                  "datasize",
                  [
                    [Literal.string "4d61696e5f36305f6465706c6f796564"]
                  ]
                |)
              ]
            |) in
          tt in
        let _ :=
          M.function (|
            "allocate_unbounded",
            [],
            ["memPtr"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["memPtr"],
                  M.call (|
                    "mload",
                    [
                      [Literal.number 64]
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
            [],
            [],
            ltac:(M.monadic (
              let _ :=
                M.call (|
                  "revert",
                  [
                    [Literal.number 0];
                    [Literal.number 0]
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "round_up_to_mul_of",
            ["value"],
            ["result"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["result"],
                  M.call (|
                    "and",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "value" |);
                          [Literal.number 31]
                        ]
                      |);
                      M.call (|
                        "not",
                        [
                          [Literal.number 31]
                        ]
                      |)
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "panic_error_0x41",
            [],
            [],
            ltac:(M.monadic (
              let _ :=
                M.call (|
                  "mstore",
                  [
                    [Literal.number 0];
                    M.call (|
                      "shl",
                      [
                        [Literal.number 224];
                        [Literal.number 0x4e487b71]
                      ]
                    |)
                  ]
                |) in
              let _ :=
                M.call (|
                  "mstore",
                  [
                    [Literal.number 4];
                    [Literal.number 0x41]
                  ]
                |) in
              let _ :=
                M.call (|
                  "revert",
                  [
                    [Literal.number 0];
                    [Literal.number 0x24]
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "finalize_allocation",
            ["memPtr"; "size"],
            [],
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["newFreePtr"],
                  Some (M.call (|
                    "add",
                    [
                      M.get (| "memPtr" |);
                      M.call (|
                        "round_up_to_mul_of",
                        [
                          M.get (| "size" |)
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.if_ (|
                  M.call (|
                    "or",
                    [
                      M.call (|
                        "gt",
                        [
                          M.get (| "newFreePtr" |);
                          M.call (|
                            "sub",
                            [
                              M.call (|
                                "shl",
                                [
                                  [Literal.number 64];
                                  [Literal.number 1]
                                ]
                              |);
                              [Literal.number 1]
                            ]
                          |)
                        ]
                      |);
                      M.call (|
                        "lt",
                        [
                          M.get (| "newFreePtr" |);
                          M.get (| "memPtr" |)
                        ]
                      |)
                    ]
                  |),
                  ltac:(M.monadic (
                    let _ :=
                      M.call (|
                        "panic_error_0x41",
                        []
                      |) in
                    tt
                  ))
                |) in
              let _ :=
                M.call (|
                  "mstore",
                  [
                    [Literal.number 64];
                    M.get (| "newFreePtr" |)
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "allocate_memory",
            ["size"],
            ["memPtr"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["memPtr"],
                  M.call (|
                    "allocate_unbounded",
                    []
                  |)
                |) in
              let _ :=
                M.call (|
                  "finalize_allocation",
                  [
                    M.get (| "memPtr" |);
                    M.get (| "size" |)
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
            [],
            [],
            ltac:(M.monadic (
              let _ :=
                M.call (|
                  "revert",
                  [
                    [Literal.number 0];
                    [Literal.number 0]
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
            [],
            [],
            ltac:(M.monadic (
              let _ :=
                M.call (|
                  "revert",
                  [
                    [Literal.number 0];
                    [Literal.number 0]
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
            [],
            [],
            ltac:(M.monadic (
              let _ :=
                M.call (|
                  "revert",
                  [
                    [Literal.number 0];
                    [Literal.number 0]
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
            [],
            [],
            ltac:(M.monadic (
              let _ :=
                M.call (|
                  "revert",
                  [
                    [Literal.number 0];
                    [Literal.number 0]
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "array_allocation_size_bytes",
            ["length"],
            ["size"],
            ltac:(M.monadic (
              let _ :=
                M.if_ (|
                  M.call (|
                    "gt",
                    [
                      M.get (| "length" |);
                      M.call (|
                        "sub",
                        [
                          M.call (|
                            "shl",
                            [
                              [Literal.number 64];
                              [Literal.number 1]
                            ]
                          |);
                          [Literal.number 1]
                        ]
                      |)
                    ]
                  |),
                  ltac:(M.monadic (
                    let _ :=
                      M.call (|
                        "panic_error_0x41",
                        []
                      |) in
                    tt
                  ))
                |) in
              let _ :=
                M.declare (|
                  ["size"],
                  M.call (|
                    "round_up_to_mul_of",
                    [
                      M.get (| "length" |)
                    ]
                  |)
                |) in
              let _ :=
                M.declare (|
                  ["size"],
                  M.call (|
                    "add",
                    [
                      M.get (| "size" |);
                      [Literal.number 0x20]
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "copy_memory_to_memory_with_cleanup",
            ["src"; "dst"; "length"],
            [],
            ltac:(M.monadic (
              let _ :=
                M.call (|
                  "mcopy",
                  [
                    M.get (| "dst" |);
                    M.get (| "src" |);
                    M.get (| "length" |)
                  ]
                |) in
              let _ :=
                M.call (|
                  "mstore",
                  [
                    M.call (|
                      "add",
                      [
                        M.get (| "dst" |);
                        M.get (| "length" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "abi_decode_available_length_bytes_fromMemory",
            ["src"; "length"; "end"],
            ["array"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["array"],
                  M.call (|
                    "allocate_memory",
                    [
                      M.call (|
                        "array_allocation_size_bytes",
                        [
                          M.get (| "length" |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.call (|
                  "mstore",
                  [
                    M.get (| "array" |);
                    M.get (| "length" |)
                  ]
                |) in
              let _ :=
                M.assign (|
                  ["dst"],
                  Some (M.call (|
                    "add",
                    [
                      M.get (| "array" |);
                      [Literal.number 0x20]
                    ]
                  |))
                |) in
              let _ :=
                M.if_ (|
                  M.call (|
                    "gt",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "src" |);
                          M.get (| "length" |)
                        ]
                      |);
                      M.get (| "end" |)
                    ]
                  |),
                  ltac:(M.monadic (
                    let _ :=
                      M.call (|
                        "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
                        []
                      |) in
                    tt
                  ))
                |) in
              let _ :=
                M.call (|
                  "copy_memory_to_memory_with_cleanup",
                  [
                    M.get (| "src" |);
                    M.get (| "dst" |);
                    M.get (| "length" |)
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "abi_decode_bytes_fromMemory",
            ["offset"; "end"],
            ["array"],
            ltac:(M.monadic (
              let _ :=
                M.if_ (|
                  M.call (|
                    "iszero",
                    [
                      M.call (|
                        "slt",
                        [
                          M.call (|
                            "add",
                            [
                              M.get (| "offset" |);
                              [Literal.number 0x1f]
                            ]
                          |);
                          M.get (| "end" |)
                        ]
                      |)
                    ]
                  |),
                  ltac:(M.monadic (
                    let _ :=
                      M.call (|
                        "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                        []
                      |) in
                    tt
                  ))
                |) in
              let _ :=
                M.assign (|
                  ["length"],
                  Some (M.call (|
                    "mload",
                    [
                      M.get (| "offset" |)
                    ]
                  |))
                |) in
              let _ :=
                M.declare (|
                  ["array"],
                  M.call (|
                    "abi_decode_available_length_bytes_fromMemory",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "offset" |);
                          [Literal.number 0x20]
                        ]
                      |);
                      M.get (| "length" |);
                      M.get (| "end" |)
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "cleanup_uint256",
            ["value"],
            ["cleaned"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["cleaned"],
                  M.get (| "value" |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "validator_revert_uint256",
            ["value"],
            [],
            ltac:(M.monadic (
              let _ :=
                M.if_ (|
                  M.call (|
                    "iszero",
                    [
                      M.call (|
                        "eq",
                        [
                          M.get (| "value" |);
                          M.call (|
                            "cleanup_uint256",
                            [
                              M.get (| "value" |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |),
                  ltac:(M.monadic (
                    let _ :=
                      M.call (|
                        "revert",
                        [
                          [Literal.number 0];
                          [Literal.number 0]
                        ]
                      |) in
                    tt
                  ))
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "abi_decode_uint256_fromMemory",
            ["offset"; "end"],
            ["value"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["value"],
                  M.call (|
                    "mload",
                    [
                      M.get (| "offset" |)
                    ]
                  |)
                |) in
              let _ :=
                M.call (|
                  "validator_revert_uint256",
                  [
                    M.get (| "value" |)
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "abi_decode_bytest_uint256_fromMemory",
            ["headStart"; "dataEnd"],
            ["value0";
        "value1"],
            ltac:(M.monadic (
              let _ :=
                M.if_ (|
                  M.call (|
                    "slt",
                    [
                      M.call (|
                        "sub",
                        [
                          M.get (| "dataEnd" |);
                          M.get (| "headStart" |)
                        ]
                      |);
                      [Literal.number 64]
                    ]
                  |),
                  ltac:(M.monadic (
                    let _ :=
                      M.call (|
                        "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                        []
                      |) in
                    tt
                  ))
                |) in
              let _ :=
                M.assign (|
                  ["offset"],
                  Some (M.call (|
                    "mload",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "headStart" |);
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.if_ (|
                  M.call (|
                    "gt",
                    [
                      M.get (| "offset" |);
                      M.call (|
                        "sub",
                        [
                          M.call (|
                            "shl",
                            [
                              [Literal.number 64];
                              [Literal.number 1]
                            ]
                          |);
                          [Literal.number 1]
                        ]
                      |)
                    ]
                  |),
                  ltac:(M.monadic (
                    let _ :=
                      M.call (|
                        "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                        []
                      |) in
                    tt
                  ))
                |) in
              let _ :=
                M.declare (|
                  ["value0"],
                  M.call (|
                    "abi_decode_bytes_fromMemory",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "headStart" |);
                          M.get (| "offset" |)
                        ]
                      |);
                      M.get (| "dataEnd" |)
                    ]
                  |)
                |) in
              let _ :=
                M.assign (|
                  ["offset_1"],
                  Some ([Literal.number 32])
                |) in
              let _ :=
                M.declare (|
                  ["value1"],
                  M.call (|
                    "abi_decode_uint256_fromMemory",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "headStart" |);
                          M.get (| "offset_1" |)
                        ]
                      |);
                      M.get (| "dataEnd" |)
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "copy_arguments_for_constructor_object_Main",
            [],
            ["ret_param";
        "ret_param_1"],
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["programSize"],
                  Some (M.call (|
                    "datasize",
                    [
                      [Literal.string "4d61696e5f3630"]
                    ]
                  |))
                |) in
              let _ :=
                M.assign (|
                  ["argSize"],
                  Some (M.call (|
                    "sub",
                    [
                      M.call (|
                        "codesize",
                        []
                      |);
                      M.get (| "programSize" |)
                    ]
                  |))
                |) in
              let _ :=
                M.assign (|
                  ["memoryDataOffset"],
                  Some (M.call (|
                    "allocate_memory",
                    [
                      M.get (| "argSize" |)
                    ]
                  |))
                |) in
              let _ :=
                M.call (|
                  "codecopy",
                  [
                    M.get (| "memoryDataOffset" |);
                    M.get (| "programSize" |);
                    M.get (| "argSize" |)
                  ]
                |) in
              let _ :=
                M.declare (|
                  ["ret_param"; "ret_param_1"],
                  M.call (|
                    "abi_decode_bytest_uint256_fromMemory",
                    [
                      M.get (| "memoryDataOffset" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "memoryDataOffset" |);
                          M.get (| "argSize" |)
                        ]
                      |)
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "constructor_Main",
            ["var_s_37_mpos"; "var_x"],
            [],
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["_1"],
                  Some (M.get (| "var_x" |))
                |) in
              let _ :=
                M.assign (|
                  ["expr"],
                  Some (M.get (| "_1" |))
                |) in
              let _ :=
                M.assign (|
                  ["_2"],
                  Some (M.get (| "expr" |))
                |) in
              let _ :=
                M.assign (|
                  ["_6_mpos"],
                  Some (M.get (| "var_s_37_mpos" |))
                |) in
              let _ :=
                M.assign (|
                  ["expr_mpos"],
                  Some (M.get (| "_6_mpos" |))
                |) in
              let _ :=
                M.assign (|
                  ["expr_45_mpos"],
                  Some (M.call (|
                    "fun_f",
                    [
                      M.get (| "expr_mpos" |)
                    ]
                  |))
                |) in
              let _ :=
                M.assign (|
                  ["_mpos"],
                  Some (M.get (| "expr_45_mpos" |))
                |) in
              let _ :=
                M.call (|
                  "constructor_Base",
                  [
                    M.get (| "_2" |);
                    M.get (| "_mpos" |)
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "shift_left",
            ["value"],
            ["newValue"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["newValue"],
                  M.call (|
                    "shl",
                    [
                      [Literal.number 0];
                      M.get (| "value" |)
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "update_byte_slice_shift",
            ["value"; "toInsert"],
            ["result"],
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["mask"],
                  Some (M.call (|
                    "not",
                    [
                      [Literal.number 0]
                    ]
                  |))
                |) in
              let _ :=
                M.declare (|
                  ["toInsert"],
                  M.call (|
                    "shift_left",
                    [
                      M.get (| "toInsert" |)
                    ]
                  |)
                |) in
              let _ :=
                M.declare (|
                  ["value"],
                  M.call (|
                    "and",
                    [
                      M.get (| "value" |);
                      M.call (|
                        "not",
                        [
                          M.get (| "mask" |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.declare (|
                  ["result"],
                  M.call (|
                    "or",
                    [
                      M.get (| "value" |);
                      M.call (|
                        "and",
                        [
                          M.get (| "toInsert" |);
                          M.get (| "mask" |)
                        ]
                      |)
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "identity",
            ["value"],
            ["ret"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["ret"],
                  M.get (| "value" |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "convert_uint256_to_uint256",
            ["value"],
            ["converted"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["converted"],
                  M.call (|
                    "cleanup_uint256",
                    [
                      M.call (|
                        "identity",
                        [
                          M.call (|
                            "cleanup_uint256",
                            [
                              M.get (| "value" |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "prepare_store_uint256",
            ["value"],
            ["ret"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["ret"],
                  M.get (| "value" |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "update_storage_value_offsett_uint256_to_uint256",
            ["slot"; "value"],
            [],
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["convertedValue"],
                  Some (M.call (|
                    "convert_uint256_to_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |))
                |) in
              let _ :=
                M.call (|
                  "sstore",
                  [
                    M.get (| "slot" |);
                    M.call (|
                      "update_byte_slice_shift",
                      [
                        M.call (|
                          "sload",
                          [
                            M.get (| "slot" |)
                          ]
                        |);
                        M.call (|
                          "prepare_store_uint256",
                          [
                            M.get (| "convertedValue" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "array_length_bytes",
            ["value"],
            ["length"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["length"],
                  M.call (|
                    "mload",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "panic_error_0x22",
            [],
            [],
            ltac:(M.monadic (
              let _ :=
                M.call (|
                  "mstore",
                  [
                    [Literal.number 0];
                    M.call (|
                      "shl",
                      [
                        [Literal.number 224];
                        [Literal.number 0x4e487b71]
                      ]
                    |)
                  ]
                |) in
              let _ :=
                M.call (|
                  "mstore",
                  [
                    [Literal.number 4];
                    [Literal.number 0x22]
                  ]
                |) in
              let _ :=
                M.call (|
                  "revert",
                  [
                    [Literal.number 0];
                    [Literal.number 0x24]
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "extract_byte_array_length",
            ["data"],
            ["length"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["length"],
                  M.call (|
                    "div",
                    [
                      M.get (| "data" |);
                      [Literal.number 2]
                    ]
                  |)
                |) in
              let _ :=
                M.assign (|
                  ["outOfPlaceEncoding"],
                  Some (M.call (|
                    "and",
                    [
                      M.get (| "data" |);
                      [Literal.number 1]
                    ]
                  |))
                |) in
              let _ :=
                M.if_ (|
                  M.call (|
                    "iszero",
                    [
                      M.get (| "outOfPlaceEncoding" |)
                    ]
                  |),
                  ltac:(M.monadic (
                    let _ :=
                      M.declare (|
                        ["length"],
                        M.call (|
                          "and",
                          [
                            M.get (| "length" |);
                            [Literal.number 0x7f]
                          ]
                        |)
                      |) in
                    tt
                  ))
                |) in
              let _ :=
                M.if_ (|
                  M.call (|
                    "eq",
                    [
                      M.get (| "outOfPlaceEncoding" |);
                      M.call (|
                        "lt",
                        [
                          M.get (| "length" |);
                          [Literal.number 32]
                        ]
                      |)
                    ]
                  |),
                  ltac:(M.monadic (
                    let _ :=
                      M.call (|
                        "panic_error_0x22",
                        []
                      |) in
                    tt
                  ))
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "array_dataslot_bytes_storage",
            ["ptr"],
            ["data"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["data"],
                  M.get (| "ptr" |)
                |) in
              let _ :=
                M.call (|
                  "mstore",
                  [
                    [Literal.number 0];
                    M.get (| "ptr" |)
                  ]
                |) in
              let _ :=
                M.declare (|
                  ["data"],
                  M.call (|
                    "keccak256",
                    [
                      [Literal.number 0];
                      [Literal.number 0x20]
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "divide_by_ceil",
            ["value"],
            ["result"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["result"],
                  M.call (|
                    "div",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "value" |);
                          [Literal.number 31]
                        ]
                      |);
                      [Literal.number 32]
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "shift_left_dynamic",
            ["bits"; "value"],
            ["newValue"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["newValue"],
                  M.call (|
                    "shl",
                    [
                      M.get (| "bits" |);
                      M.get (| "value" |)
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "update_byte_slice_dynamic32",
            ["value"; "shiftBytes"; "toInsert"],
            ["result"],
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["shiftBits"],
                  Some (M.call (|
                    "mul",
                    [
                      M.get (| "shiftBytes" |);
                      [Literal.number 8]
                    ]
                  |))
                |) in
              let _ :=
                M.assign (|
                  ["mask"],
                  Some (M.call (|
                    "shift_left_dynamic",
                    [
                      M.get (| "shiftBits" |);
                      M.call (|
                        "not",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.declare (|
                  ["toInsert"],
                  M.call (|
                    "shift_left_dynamic",
                    [
                      M.get (| "shiftBits" |);
                      M.get (| "toInsert" |)
                    ]
                  |)
                |) in
              let _ :=
                M.declare (|
                  ["value"],
                  M.call (|
                    "and",
                    [
                      M.get (| "value" |);
                      M.call (|
                        "not",
                        [
                          M.get (| "mask" |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.declare (|
                  ["result"],
                  M.call (|
                    "or",
                    [
                      M.get (| "value" |);
                      M.call (|
                        "and",
                        [
                          M.get (| "toInsert" |);
                          M.get (| "mask" |)
                        ]
                      |)
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "update_storage_value_uint256_to_uint256",
            ["slot"; "offset"; "value"],
            [],
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["convertedValue"],
                  Some (M.call (|
                    "convert_uint256_to_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |))
                |) in
              let _ :=
                M.call (|
                  "sstore",
                  [
                    M.get (| "slot" |);
                    M.call (|
                      "update_byte_slice_dynamic32",
                      [
                        M.call (|
                          "sload",
                          [
                            M.get (| "slot" |)
                          ]
                        |);
                        M.get (| "offset" |);
                        M.call (|
                          "prepare_store_uint256",
                          [
                            M.get (| "convertedValue" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "zero_value_for_split_uint256",
            [],
            ["ret"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["ret"],
                  [Literal.number 0]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "storage_set_to_zero_uint256",
            ["slot"; "offset"],
            [],
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["zero"],
                  Some (M.call (|
                    "zero_value_for_split_uint256",
                    []
                  |))
                |) in
              let _ :=
                M.call (|
                  "update_storage_value_uint256_to_uint256",
                  [
                    M.get (| "slot" |);
                    M.get (| "offset" |);
                    M.get (| "zero" |)
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "clear_storage_range_bytes1",
            ["start"; "end"],
            [],
            ltac:(M.monadic (
              let _ :=
                let _ :=
                  tt in
                M.for_ (|
                  M.call (|
                    "lt",
                    [
                      M.get (| "start" |);
                      M.get (| "end" |)
                    ]
                  |),
                  ltac:(M.monadic (
                    let _ :=
                      M.declare (|
                        ["start"],
                        M.call (|
                          "add",
                          [
                            M.get (| "start" |);
                            [Literal.number 1]
                          ]
                        |)
                      |) in
                    tt
                  )),
                  ltac:(M.monadic (
                    let _ :=
                      M.call (|
                        "storage_set_to_zero_uint256",
                        [
                          M.get (| "start" |);
                          [Literal.number 0]
                        ]
                      |) in
                    tt
                  ))
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "clean_up_bytearray_end_slots_bytes_storage",
            ["array"; "len"; "startIndex"],
            [],
            ltac:(M.monadic (
              let _ :=
                M.if_ (|
                  M.call (|
                    "gt",
                    [
                      M.get (| "len" |);
                      [Literal.number 31]
                    ]
                  |),
                  ltac:(M.monadic (
                    let _ :=
                      M.assign (|
                        ["dataArea"],
                        Some (M.call (|
                          "array_dataslot_bytes_storage",
                          [
                            M.get (| "array" |)
                          ]
                        |))
                      |) in
                    let _ :=
                      M.assign (|
                        ["deleteStart"],
                        Some (M.call (|
                          "add",
                          [
                            M.get (| "dataArea" |);
                            M.call (|
                              "divide_by_ceil",
                              [
                                M.get (| "startIndex" |)
                              ]
                            |)
                          ]
                        |))
                      |) in
                    let _ :=
                      M.if_ (|
                        M.call (|
                          "lt",
                          [
                            M.get (| "startIndex" |);
                            [Literal.number 32]
                          ]
                        |),
                        ltac:(M.monadic (
                          let _ :=
                            M.declare (|
                              ["deleteStart"],
                              M.get (| "dataArea" |)
                            |) in
                          tt
                        ))
                      |) in
                    let _ :=
                      M.call (|
                        "clear_storage_range_bytes1",
                        [
                          M.get (| "deleteStart" |);
                          M.call (|
                            "add",
                            [
                              M.get (| "dataArea" |);
                              M.call (|
                                "divide_by_ceil",
                                [
                                  M.get (| "len" |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |) in
                    tt
                  ))
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "shift_right_unsigned_dynamic",
            ["bits"; "value"],
            ["newValue"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["newValue"],
                  M.call (|
                    "shr",
                    [
                      M.get (| "bits" |);
                      M.get (| "value" |)
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "mask_bytes_dynamic",
            ["data"; "bytes"],
            ["result"],
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["mask"],
                  Some (M.call (|
                    "not",
                    [
                      M.call (|
                        "shift_right_unsigned_dynamic",
                        [
                          M.call (|
                            "mul",
                            [
                              [Literal.number 8];
                              M.get (| "bytes" |)
                            ]
                          |);
                          M.call (|
                            "not",
                            [
                              [Literal.number 0]
                            ]
                          |)
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.declare (|
                  ["result"],
                  M.call (|
                    "and",
                    [
                      M.get (| "data" |);
                      M.get (| "mask" |)
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "extract_used_part_and_set_length_of_short_byte_array",
            ["data"; "len"],
            ["used"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["data"],
                  M.call (|
                    "mask_bytes_dynamic",
                    [
                      M.get (| "data" |);
                      M.get (| "len" |)
                    ]
                  |)
                |) in
              let _ :=
                M.declare (|
                  ["used"],
                  M.call (|
                    "or",
                    [
                      M.get (| "data" |);
                      M.call (|
                        "mul",
                        [
                          [Literal.number 2];
                          M.get (| "len" |)
                        ]
                      |)
                    ]
                  |)
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "copy_byte_array_to_storage_from_bytes_to_bytes",
            ["slot"; "src"],
            [],
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["newLen"],
                  Some (M.call (|
                    "array_length_bytes",
                    [
                      M.get (| "src" |)
                    ]
                  |))
                |) in
              let _ :=
                M.if_ (|
                  M.call (|
                    "gt",
                    [
                      M.get (| "newLen" |);
                      M.call (|
                        "sub",
                        [
                          M.call (|
                            "shl",
                            [
                              [Literal.number 64];
                              [Literal.number 1]
                            ]
                          |);
                          [Literal.number 1]
                        ]
                      |)
                    ]
                  |),
                  ltac:(M.monadic (
                    let _ :=
                      M.call (|
                        "panic_error_0x41",
                        []
                      |) in
                    tt
                  ))
                |) in
              let _ :=
                M.assign (|
                  ["oldLen"],
                  Some (M.call (|
                    "extract_byte_array_length",
                    [
                      M.call (|
                        "sload",
                        [
                          M.get (| "slot" |)
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.call (|
                  "clean_up_bytearray_end_slots_bytes_storage",
                  [
                    M.get (| "slot" |);
                    M.get (| "oldLen" |);
                    M.get (| "newLen" |)
                  ]
                |) in
              let _ :=
                M.assign (|
                  ["srcOffset"],
                  Some ([Literal.number 0])
                |) in
              let _ :=
                M.declare (|
                  ["srcOffset"],
                  [Literal.number 0x20]
                |) in
              let _ :=
                M.switch (|
                  M.call (|
                    "gt",
                    [
                      M.get (| "newLen" |);
                      [Literal.number 31]
                    ]
                  |),
                  [
                    (
                      Some (Literal.number 1),
                      ltac:(M.monadic (
                        let _ :=
                          M.assign (|
                            ["loopEnd"],
                            Some (M.call (|
                              "and",
                              [
                                M.get (| "newLen" |);
                                M.call (|
                                  "not",
                                  [
                                    [Literal.number 0x1f]
                                  ]
                                |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["dstPtr"],
                            Some (M.call (|
                              "array_dataslot_bytes_storage",
                              [
                                M.get (| "slot" |)
                              ]
                            |))
                          |) in
                        let _ :=
                          M.assign (|
                            ["i"],
                            Some ([Literal.number 0])
                          |) in
                        let _ :=
                          let _ :=
                            tt in
                          M.for_ (|
                            M.call (|
                              "lt",
                              [
                                M.get (| "i" |);
                                M.get (| "loopEnd" |)
                              ]
                            |),
                            ltac:(M.monadic (
                              let _ :=
                                M.declare (|
                                  ["i"],
                                  M.call (|
                                    "add",
                                    [
                                      M.get (| "i" |);
                                      [Literal.number 0x20]
                                    ]
                                  |)
                                |) in
                              tt
                            )),
                            ltac:(M.monadic (
                              let _ :=
                                M.call (|
                                  "sstore",
                                  [
                                    M.get (| "dstPtr" |);
                                    M.call (|
                                      "mload",
                                      [
                                        M.call (|
                                          "add",
                                          [
                                            M.get (| "src" |);
                                            M.get (| "srcOffset" |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  ]
                                |) in
                              let _ :=
                                M.declare (|
                                  ["dstPtr"],
                                  M.call (|
                                    "add",
                                    [
                                      M.get (| "dstPtr" |);
                                      [Literal.number 1]
                                    ]
                                  |)
                                |) in
                              let _ :=
                                M.declare (|
                                  ["srcOffset"],
                                  M.call (|
                                    "add",
                                    [
                                      M.get (| "srcOffset" |);
                                      [Literal.number 32]
                                    ]
                                  |)
                                |) in
                              tt
                            ))
                          |) in
                        let _ :=
                          M.if_ (|
                            M.call (|
                              "lt",
                              [
                                M.get (| "loopEnd" |);
                                M.get (| "newLen" |)
                              ]
                            |),
                            ltac:(M.monadic (
                              let _ :=
                                M.assign (|
                                  ["lastValue"],
                                  Some (M.call (|
                                    "mload",
                                    [
                                      M.call (|
                                        "add",
                                        [
                                          M.get (| "src" |);
                                          M.get (| "srcOffset" |)
                                        ]
                                      |)
                                    ]
                                  |))
                                |) in
                              let _ :=
                                M.call (|
                                  "sstore",
                                  [
                                    M.get (| "dstPtr" |);
                                    M.call (|
                                      "mask_bytes_dynamic",
                                      [
                                        M.get (| "lastValue" |);
                                        M.call (|
                                          "and",
                                          [
                                            M.get (| "newLen" |);
                                            [Literal.number 0x1f]
                                          ]
                                        |)
                                      ]
                                    |)
                                  ]
                                |) in
                              tt
                            ))
                          |) in
                        let _ :=
                          M.call (|
                            "sstore",
                            [
                              M.get (| "slot" |);
                              M.call (|
                                "add",
                                [
                                  M.call (|
                                    "mul",
                                    [
                                      M.get (| "newLen" |);
                                      [Literal.number 2]
                                    ]
                                  |);
                                  [Literal.number 1]
                                ]
                              |)
                            ]
                          |) in
                        tt
                      ))            );
                    (
                      None,
                      ltac:(M.monadic (
                        let _ :=
                          M.assign (|
                            ["value"],
                            Some ([Literal.number 0])
                          |) in
                        let _ :=
                          M.if_ (|
                            M.get (| "newLen" |),
                            ltac:(M.monadic (
                              let _ :=
                                M.declare (|
                                  ["value"],
                                  M.call (|
                                    "mload",
                                    [
                                      M.call (|
                                        "add",
                                        [
                                          M.get (| "src" |);
                                          M.get (| "srcOffset" |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |) in
                              tt
                            ))
                          |) in
                        let _ :=
                          M.call (|
                            "sstore",
                            [
                              M.get (| "slot" |);
                              M.call (|
                                "extract_used_part_and_set_length_of_short_byte_array",
                                [
                                  M.get (| "value" |);
                                  M.get (| "newLen" |)
                                ]
                              |)
                            ]
                          |) in
                        tt
                      ))            )          ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "update_storage_value_offsett_bytes_to_bytes",
            ["slot"; "value"],
            [],
            ltac:(M.monadic (
              let _ :=
                M.call (|
                  "copy_byte_array_to_storage_from_bytes_to_bytes",
                  [
                    M.get (| "slot" |);
                    M.get (| "value" |)
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "constructor_Base",
            ["var_x"; "var_s_mpos"],
            [],
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["_1"],
                  Some (M.get (| "var_x" |))
                |) in
              let _ :=
                M.assign (|
                  ["expr"],
                  Some (M.get (| "_1" |))
                |) in
              let _ :=
                M.call (|
                  "update_storage_value_offsett_uint256_to_uint256",
                  [
                    [Literal.number 0x00];
                    M.get (| "expr" |)
                  ]
                |) in
              let _ :=
                M.assign (|
                  ["_9_mpos"],
                  Some (M.get (| "var_s_mpos" |))
                |) in
              let _ :=
                M.assign (|
                  ["expr_16_mpos"],
                  Some (M.get (| "_9_mpos" |))
                |) in
              let _ :=
                M.call (|
                  "update_storage_value_offsett_bytes_to_bytes",
                  [
                    [Literal.number 0x01];
                    M.get (| "expr_16_mpos" |)
                  ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "zero_value_for_split_bytes",
            [],
            ["ret"],
            ltac:(M.monadic (
              let _ :=
                M.declare (|
                  ["ret"],
                  [Literal.number 96]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.function (|
            "fun_f",
            ["var_s_51_mpos"],
            ["var_mpos"],
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["zero_bytes_mpos"],
                  Some (M.call (|
                    "zero_value_for_split_bytes",
                    []
                  |))
                |) in
              let _ :=
                M.declare (|
                  ["var_mpos"],
                  M.get (| "zero_bytes_mpos" |)
                |) in
              let _ :=
                M.assign (|
                  ["_12_mpos"],
                  Some (M.get (| "var_s_51_mpos" |))
                |) in
              let _ :=
                M.assign (|
                  ["expr_56_mpos"],
                  Some (M.get (| "_12_mpos" |))
                |) in
              let _ :=
                M.declare (|
                  ["var_mpos"],
                  M.get (| "expr_56_mpos" |)
                |) in
              let _ :=
                M.leave (||) in
              tt
            ))
          |) in
        tt
      )).

      Module Main_60_deployed.
        Definition code : M.t unit := ltac:(M.monadic (
          let _ :=
            let _ :=
              M.call (|
                "mstore",
                [
                  [Literal.number 64];
                  M.call (|
                    "memoryguard",
                    [
                      [Literal.number 0x80]
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "lt",
                      [
                        M.call (|
                          "calldatasize",
                          []
                        |);
                        [Literal.number 4]
                      ]
                    |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.assign (|
                      ["selector"],
                      Some (M.call (|
                        "shift_right_unsigned",
                        [
                          M.call (|
                            "calldataload",
                            [
                              [Literal.number 0]
                            ]
                          |)
                        ]
                      |))
                    |) in
                  let _ :=
                    M.switch (|
                      M.get (| "selector" |),
                      [
                        (
                          Some (Literal.number 0x5d6d4751),
                          ltac:(M.monadic (
                            let _ :=
                              M.call (|
                                "external_fun_m_x",
                                []
                              |) in
                            tt
                          ))              );
                        (
                          Some (Literal.number 0x85164c99),
                          ltac:(M.monadic (
                            let _ :=
                              M.call (|
                                "external_fun_part",
                                []
                              |) in
                            tt
                          ))              );
                        (
                          Some (Literal.number 0xd45754f8),
                          ltac:(M.monadic (
                            let _ :=
                              M.call (|
                                "external_fun_f",
                                []
                              |) in
                            tt
                          ))              );
                        (
                          None,
                          ltac:(M.monadic (
                            tt
                          ))              )            ]
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
                []
              |) in
            tt in
          let _ :=
            M.function (|
              "shift_right_unsigned",
              ["value"],
              ["newValue"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["newValue"],
                    M.call (|
                      "shr",
                      [
                        [Literal.number 224];
                        M.get (| "value" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "allocate_unbounded",
              [],
              ["memPtr"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["memPtr"],
                    M.call (|
                      "mload",
                      [
                        [Literal.number 64]
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
              [],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "revert",
                    [
                      [Literal.number 0];
                      [Literal.number 0]
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
              [],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "revert",
                    [
                      [Literal.number 0];
                      [Literal.number 0]
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "abi_decode",
              ["headStart"; "dataEnd"],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.if_ (|
                    M.call (|
                      "slt",
                      [
                        M.call (|
                          "sub",
                          [
                            M.get (| "dataEnd" |);
                            M.get (| "headStart" |)
                          ]
                        |);
                        [Literal.number 0]
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                          []
                        |) in
                      tt
                    ))
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "shift_right_unsigned_dynamic",
              ["bits"; "value"],
              ["newValue"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["newValue"],
                    M.call (|
                      "shr",
                      [
                        M.get (| "bits" |);
                        M.get (| "value" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "cleanup_from_storage_uint256",
              ["value"],
              ["cleaned"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["cleaned"],
                    M.get (| "value" |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "extract_from_storage_value_dynamict_uint256",
              ["slot_value"; "offset"],
              ["value"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["value"],
                    M.call (|
                      "cleanup_from_storage_uint256",
                      [
                        M.call (|
                          "shift_right_unsigned_dynamic",
                          [
                            M.call (|
                              "mul",
                              [
                                M.get (| "offset" |);
                                [Literal.number 8]
                              ]
                            |);
                            M.get (| "slot_value" |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "read_from_storage_split_dynamic_uint256",
              ["slot"; "offset"],
              ["value"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["value"],
                    M.call (|
                      "extract_from_storage_value_dynamict_uint256",
                      [
                        M.call (|
                          "sload",
                          [
                            M.get (| "slot" |)
                          ]
                        |);
                        M.get (| "offset" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "getter_fun_m_x",
              [],
              ["ret"],
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["slot"],
                    Some ([Literal.number 0])
                  |) in
                let _ :=
                  M.assign (|
                    ["offset"],
                    Some ([Literal.number 0])
                  |) in
                let _ :=
                  M.declare (|
                    ["ret"],
                    M.call (|
                      "read_from_storage_split_dynamic_uint256",
                      [
                        M.get (| "slot" |);
                        M.get (| "offset" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "cleanup_uint256",
              ["value"],
              ["cleaned"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["cleaned"],
                    M.get (| "value" |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "abi_encode_uint256_to_uint256",
              ["value"; "pos"],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.get (| "pos" |);
                      M.call (|
                        "cleanup_uint256",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "abi_encode_uint256",
              ["headStart"; "value0"],
              ["tail"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["tail"],
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 32]
                      ]
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "abi_encode_uint256_to_uint256",
                    [
                      M.get (| "value0" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "headStart" |);
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "external_fun_m_x",
              [],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.if_ (|
                    M.call (|
                      "callvalue",
                      []
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                          []
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.call (|
                    "abi_decode",
                    [
                      [Literal.number 4];
                      M.call (|
                        "calldatasize",
                        []
                      |)
                    ]
                  |) in
                let _ :=
                  M.assign (|
                    ["ret"],
                    Some (M.call (|
                      "getter_fun_m_x",
                      []
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["memPos"],
                    Some (M.call (|
                      "allocate_unbounded",
                      []
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["memEnd"],
                    Some (M.call (|
                      "abi_encode_uint256",
                      [
                        M.get (| "memPos" |);
                        M.get (| "ret" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.call (|
                    "return",
                    [
                      M.get (| "memPos" |);
                      M.call (|
                        "sub",
                        [
                          M.get (| "memEnd" |);
                          M.get (| "memPos" |)
                        ]
                      |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
              [],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "revert",
                    [
                      [Literal.number 0];
                      [Literal.number 0]
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "validator_revert_uint256",
              ["value"],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.call (|
                          "eq",
                          [
                            M.get (| "value" |);
                            M.call (|
                              "cleanup_uint256",
                              [
                                M.get (| "value" |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "revert",
                          [
                            [Literal.number 0];
                            [Literal.number 0]
                          ]
                        |) in
                      tt
                    ))
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "abi_decode_uint256",
              ["offset"; "end"],
              ["value"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["value"],
                    M.call (|
                      "calldataload",
                      [
                        M.get (| "offset" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "validator_revert_uint256",
                    [
                      M.get (| "value" |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "abi_decode_tuple_uint256",
              ["headStart"; "dataEnd"],
              ["value0"],
              ltac:(M.monadic (
                let _ :=
                  M.if_ (|
                    M.call (|
                      "slt",
                      [
                        M.call (|
                          "sub",
                          [
                            M.get (| "dataEnd" |);
                            M.get (| "headStart" |)
                          ]
                        |);
                        [Literal.number 32]
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                          []
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["offset"],
                    Some ([Literal.number 0])
                  |) in
                let _ :=
                  M.declare (|
                    ["value0"],
                    M.call (|
                      "abi_decode_uint256",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "headStart" |);
                            M.get (| "offset" |)
                          ]
                        |);
                        M.get (| "dataEnd" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "cleanup_bytes1",
              ["value"],
              ["cleaned"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["cleaned"],
                    M.call (|
                      "and",
                      [
                        M.get (| "value" |);
                        M.call (|
                          "shl",
                          [
                            [Literal.number 248];
                            [Literal.number 255]
                          ]
                        |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "abi_encode_bytes1_to_bytes1",
              ["value"; "pos"],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.get (| "pos" |);
                      M.call (|
                        "cleanup_bytes1",
                        [
                          M.get (| "value" |)
                        ]
                      |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "abi_encode_bytes1",
              ["headStart"; "value0"],
              ["tail"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["tail"],
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 32]
                      ]
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "abi_encode_bytes1_to_bytes1",
                    [
                      M.get (| "value0" |);
                      M.call (|
                        "add",
                        [
                          M.get (| "headStart" |);
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "external_fun_part",
              [],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.if_ (|
                    M.call (|
                      "callvalue",
                      []
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                          []
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["param"],
                    Some (M.call (|
                      "abi_decode_tuple_uint256",
                      [
                        [Literal.number 4];
                        M.call (|
                          "calldatasize",
                          []
                        |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["ret"],
                    Some (M.call (|
                      "fun_part",
                      [
                        M.get (| "param" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["memPos"],
                    Some (M.call (|
                      "allocate_unbounded",
                      []
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["memEnd"],
                    Some (M.call (|
                      "abi_encode_bytes1",
                      [
                        M.get (| "memPos" |);
                        M.get (| "ret" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.call (|
                    "return",
                    [
                      M.get (| "memPos" |);
                      M.call (|
                        "sub",
                        [
                          M.get (| "memEnd" |);
                          M.get (| "memPos" |)
                        ]
                      |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
              [],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "revert",
                    [
                      [Literal.number 0];
                      [Literal.number 0]
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
              [],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "revert",
                    [
                      [Literal.number 0];
                      [Literal.number 0]
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "round_up_to_mul_of",
              ["value"],
              ["result"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["result"],
                    M.call (|
                      "and",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "value" |);
                            [Literal.number 31]
                          ]
                        |);
                        M.call (|
                          "not",
                          [
                            [Literal.number 31]
                          ]
                        |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "panic_error_0x41",
              [],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      [Literal.number 0];
                      M.call (|
                        "shl",
                        [
                          [Literal.number 224];
                          [Literal.number 0x4e487b71]
                        ]
                      |)
                    ]
                  |) in
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      [Literal.number 4];
                      [Literal.number 0x41]
                    ]
                  |) in
                let _ :=
                  M.call (|
                    "revert",
                    [
                      [Literal.number 0];
                      [Literal.number 0x24]
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "finalize_allocation",
              ["memPtr"; "size"],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["newFreePtr"],
                    Some (M.call (|
                      "add",
                      [
                        M.get (| "memPtr" |);
                        M.call (|
                          "round_up_to_mul_of",
                          [
                            M.get (| "size" |)
                          ]
                        |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "or",
                      [
                        M.call (|
                          "gt",
                          [
                            M.get (| "newFreePtr" |);
                            [Literal.number 0xffffffffffffffff]
                          ]
                        |);
                        M.call (|
                          "lt",
                          [
                            M.get (| "newFreePtr" |);
                            M.get (| "memPtr" |)
                          ]
                        |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "panic_error_0x41",
                          []
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      [Literal.number 64];
                      M.get (| "newFreePtr" |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "allocate_memory",
              ["size"],
              ["memPtr"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["memPtr"],
                    M.call (|
                      "allocate_unbounded",
                      []
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "finalize_allocation",
                    [
                      M.get (| "memPtr" |);
                      M.get (| "size" |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "array_allocation_size_bytes",
              ["length"],
              ["size"],
              ltac:(M.monadic (
                let _ :=
                  M.if_ (|
                    M.call (|
                      "gt",
                      [
                        M.get (| "length" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "panic_error_0x41",
                          []
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.declare (|
                    ["size"],
                    M.call (|
                      "round_up_to_mul_of",
                      [
                        M.get (| "length" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["size"],
                    M.call (|
                      "add",
                      [
                        M.get (| "size" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "copy_calldata_to_memory_with_cleanup",
              ["src"; "dst"; "length"],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "calldatacopy",
                    [
                      M.get (| "dst" |);
                      M.get (| "src" |);
                      M.get (| "length" |)
                    ]
                  |) in
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "dst" |);
                          M.get (| "length" |)
                        ]
                      |);
                      [Literal.number 0]
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "abi_decode_available_length_bytes",
              ["src"; "length"; "end"],
              ["array"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["array"],
                    M.call (|
                      "allocate_memory",
                      [
                        M.call (|
                          "array_allocation_size_bytes",
                          [
                            M.get (| "length" |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.get (| "array" |);
                      M.get (| "length" |)
                    ]
                  |) in
                let _ :=
                  M.assign (|
                    ["dst"],
                    Some (M.call (|
                      "add",
                      [
                        M.get (| "array" |);
                        [Literal.number 0x20]
                      ]
                    |))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "gt",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "src" |);
                            M.get (| "length" |)
                          ]
                        |);
                        M.get (| "end" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
                          []
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.call (|
                    "copy_calldata_to_memory_with_cleanup",
                    [
                      M.get (| "src" |);
                      M.get (| "dst" |);
                      M.get (| "length" |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "abi_decode_bytes_memory_ptr",
              ["offset"; "end"],
              ["array"],
              ltac:(M.monadic (
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.call (|
                          "slt",
                          [
                            M.call (|
                              "add",
                              [
                                M.get (| "offset" |);
                                [Literal.number 0x1f]
                              ]
                            |);
                            M.get (| "end" |)
                          ]
                        |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                          []
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["length"],
                    Some (M.call (|
                      "calldataload",
                      [
                        M.get (| "offset" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.declare (|
                    ["array"],
                    M.call (|
                      "abi_decode_available_length_bytes",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "offset" |);
                            [Literal.number 0x20]
                          ]
                        |);
                        M.get (| "length" |);
                        M.get (| "end" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "abi_decode_bytes",
              ["headStart"; "dataEnd"],
              ["value0"],
              ltac:(M.monadic (
                let _ :=
                  M.if_ (|
                    M.call (|
                      "slt",
                      [
                        M.call (|
                          "sub",
                          [
                            M.get (| "dataEnd" |);
                            M.get (| "headStart" |)
                          ]
                        |);
                        [Literal.number 32]
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                          []
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["offset"],
                    Some (M.call (|
                      "calldataload",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "headStart" |);
                            [Literal.number 0]
                          ]
                        |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "gt",
                      [
                        M.get (| "offset" |);
                        [Literal.number 0xffffffffffffffff]
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                          []
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.declare (|
                    ["value0"],
                    M.call (|
                      "abi_decode_bytes_memory_ptr",
                      [
                        M.call (|
                          "add",
                          [
                            M.get (| "headStart" |);
                            M.get (| "offset" |)
                          ]
                        |);
                        M.get (| "dataEnd" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "array_length_bytes",
              ["value"],
              ["length"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["length"],
                    M.call (|
                      "mload",
                      [
                        M.get (| "value" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "array_storeLengthForEncoding_bytes",
              ["pos"; "length"],
              ["updated_pos"],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.get (| "pos" |);
                      M.get (| "length" |)
                    ]
                  |) in
                let _ :=
                  M.declare (|
                    ["updated_pos"],
                    M.call (|
                      "add",
                      [
                        M.get (| "pos" |);
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "copy_memory_to_memory_with_cleanup",
              ["src"; "dst"; "length"],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "mcopy",
                    [
                      M.get (| "dst" |);
                      M.get (| "src" |);
                      M.get (| "length" |)
                    ]
                  |) in
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "dst" |);
                          M.get (| "length" |)
                        ]
                      |);
                      [Literal.number 0]
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "abi_encode_bytes_memory_ptr",
              ["value"; "pos"],
              ["end"],
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["length"],
                    Some (M.call (|
                      "array_length_bytes",
                      [
                        M.get (| "value" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.declare (|
                    ["pos"],
                    M.call (|
                      "array_storeLengthForEncoding_bytes",
                      [
                        M.get (| "pos" |);
                        M.get (| "length" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "copy_memory_to_memory_with_cleanup",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "value" |);
                          [Literal.number 0x20]
                        ]
                      |);
                      M.get (| "pos" |);
                      M.get (| "length" |)
                    ]
                  |) in
                let _ :=
                  M.declare (|
                    ["end"],
                    M.call (|
                      "add",
                      [
                        M.get (| "pos" |);
                        M.call (|
                          "round_up_to_mul_of",
                          [
                            M.get (| "length" |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "abi_encode_bytes",
              ["headStart"; "value0"],
              ["tail"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["tail"],
                    M.call (|
                      "add",
                      [
                        M.get (| "headStart" |);
                        [Literal.number 32]
                      ]
                    |)
                  |) in
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      M.call (|
                        "add",
                        [
                          M.get (| "headStart" |);
                          [Literal.number 0]
                        ]
                      |);
                      M.call (|
                        "sub",
                        [
                          M.get (| "tail" |);
                          M.get (| "headStart" |)
                        ]
                      |)
                    ]
                  |) in
                let _ :=
                  M.declare (|
                    ["tail"],
                    M.call (|
                      "abi_encode_bytes_memory_ptr",
                      [
                        M.get (| "value0" |);
                        M.get (| "tail" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "external_fun_f",
              [],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.if_ (|
                    M.call (|
                      "callvalue",
                      []
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                          []
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.assign (|
                    ["param"],
                    Some (M.call (|
                      "abi_decode_bytes",
                      [
                        [Literal.number 4];
                        M.call (|
                          "calldatasize",
                          []
                        |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["ret"],
                    Some (M.call (|
                      "fun_f",
                      [
                        M.get (| "param" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["memPos"],
                    Some (M.call (|
                      "allocate_unbounded",
                      []
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["memEnd"],
                    Some (M.call (|
                      "abi_encode_bytes",
                      [
                        M.get (| "memPos" |);
                        M.get (| "ret" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.call (|
                    "return",
                    [
                      M.get (| "memPos" |);
                      M.call (|
                        "sub",
                        [
                          M.get (| "memEnd" |);
                          M.get (| "memPos" |)
                        ]
                      |)
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
              [],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "revert",
                    [
                      [Literal.number 0];
                      [Literal.number 0]
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "zero_value_for_split_bytes1",
              [],
              ["ret"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["ret"],
                    [Literal.number 0]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "panic_error_0x32",
              [],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      [Literal.number 0];
                      M.call (|
                        "shl",
                        [
                          [Literal.number 224];
                          [Literal.number 0x4e487b71]
                        ]
                      |)
                    ]
                  |) in
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      [Literal.number 4];
                      [Literal.number 0x32]
                    ]
                  |) in
                let _ :=
                  M.call (|
                    "revert",
                    [
                      [Literal.number 0];
                      [Literal.number 0x24]
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "panic_error_0x22",
              [],
              [],
              ltac:(M.monadic (
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      [Literal.number 0];
                      M.call (|
                        "shl",
                        [
                          [Literal.number 224];
                          [Literal.number 0x4e487b71]
                        ]
                      |)
                    ]
                  |) in
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      [Literal.number 4];
                      [Literal.number 0x22]
                    ]
                  |) in
                let _ :=
                  M.call (|
                    "revert",
                    [
                      [Literal.number 0];
                      [Literal.number 0x24]
                    ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "extract_byte_array_length",
              ["data"],
              ["length"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["length"],
                    M.call (|
                      "div",
                      [
                        M.get (| "data" |);
                        [Literal.number 2]
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["outOfPlaceEncoding"],
                    Some (M.call (|
                      "and",
                      [
                        M.get (| "data" |);
                        [Literal.number 1]
                      ]
                    |))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.get (| "outOfPlaceEncoding" |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.declare (|
                          ["length"],
                          M.call (|
                            "and",
                            [
                              M.get (| "length" |);
                              [Literal.number 0x7f]
                            ]
                          |)
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "eq",
                      [
                        M.get (| "outOfPlaceEncoding" |);
                        M.call (|
                          "lt",
                          [
                            M.get (| "length" |);
                            [Literal.number 32]
                          ]
                        |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "panic_error_0x22",
                          []
                        |) in
                      tt
                    ))
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "array_length_bytes_storage",
              ["value"],
              ["length"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["length"],
                    M.call (|
                      "sload",
                      [
                        M.get (| "value" |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.declare (|
                    ["length"],
                    M.call (|
                      "extract_byte_array_length",
                      [
                        M.get (| "length" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "array_dataslot_bytes_storage_ptr",
              ["ptr"],
              ["data"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["data"],
                    M.get (| "ptr" |)
                  |) in
                let _ :=
                  M.call (|
                    "mstore",
                    [
                      [Literal.number 0];
                      M.get (| "ptr" |)
                    ]
                  |) in
                let _ :=
                  M.declare (|
                    ["data"],
                    M.call (|
                      "keccak256",
                      [
                        [Literal.number 0];
                        [Literal.number 0x20]
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "long_byte_array_index_access_no_checks",
              ["array"; "index"],
              ["slot";
          "offset"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["offset"],
                    M.call (|
                      "sub",
                      [
                        [Literal.number 31];
                        M.call (|
                          "mod",
                          [
                            M.get (| "index" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.assign (|
                    ["dataArea"],
                    Some (M.call (|
                      "array_dataslot_bytes_storage_ptr",
                      [
                        M.get (| "array" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.declare (|
                    ["slot"],
                    M.call (|
                      "add",
                      [
                        M.get (| "dataArea" |);
                        M.call (|
                          "div",
                          [
                            M.get (| "index" |);
                            [Literal.number 0x20]
                          ]
                        |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "storage_array_index_access_bytes",
              ["array"; "index"],
              ["slot";
          "offset"],
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["arrayLength"],
                    Some (M.call (|
                      "array_length_bytes_storage",
                      [
                        M.get (| "array" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.if_ (|
                    M.call (|
                      "iszero",
                      [
                        M.call (|
                          "lt",
                          [
                            M.get (| "index" |);
                            M.get (| "arrayLength" |)
                          ]
                        |)
                      ]
                    |),
                    ltac:(M.monadic (
                      let _ :=
                        M.call (|
                          "panic_error_0x32",
                          []
                        |) in
                      tt
                    ))
                  |) in
                let _ :=
                  M.switch (|
                    M.call (|
                      "lt",
                      [
                        M.get (| "arrayLength" |);
                        [Literal.number 0x20]
                      ]
                    |),
                    [
                      (
                        Some (Literal.number 0),
                        ltac:(M.monadic (
                          let _ :=
                            M.declare (|
                              ["slot"; "offset"],
                              M.call (|
                                "long_byte_array_index_access_no_checks",
                                [
                                  M.get (| "array" |);
                                  M.get (| "index" |)
                                ]
                              |)
                            |) in
                          tt
                        ))            );
                      (
                        None,
                        ltac:(M.monadic (
                          let _ :=
                            M.declare (|
                              ["offset"],
                              M.call (|
                                "sub",
                                [
                                  [Literal.number 31];
                                  M.call (|
                                    "mod",
                                    [
                                      M.get (| "index" |);
                                      [Literal.number 0x20]
                                    ]
                                  |)
                                ]
                              |)
                            |) in
                          let _ :=
                            M.declare (|
                              ["slot"],
                              M.get (| "array" |)
                            |) in
                          tt
                        ))            )          ]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "shift_left",
              ["value"],
              ["newValue"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["newValue"],
                    M.call (|
                      "shl",
                      [
                        [Literal.number 248];
                        M.get (| "value" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "cleanup_from_storage_bytes1",
              ["value"],
              ["cleaned"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["cleaned"],
                    M.call (|
                      "shift_left",
                      [
                        M.get (| "value" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "extract_from_storage_value_dynamict_bytes1",
              ["slot_value"; "offset"],
              ["value"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["value"],
                    M.call (|
                      "cleanup_from_storage_bytes1",
                      [
                        M.call (|
                          "shift_right_unsigned_dynamic",
                          [
                            M.call (|
                              "mul",
                              [
                                M.get (| "offset" |);
                                [Literal.number 8]
                              ]
                            |);
                            M.get (| "slot_value" |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "read_from_storage_split_dynamic_bytes1",
              ["slot"; "offset"],
              ["value"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["value"],
                    M.call (|
                      "extract_from_storage_value_dynamict_bytes1",
                      [
                        M.call (|
                          "sload",
                          [
                            M.get (| "slot" |)
                          ]
                        |);
                        M.get (| "offset" |)
                      ]
                    |)
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "fun_part",
              ["var_i"],
              ["var"],
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["zero_bytes1"],
                    Some (M.call (|
                      "zero_value_for_split_bytes1",
                      []
                    |))
                  |) in
                let _ :=
                  M.declare (|
                    ["var"],
                    M.get (| "zero_bytes1" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_slot"],
                    Some ([Literal.number 0x01])
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_slot"],
                    Some (M.get (| "_slot" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_1"],
                    Some (M.get (| "var_i" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr"],
                    Some (M.get (| "_1" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_2"; "_3"],
                    Some (M.call (|
                      "storage_array_index_access_bytes",
                      [
                        M.get (| "expr_slot" |);
                        M.get (| "expr" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["_4"],
                    Some (M.call (|
                      "read_from_storage_split_dynamic_bytes1",
                      [
                        M.get (| "_2" |);
                        M.get (| "_3" |)
                      ]
                    |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_1"],
                    Some (M.get (| "_4" |))
                  |) in
                let _ :=
                  M.declare (|
                    ["var"],
                    M.get (| "expr_1" |)
                  |) in
                let _ :=
                  M.leave (||) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "zero_value_for_split_bytes",
              [],
              ["ret"],
              ltac:(M.monadic (
                let _ :=
                  M.declare (|
                    ["ret"],
                    [Literal.number 96]
                  |) in
                tt
              ))
            |) in
          let _ :=
            M.function (|
              "fun_f",
              ["var_s_mpos"],
              ["var_mpos"],
              ltac:(M.monadic (
                let _ :=
                  M.assign (|
                    ["zero_bytes_mpos"],
                    Some (M.call (|
                      "zero_value_for_split_bytes",
                      []
                    |))
                  |) in
                let _ :=
                  M.declare (|
                    ["var_mpos"],
                    M.get (| "zero_bytes_mpos" |)
                  |) in
                let _ :=
                  M.assign (|
                    ["_mpos"],
                    Some (M.get (| "var_s_mpos" |))
                  |) in
                let _ :=
                  M.assign (|
                    ["expr_mpos"],
                    Some (M.get (| "_mpos" |))
                  |) in
                let _ :=
                  M.declare (|
                    ["var_mpos"],
                    M.get (| "expr_mpos" |)
                  |) in
                let _ :=
                  M.leave (||) in
                tt
              ))
            |) in
          tt
        )).

        Definition data : string :=
          "a2646970667358221220a38465c575c205fe1b72787967b8f14edc3d41140ee0d59b0e47f78bdc4b0e7464736f6c634300081b0033".
      End Main_60_deployed.
    End Main_60.

    Definition data : string :=
      "a2646970667358221220454d34d395df0ae4d84a582d9c1113684a4171837820ceb1d2880b704b20ce5b64736f6c634300081b0033".
  End Creator_96_deployed.
End Creator_96.
