(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module A.
  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.call (|
              Ty.path "address",
              [
                M.get_name (| "this" |)
              ]
            |),
            "call"
          |),
          [
            Value.String "123"
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End A.

(* Contract *)
Module B.
  Definition test : Value.t :=
    Value.Integer 1.

  Definition testIt (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "a" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 23
src: 170:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 22
src: 170:1:0
nodeType: IdentifierPath
name: A
nameLocations: [170:1:0, ]
referencedDeclaration: 13

referencedDeclaration: 13
typeDescriptions: typeString contract AtypeIdentifier st_contract$_A_$13

,
            []
          |)
        |) in
      let _ :=
        M.un_op (|
          true,
          "++",
          M.get_name (| "test" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End B.
