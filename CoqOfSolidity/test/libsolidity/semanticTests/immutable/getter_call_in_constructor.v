(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module A.
  Definition x : Value.t :=
    Value.Integer 1.

  Definition y : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "y" |),
          M.call (|
            M.member_access (|
              M.get_name (| "this" |),
              "x"
            |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End A.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        TryStatement M.call (|
          NewExpression (* Beginning of a node! *)
id: 22
src: 185:1:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 21
src: 185:1:0
nodeType: IdentifierPath
name: A
nameLocations: [185:1:0, ]
referencedDeclaration: 16

referencedDeclaration: 16
typeDescriptions: typeString contract AtypeIdentifier st_contract$_A_$16

,
          []
        |) TryCatchClause   let _ :=
          M.return_ (|
            Value.Bool false
          |) in
        Value.Tuple [], TryCatchClause   let _ :=
          M.return_ (|
            Value.Bool true
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
