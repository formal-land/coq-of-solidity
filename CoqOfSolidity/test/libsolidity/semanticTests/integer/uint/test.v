(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module test_1089.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            []
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                []
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          Some (M.call (|
            "allocate_unbounded",
            []
          |))
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "746573745f313038395f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "746573745f313038395f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "746573745f313038395f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module test_1089_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      []
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  Some (M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x07012e56),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_uintMaxD",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x4bd8e706),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_uintMinB",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x5a8a8e44),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_uintMinA",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x5b494c65),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_uintMinC",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x6676d534),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_uintMaxC",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x7e959f9d),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_uintMinD",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x811bdac4),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_uintMaxB",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xe8eba1ef),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_uintMaxA",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            []
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bool",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "iszero",
                      [
                        M.get (| "value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bool_to_bool",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_bool",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bool",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_bool_to_bool",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_uintMaxD",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_uintMaxD",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_uintMinB",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_uintMinB",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_uintMinA",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_uintMinA",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_uintMinC",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_uintMinC",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_uintMaxC",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_uintMaxC",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_uintMinD",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_uintMinD",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_uintMaxB",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_uintMaxB",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_uintMaxA",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_uintMaxA",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_bool",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint200",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "shl",
                          [
                            [Literal.number 200];
                            [Literal.number 1]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_1606938044258990275541962092341162602522202993782792835301375_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint200",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint200",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_1606938044258990275541962092341162602522202993782792835301375_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "require_helper",
          ["condition"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "condition" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint208",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "shl",
                          [
                            [Literal.number 208];
                            [Literal.number 1]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_411376139330301510538742295639337626245683966408394965837152255_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint208",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint208",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_411376139330301510538742295639337626245683966408394965837152255_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint216",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "shl",
                          [
                            [Literal.number 216];
                            [Literal.number 1]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_105312291668557186697918027683670432318895095400549111254310977535_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint216",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint216",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_105312291668557186697918027683670432318895095400549111254310977535_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint224",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "shl",
                          [
                            [Literal.number 224];
                            [Literal.number 1]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_26959946667150639794667015087019630673637144422540572481103610249215_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint224",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint224",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_26959946667150639794667015087019630673637144422540572481103610249215_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint232",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "shl",
                          [
                            [Literal.number 232];
                            [Literal.number 1]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_6901746346790563787434755862277025452451108972170386555162524223799295_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint232",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint232",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_6901746346790563787434755862277025452451108972170386555162524223799295_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint240",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "shl",
                          [
                            [Literal.number 240];
                            [Literal.number 1]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_1766847064778384329583297500742918515827483896875618958121606201292619775_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint240",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint240",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_1766847064778384329583297500742918515827483896875618958121606201292619775_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint248",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "shl",
                          [
                            [Literal.number 248];
                            [Literal.number 1]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_452312848583266388373324160190187140051835877600158453279131187530910662655_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint248",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint248",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_452312848583266388373324160190187140051835877600158453279131187530910662655_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_115792089237316195423570985008687907853269984665640564039457584007913129639935_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_115792089237316195423570985008687907853269984665640564039457584007913129639935_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_uintMaxD",
          [],
          ["var_"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 200];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_uint200_max"],
                Some (M.get (| "expr" |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_uint200_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 200];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint200",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint200",
                      [
                        M.get (| "expr_2" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_3" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 208];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_uint208_max"],
                Some (M.get (| "expr_4" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_uint208_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 208];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint208",
                      [
                        M.get (| "expr_5" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint208",
                      [
                        M.get (| "expr_6" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_7" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 216];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_uint216_max"],
                Some (M.get (| "expr_8" |))
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.get (| "var_uint216_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.get (| "_3" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 216];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint216",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint216",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 224];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_uint224_max"],
                Some (M.get (| "expr_12" |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.get (| "var_uint224_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some (M.get (| "_4" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 224];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint224",
                      [
                        M.get (| "expr_13" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint224",
                      [
                        M.get (| "expr_14" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_15" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 232];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_uint232_max"],
                Some (M.get (| "expr_16" |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.get (| "var_uint232_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 232];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint232",
                      [
                        M.get (| "expr_17" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint232",
                      [
                        M.get (| "expr_18" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_19" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 240];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_uint240_max"],
                Some (M.get (| "expr_20" |))
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.get (| "var_uint240_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                Some (M.get (| "_6" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 240];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint240",
                      [
                        M.get (| "expr_21" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint240",
                      [
                        M.get (| "expr_22" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_23" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 248];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_uint248_max"],
                Some (M.get (| "expr_24" |))
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                Some (M.get (| "var_uint248_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                Some (M.get (| "_7" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 248];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint248",
                      [
                        M.get (| "expr_25" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint248",
                      [
                        M.get (| "expr_26" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_27" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_uint256_max"],
                Some (M.get (| "expr_28" |))
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.get (| "var_uint256_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                Some (M.get (| "_8" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_29" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint256",
                      [
                        M.get (| "expr_30" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_31" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "expr_32" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint72",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffffffffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_0_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint72",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint72",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint80",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffffffffffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint80",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint80",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint88",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffffffffffffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint88",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint88",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint96",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffffffffffffffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint96",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint96",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint104",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffffffffffffffffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint104",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint104",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint112",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffffffffffffffffffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint112",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint112",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint120",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffffffffffffffffffffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint120",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint120",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint128",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffffffffffffffffffffffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint128",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint128",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_uintMinB",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint72_min"],
                Some (M.get (| "expr" |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_uint72_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint72",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint72",
                      [
                        M.get (| "expr_2" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_3" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint80_min"],
                Some (M.get (| "expr_4" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_uint80_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint80",
                      [
                        M.get (| "expr_5" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint80",
                      [
                        M.get (| "expr_6" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_7" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint88_min"],
                Some (M.get (| "expr_8" |))
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.get (| "var_uint88_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.get (| "_3" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint88",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint88",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint96_min"],
                Some (M.get (| "expr_12" |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.get (| "var_uint96_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some (M.get (| "_4" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint96",
                      [
                        M.get (| "expr_13" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint96",
                      [
                        M.get (| "expr_14" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_15" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint104_min"],
                Some (M.get (| "expr_16" |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.get (| "var_uint104_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint104",
                      [
                        M.get (| "expr_17" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint104",
                      [
                        M.get (| "expr_18" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_19" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint112_min"],
                Some (M.get (| "expr_20" |))
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.get (| "var_uint112_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                Some (M.get (| "_6" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint112",
                      [
                        M.get (| "expr_21" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint112",
                      [
                        M.get (| "expr_22" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_23" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint120_min"],
                Some (M.get (| "expr_24" |))
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                Some (M.get (| "var_uint120_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                Some (M.get (| "_7" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint120",
                      [
                        M.get (| "expr_25" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint120",
                      [
                        M.get (| "expr_26" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_27" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint128_min"],
                Some (M.get (| "expr_28" |))
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.get (| "var_uint128_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                Some (M.get (| "_8" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint128",
                      [
                        M.get (| "expr_29" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint128",
                      [
                        M.get (| "expr_30" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_31" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_32" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint8",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint16",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint16",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint16",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint24",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint24",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint24",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint32",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint32",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint32",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint40",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint40",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint40",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint48",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint48",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint48",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint56",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint56",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint56",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint64",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffffffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint64",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint64",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_uintMinA",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint8_min"],
                Some (M.get (| "expr" |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_uint8_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint8",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint8",
                      [
                        M.get (| "expr_2" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_3" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint16_min"],
                Some (M.get (| "expr_4" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_uint16_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint16",
                      [
                        M.get (| "expr_5" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint16",
                      [
                        M.get (| "expr_6" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_7" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint24_min"],
                Some (M.get (| "expr_8" |))
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.get (| "var_uint24_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.get (| "_3" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint24",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint24",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint32_min"],
                Some (M.get (| "expr_12" |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.get (| "var_uint32_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some (M.get (| "_4" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint32",
                      [
                        M.get (| "expr_13" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint32",
                      [
                        M.get (| "expr_14" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_15" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint40_min"],
                Some (M.get (| "expr_16" |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.get (| "var_uint40_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint40",
                      [
                        M.get (| "expr_17" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint40",
                      [
                        M.get (| "expr_18" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_19" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint48_min"],
                Some (M.get (| "expr_20" |))
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.get (| "var_uint48_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                Some (M.get (| "_6" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint48",
                      [
                        M.get (| "expr_21" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint48",
                      [
                        M.get (| "expr_22" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_23" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint56_min"],
                Some (M.get (| "expr_24" |))
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                Some (M.get (| "var_uint56_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                Some (M.get (| "_7" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint56",
                      [
                        M.get (| "expr_25" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint56",
                      [
                        M.get (| "expr_26" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_27" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint64_min"],
                Some (M.get (| "expr_28" |))
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.get (| "var_uint64_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                Some (M.get (| "_8" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint64",
                      [
                        M.get (| "expr_29" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint64",
                      [
                        M.get (| "expr_30" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_31" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_32" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint136",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffffffffffffffffffffffffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint136",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint136",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint144",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffffffffffffffffffffffffffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint144",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint144",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint152",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    [Literal.number 0xffffffffffffffffffffffffffffffffffffff]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint152",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint152",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint160",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "shl",
                          [
                            [Literal.number 160];
                            [Literal.number 1]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint160",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint160",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint168",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "shl",
                          [
                            [Literal.number 168];
                            [Literal.number 1]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint168",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint168",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint176",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "shl",
                          [
                            [Literal.number 176];
                            [Literal.number 1]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint176",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint176",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint184",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "shl",
                          [
                            [Literal.number 184];
                            [Literal.number 1]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint184",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint184",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_uint192",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "and",
                  [
                    M.get (| "value" |);
                    M.call (|
                      "sub",
                      [
                        M.call (|
                          "shl",
                          [
                            [Literal.number 192];
                            [Literal.number 1]
                          ]
                        |);
                        [Literal.number 1]
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint192",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint192",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_uintMinC",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint136_min"],
                Some (M.get (| "expr" |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_uint136_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint136",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint136",
                      [
                        M.get (| "expr_2" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_3" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint144_min"],
                Some (M.get (| "expr_4" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_uint144_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint144",
                      [
                        M.get (| "expr_5" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint144",
                      [
                        M.get (| "expr_6" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_7" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint152_min"],
                Some (M.get (| "expr_8" |))
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.get (| "var_uint152_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.get (| "_3" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint152",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint152",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint160_min"],
                Some (M.get (| "expr_12" |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.get (| "var_uint160_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some (M.get (| "_4" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint160",
                      [
                        M.get (| "expr_13" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint160",
                      [
                        M.get (| "expr_14" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_15" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint168_min"],
                Some (M.get (| "expr_16" |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.get (| "var_uint168_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint168",
                      [
                        M.get (| "expr_17" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint168",
                      [
                        M.get (| "expr_18" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_19" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint176_min"],
                Some (M.get (| "expr_20" |))
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.get (| "var_uint176_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                Some (M.get (| "_6" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint176",
                      [
                        M.get (| "expr_21" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint176",
                      [
                        M.get (| "expr_22" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_23" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint184_min"],
                Some (M.get (| "expr_24" |))
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                Some (M.get (| "var_uint184_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                Some (M.get (| "_7" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint184",
                      [
                        M.get (| "expr_25" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint184",
                      [
                        M.get (| "expr_26" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_27" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint192_min"],
                Some (M.get (| "expr_28" |))
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.get (| "var_uint192_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                Some (M.get (| "_8" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint192",
                      [
                        M.get (| "expr_29" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint192",
                      [
                        M.get (| "expr_30" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_31" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_32" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_87112285931760246646623899502532662132735_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint136",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint136",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_87112285931760246646623899502532662132735_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_22300745198530623141535718272648361505980415_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint144",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint144",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_22300745198530623141535718272648361505980415_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint152",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint152",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_1461501637330902918203684832716283019655932542975_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint160",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint160",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_1461501637330902918203684832716283019655932542975_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_374144419156711147060143317175368453031918731001855_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint168",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint168",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_374144419156711147060143317175368453031918731001855_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_95780971304118053647396689196894323976171195136475135_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint176",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint176",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_95780971304118053647396689196894323976171195136475135_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_24519928653854221733733552434404946937899825954937634815_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint184",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint184",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_24519928653854221733733552434404946937899825954937634815_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_6277101735386680763835789423207666416102355444464034512895_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint192",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint192",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_6277101735386680763835789423207666416102355444464034512895_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_uintMaxC",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0xffffffffffffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_uint136_max"],
                Some (M.get (| "expr" |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_uint136_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some ([Literal.number 0xffffffffffffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint136",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint136",
                      [
                        M.get (| "expr_2" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_3" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some ([Literal.number 0xffffffffffffffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_uint144_max"],
                Some (M.get (| "expr_4" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_uint144_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some ([Literal.number 0xffffffffffffffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint144",
                      [
                        M.get (| "expr_5" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint144",
                      [
                        M.get (| "expr_6" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_7" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some ([Literal.number 0xffffffffffffffffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_uint152_max"],
                Some (M.get (| "expr_8" |))
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.get (| "var_uint152_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.get (| "_3" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some ([Literal.number 0xffffffffffffffffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint152",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint152",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 160];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_uint160_max"],
                Some (M.get (| "expr_12" |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.get (| "var_uint160_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some (M.get (| "_4" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 160];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint160",
                      [
                        M.get (| "expr_13" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint160",
                      [
                        M.get (| "expr_14" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_15" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 168];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_uint168_max"],
                Some (M.get (| "expr_16" |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.get (| "var_uint168_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 168];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint168",
                      [
                        M.get (| "expr_17" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint168",
                      [
                        M.get (| "expr_18" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_19" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 176];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_uint176_max"],
                Some (M.get (| "expr_20" |))
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.get (| "var_uint176_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                Some (M.get (| "_6" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 176];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint176",
                      [
                        M.get (| "expr_21" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint176",
                      [
                        M.get (| "expr_22" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_23" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 184];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_uint184_max"],
                Some (M.get (| "expr_24" |))
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                Some (M.get (| "var_uint184_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                Some (M.get (| "_7" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 184];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint184",
                      [
                        M.get (| "expr_25" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint184",
                      [
                        M.get (| "expr_26" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_27" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 192];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_uint192_max"],
                Some (M.get (| "expr_28" |))
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.get (| "var_uint192_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                Some (M.get (| "_8" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 192];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint192",
                      [
                        M.get (| "expr_29" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint192",
                      [
                        M.get (| "expr_30" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_31" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_32" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint200",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint200",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint208",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint208",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint216",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint216",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint224",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint224",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint232",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint232",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint240",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint240",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint248",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint248",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_0_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_uintMinD",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint200_min"],
                Some (M.get (| "expr" |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_uint200_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint200",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint200",
                      [
                        M.get (| "expr_2" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_3" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint208_min"],
                Some (M.get (| "expr_4" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_uint208_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint208",
                      [
                        M.get (| "expr_5" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint208",
                      [
                        M.get (| "expr_6" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_7" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint216_min"],
                Some (M.get (| "expr_8" |))
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.get (| "var_uint216_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.get (| "_3" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint216",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint216",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint224_min"],
                Some (M.get (| "expr_12" |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.get (| "var_uint224_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some (M.get (| "_4" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint224",
                      [
                        M.get (| "expr_13" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint224",
                      [
                        M.get (| "expr_14" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_15" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint232_min"],
                Some (M.get (| "expr_16" |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.get (| "var_uint232_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint232",
                      [
                        M.get (| "expr_17" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint232",
                      [
                        M.get (| "expr_18" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_19" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint240_min"],
                Some (M.get (| "expr_20" |))
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.get (| "var_uint240_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                Some (M.get (| "_6" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint240",
                      [
                        M.get (| "expr_21" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint240",
                      [
                        M.get (| "expr_22" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_23" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint248_min"],
                Some (M.get (| "expr_24" |))
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                Some (M.get (| "var_uint248_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                Some (M.get (| "_7" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint248",
                      [
                        M.get (| "expr_25" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint248",
                      [
                        M.get (| "expr_26" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_27" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                Some ([Literal.number 0])
              |) in
            let _ :=
              M.assign (|
                ["var_uint256_min"],
                Some (M.get (| "expr_28" |))
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.get (| "var_uint256_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                Some (M.get (| "_8" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                Some ([Literal.number 0x00])
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint256",
                      [
                        M.get (| "expr_29" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint256",
                      [
                        M.get (| "expr_30" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_31" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_32" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_4722366482869645213695_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint72",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint72",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_4722366482869645213695_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint80",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint80",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_309485009821345068724781055_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint88",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint88",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_309485009821345068724781055_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_79228162514264337593543950335_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint96",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint96",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_79228162514264337593543950335_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_20282409603651670423947251286015_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint104",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint104",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_20282409603651670423947251286015_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint112",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint112",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_1329227995784915872903807060280344575_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint120",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint120",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_1329227995784915872903807060280344575_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_340282366920938463463374607431768211455_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint128",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint128",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_340282366920938463463374607431768211455_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_uintMaxB",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_t_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_t_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0xffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_uint72_max"],
                Some (M.get (| "expr" |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_uint72_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some ([Literal.number 0xffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint72",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint72",
                      [
                        M.get (| "expr_2" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_3" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some ([Literal.number 0xffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_uint80_max"],
                Some (M.get (| "expr_4" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_uint80_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some ([Literal.number 0xffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint80",
                      [
                        M.get (| "expr_5" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint80",
                      [
                        M.get (| "expr_6" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_7" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some ([Literal.number 0xffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_uint88_max"],
                Some (M.get (| "expr_8" |))
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.get (| "var_uint88_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.get (| "_3" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some ([Literal.number 0xffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint88",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint88",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some ([Literal.number 0xffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_uint96_max"],
                Some (M.get (| "expr_12" |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.get (| "var_uint96_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some (M.get (| "_4" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some ([Literal.number 0xffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint96",
                      [
                        M.get (| "expr_13" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint96",
                      [
                        M.get (| "expr_14" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_15" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some ([Literal.number 0xffffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_uint104_max"],
                Some (M.get (| "expr_16" |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.get (| "var_uint104_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some ([Literal.number 0xffffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint104",
                      [
                        M.get (| "expr_17" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint104",
                      [
                        M.get (| "expr_18" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_19" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some ([Literal.number 0xffffffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_uint112_max"],
                Some (M.get (| "expr_20" |))
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.get (| "var_uint112_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                Some (M.get (| "_6" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                Some ([Literal.number 0xffffffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint112",
                      [
                        M.get (| "expr_21" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint112",
                      [
                        M.get (| "expr_22" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_23" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                Some ([Literal.number 0xffffffffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_uint120_max"],
                Some (M.get (| "expr_24" |))
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                Some (M.get (| "var_uint120_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                Some (M.get (| "_7" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                Some ([Literal.number 0xffffffffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint120",
                      [
                        M.get (| "expr_25" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint120",
                      [
                        M.get (| "expr_26" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_27" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                Some ([Literal.number 0xffffffffffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_uint128_max"],
                Some (M.get (| "expr_28" |))
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.get (| "var_uint128_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                Some (M.get (| "_8" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                Some ([Literal.number 0xffffffffffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint128",
                      [
                        M.get (| "expr_29" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint128",
                      [
                        M.get (| "expr_30" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_31" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_32" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_255_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_255_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint16",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint16",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_16777215_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint24",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint24",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_16777215_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_4294967295_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint32",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint32",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_4294967295_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_1099511627775_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_t_rational_by_to_t_uint40",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint40",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_1099511627775_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_281474976710655_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint48",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint48",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_281474976710655_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_72057594037927935_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint56",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint56",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_72057594037927935_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_18446744073709551615_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_uint64",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_uint64",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_18446744073709551615_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_uintMaxA",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 255])
              |) in
            let _ :=
              M.assign (|
                ["var_uint8_max"],
                Some (M.get (| "expr" |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_uint8_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some ([Literal.number 0xff])
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint8",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint8",
                      [
                        M.get (| "expr_2" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_3" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some ([Literal.number 65535])
              |) in
            let _ :=
              M.assign (|
                ["var_uint16_max"],
                Some (M.get (| "expr_4" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_uint16_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some ([Literal.number 0xffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint16",
                      [
                        M.get (| "expr_5" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint16",
                      [
                        M.get (| "expr_6" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_7" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some ([Literal.number 16777215])
              |) in
            let _ :=
              M.assign (|
                ["var_uint24_max"],
                Some (M.get (| "expr_8" |))
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.get (| "var_uint24_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.get (| "_3" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some ([Literal.number 0xffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint24",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint24",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some ([Literal.number 0xffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_uint32_max"],
                Some (M.get (| "expr_12" |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.get (| "var_uint32_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some (M.get (| "_4" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some ([Literal.number 0xffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint32",
                      [
                        M.get (| "expr_13" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint32",
                      [
                        M.get (| "expr_14" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_15" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some ([Literal.number 0xffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_uint40_max"],
                Some (M.get (| "expr_16" |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.get (| "var_uint40_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some ([Literal.number 0xffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint40",
                      [
                        M.get (| "expr_17" |)
                      ]
                    |);
                    M.call (|
                      "convert_t_rational_by_to_t_uint40",
                      [
                        M.get (| "expr_18" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_19" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some ([Literal.number 0xffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_uint48_max"],
                Some (M.get (| "expr_20" |))
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.get (| "var_uint48_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                Some (M.get (| "_6" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                Some ([Literal.number 0xffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint48",
                      [
                        M.get (| "expr_21" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint48",
                      [
                        M.get (| "expr_22" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_23" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                Some ([Literal.number 0xffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_uint56_max"],
                Some (M.get (| "expr_24" |))
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                Some (M.get (| "var_uint56_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                Some (M.get (| "_7" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                Some ([Literal.number 0xffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint56",
                      [
                        M.get (| "expr_25" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint56",
                      [
                        M.get (| "expr_26" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_27" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                Some ([Literal.number 0xffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_uint64_max"],
                Some (M.get (| "expr_28" |))
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.get (| "var_uint64_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                Some (M.get (| "_8" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                Some ([Literal.number 0xffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_uint64",
                      [
                        M.get (| "expr_29" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_uint64",
                      [
                        M.get (| "expr_30" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_31" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_32" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a2646970667358221220b3ddc47d6de0abdce807b6cd2fa59423a5b7ad422213888630d641cb272421f564736f6c634300081b0033".
  End test_1089_deployed.
End test_1089.
