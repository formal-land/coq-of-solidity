(* Generated by solc *)
Require Import CoqOfSolidity.CoqOfSolidity.

Module test_1185.
  Definition code : M.t unit := ltac:(M.monadic (
    let _ :=
      let _ :=
        M.call (|
          "mstore",
          [
            [Literal.number 64];
            M.call (|
              "memoryguard",
              [
                [Literal.number 0x80]
              ]
            |)
          ]
        |) in
      let _ :=
        M.if_ (|
          M.call (|
            "callvalue",
            []
          |),
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                []
              |) in
            tt
          ))
        |) in
      let _ :=
        M.assign (|
          ["_1"],
          Some (M.call (|
            "allocate_unbounded",
            []
          |))
        |) in
      let _ :=
        M.call (|
          "codecopy",
          [
            M.get (| "_1" |);
            M.call (|
              "dataoffset",
              [
                [Literal.string "746573745f313138355f6465706c6f796564"]
              ]
            |);
            M.call (|
              "datasize",
              [
                [Literal.string "746573745f313138355f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          "return",
          [
            M.get (| "_1" |);
            M.call (|
              "datasize",
              [
                [Literal.string "746573745f313138355f6465706c6f796564"]
              ]
            |)
          ]
        |) in
      tt in
    let _ :=
      M.function (|
        "allocate_unbounded",
        [],
        ["memPtr"],
        ltac:(M.monadic (
          let _ :=
            M.declare (|
              ["memPtr"],
              M.call (|
                "mload",
                [
                  [Literal.number 64]
                ]
              |)
            |) in
          tt
        ))
      |) in
    let _ :=
      M.function (|
        "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
        [],
        [],
        ltac:(M.monadic (
          let _ :=
            M.call (|
              "revert",
              [
                [Literal.number 0];
                [Literal.number 0]
              ]
            |) in
          tt
        ))
      |) in
    tt
  )).

  Module test_1185_deployed.
    Definition code : M.t unit := ltac:(M.monadic (
      let _ :=
        let _ :=
          M.call (|
            "mstore",
            [
              [Literal.number 64];
              M.call (|
                "memoryguard",
                [
                  [Literal.number 0x80]
                ]
              |)
            ]
          |) in
        let _ :=
          M.if_ (|
            M.call (|
              "iszero",
              [
                M.call (|
                  "lt",
                  [
                    M.call (|
                      "calldatasize",
                      []
                    |);
                    [Literal.number 4]
                  ]
                |)
              ]
            |),
            ltac:(M.monadic (
              let _ :=
                M.assign (|
                  ["selector"],
                  Some (M.call (|
                    "shift_right_unsigned",
                    [
                      M.call (|
                        "calldataload",
                        [
                          [Literal.number 0]
                        ]
                      |)
                    ]
                  |))
                |) in
              let _ :=
                M.switch (|
                  M.get (| "selector" |),
                  [
                    (
                      Some (Literal.number 0x00ab3179),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_intMaxC",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x4b523bcf),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_intMinA",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x7cf49c80),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_intMinC",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0x976555c5),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_intMaxB",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xccf14a66),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_intMinB",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xdc74a339),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_intMaxA",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xe280e26c),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_intMaxD",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      Some (Literal.number 0xef915426),
                      ltac:(M.monadic (
                        let _ :=
                          M.call (|
                            "external_fun_intMinD",
                            []
                          |) in
                        tt
                      ))              );
                    (
                      None,
                      ltac:(M.monadic (
                        tt
                      ))              )            ]
                |) in
              tt
            ))
          |) in
        let _ :=
          M.call (|
            "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
            []
          |) in
        tt in
      let _ :=
        M.function (|
          "shift_right_unsigned",
          ["value"],
          ["newValue"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["newValue"],
                M.call (|
                  "shr",
                  [
                    [Literal.number 224];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "allocate_unbounded",
          [],
          ["memPtr"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["memPtr"],
                M.call (|
                  "mload",
                  [
                    [Literal.number 64]
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_decode",
          ["headStart"; "dataEnd"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "slt",
                  [
                    M.call (|
                      "sub",
                      [
                        M.get (| "dataEnd" |);
                        M.get (| "headStart" |)
                      ]
                    |);
                    [Literal.number 0]
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                      []
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_bool",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "iszero",
                  [
                    M.call (|
                      "iszero",
                      [
                        M.get (| "value" |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bool_to_bool",
          ["value"; "pos"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "mstore",
                [
                  M.get (| "pos" |);
                  M.call (|
                    "cleanup_bool",
                    [
                      M.get (| "value" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "abi_encode_bool",
          ["headStart"; "value0"],
          ["tail"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["tail"],
                M.call (|
                  "add",
                  [
                    M.get (| "headStart" |);
                    [Literal.number 32]
                  ]
                |)
              |) in
            let _ :=
              M.call (|
                "abi_encode_bool_to_bool",
                [
                  M.get (| "value0" |);
                  M.call (|
                    "add",
                    [
                      M.get (| "headStart" |);
                      [Literal.number 0]
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_intMaxC",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_intMaxC",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_intMinA",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_intMinA",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_intMinC",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_intMinC",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_intMaxB",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_intMaxB",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_intMinB",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_intMinB",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_intMaxA",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_intMaxA",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_intMaxD",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_intMaxD",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "external_fun_intMinD",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "callvalue",
                  []
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb",
                      []
                    |) in
                  tt
                ))
              |) in
            let _ :=
              M.call (|
                "abi_decode",
                [
                  [Literal.number 4];
                  M.call (|
                    "calldatasize",
                    []
                  |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["ret"],
                Some (M.call (|
                  "fun_intMinD",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memPos"],
                Some (M.call (|
                  "allocate_unbounded",
                  []
                |))
              |) in
            let _ :=
              M.assign (|
                ["memEnd"],
                Some (M.call (|
                  "abi_encode_bool",
                  [
                    M.get (| "memPos" |);
                    M.get (| "ret" |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "return",
                [
                  M.get (| "memPos" |);
                  M.call (|
                    "sub",
                    [
                      M.get (| "memEnd" |);
                      M.get (| "memPos" |)
                    ]
                  |)
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74",
          [],
          [],
          ltac:(M.monadic (
            let _ :=
              M.call (|
                "revert",
                [
                  [Literal.number 0];
                  [Literal.number 0]
                ]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "zero_value_for_split_bool",
          [],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                [Literal.number 0]
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int136",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 16];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "identity",
          ["value"],
          ["ret"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["ret"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int136",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int136",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "require_helper",
          ["condition"],
          [],
          ltac:(M.monadic (
            let _ :=
              M.if_ (|
                M.call (|
                  "iszero",
                  [
                    M.get (| "condition" |)
                  ]
                |),
                ltac:(M.monadic (
                  let _ :=
                    M.call (|
                      "revert",
                      [
                        [Literal.number 0];
                        [Literal.number 0]
                      ]
                    |) in
                  tt
                ))
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int144",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 17];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int144",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int144",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int152",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 18];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_2854495385411919762116571938898990272765493247_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int152",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int152",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_2854495385411919762116571938898990272765493247_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int160",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 19];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_730750818665451459101842416358141509827966271487_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int160",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int160",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_730750818665451459101842416358141509827966271487_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int168",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 20];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_187072209578355573530071658587684226515959365500927_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int168",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int168",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_187072209578355573530071658587684226515959365500927_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int176",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 21];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_47890485652059026823698344598447161988085597568237567_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int176",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int176",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_47890485652059026823698344598447161988085597568237567_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int184",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 22];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_12259964326927110866866776217202473468949912977468817407_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int184",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int184",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_12259964326927110866866776217202473468949912977468817407_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int192",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 23];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_3138550867693340381917894711603833208051177722232017256447_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int192",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int192",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_3138550867693340381917894711603833208051177722232017256447_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_intMaxC",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0x7fffffffffffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_int136_max"],
                Some (M.get (| "expr" |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_int136_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some ([Literal.number 0x7fffffffffffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int136",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int136",
                      [
                        M.get (| "expr_2" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_3" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some ([Literal.number 0x7fffffffffffffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_int144_max"],
                Some (M.get (| "expr_4" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_int144_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some ([Literal.number 0x7fffffffffffffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int144",
                      [
                        M.get (| "expr_5" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int144",
                      [
                        M.get (| "expr_6" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_7" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some ([Literal.number 0x7fffffffffffffffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_int152_max"],
                Some (M.get (| "expr_8" |))
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.get (| "var_int152_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.get (| "_3" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some ([Literal.number 0x7fffffffffffffffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int152",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int152",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 159];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int160_max"],
                Some (M.get (| "expr_12" |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.get (| "var_int160_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some (M.get (| "_4" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 159];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int160",
                      [
                        M.get (| "expr_13" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int160",
                      [
                        M.get (| "expr_14" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_15" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 167];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int168_max"],
                Some (M.get (| "expr_16" |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.get (| "var_int168_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 167];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int168",
                      [
                        M.get (| "expr_17" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int168",
                      [
                        M.get (| "expr_18" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_19" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 175];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int176_max"],
                Some (M.get (| "expr_20" |))
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.get (| "var_int176_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                Some (M.get (| "_6" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 175];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int176",
                      [
                        M.get (| "expr_21" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int176",
                      [
                        M.get (| "expr_22" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_23" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 183];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int184_max"],
                Some (M.get (| "expr_24" |))
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                Some (M.get (| "var_int184_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                Some (M.get (| "_7" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 183];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int184",
                      [
                        M.get (| "expr_25" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int184",
                      [
                        M.get (| "expr_26" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_27" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 191];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int192_max"],
                Some (M.get (| "expr_28" |))
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.get (| "var_int192_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                Some (M.get (| "_8" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 191];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int192",
                      [
                        M.get (| "expr_29" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int192",
                      [
                        M.get (| "expr_30" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_31" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_32" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int8",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 0];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_128_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_128_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int16",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 1];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_32768_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int16",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int16",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_32768_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int24",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 2];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_8388608_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int24",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int24",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_8388608_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int32",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 3];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_2147483648_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int32",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int32",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_2147483648_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int40",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 4];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_549755813888_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int40",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int40",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_549755813888_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int48",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 5];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_140737488355328_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int48",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int48",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_140737488355328_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int56",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 6];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_36028797018963968_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int56",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int56",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_36028797018963968_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int64",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 7];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_9223372036854775808_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int64",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_9223372036854775808_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_intMinA",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 127]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int8_min"],
                Some (M.get (| "expr" |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_int8_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 127]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int8",
                      [
                        M.get (| "expr_2" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_3" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 32767]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int16_min"],
                Some (M.get (| "expr_4" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_int16_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 32767]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int16",
                      [
                        M.get (| "expr_5" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int16",
                      [
                        M.get (| "expr_6" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_7" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 8388607]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int24_min"],
                Some (M.get (| "expr_8" |))
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.get (| "var_int24_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.get (| "_3" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 8388607]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int24",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int24",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int32_min"],
                Some (M.get (| "expr_12" |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.get (| "var_int32_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some (M.get (| "_4" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int32",
                      [
                        M.get (| "expr_13" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int32",
                      [
                        M.get (| "expr_14" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_15" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int40_min"],
                Some (M.get (| "expr_16" |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.get (| "var_int40_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int40",
                      [
                        M.get (| "expr_17" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int40",
                      [
                        M.get (| "expr_18" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_19" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int48_min"],
                Some (M.get (| "expr_20" |))
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.get (| "var_int48_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                Some (M.get (| "_6" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int48",
                      [
                        M.get (| "expr_21" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int48",
                      [
                        M.get (| "expr_22" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_23" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int56_min"],
                Some (M.get (| "expr_24" |))
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                Some (M.get (| "var_int56_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                Some (M.get (| "_7" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int56",
                      [
                        M.get (| "expr_25" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int56",
                      [
                        M.get (| "expr_26" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_27" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int64_min"],
                Some (M.get (| "expr_28" |))
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.get (| "var_int64_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                Some (M.get (| "_8" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int64",
                      [
                        M.get (| "expr_29" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int64",
                      [
                        M.get (| "expr_30" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_31" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_32" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_43556142965880123323311949751266331066368_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int136",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int136",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_43556142965880123323311949751266331066368_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_minus_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int144",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int144",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_minus_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_2854495385411919762116571938898990272765493248_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int152",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int152",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_2854495385411919762116571938898990272765493248_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_730750818665451459101842416358141509827966271488_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int160",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int160",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_730750818665451459101842416358141509827966271488_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_187072209578355573530071658587684226515959365500928_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int168",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int168",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_187072209578355573530071658587684226515959365500928_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_47890485652059026823698344598447161988085597568237568_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int176",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int176",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_47890485652059026823698344598447161988085597568237568_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_12259964326927110866866776217202473468949912977468817408_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int184",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int184",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_12259964326927110866866776217202473468949912977468817408_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int192",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int192",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_intMinC",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffffffffffffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int136_min"],
                Some (M.get (| "expr" |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_int136_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffffffffffffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int136",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int136",
                      [
                        M.get (| "expr_2" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_3" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffffffffffffffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int144_min"],
                Some (M.get (| "expr_4" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_int144_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffffffffffffffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int144",
                      [
                        M.get (| "expr_5" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int144",
                      [
                        M.get (| "expr_6" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_7" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffffffffffffffffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int152_min"],
                Some (M.get (| "expr_8" |))
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.get (| "var_int152_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.get (| "_3" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffffffffffffffffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int152",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int152",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some (M.call (|
                  "shl",
                  [
                    [Literal.number 159];
                    [Literal.number 0x01ffffffffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int160_min"],
                Some (M.get (| "expr_12" |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.get (| "var_int160_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some (M.get (| "_4" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some (M.call (|
                  "shl",
                  [
                    [Literal.number 159];
                    [Literal.number 0x01ffffffffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int160",
                      [
                        M.get (| "expr_13" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int160",
                      [
                        M.get (| "expr_14" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_15" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some (M.call (|
                  "shl",
                  [
                    [Literal.number 167];
                    [Literal.number 0x01ffffffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int168_min"],
                Some (M.get (| "expr_16" |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.get (| "var_int168_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some (M.call (|
                  "shl",
                  [
                    [Literal.number 167];
                    [Literal.number 0x01ffffffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int168",
                      [
                        M.get (| "expr_17" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int168",
                      [
                        M.get (| "expr_18" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_19" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some (M.call (|
                  "shl",
                  [
                    [Literal.number 175];
                    [Literal.number 0x01ffffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int176_min"],
                Some (M.get (| "expr_20" |))
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.get (| "var_int176_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                Some (M.get (| "_6" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                Some (M.call (|
                  "shl",
                  [
                    [Literal.number 175];
                    [Literal.number 0x01ffffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int176",
                      [
                        M.get (| "expr_21" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int176",
                      [
                        M.get (| "expr_22" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_23" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                Some (M.call (|
                  "shl",
                  [
                    [Literal.number 183];
                    [Literal.number 0x01ffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int184_min"],
                Some (M.get (| "expr_24" |))
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                Some (M.get (| "var_int184_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                Some (M.get (| "_7" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                Some (M.call (|
                  "shl",
                  [
                    [Literal.number 183];
                    [Literal.number 0x01ffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int184",
                      [
                        M.get (| "expr_25" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int184",
                      [
                        M.get (| "expr_26" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_27" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                Some (M.call (|
                  "shl",
                  [
                    [Literal.number 191];
                    [Literal.number 0x01ffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int192_min"],
                Some (M.get (| "expr_28" |))
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.get (| "var_int192_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                Some (M.get (| "_8" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                Some (M.call (|
                  "shl",
                  [
                    [Literal.number 191];
                    [Literal.number 0x01ffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int192",
                      [
                        M.get (| "expr_29" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int192",
                      [
                        M.get (| "expr_30" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_31" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_32" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int72",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 8];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_2361183241434822606847_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int72",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int72",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_2361183241434822606847_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int80",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 9];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int80",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int80",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int88",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 10];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_154742504910672534362390527_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int88",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int88",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_154742504910672534362390527_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int96",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 11];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_39614081257132168796771975167_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int96",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int96",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_39614081257132168796771975167_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int104",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 12];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_10141204801825835211973625643007_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int104",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int104",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_10141204801825835211973625643007_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int112",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 13];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_2596148429267413814265248164610047_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int112",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int112",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_2596148429267413814265248164610047_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int120",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 14];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_664613997892457936451903530140172287_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int120",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int120",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_664613997892457936451903530140172287_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int128",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 15];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_170141183460469231731687303715884105727_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int128",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int128",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_170141183460469231731687303715884105727_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_intMaxB",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 0x7fffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_int72_max"],
                Some (M.get (| "expr" |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_int72_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some ([Literal.number 0x7fffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int72",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int72",
                      [
                        M.get (| "expr_2" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_3" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some ([Literal.number 0x7fffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_int80_max"],
                Some (M.get (| "expr_4" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_int80_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some ([Literal.number 0x7fffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int80",
                      [
                        M.get (| "expr_5" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int80",
                      [
                        M.get (| "expr_6" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_7" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some ([Literal.number 0x7fffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_int88_max"],
                Some (M.get (| "expr_8" |))
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.get (| "var_int88_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.get (| "_3" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some ([Literal.number 0x7fffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int88",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int88",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some ([Literal.number 0x7fffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_int96_max"],
                Some (M.get (| "expr_12" |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.get (| "var_int96_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some (M.get (| "_4" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some ([Literal.number 0x7fffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int96",
                      [
                        M.get (| "expr_13" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int96",
                      [
                        M.get (| "expr_14" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_15" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some ([Literal.number 0x7fffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_int104_max"],
                Some (M.get (| "expr_16" |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.get (| "var_int104_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some ([Literal.number 0x7fffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int104",
                      [
                        M.get (| "expr_17" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int104",
                      [
                        M.get (| "expr_18" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_19" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some ([Literal.number 0x7fffffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_int112_max"],
                Some (M.get (| "expr_20" |))
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.get (| "var_int112_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                Some (M.get (| "_6" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                Some ([Literal.number 0x7fffffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int112",
                      [
                        M.get (| "expr_21" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int112",
                      [
                        M.get (| "expr_22" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_23" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                Some ([Literal.number 0x7fffffffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_int120_max"],
                Some (M.get (| "expr_24" |))
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                Some (M.get (| "var_int120_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                Some (M.get (| "_7" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                Some ([Literal.number 0x7fffffffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int120",
                      [
                        M.get (| "expr_25" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int120",
                      [
                        M.get (| "expr_26" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_27" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                Some ([Literal.number 0x7fffffffffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_int128_max"],
                Some (M.get (| "expr_28" |))
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.get (| "var_int128_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                Some (M.get (| "_8" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                Some ([Literal.number 0x7fffffffffffffffffffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int128",
                      [
                        M.get (| "expr_29" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int128",
                      [
                        M.get (| "expr_30" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_31" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_32" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_2361183241434822606848_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int72",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int72",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_2361183241434822606848_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_604462909807314587353088_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int80",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int80",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_604462909807314587353088_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_154742504910672534362390528_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int88",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int88",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_154742504910672534362390528_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_39614081257132168796771975168_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int96",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int96",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_39614081257132168796771975168_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int104",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int104",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_2596148429267413814265248164610048_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int112",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int112",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_2596148429267413814265248164610048_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_664613997892457936451903530140172288_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int120",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int120",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_664613997892457936451903530140172288_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_170141183460469231731687303715884105728_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int128",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int128",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_170141183460469231731687303715884105728_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_intMinB",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int72_min"],
                Some (M.get (| "expr" |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_int72_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int72",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int72",
                      [
                        M.get (| "expr_2" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_3" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int80_min"],
                Some (M.get (| "expr_4" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_int80_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int80",
                      [
                        M.get (| "expr_5" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int80",
                      [
                        M.get (| "expr_6" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_7" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int88_min"],
                Some (M.get (| "expr_8" |))
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.get (| "var_int88_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.get (| "_3" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int88",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int88",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int96_min"],
                Some (M.get (| "expr_12" |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.get (| "var_int96_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some (M.get (| "_4" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int96",
                      [
                        M.get (| "expr_13" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int96",
                      [
                        M.get (| "expr_14" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_15" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int104_min"],
                Some (M.get (| "expr_16" |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.get (| "var_int104_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int104",
                      [
                        M.get (| "expr_17" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int104",
                      [
                        M.get (| "expr_18" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_19" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffffffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int112_min"],
                Some (M.get (| "expr_20" |))
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.get (| "var_int112_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                Some (M.get (| "_6" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffffffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int112",
                      [
                        M.get (| "expr_21" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int112",
                      [
                        M.get (| "expr_22" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_23" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffffffffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int120_min"],
                Some (M.get (| "expr_24" |))
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                Some (M.get (| "var_int120_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                Some (M.get (| "_7" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffffffffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int120",
                      [
                        M.get (| "expr_25" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int120",
                      [
                        M.get (| "expr_26" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_27" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffffffffffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int128_min"],
                Some (M.get (| "expr_28" |))
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.get (| "var_int128_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                Some (M.get (| "_8" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                Some (M.call (|
                  "not",
                  [
                    [Literal.number 0x7fffffffffffffffffffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int128",
                      [
                        M.get (| "expr_29" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int128",
                      [
                        M.get (| "expr_30" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_31" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_32" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int8",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int8",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_32767_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int16",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int16",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_32767_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_8388607_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int24",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int24",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_8388607_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_2147483647_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int32",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int32",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_2147483647_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_549755813887_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int40",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int40",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_549755813887_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_140737488355327_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int48",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int48",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_140737488355327_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_36028797018963967_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int56",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int56",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_36028797018963967_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_9223372036854775807_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int64",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int64",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_9223372036854775807_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_intMaxA",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some ([Literal.number 127])
              |) in
            let _ :=
              M.assign (|
                ["var_int8_max"],
                Some (M.get (| "expr" |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_int8_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some ([Literal.number 0x7f])
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int8",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int8",
                      [
                        M.get (| "expr_2" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_3" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some ([Literal.number 32767])
              |) in
            let _ :=
              M.assign (|
                ["var_int16_max"],
                Some (M.get (| "expr_4" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_int16_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some ([Literal.number 0x7fff])
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int16",
                      [
                        M.get (| "expr_5" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int16",
                      [
                        M.get (| "expr_6" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_7" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some ([Literal.number 8388607])
              |) in
            let _ :=
              M.assign (|
                ["var_int24_max"],
                Some (M.get (| "expr_8" |))
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.get (| "var_int24_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.get (| "_3" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some ([Literal.number 0x7fffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int24",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int24",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some ([Literal.number 0x7fffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_int32_max"],
                Some (M.get (| "expr_12" |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.get (| "var_int32_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some (M.get (| "_4" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some ([Literal.number 0x7fffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int32",
                      [
                        M.get (| "expr_13" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int32",
                      [
                        M.get (| "expr_14" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_15" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some ([Literal.number 0x7fffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_int40_max"],
                Some (M.get (| "expr_16" |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.get (| "var_int40_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some ([Literal.number 0x7fffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int40",
                      [
                        M.get (| "expr_17" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int40",
                      [
                        M.get (| "expr_18" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_19" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some ([Literal.number 0x7fffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_int48_max"],
                Some (M.get (| "expr_20" |))
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.get (| "var_int48_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                Some (M.get (| "_6" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                Some ([Literal.number 0x7fffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int48",
                      [
                        M.get (| "expr_21" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int48",
                      [
                        M.get (| "expr_22" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_23" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                Some ([Literal.number 0x7fffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_int56_max"],
                Some (M.get (| "expr_24" |))
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                Some (M.get (| "var_int56_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                Some (M.get (| "_7" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                Some ([Literal.number 0x7fffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int56",
                      [
                        M.get (| "expr_25" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int56",
                      [
                        M.get (| "expr_26" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_27" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                Some ([Literal.number 0x7fffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["var_int64_max"],
                Some (M.get (| "expr_28" |))
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.get (| "var_int64_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                Some (M.get (| "_8" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                Some ([Literal.number 0x7fffffffffffffff])
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int64",
                      [
                        M.get (| "expr_29" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int64",
                      [
                        M.get (| "expr_30" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_31" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_32" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int200",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 24];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_803469022129495137770981046170581301261101496891396417650687_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int200",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int200",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_803469022129495137770981046170581301261101496891396417650687_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int208",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 25];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_205688069665150755269371147819668813122841983204197482918576127_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int208",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int208",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_205688069665150755269371147819668813122841983204197482918576127_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int216",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 26];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_52656145834278593348959013841835216159447547700274555627155488767_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int216",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int216",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_52656145834278593348959013841835216159447547700274555627155488767_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int224",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 27];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_13479973333575319897333507543509815336818572211270286240551805124607_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int224",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int224",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_13479973333575319897333507543509815336818572211270286240551805124607_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int232",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 28];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_3450873173395281893717377931138512726225554486085193277581262111899647_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int232",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int232",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_3450873173395281893717377931138512726225554486085193277581262111899647_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int240",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 29];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_883423532389192164791648750371459257913741948437809479060803100646309887_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int240",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int240",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_883423532389192164791648750371459257913741948437809479060803100646309887_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int248",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.call (|
                  "signextend",
                  [
                    [Literal.number 30];
                    M.get (| "value" |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_226156424291633194186662080095093570025917938800079226639565593765455331327_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int248",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int248",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_226156424291633194186662080095093570025917938800079226639565593765455331327_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_int256",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_by_to_int256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_intMaxD",
          [],
          ["var_"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_t_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "zero_t_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 199];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int200_max"],
                Some (M.get (| "expr" |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_int200_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 199];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int200",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int200",
                      [
                        M.get (| "expr_2" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_3" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 207];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int208_max"],
                Some (M.get (| "expr_4" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_int208_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 207];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int208",
                      [
                        M.get (| "expr_5" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int208",
                      [
                        M.get (| "expr_6" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_7" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 215];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int216_max"],
                Some (M.get (| "expr_8" |))
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.get (| "var_int216_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.get (| "_3" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 215];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int216",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int216",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 223];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int224_max"],
                Some (M.get (| "expr_12" |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.get (| "var_int224_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some (M.get (| "_4" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 223];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int224",
                      [
                        M.get (| "expr_13" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int224",
                      [
                        M.get (| "expr_14" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_15" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 231];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int232_max"],
                Some (M.get (| "expr_16" |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.get (| "var_int232_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 231];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int232",
                      [
                        M.get (| "expr_17" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int232",
                      [
                        M.get (| "expr_18" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_19" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 239];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int240_max"],
                Some (M.get (| "expr_20" |))
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.get (| "var_int240_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                Some (M.get (| "_6" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 239];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int240",
                      [
                        M.get (| "expr_21" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int240",
                      [
                        M.get (| "expr_22" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_23" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 247];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int248_max"],
                Some (M.get (| "expr_24" |))
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                Some (M.get (| "var_int248_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                Some (M.get (| "_7" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 247];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int248",
                      [
                        M.get (| "expr_25" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int248",
                      [
                        M.get (| "expr_26" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_27" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 255];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int256_max"],
                Some (M.get (| "expr_28" |))
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.get (| "var_int256_max" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                Some (M.get (| "_8" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                Some (M.call (|
                  "sub",
                  [
                    M.call (|
                      "shl",
                      [
                        [Literal.number 255];
                        [Literal.number 1]
                      ]
                    |);
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int256",
                      [
                        M.get (| "expr_29" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_by_to_int256",
                      [
                        M.get (| "expr_30" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_31" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.declare (|
                ["var_"],
                M.get (| "expr_32" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_803469022129495137770981046170581301261101496891396417650688_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int200",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int200",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_803469022129495137770981046170581301261101496891396417650688_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_205688069665150755269371147819668813122841983204197482918576128_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int208",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int208",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_205688069665150755269371147819668813122841983204197482918576128_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_52656145834278593348959013841835216159447547700274555627155488768_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int216",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int216",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_52656145834278593348959013841835216159447547700274555627155488768_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_t_rational_minus_by_1",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int224",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int224",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_t_rational_minus_by_1",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_3450873173395281893717377931138512726225554486085193277581262111899648_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int232",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int232",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_3450873173395281893717377931138512726225554486085193277581262111899648_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_883423532389192164791648750371459257913741948437809479060803100646309888_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int240",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int240",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_883423532389192164791648750371459257913741948437809479060803100646309888_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_226156424291633194186662080095093570025917938800079226639565593765455331328_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int248",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int248",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_226156424291633194186662080095093570025917938800079226639565593765455331328_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "cleanup_rational_minus_57896044618658097711785492504343953926634992332820282019728792003956564819968_by",
          ["value"],
          ["cleaned"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["cleaned"],
                M.get (| "value" |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "convert_rational_minus_by_to_int256",
          ["value"],
          ["converted"],
          ltac:(M.monadic (
            let _ :=
              M.declare (|
                ["converted"],
                M.call (|
                  "cleanup_int256",
                  [
                    M.call (|
                      "identity",
                      [
                        M.call (|
                          "cleanup_rational_minus_57896044618658097711785492504343953926634992332820282019728792003956564819968_by",
                          [
                            M.get (| "value" |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            tt
          ))
        |) in
      let _ :=
        M.function (|
          "fun_intMinD",
          [],
          ["var"],
          ltac:(M.monadic (
            let _ :=
              M.assign (|
                ["zero_bool"],
                Some (M.call (|
                  "zero_value_for_split_bool",
                  []
                |))
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "zero_bool" |)
              |) in
            let _ :=
              M.assign (|
                ["expr"],
                Some (M.call (|
                  "shl",
                  [
                    [Literal.number 199];
                    [Literal.number 0x01ffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int200_min"],
                Some (M.get (| "expr" |))
              |) in
            let _ :=
              M.assign (|
                ["_1"],
                Some (M.get (| "var_int200_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_1"],
                Some (M.get (| "_1" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_2"],
                Some (M.call (|
                  "shl",
                  [
                    [Literal.number 199];
                    [Literal.number 0x01ffffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_3"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int200",
                      [
                        M.get (| "expr_1" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int200",
                      [
                        M.get (| "expr_2" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_3" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_4"],
                Some (M.call (|
                  "shl",
                  [
                    [Literal.number 207];
                    [Literal.number 0x01ffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int208_min"],
                Some (M.get (| "expr_4" |))
              |) in
            let _ :=
              M.assign (|
                ["_2"],
                Some (M.get (| "var_int208_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_5"],
                Some (M.get (| "_2" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_6"],
                Some (M.call (|
                  "shl",
                  [
                    [Literal.number 207];
                    [Literal.number 0x01ffffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_7"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int208",
                      [
                        M.get (| "expr_5" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int208",
                      [
                        M.get (| "expr_6" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_7" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_8"],
                Some (M.call (|
                  "shl",
                  [
                    [Literal.number 215];
                    [Literal.number 0x01ffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int216_min"],
                Some (M.get (| "expr_8" |))
              |) in
            let _ :=
              M.assign (|
                ["_3"],
                Some (M.get (| "var_int216_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_9"],
                Some (M.get (| "_3" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_10"],
                Some (M.call (|
                  "shl",
                  [
                    [Literal.number 215];
                    [Literal.number 0x01ffffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_11"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int216",
                      [
                        M.get (| "expr_9" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int216",
                      [
                        M.get (| "expr_10" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_11" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_12"],
                Some (M.call (|
                  "shl",
                  [
                    [Literal.number 223];
                    [Literal.number 0x01ffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int224_min"],
                Some (M.get (| "expr_12" |))
              |) in
            let _ :=
              M.assign (|
                ["_4"],
                Some (M.get (| "var_int224_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_13"],
                Some (M.get (| "_4" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_14"],
                Some (M.call (|
                  "shl",
                  [
                    [Literal.number 223];
                    [Literal.number 0x01ffffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_15"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int224",
                      [
                        M.get (| "expr_13" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int224",
                      [
                        M.get (| "expr_14" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_15" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_16"],
                Some (M.call (|
                  "shl",
                  [
                    [Literal.number 231];
                    [Literal.number 0x01ffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int232_min"],
                Some (M.get (| "expr_16" |))
              |) in
            let _ :=
              M.assign (|
                ["_5"],
                Some (M.get (| "var_int232_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_17"],
                Some (M.get (| "_5" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_18"],
                Some (M.call (|
                  "shl",
                  [
                    [Literal.number 231];
                    [Literal.number 0x01ffffff]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_19"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int232",
                      [
                        M.get (| "expr_17" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int232",
                      [
                        M.get (| "expr_18" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_19" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_20"],
                Some (M.call (|
                  "shl",
                  [
                    [Literal.number 239];
                    [Literal.number 131071]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int240_min"],
                Some (M.get (| "expr_20" |))
              |) in
            let _ :=
              M.assign (|
                ["_6"],
                Some (M.get (| "var_int240_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_21"],
                Some (M.get (| "_6" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_22"],
                Some (M.call (|
                  "shl",
                  [
                    [Literal.number 239];
                    [Literal.number 131071]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_23"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int240",
                      [
                        M.get (| "expr_21" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int240",
                      [
                        M.get (| "expr_22" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_23" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_24"],
                Some (M.call (|
                  "shl",
                  [
                    [Literal.number 247];
                    [Literal.number 511]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int248_min"],
                Some (M.get (| "expr_24" |))
              |) in
            let _ :=
              M.assign (|
                ["_7"],
                Some (M.get (| "var_int248_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_25"],
                Some (M.get (| "_7" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_26"],
                Some (M.call (|
                  "shl",
                  [
                    [Literal.number 247];
                    [Literal.number 511]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_27"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int248",
                      [
                        M.get (| "expr_25" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int248",
                      [
                        M.get (| "expr_26" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_27" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_28"],
                Some (M.call (|
                  "shl",
                  [
                    [Literal.number 255];
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["var_int256_min"],
                Some (M.get (| "expr_28" |))
              |) in
            let _ :=
              M.assign (|
                ["_8"],
                Some (M.get (| "var_int256_min" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_29"],
                Some (M.get (| "_8" |))
              |) in
            let _ :=
              M.assign (|
                ["expr_30"],
                Some (M.call (|
                  "shl",
                  [
                    [Literal.number 255];
                    [Literal.number 1]
                  ]
                |))
              |) in
            let _ :=
              M.assign (|
                ["expr_31"],
                Some (M.call (|
                  "eq",
                  [
                    M.call (|
                      "cleanup_int256",
                      [
                        M.get (| "expr_29" |)
                      ]
                    |);
                    M.call (|
                      "convert_rational_minus_by_to_int256",
                      [
                        M.get (| "expr_30" |)
                      ]
                    |)
                  ]
                |))
              |) in
            let _ :=
              M.call (|
                "require_helper",
                [
                  M.get (| "expr_31" |)
                ]
              |) in
            let _ :=
              M.assign (|
                ["expr_32"],
                Some ([Literal.number 0x01])
              |) in
            let _ :=
              M.declare (|
                ["var"],
                M.get (| "expr_32" |)
              |) in
            let _ :=
              M.leave (||) in
            tt
          ))
        |) in
      tt
    )).

    Definition data : string :=
      "a26469706673582212204f56a2bda7bbbe5bbae8fa1e148e64e4496980a9f3b0fa6b3a0ffedbfa200a4264736f6c634300081b0033".
  End test_1185_deployed.
End test_1185.
