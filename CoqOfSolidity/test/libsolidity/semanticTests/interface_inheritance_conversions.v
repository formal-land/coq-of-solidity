(* Generated by coq-of-solidity *)
Require CoqOfSolidity.CoqOfSolidity.

(* Interface *)
Module Parent.
  Definition parentFun (α : list Value.t) : M :=
    match α with
    | [] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.
End Parent.

(* Interface *)
Module SubA.
  Definition subAFun (α : list Value.t) : M :=
    match α with
    | [] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.
End SubA.

(* Interface *)
Module SubB.
  Definition subBFun (α : list Value.t) : M :=
    match α with
    | [] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.
End SubB.

(* Contract *)
Module Impl.
  Definition parentFun (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Integer 1
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition subAFun (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Integer 2
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition subBFun (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Integer 3
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Impl.

(* Contract *)
Module C.
  Definition convertParent (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "p" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 63
src: 583:4:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 62
src: 583:4:0
nodeType: IdentifierPath
name: Impl
nameLocations: [583:4:0, ]
referencedDeclaration: 54

referencedDeclaration: 54
typeDescriptions: typeString contract ImpltypeIdentifier st_contract$_Impl_$54

,
            []
          |)
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "p" |),
              "parentFun"
            |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition convertSubA (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "sa" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 83
src: 713:4:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 82
src: 713:4:0
nodeType: IdentifierPath
name: Impl
nameLocations: [713:4:0, ]
referencedDeclaration: 54

referencedDeclaration: 54
typeDescriptions: typeString contract ImpltypeIdentifier st_contract$_Impl_$54

,
            []
          |)
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.call (|
              M.member_access (|
                M.get_name (| "sa" |),
                "parentFun"
              |),
              []
            |),
            M.call (|
              M.member_access (|
                M.get_name (| "sa" |),
                "subAFun"
              |),
              []
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition convertSubB (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "sb" ],
          M.call (|
            NewExpression (* Beginning of a node! *)
id: 107
src: 860:4:0
nodeType: UserDefinedTypeName
pathNode: (* Beginning of a node! *)
id: 106
src: 860:4:0
nodeType: IdentifierPath
name: Impl
nameLocations: [860:4:0, ]
referencedDeclaration: 54

referencedDeclaration: 54
typeDescriptions: typeString contract ImpltypeIdentifier st_contract$_Impl_$54

,
            []
          |)
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.call (|
              M.member_access (|
                M.get_name (| "sb" |),
                "parentFun"
              |),
              []
            |),
            M.call (|
              M.member_access (|
                M.get_name (| "sb" |),
                "subBFun"
              |),
              []
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
